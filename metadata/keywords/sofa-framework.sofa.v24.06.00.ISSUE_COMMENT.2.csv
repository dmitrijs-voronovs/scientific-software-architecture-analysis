id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:221,Integrability,message,message,221,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:289,Integrability,message,message,289,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:344,Integrability,message,message,344,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:447,Integrability,message,messages,447,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:123,Testability,log,log,123,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:393,Testability,log,log,393,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:411,Testability,log,log,411,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465731199:28,Usability,Simpl,SimpleApi,28,You can find example in:; - SimpleApi.cpp in the createObject function; - Binding_BaseContext in the createObject_impl function,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465731199
https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243:5,Usability,simpl,simply,5,"It's simply an average found between the two points (in position/velocity/acc); What do you mean by ""aforementioned dynamic constraint fix"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243
https://github.com/sofa-framework/sofa/pull/942#issuecomment-468852160:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/942#issuecomment-468852160
https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254:27,Testability,test,tests,27,[ci-build][with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254
https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254:46,Testability,test,tests,46,[ci-build][with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254
https://github.com/sofa-framework/sofa/pull/950#issuecomment-467388326:85,Performance,load,loads,85,"Also, small note:. A Newton solver normally do not increase the external forces (i.e loads) at each newton iterations. If you want to use this solver with newton iterations, it is in the user's hand to make sure the external forces used in the scene (pressure, traction, etc.) only get incremented **at each time step**, and not at each calls to addForce (which is currently the case for most force fields).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/950#issuecomment-467388326
https://github.com/sofa-framework/sofa/pull/950#issuecomment-479081909:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/950#issuecomment-479081909
https://github.com/sofa-framework/sofa/pull/950#issuecomment-480168434:36,Availability,error,errors,36,are you sure the additionnal scenes errors and crashes compare to master are false positive (or wrong negative... I never know)?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/950#issuecomment-480168434
https://github.com/sofa-framework/sofa/pull/950#issuecomment-480307632:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/950#issuecomment-480307632
https://github.com/sofa-framework/sofa/pull/951#issuecomment-470065036:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/951#issuecomment-470065036
https://github.com/sofa-framework/sofa/pull/952#issuecomment-469473400:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/952#issuecomment-469473400
https://github.com/sofa-framework/sofa/pull/953#issuecomment-469590405:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/953#issuecomment-469590405
https://github.com/sofa-framework/sofa/pull/958#issuecomment-474399758:225,Deployability,patch,patch,225,"So I tried to play a bit with CGALPlugin and realized we can use CGAL in header-only mode. So, why should we copy some dlls?; I made a branch here: https://github.com/guparan/sofa/tree/clean_cgalplugin_cmake. EDIT: here is a patch to try my changes in this branch: [cgal-plugin_fix.patch.txt](https://github.com/sofa-framework/sofa/files/2983964/cgal-plugin_fix.patch.txt)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-474399758
https://github.com/sofa-framework/sofa/pull/958#issuecomment-474399758:282,Deployability,patch,patch,282,"So I tried to play a bit with CGALPlugin and realized we can use CGAL in header-only mode. So, why should we copy some dlls?; I made a branch here: https://github.com/guparan/sofa/tree/clean_cgalplugin_cmake. EDIT: here is a patch to try my changes in this branch: [cgal-plugin_fix.patch.txt](https://github.com/sofa-framework/sofa/files/2983964/cgal-plugin_fix.patch.txt)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-474399758
https://github.com/sofa-framework/sofa/pull/958#issuecomment-474399758:362,Deployability,patch,patch,362,"So I tried to play a bit with CGALPlugin and realized we can use CGAL in header-only mode. So, why should we copy some dlls?; I made a branch here: https://github.com/guparan/sofa/tree/clean_cgalplugin_cmake. EDIT: here is a patch to try my changes in this branch: [cgal-plugin_fix.patch.txt](https://github.com/sofa-framework/sofa/files/2983964/cgal-plugin_fix.patch.txt)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-474399758
https://github.com/sofa-framework/sofa/pull/958#issuecomment-476541612:34,Deployability,patch,patch,34,Did you have some time to test my patch @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-476541612
https://github.com/sofa-framework/sofa/pull/958#issuecomment-476541612:26,Testability,test,test,26,Did you have some time to test my patch @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-476541612
https://github.com/sofa-framework/sofa/pull/958#issuecomment-476729206:153,Availability,error,error,153,"ok, it works if I don't build cgal, so in header only (only execute cgal-setup.exe, no visual build after this step); Otherwise it fails at compilation: error: cannot open input file 'CGal.lib' when building plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-476729206
https://github.com/sofa-framework/sofa/pull/958#issuecomment-476729206:208,Modifiability,plugin,plugin,208,"ok, it works if I don't build cgal, so in header only (only execute cgal-setup.exe, no visual build after this step); Otherwise it fails at compilation: error: cannot open input file 'CGal.lib' when building plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-476729206
https://github.com/sofa-framework/sofa/pull/958#issuecomment-477076904:116,Modifiability,variab,variable,116,"Header only usage should work even if CGAL has been built before. I will try to force header_only, there is a CMake variable for that in CGAL.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-477076904
https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014:52,Modifiability,plugin,plugin,52,@guparan do you remember what is the status of CGal plugin config on windows?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014
https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014:59,Modifiability,config,config,59,@guparan do you remember what is the status of CGal plugin config on windows?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:492,Availability,down,downloaded,492,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:129,Deployability,install,install,129,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:321,Deployability,install,installed,321,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1764,Deployability,install,install,1764,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:184,Modifiability,Plugin,PluginManager,184,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:219,Modifiability,plugin,plugin,219,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:299,Modifiability,plugin,plugin,299,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:564,Modifiability,plugin,plugin,564,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:612,Modifiability,plugin,plugin,612,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:679,Modifiability,Plugin,Plugin,679,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:704,Modifiability,plugin,plugin,704,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:794,Modifiability,plugin,plugin,794,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:896,Modifiability,plugin,plugin,896,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1120,Modifiability,plugin,plugin,1120,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1172,Modifiability,plugin,plugins,1172,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1422,Modifiability,plugin,plugins,1422,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1655,Modifiability,plugin,plugins,1655,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1690,Modifiability,plugin,plugins,1690,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1804,Modifiability,plugin,plugins,1804,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1826,Modifiability,plugin,plugins,1826,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:695,Performance,load,load,695,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:1446,Performance,load,loaded,1446,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865
https://github.com/sofa-framework/sofa/pull/960#issuecomment-471494135:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/960#issuecomment-471494135
https://github.com/sofa-framework/sofa/pull/960#issuecomment-474346416:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/960#issuecomment-474346416
https://github.com/sofa-framework/sofa/issues/961#issuecomment-472364785:124,Performance,perform,performed,124,"Thank Hadrien, the fix is fine. The m_primitiveTestCount is used only for statitistics to know how many collision tests are performed.; There should be no other crash if m_primitiveTestCount is = 0.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/961#issuecomment-472364785
https://github.com/sofa-framework/sofa/issues/961#issuecomment-472364785:114,Testability,test,tests,114,"Thank Hadrien, the fix is fine. The m_primitiveTestCount is used only for statitistics to know how many collision tests are performed.; There should be no other crash if m_primitiveTestCount is = 0.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/961#issuecomment-472364785
https://github.com/sofa-framework/sofa/pull/962#issuecomment-471907830:10,Availability,down,down,10,"The CI is down, but to me this is ok. So I take the resposability of merging it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/962#issuecomment-471907830
https://github.com/sofa-framework/sofa/pull/965#issuecomment-472436877:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-472436877
https://github.com/sofa-framework/sofa/pull/965#issuecomment-473517067:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-473517067
https://github.com/sofa-framework/sofa/pull/965#issuecomment-473517067:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-473517067
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:191,Deployability,release,releaseAddContact,191,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:459,Deployability,release,releaseGetContact,459,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:111,Safety,Detect,DetectionOutputVector,111,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:241,Safety,Detect,DetectionOutput,241,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:258,Safety,detect,detectionOutput,258,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:365,Safety,Detect,DetectionOutput,365,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:477,Safety,Detect,DetectionOutput,477,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:48,Usability,clear,clear,48,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:87,Performance,perform,performances,87,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307
https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:488,Performance,perform,performances,488,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307
https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:154,Safety,detect,detection,154,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307
https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:241,Safety,safe,safe,241,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307
https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:129,Security,secur,secure,129,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307
https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:140,Security,access,access,140,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307
https://github.com/sofa-framework/sofa/pull/967#issuecomment-474774485:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/967#issuecomment-474774485
https://github.com/sofa-framework/sofa/pull/968#issuecomment-472937811:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/968#issuecomment-472937811
https://github.com/sofa-framework/sofa/pull/970#issuecomment-474267151:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/970#issuecomment-474267151
https://github.com/sofa-framework/sofa/pull/970#issuecomment-474267151:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/970#issuecomment-474267151
https://github.com/sofa-framework/sofa/pull/971#issuecomment-482026392:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/971#issuecomment-482026392
https://github.com/sofa-framework/sofa/pull/971#issuecomment-482026392:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/971#issuecomment-482026392
https://github.com/sofa-framework/sofa/pull/973#issuecomment-479404300:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-479404300
https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725:20,Availability,failure,failure,20,"there are new tests failure:; ```. FastTriangularBendingSprings.scn:0, Dynamic Parser, Priority: Normal; --; [EdgeSetGeometryAlgorithms(edgeSetGeometryAlgorithms1)] Unable to get a valid topology from the context. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725
https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725:14,Testability,test,tests,14,"there are new tests failure:; ```. FastTriangularBendingSprings.scn:0, Dynamic Parser, Priority: Normal; --; [EdgeSetGeometryAlgorithms(edgeSetGeometryAlgorithms1)] Unable to get a valid topology from the context. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725
https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483:402,Availability,error,error,402,Thank for the reviewed. ; I checked the example file and my thinking is that this example is wrong and my PR is legitimate. ; 1) if you change in the example to turn visualization of the edge set it will crash. ; 2) The edgeset is in the root node and so the existing code to retrieve the context in the init() is not working as we expect.; 3) The code in the PR is right at detecting and reporting an error when this case is detected. . So i moved the EdgeSet into the same node as the topology. So the error does not pop up.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483
https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483:504,Availability,error,error,504,Thank for the reviewed. ; I checked the example file and my thinking is that this example is wrong and my PR is legitimate. ; 1) if you change in the example to turn visualization of the edge set it will crash. ; 2) The edgeset is in the root node and so the existing code to retrieve the context in the init() is not working as we expect.; 3) The code in the PR is right at detecting and reporting an error when this case is detected. . So i moved the EdgeSet into the same node as the topology. So the error does not pop up.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483
https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483:375,Safety,detect,detecting,375,Thank for the reviewed. ; I checked the example file and my thinking is that this example is wrong and my PR is legitimate. ; 1) if you change in the example to turn visualization of the edge set it will crash. ; 2) The edgeset is in the root node and so the existing code to retrieve the context in the init() is not working as we expect.; 3) The code in the PR is right at detecting and reporting an error when this case is detected. . So i moved the EdgeSet into the same node as the topology. So the error does not pop up.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483
https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483:426,Safety,detect,detected,426,Thank for the reviewed. ; I checked the example file and my thinking is that this example is wrong and my PR is legitimate. ; 1) if you change in the example to turn visualization of the edge set it will crash. ; 2) The edgeset is in the root node and so the existing code to retrieve the context in the init() is not working as we expect.; 3) The code in the PR is right at detecting and reporting an error when this case is detected. . So i moved the EdgeSet into the same node as the topology. So the error does not pop up.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-483165483
https://github.com/sofa-framework/sofa/pull/973#issuecomment-483440603:226,Performance,load,loader,226,"yes, a EdgeSetGeometryAlgorithms should not be inside a node without mechanicalObject nor a topology container (I know a lot of check are still missing :( ). ; I'm even surprise, it works with this: ; ```; <MeshTopology src=""@loader"" />; <EdgeSetGeometryAlgorithms />; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-483440603
https://github.com/sofa-framework/sofa/pull/975#issuecomment-478481633:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975#issuecomment-478481633
https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105:187,Availability,error,error,187,@guparan:; `/media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-975/ubuntu_gcc-5.4_options_release/src/applications/plugins/image/extlibs/DiffusionSolver/DiffusionSolver.h:4:33: fatal error: CImgPlugin/SOFACImg.h: Aucun fichier ou dossier de ce type; compilation terminated.`. Looks like it's used also that way in the SOFA codebase. How should I proceed? should I put back the include of `CImgPlugin/../` and remove the include of `CImgPlugin` + cleanup the codebase of all direct inclusions? Or do the opposite..?; Or should I just revert my previous commit?...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105
https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105:119,Modifiability,plugin,plugins,119,@guparan:; `/media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-975/ubuntu_gcc-5.4_options_release/src/applications/plugins/image/extlibs/DiffusionSolver/DiffusionSolver.h:4:33: fatal error: CImgPlugin/SOFACImg.h: Aucun fichier ou dossier de ce type; compilation terminated.`. Looks like it's used also that way in the SOFA codebase. How should I proceed? should I put back the include of `CImgPlugin/../` and remove the include of `CImgPlugin` + cleanup the codebase of all direct inclusions? Or do the opposite..?; Or should I just revert my previous commit?...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105
https://github.com/sofa-framework/sofa/issues/978#issuecomment-490821271:39,Modifiability,Flexible,Flexible,39,Do no forget this one : sofa-framework/Flexible#4,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/978#issuecomment-490821271
https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:82,Integrability,interface,interfaces,82,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178
https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:147,Integrability,interface,interface,147,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178
https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:44,Modifiability,inherit,inheritance,44,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178
https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:199,Testability,log,logics,199,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178
https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:987,Integrability,depend,dependency,987,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316
https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:309,Modifiability,inherit,inherits,309,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316
https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:1237,Security,validat,validate,1237,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316
https://github.com/sofa-framework/sofa/issues/979#issuecomment-490138681:112,Availability,fault,faults,112,I forgot a small remark (which might not be very useful for this discussion). . I've seen multiple segmentation faults and crashes in SOFA from a mismatch between the topology and the positions set in the mechanical object. I've not seen many components check this at the **init** stage (or after if topological changes happen). Maybe we could find a clean way to provide forcefield authors tools to verify the relationship between their topology and the mechanical state. But I believe this is a difficult design question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490138681
https://github.com/sofa-framework/sofa/pull/980#issuecomment-537869723:34,Deployability,update,updated,34,Anyone has plan for this PR to be updated and merged ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/980#issuecomment-537869723
https://github.com/sofa-framework/sofa/pull/982#issuecomment-479906612:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/982#issuecomment-479906612
https://github.com/sofa-framework/sofa/pull/985#issuecomment-480781531:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-480781531
https://github.com/sofa-framework/sofa/pull/985#issuecomment-481128348:9,Testability,test,test,9,Some new test in TetrahedronSetTopology_test is failing. Was it expected due to your change Erik ?; The regression tests are also crying on topo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481128348
https://github.com/sofa-framework/sofa/pull/985#issuecomment-481128348:115,Testability,test,tests,115,Some new test in TetrahedronSetTopology_test is failing. Was it expected due to your change Erik ?; The regression tests are also crying on topo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481128348
https://github.com/sofa-framework/sofa/pull/985#issuecomment-481152688:70,Testability,test,tests,70,yes the change of trianglesInTetrahedron need to be propagated in the tests. I will check that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481152688
https://github.com/sofa-framework/sofa/pull/986#issuecomment-481823561:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/986#issuecomment-481823561
https://github.com/sofa-framework/sofa/pull/987#issuecomment-483139203:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/987#issuecomment-483139203
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505:731,Availability,toler,tolerance,731,"_(clicking on ""Edit"" you will see the whole scene description, here you only see a sub-part of it)_ ; `<Node dt=""0.04"" gravity=""0 -0.1 0"" name=""root"">; <VisualStyle displayFlags=""showVisual showCollisionModels hideBehaviorModels showForceFields showInteractionForceFields showWireframe"" />. <Node name=""Topo"">; 		<RegularGridTopology name=""RGT"" min=""-6 -6 -6"" max=""6 6 6"" n=""4 4 4"" /> ; 	 <Node name=""Surface"">; 			<!-- <MeshObjLoader name=""loader"" filename=""mesh/cube.obj"" /> -->; 			<MeshObjLoader name=""loader"" filename=""mesh/liver.obj"" />; 			<MechanicalObject name=""DOF"" src=""@loader"" showObject=""false""/> ; 		</Node>; 	</Node>. <Node name=""Cube"">; 		<EulerImplicit />; 		<CGLinearSolver iterations=""500"" name=""linear solver"" tolerance=""1.0e-9"" threshold=""1.0e-9"" />. 		<HexahedronSetTopologyContainer name=""HSTC"" src=""@../Topo/RGT"" />; 		<HexahedronSetGeometryAlgorithms name=""HSGA"" />; 		<MechanicalObject name=""DOF"" position=""@../Topo/RGT.position"" showObject=""true""/>; 		<HexahedronFEMForceField name=""HFF"" youngModulus=""20"" poissonRatio=""0.2"" />; 		<DiagonalMass totalMass=""5"" />. 		<PlaneForceField normal=""0 1 0"" d=""-7"" draw=""true""/>; 	 <Node name=""Cube"">; 	 	 <VisualStyle displayFlags=""hideWireframe"" />; 			<TriangleSetTopologyContainer name=""TSTC"" src=""@../../Topo/Surface/loader"" />; 			<TriangleSetGeometryAlgorithms name=""HSGA"" />; 			<MechanicalObject name=""DOF"" position=""@../../Topo/Surface/loader.position"" showObject=""true""/> ; 			<Triangle/>; 			<BarycentricMapping />; 		</Node>; 	</Node>. </Node>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505:441,Performance,load,loader,441,"_(clicking on ""Edit"" you will see the whole scene description, here you only see a sub-part of it)_ ; `<Node dt=""0.04"" gravity=""0 -0.1 0"" name=""root"">; <VisualStyle displayFlags=""showVisual showCollisionModels hideBehaviorModels showForceFields showInteractionForceFields showWireframe"" />. <Node name=""Topo"">; 		<RegularGridTopology name=""RGT"" min=""-6 -6 -6"" max=""6 6 6"" n=""4 4 4"" /> ; 	 <Node name=""Surface"">; 			<!-- <MeshObjLoader name=""loader"" filename=""mesh/cube.obj"" /> -->; 			<MeshObjLoader name=""loader"" filename=""mesh/liver.obj"" />; 			<MechanicalObject name=""DOF"" src=""@loader"" showObject=""false""/> ; 		</Node>; 	</Node>. <Node name=""Cube"">; 		<EulerImplicit />; 		<CGLinearSolver iterations=""500"" name=""linear solver"" tolerance=""1.0e-9"" threshold=""1.0e-9"" />. 		<HexahedronSetTopologyContainer name=""HSTC"" src=""@../Topo/RGT"" />; 		<HexahedronSetGeometryAlgorithms name=""HSGA"" />; 		<MechanicalObject name=""DOF"" position=""@../Topo/RGT.position"" showObject=""true""/>; 		<HexahedronFEMForceField name=""HFF"" youngModulus=""20"" poissonRatio=""0.2"" />; 		<DiagonalMass totalMass=""5"" />. 		<PlaneForceField normal=""0 1 0"" d=""-7"" draw=""true""/>; 	 <Node name=""Cube"">; 	 	 <VisualStyle displayFlags=""hideWireframe"" />; 			<TriangleSetTopologyContainer name=""TSTC"" src=""@../../Topo/Surface/loader"" />; 			<TriangleSetGeometryAlgorithms name=""HSGA"" />; 			<MechanicalObject name=""DOF"" position=""@../../Topo/Surface/loader.position"" showObject=""true""/> ; 			<Triangle/>; 			<BarycentricMapping />; 		</Node>; 	</Node>. </Node>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505:506,Performance,load,loader,506,"_(clicking on ""Edit"" you will see the whole scene description, here you only see a sub-part of it)_ ; `<Node dt=""0.04"" gravity=""0 -0.1 0"" name=""root"">; <VisualStyle displayFlags=""showVisual showCollisionModels hideBehaviorModels showForceFields showInteractionForceFields showWireframe"" />. <Node name=""Topo"">; 		<RegularGridTopology name=""RGT"" min=""-6 -6 -6"" max=""6 6 6"" n=""4 4 4"" /> ; 	 <Node name=""Surface"">; 			<!-- <MeshObjLoader name=""loader"" filename=""mesh/cube.obj"" /> -->; 			<MeshObjLoader name=""loader"" filename=""mesh/liver.obj"" />; 			<MechanicalObject name=""DOF"" src=""@loader"" showObject=""false""/> ; 		</Node>; 	</Node>. <Node name=""Cube"">; 		<EulerImplicit />; 		<CGLinearSolver iterations=""500"" name=""linear solver"" tolerance=""1.0e-9"" threshold=""1.0e-9"" />. 		<HexahedronSetTopologyContainer name=""HSTC"" src=""@../Topo/RGT"" />; 		<HexahedronSetGeometryAlgorithms name=""HSGA"" />; 		<MechanicalObject name=""DOF"" position=""@../Topo/RGT.position"" showObject=""true""/>; 		<HexahedronFEMForceField name=""HFF"" youngModulus=""20"" poissonRatio=""0.2"" />; 		<DiagonalMass totalMass=""5"" />. 		<PlaneForceField normal=""0 1 0"" d=""-7"" draw=""true""/>; 	 <Node name=""Cube"">; 	 	 <VisualStyle displayFlags=""hideWireframe"" />; 			<TriangleSetTopologyContainer name=""TSTC"" src=""@../../Topo/Surface/loader"" />; 			<TriangleSetGeometryAlgorithms name=""HSGA"" />; 			<MechanicalObject name=""DOF"" position=""@../../Topo/Surface/loader.position"" showObject=""true""/> ; 			<Triangle/>; 			<BarycentricMapping />; 		</Node>; 	</Node>. </Node>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505:582,Performance,load,loader,582,"_(clicking on ""Edit"" you will see the whole scene description, here you only see a sub-part of it)_ ; `<Node dt=""0.04"" gravity=""0 -0.1 0"" name=""root"">; <VisualStyle displayFlags=""showVisual showCollisionModels hideBehaviorModels showForceFields showInteractionForceFields showWireframe"" />. <Node name=""Topo"">; 		<RegularGridTopology name=""RGT"" min=""-6 -6 -6"" max=""6 6 6"" n=""4 4 4"" /> ; 	 <Node name=""Surface"">; 			<!-- <MeshObjLoader name=""loader"" filename=""mesh/cube.obj"" /> -->; 			<MeshObjLoader name=""loader"" filename=""mesh/liver.obj"" />; 			<MechanicalObject name=""DOF"" src=""@loader"" showObject=""false""/> ; 		</Node>; 	</Node>. <Node name=""Cube"">; 		<EulerImplicit />; 		<CGLinearSolver iterations=""500"" name=""linear solver"" tolerance=""1.0e-9"" threshold=""1.0e-9"" />. 		<HexahedronSetTopologyContainer name=""HSTC"" src=""@../Topo/RGT"" />; 		<HexahedronSetGeometryAlgorithms name=""HSGA"" />; 		<MechanicalObject name=""DOF"" position=""@../Topo/RGT.position"" showObject=""true""/>; 		<HexahedronFEMForceField name=""HFF"" youngModulus=""20"" poissonRatio=""0.2"" />; 		<DiagonalMass totalMass=""5"" />. 		<PlaneForceField normal=""0 1 0"" d=""-7"" draw=""true""/>; 	 <Node name=""Cube"">; 	 	 <VisualStyle displayFlags=""hideWireframe"" />; 			<TriangleSetTopologyContainer name=""TSTC"" src=""@../../Topo/Surface/loader"" />; 			<TriangleSetGeometryAlgorithms name=""HSGA"" />; 			<MechanicalObject name=""DOF"" position=""@../../Topo/Surface/loader.position"" showObject=""true""/> ; 			<Triangle/>; 			<BarycentricMapping />; 		</Node>; 	</Node>. </Node>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505:1289,Performance,load,loader,1289,"_(clicking on ""Edit"" you will see the whole scene description, here you only see a sub-part of it)_ ; `<Node dt=""0.04"" gravity=""0 -0.1 0"" name=""root"">; <VisualStyle displayFlags=""showVisual showCollisionModels hideBehaviorModels showForceFields showInteractionForceFields showWireframe"" />. <Node name=""Topo"">; 		<RegularGridTopology name=""RGT"" min=""-6 -6 -6"" max=""6 6 6"" n=""4 4 4"" /> ; 	 <Node name=""Surface"">; 			<!-- <MeshObjLoader name=""loader"" filename=""mesh/cube.obj"" /> -->; 			<MeshObjLoader name=""loader"" filename=""mesh/liver.obj"" />; 			<MechanicalObject name=""DOF"" src=""@loader"" showObject=""false""/> ; 		</Node>; 	</Node>. <Node name=""Cube"">; 		<EulerImplicit />; 		<CGLinearSolver iterations=""500"" name=""linear solver"" tolerance=""1.0e-9"" threshold=""1.0e-9"" />. 		<HexahedronSetTopologyContainer name=""HSTC"" src=""@../Topo/RGT"" />; 		<HexahedronSetGeometryAlgorithms name=""HSGA"" />; 		<MechanicalObject name=""DOF"" position=""@../Topo/RGT.position"" showObject=""true""/>; 		<HexahedronFEMForceField name=""HFF"" youngModulus=""20"" poissonRatio=""0.2"" />; 		<DiagonalMass totalMass=""5"" />. 		<PlaneForceField normal=""0 1 0"" d=""-7"" draw=""true""/>; 	 <Node name=""Cube"">; 	 	 <VisualStyle displayFlags=""hideWireframe"" />; 			<TriangleSetTopologyContainer name=""TSTC"" src=""@../../Topo/Surface/loader"" />; 			<TriangleSetGeometryAlgorithms name=""HSGA"" />; 			<MechanicalObject name=""DOF"" position=""@../../Topo/Surface/loader.position"" showObject=""true""/> ; 			<Triangle/>; 			<BarycentricMapping />; 		</Node>; 	</Node>. </Node>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505:1413,Performance,load,loader,1413,"_(clicking on ""Edit"" you will see the whole scene description, here you only see a sub-part of it)_ ; `<Node dt=""0.04"" gravity=""0 -0.1 0"" name=""root"">; <VisualStyle displayFlags=""showVisual showCollisionModels hideBehaviorModels showForceFields showInteractionForceFields showWireframe"" />. <Node name=""Topo"">; 		<RegularGridTopology name=""RGT"" min=""-6 -6 -6"" max=""6 6 6"" n=""4 4 4"" /> ; 	 <Node name=""Surface"">; 			<!-- <MeshObjLoader name=""loader"" filename=""mesh/cube.obj"" /> -->; 			<MeshObjLoader name=""loader"" filename=""mesh/liver.obj"" />; 			<MechanicalObject name=""DOF"" src=""@loader"" showObject=""false""/> ; 		</Node>; 	</Node>. <Node name=""Cube"">; 		<EulerImplicit />; 		<CGLinearSolver iterations=""500"" name=""linear solver"" tolerance=""1.0e-9"" threshold=""1.0e-9"" />. 		<HexahedronSetTopologyContainer name=""HSTC"" src=""@../Topo/RGT"" />; 		<HexahedronSetGeometryAlgorithms name=""HSGA"" />; 		<MechanicalObject name=""DOF"" position=""@../Topo/RGT.position"" showObject=""true""/>; 		<HexahedronFEMForceField name=""HFF"" youngModulus=""20"" poissonRatio=""0.2"" />; 		<DiagonalMass totalMass=""5"" />. 		<PlaneForceField normal=""0 1 0"" d=""-7"" draw=""true""/>; 	 <Node name=""Cube"">; 	 	 <VisualStyle displayFlags=""hideWireframe"" />; 			<TriangleSetTopologyContainer name=""TSTC"" src=""@../../Topo/Surface/loader"" />; 			<TriangleSetGeometryAlgorithms name=""HSGA"" />; 			<MechanicalObject name=""DOF"" position=""@../../Topo/Surface/loader.position"" showObject=""true""/> ; 			<Triangle/>; 			<BarycentricMapping />; 		</Node>; 	</Node>. </Node>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482015505
https://github.com/sofa-framework/sofa/issues/988#issuecomment-482020005:158,Security,hash,hashing,158,"I don't really see why, but it might be a side effect of some renumbering change I did in tetra and triangles.; I will check the scene. or side effect of the hashing map from @EulalieCoevoet yes!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482020005
https://github.com/sofa-framework/sofa/issues/988#issuecomment-483757703:126,Testability,test,test,126,"Hi Remi, thanks for the bug report and the scene.; @epernod, @EulalieCoevoet can you say which change is the latest so we can test before this version if the code work ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-483757703
https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:246,Modifiability,config,configure,246,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942
https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:334,Modifiability,config,configure,334,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942
https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:167,Usability,Simpl,SimpleGUI,167,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942
https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693:0,Availability,Error,Error,0,Error on compilation: ; - (WIN) error C3861: 'not': identifier not found; - (MAC) unexpected crash of Compliant_test. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693
https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693:32,Availability,error,error,32,Error on compilation: ; - (WIN) error C3861: 'not': identifier not found; - (MAC) unexpected crash of Compliant_test. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693
https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693:138,Testability,test,tests,138,Error on compilation: ; - (WIN) error C3861: 'not': identifier not found; - (MAC) unexpected crash of Compliant_test. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693
https://github.com/sofa-framework/sofa/pull/990#issuecomment-489105279:8,Availability,fault,fault,8,The seg fault on compliant doesn't seems to be related to this PR since I also got the fault on my mac with the master branch.... You might need to launch the Compliant_test a couple of time to get the seg fault.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489105279
https://github.com/sofa-framework/sofa/pull/990#issuecomment-489105279:87,Availability,fault,fault,87,The seg fault on compliant doesn't seems to be related to this PR since I also got the fault on my mac with the master branch.... You might need to launch the Compliant_test a couple of time to get the seg fault.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489105279
https://github.com/sofa-framework/sofa/pull/990#issuecomment-489105279:206,Availability,fault,fault,206,The seg fault on compliant doesn't seems to be related to this PR since I also got the fault on my mac with the master branch.... You might need to launch the Compliant_test a couple of time to get the seg fault.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489105279
https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745:116,Availability,error,error,116,"Hello @jnbrunet ; Thanks a lot of the PR. Lot of interesting things. ; Few comments:; - one that repeat a lot about error/exception's message. ; - the other is about wether SofaPython is the proper place to put Simulation and GUIManager's manager binding. My feeling is that we should have second module like SofaApplication/SofaRuntimewhich exposes those, application specific bindings. . Please tell us your opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745
https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745:134,Integrability,message,message,134,"Hello @jnbrunet ; Thanks a lot of the PR. Lot of interesting things. ; Few comments:; - one that repeat a lot about error/exception's message. ; - the other is about wether SofaPython is the proper place to put Simulation and GUIManager's manager binding. My feeling is that we should have second module like SofaApplication/SofaRuntimewhich exposes those, application specific bindings. . Please tell us your opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745
https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745:342,Security,expose,exposes,342,"Hello @jnbrunet ; Thanks a lot of the PR. Lot of interesting things. ; Few comments:; - one that repeat a lot about error/exception's message. ; - the other is about wether SofaPython is the proper place to put Simulation and GUIManager's manager binding. My feeling is that we should have second module like SofaApplication/SofaRuntimewhich exposes those, application specific bindings. . Please tell us your opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745
https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207:299,Modifiability,plugin,plugin,299,"Hi @damienmarchal . Thanks for your remarks!. I'll address those probably later this week, meanwhile this PR is back to WIP. For the bindings of **Simulation** and **GUIManager**, I completely agree with you, however, I'm not sure how I would address this without having to create a new binary (new plugin?). I can remove those from this PR while I think of a better way to do this. Anyway, beside **GUIManager::setDimension** which can be used dynamically with current GUIs, those bindings were mostly useful when using the SofaPython plugin as a module loaded into an external python interpreter, which is not yet supported in Sofa (we kinda ""hacked"" the current SofaPython plugin to make it work for some of our work here in the team).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207
https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207:536,Modifiability,plugin,plugin,536,"Hi @damienmarchal . Thanks for your remarks!. I'll address those probably later this week, meanwhile this PR is back to WIP. For the bindings of **Simulation** and **GUIManager**, I completely agree with you, however, I'm not sure how I would address this without having to create a new binary (new plugin?). I can remove those from this PR while I think of a better way to do this. Anyway, beside **GUIManager::setDimension** which can be used dynamically with current GUIs, those bindings were mostly useful when using the SofaPython plugin as a module loaded into an external python interpreter, which is not yet supported in Sofa (we kinda ""hacked"" the current SofaPython plugin to make it work for some of our work here in the team).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207
https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207:676,Modifiability,plugin,plugin,676,"Hi @damienmarchal . Thanks for your remarks!. I'll address those probably later this week, meanwhile this PR is back to WIP. For the bindings of **Simulation** and **GUIManager**, I completely agree with you, however, I'm not sure how I would address this without having to create a new binary (new plugin?). I can remove those from this PR while I think of a better way to do this. Anyway, beside **GUIManager::setDimension** which can be used dynamically with current GUIs, those bindings were mostly useful when using the SofaPython plugin as a module loaded into an external python interpreter, which is not yet supported in Sofa (we kinda ""hacked"" the current SofaPython plugin to make it work for some of our work here in the team).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207
https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207:555,Performance,load,loaded,555,"Hi @damienmarchal . Thanks for your remarks!. I'll address those probably later this week, meanwhile this PR is back to WIP. For the bindings of **Simulation** and **GUIManager**, I completely agree with you, however, I'm not sure how I would address this without having to create a new binary (new plugin?). I can remove those from this PR while I think of a better way to do this. Anyway, beside **GUIManager::setDimension** which can be used dynamically with current GUIs, those bindings were mostly useful when using the SofaPython plugin as a module loaded into an external python interpreter, which is not yet supported in Sofa (we kinda ""hacked"" the current SofaPython plugin to make it work for some of our work here in the team).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207
https://github.com/sofa-framework/sofa/pull/990#issuecomment-502017027:21,Deployability,update,updated,21,I see that @jnbrunet updated the PR..so is this PR still in WIP because it would be nice to have it merged for Sofa release 19.06.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-502017027
https://github.com/sofa-framework/sofa/pull/990#issuecomment-502017027:116,Deployability,release,release,116,I see that @jnbrunet updated the PR..so is this PR still in WIP because it would be nice to have it merged for Sofa release 19.06.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-502017027
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528:223,Availability,error,error,223,"hello @Ant0nin , are you speaking about the option: ; SOFACUDA_DOUBLE; or; SOFA_GPU_CUDA_DOUBLE_PRECISE. my version with SOFACUDA_DOUBLE activated compile on windows 10 with recent cudaToolkit. ; Maybe can you put here the error log.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528:229,Testability,log,log,229,"hello @Ant0nin , are you speaking about the option: ; SOFACUDA_DOUBLE; or; SOFA_GPU_CUDA_DOUBLE_PRECISE. my version with SOFACUDA_DOUBLE activated compile on windows 10 with recent cudaToolkit. ; Maybe can you put here the error log.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:472,Availability,error,errors,472,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2073,Availability,error,error,2073,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2507,Availability,error,error,2507,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2781,Availability,error,errors,2781,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2906,Availability,Error,Error,2906,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:3006,Availability,Error,Error,3006,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:68,Deployability,patch,patch,68,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1134,Deployability,Release,Release,1134,"t that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1731,Deployability,Release,Release,1731,"cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2976,Deployability,Release,Release,2976,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2995,Integrability,message,message,2995,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:384,Modifiability,variab,variable,384,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:420,Modifiability,variab,variable,420,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:547,Modifiability,plugin,plugins,547,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:685,Modifiability,plugin,plugins,685,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:862,Modifiability,plugin,plugins,862,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1009,Modifiability,plugin,plugins,1009,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1223,Modifiability,plugin,plugins,1223,"t that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1428,Modifiability,plugin,plugins,1428,"ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1615,Modifiability,plugin,plugins,1615,"SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is und",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1800,Modifiability,plugin,plugins,1800,"cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1887,Modifiability,variab,variable,1887,"ofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1996,Modifiability,plugin,plugins,1996,"ations/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2430,Modifiability,plugin,plugins,2430,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:3085,Modifiability,plugin,plugins,3085,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2175,Safety,detect,detected,2175,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2610,Safety,detect,detected,2610,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2788,Safety,detect,detected,2788,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:27,Testability,test,tested,27,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057
https://github.com/sofa-framework/sofa/pull/991#issuecomment-484829462:43,Deployability,install,install,43,I'm using sofaCUDA on windows. Will try to install it on my ubuntu 18.04,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484829462
https://github.com/sofa-framework/sofa/pull/992#issuecomment-483139581:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-483139581
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484012823:110,Performance,load,loading,110,Thanks for this PR @Ant0nin. We need a bit more info though. Why do you need to forward sceneArgs through all loading functions (deep) that actually do nothing with it? Why can't you use `sofa::helper::ArgumentParser::extra_args()`?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484012823
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:183,Performance,load,loader,183,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:911,Performance,load,loader,911,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:487,Usability,simpl,simply,487,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265
https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113:180,Integrability,interface,interface,180,"So,; 1) there is no reason to have helper::ArgumentParser in SceneLoaders because a loader (py, scn, etc..) shouldn't be connected in any way to the command line (which is an user interface aspect), especially one relying on a static global object as ArgumentParser. ; 2) it make sense to load a scene with specific parameters...so having an array with scene specific parameters is in the load function seems sounded. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113
https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113:84,Performance,load,loader,84,"So,; 1) there is no reason to have helper::ArgumentParser in SceneLoaders because a loader (py, scn, etc..) shouldn't be connected in any way to the command line (which is an user interface aspect), especially one relying on a static global object as ArgumentParser. ; 2) it make sense to load a scene with specific parameters...so having an array with scene specific parameters is in the load function seems sounded. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113
https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113:289,Performance,load,load,289,"So,; 1) there is no reason to have helper::ArgumentParser in SceneLoaders because a loader (py, scn, etc..) shouldn't be connected in any way to the command line (which is an user interface aspect), especially one relying on a static global object as ArgumentParser. ; 2) it make sense to load a scene with specific parameters...so having an array with scene specific parameters is in the load function seems sounded. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113
https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113:389,Performance,load,load,389,"So,; 1) there is no reason to have helper::ArgumentParser in SceneLoaders because a loader (py, scn, etc..) shouldn't be connected in any way to the command line (which is an user interface aspect), especially one relying on a static global object as ArgumentParser. ; 2) it make sense to load a scene with specific parameters...so having an array with scene specific parameters is in the load function seems sounded. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501172441:28,Testability,test,tests,28,"@Ant0nin all python related tests are failing, could you take a look?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501172441
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501320793:11,Deployability,update,updated,11,"@guparan I updated the PR branch by merging the master branch into it, and it seems to solve the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501320793
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501325095:54,Availability,error,errors,54,@Ant0nin The conflicts are indeed solved but the test errors remain. See https://www.sofa-framework.org/dash?branch=origin/PR-992; Could you try for instance to run SofaPython_test on your local build?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501325095
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501325095:49,Testability,test,test,49,@Ant0nin The conflicts are indeed solved but the test errors remain. See https://www.sofa-framework.org/dash?branch=origin/PR-992; Could you try for instance to run SofaPython_test on your local build?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501325095
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903:138,Availability,fault,fault,138,"@guparan you're right! We didn't see the problem because we ran the tests on the Release build and not on the Debug build. A segmentation fault occurs with the Debug build, dues to an assertion. @tgaugry currently investigates on the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903:81,Deployability,Release,Release,81,"@guparan you're right! We didn't see the problem because we ran the tests on the Release build and not on the Debug build. A segmentation fault occurs with the Debug build, dues to an assertion. @tgaugry currently investigates on the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903:68,Testability,test,tests,68,"@guparan you're right! We didn't see the problem because we ran the tests on the Release build and not on the Debug build. A segmentation fault occurs with the Debug build, dues to an assertion. @tgaugry currently investigates on the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903
https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903:184,Testability,assert,assertion,184,"@guparan you're right! We didn't see the problem because we ran the tests on the Release build and not on the Debug build. A segmentation fault occurs with the Debug build, dues to an assertion. @tgaugry currently investigates on the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903
https://github.com/sofa-framework/sofa/pull/993#issuecomment-484428288:59,Testability,test,test,59,Thanks @damienmarchal :+1: ; Could you explain how the new test `checkRigidAttribute` ends up using the `operator>>` you fixed?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484428288
https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528:249,Availability,error,error,249,"Hi Guillaume,. The problem of matrix reading was visible because of the UniformMass<Rigid3> was generating a warning at run-time. The test was designed to fail if the uniformmass generates such a warning or cannot read the given values. Finally the error was not in UniformMass but in Mat.h, so I fixed the problem and keept the written test (not failing now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528
https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528:134,Testability,test,test,134,"Hi Guillaume,. The problem of matrix reading was visible because of the UniformMass<Rigid3> was generating a warning at run-time. The test was designed to fail if the uniformmass generates such a warning or cannot read the given values. Finally the error was not in UniformMass but in Mat.h, so I fixed the problem and keept the written test (not failing now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528
https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528:337,Testability,test,test,337,"Hi Guillaume,. The problem of matrix reading was visible because of the UniformMass<Rigid3> was generating a warning at run-time. The test was designed to fail if the uniformmass generates such a warning or cannot read the given values. Finally the error was not in UniformMass but in Mat.h, so I fixed the problem and keept the written test (not failing now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528
https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622:101,Deployability,update,updatePosition,101,"ok, could you test by removing the line:; 323 or 324 in the GeomagicDriver.cpp. remove this call: ```updatePosition(); ```; because I saw it is called at SOFA component init when the device thread is not yet well init so it init the manager position with trash position of the device.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622
https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622:14,Testability,test,test,14,"ok, could you test by removing the line:; 323 or 324 in the GeomagicDriver.cpp. remove this call: ```updatePosition(); ```; because I saw it is called at SOFA component init when the device thread is not yet well init so it init the manager position with trash position of the device.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622
https://github.com/sofa-framework/sofa/issues/996#issuecomment-486112953:7,Deployability,update,updated,7,I just updated the title of this issue,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/996#issuecomment-486112953
https://github.com/sofa-framework/sofa/pull/998#issuecomment-484576440:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/998#issuecomment-484576440
https://github.com/sofa-framework/sofa/pull/999#issuecomment-484814822:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/999#issuecomment-484814822
https://github.com/sofa-framework/sofa/pull/999#issuecomment-486404384:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/999#issuecomment-486404384
https://github.com/sofa-framework/sofa/pull/1000#issuecomment-484814973:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1000#issuecomment-484814973
https://github.com/sofa-framework/sofa/issues/1002#issuecomment-510393071:46,Modifiability,plugin,plugin,46,Can we close this issue..? ^^ Or rename it to plugin.SofaPython3 and redirect to the trello board maybe:; https://trello.com/b/snWTMlCN/pluginsofapython3-the-turtle-speed-project,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-510393071
https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896:149,Availability,avail,available,149,"I close this @marques-bruno but is an example / doc on ""how to build a binding"" for [SofaPython3](https://github.com/SofaDefrost/plugin.SofaPython3) available?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896
https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896:129,Modifiability,plugin,plugin,129,"I close this @marques-bruno but is an example / doc on ""how to build a binding"" for [SofaPython3](https://github.com/SofaDefrost/plugin.SofaPython3) available?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896
https://github.com/sofa-framework/sofa/pull/1005#issuecomment-487639998:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1005#issuecomment-487639998
https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948:230,Usability,clear,clear,230,"Hi,; I don't actually want to use them, it's just that it was crashing! I created the mesh in Gmsh but exported it in vtk. Exporting it in the msh format does not lead to a crash indeed.; I can understand that my fix is not super clear! ; Essentially, in the code when it starts using the edges and something goes wrong, I move on to the option like if no edges had been given (For example in the function createEdgesInTetrahedronArray() with the if (hasEdges) ). I hope it clarifies a little bit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948
https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487638131:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487638131
https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324:128,Energy Efficiency,green,green,128,"I'm ok with the change regarding the edges. I can't see some border effect right now... and as all the non regression tests are green I'm 99% confident!; I just added some additional warning and tests inside the tetrahedron methods you fixed to match what has been done inside the TriangleSetTopologyContainer. You could double check if needed.; Thanks, I missed those one.; :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324
https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324:118,Testability,test,tests,118,"I'm ok with the change regarding the edges. I can't see some border effect right now... and as all the non regression tests are green I'm 99% confident!; I just added some additional warning and tests inside the tetrahedron methods you fixed to match what has been done inside the TriangleSetTopologyContainer. You could double check if needed.; Thanks, I missed those one.; :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324
https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324:195,Testability,test,tests,195,"I'm ok with the change regarding the edges. I can't see some border effect right now... and as all the non regression tests are green I'm 99% confident!; I just added some additional warning and tests inside the tetrahedron methods you fixed to match what has been done inside the TriangleSetTopologyContainer. You could double check if needed.; Thanks, I missed those one.; :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324
https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:752,Security,access,access,752,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388
https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:1641,Usability,feedback,feedbacks,1641,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388
https://github.com/sofa-framework/sofa/pull/1011#issuecomment-487960421:42,Testability,test,tests,42,adding some recorded mouse non-regression tests? 😈,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1011#issuecomment-487960421
https://github.com/sofa-framework/sofa/pull/1012#issuecomment-488113011:37,Performance,load,loader,37,"The file informations are set by the loader/binding at runtime so this cover dynamically created object. ; Eg when loading the following scene: ; ```; def myFunction(node): ; rootNode.createObject(""MechanicalObject"") # The instanciation file:loc: for MechanicalObject is here . def myFunction(node): ; rootNode.createObject(""MechanicalObject"") # The instanciation file:loc: is here. . def createScene():; rootNode.createChild(""Object"") # The instanciation file:loc is here. ; myFunction(rootNode) ; ```; So in the gui, this will open the editor to the corresponding lines which is very conveniant, especially if like in STLIB you have libraries of prefab. . As each Node/Object in the graph benefit for having such information it make sense to put that in Base but I welcome any future PR improving the situation :) . To see how we use that in #1013 and in runSofa2...have a look at: https://www.youtube.com/watch?v=zzOY-Lt0vgM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-488113011
https://github.com/sofa-framework/sofa/pull/1012#issuecomment-488113011:115,Performance,load,loading,115,"The file informations are set by the loader/binding at runtime so this cover dynamically created object. ; Eg when loading the following scene: ; ```; def myFunction(node): ; rootNode.createObject(""MechanicalObject"") # The instanciation file:loc: for MechanicalObject is here . def myFunction(node): ; rootNode.createObject(""MechanicalObject"") # The instanciation file:loc: is here. . def createScene():; rootNode.createChild(""Object"") # The instanciation file:loc is here. ; myFunction(rootNode) ; ```; So in the gui, this will open the editor to the corresponding lines which is very conveniant, especially if like in STLIB you have libraries of prefab. . As each Node/Object in the graph benefit for having such information it make sense to put that in Base but I welcome any future PR improving the situation :) . To see how we use that in #1013 and in runSofa2...have a look at: https://www.youtube.com/watch?v=zzOY-Lt0vgM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-488113011
https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815:42,Usability,clear,clear,42,"Ok thanks for the movie, the goal is more clear now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815
https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392:104,Modifiability,config,configure,104,"Hi Guillaume,. I hesitated to do what you suggest...but I concluded that it be better to have people to configure the feature properly instead of living with a partially working approach (no line jump). . But...maybe with a big msg_warning() <<; ""You didnt configured your editor properly...falling back to a shitty solution without line jump""... ; until properly configured it would be ok :) . Can you make it ? I'm focus on something else and have not time until tomorrow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392
https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392:257,Modifiability,config,configured,257,"Hi Guillaume,. I hesitated to do what you suggest...but I concluded that it be better to have people to configure the feature properly instead of living with a partially working approach (no line jump). . But...maybe with a big msg_warning() <<; ""You didnt configured your editor properly...falling back to a shitty solution without line jump""... ; until properly configured it would be ok :) . Can you make it ? I'm focus on something else and have not time until tomorrow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392
https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392:364,Modifiability,config,configured,364,"Hi Guillaume,. I hesitated to do what you suggest...but I concluded that it be better to have people to configure the feature properly instead of living with a partially working approach (no line jump). . But...maybe with a big msg_warning() <<; ""You didnt configured your editor properly...falling back to a shitty solution without line jump""... ; until properly configured it would be ok :) . Can you make it ? I'm focus on something else and have not time until tomorrow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392
https://github.com/sofa-framework/sofa/pull/1013#issuecomment-489234802:38,Deployability,update,updated,38,Ok after review... I closed #1012 and updated only this one as it contains the all the commit history..,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-489234802
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487539429:59,Testability,test,tested,59,"Hi Camille,. Thanks a lot for the detailed reports. I just tested the files and can confirm the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487539429
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297:513,Availability,avail,available,513,"Well after a quick look in the scene you provided:. I'm not surprised the BarycentricMapping is not able to work . . Let's me explain: ; - Object.DoFs is of type Rigid3d; - Object.Mechanical model.collisionDofs is of type Vec3d. What your are specifying by setting the input & output field of BarycentricMapping is that you are driving the collisionDofs(type Vec3d) from the one from the one of type Dofs(type Rigid3). So the corresponding mapping should be Rigid3d, Vec3d (an not Vec3d, Rigid3d). ; The possible available templates shows that this is not supposed to work, because a BarycentricMapping can only have Vec3 as input. Overriding the template values with one that exists in BarycentricMapping will not work because this will lead to a mismatch between the input/output types and thes type manually set in the template. . Now about the BeamLinearMapping...the situation is a bit different. There is a valid template from Rigid3 to Vec3. This is why:; ```xml; <BeamLinearMapping template=""Rigid3d,Vec3d""/>; ```; And; ```xml; <BeamLinearMapping""/>; ```; Work the same. ; You get an error in your case because there is a typo ""@collisionDOFs"" instead of ""@collisionDoFs"".; ; Now I have no idea why the BeamLinearMapping is not working as you expect:; - maybe there is a real issue there ? . NB to anyone:; It would be nice to have PRs to improve the error messages as they are mis-leading.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297:1092,Availability,error,error,1092,"Well after a quick look in the scene you provided:. I'm not surprised the BarycentricMapping is not able to work . . Let's me explain: ; - Object.DoFs is of type Rigid3d; - Object.Mechanical model.collisionDofs is of type Vec3d. What your are specifying by setting the input & output field of BarycentricMapping is that you are driving the collisionDofs(type Vec3d) from the one from the one of type Dofs(type Rigid3). So the corresponding mapping should be Rigid3d, Vec3d (an not Vec3d, Rigid3d). ; The possible available templates shows that this is not supposed to work, because a BarycentricMapping can only have Vec3 as input. Overriding the template values with one that exists in BarycentricMapping will not work because this will lead to a mismatch between the input/output types and thes type manually set in the template. . Now about the BeamLinearMapping...the situation is a bit different. There is a valid template from Rigid3 to Vec3. This is why:; ```xml; <BeamLinearMapping template=""Rigid3d,Vec3d""/>; ```; And; ```xml; <BeamLinearMapping""/>; ```; Work the same. ; You get an error in your case because there is a typo ""@collisionDOFs"" instead of ""@collisionDoFs"".; ; Now I have no idea why the BeamLinearMapping is not working as you expect:; - maybe there is a real issue there ? . NB to anyone:; It would be nice to have PRs to improve the error messages as they are mis-leading.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297:1359,Availability,error,error,1359,"Well after a quick look in the scene you provided:. I'm not surprised the BarycentricMapping is not able to work . . Let's me explain: ; - Object.DoFs is of type Rigid3d; - Object.Mechanical model.collisionDofs is of type Vec3d. What your are specifying by setting the input & output field of BarycentricMapping is that you are driving the collisionDofs(type Vec3d) from the one from the one of type Dofs(type Rigid3). So the corresponding mapping should be Rigid3d, Vec3d (an not Vec3d, Rigid3d). ; The possible available templates shows that this is not supposed to work, because a BarycentricMapping can only have Vec3 as input. Overriding the template values with one that exists in BarycentricMapping will not work because this will lead to a mismatch between the input/output types and thes type manually set in the template. . Now about the BeamLinearMapping...the situation is a bit different. There is a valid template from Rigid3 to Vec3. This is why:; ```xml; <BeamLinearMapping template=""Rigid3d,Vec3d""/>; ```; And; ```xml; <BeamLinearMapping""/>; ```; Work the same. ; You get an error in your case because there is a typo ""@collisionDOFs"" instead of ""@collisionDoFs"".; ; Now I have no idea why the BeamLinearMapping is not working as you expect:; - maybe there is a real issue there ? . NB to anyone:; It would be nice to have PRs to improve the error messages as they are mis-leading.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297:1365,Integrability,message,messages,1365,"Well after a quick look in the scene you provided:. I'm not surprised the BarycentricMapping is not able to work . . Let's me explain: ; - Object.DoFs is of type Rigid3d; - Object.Mechanical model.collisionDofs is of type Vec3d. What your are specifying by setting the input & output field of BarycentricMapping is that you are driving the collisionDofs(type Vec3d) from the one from the one of type Dofs(type Rigid3). So the corresponding mapping should be Rigid3d, Vec3d (an not Vec3d, Rigid3d). ; The possible available templates shows that this is not supposed to work, because a BarycentricMapping can only have Vec3 as input. Overriding the template values with one that exists in BarycentricMapping will not work because this will lead to a mismatch between the input/output types and thes type manually set in the template. . Now about the BeamLinearMapping...the situation is a bit different. There is a valid template from Rigid3 to Vec3. This is why:; ```xml; <BeamLinearMapping template=""Rigid3d,Vec3d""/>; ```; And; ```xml; <BeamLinearMapping""/>; ```; Work the same. ; You get an error in your case because there is a typo ""@collisionDOFs"" instead of ""@collisionDoFs"".; ; Now I have no idea why the BeamLinearMapping is not working as you expect:; - maybe there is a real issue there ? . NB to anyone:; It would be nice to have PRs to improve the error messages as they are mis-leading.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:521,Availability,error,error,521,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:685,Availability,down,down,685,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:733,Energy Efficiency,reduce,reduced,733,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:527,Integrability,message,message,527,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:261,Usability,clear,clear,261,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487895951:99,Energy Efficiency,reduce,reduced,99,"@hugtalbot Correct! This actually works with the IdentityMapping, but I'd be interested in using a reduced topology for the collision model.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487895951
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-489441938:220,Deployability,update,updated,220,"Unfortunately, I won't be able to come to Sophia Antipolis for the next STC... But if I haven't investigated the issue until then, I'll try to block 1 or 2 days during the STC to work on it from distance.; I'll keep you updated in the meantime.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-489441938
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-509667857:147,Deployability,update,update,147,Hi @remibessard ; I am getting back to this topic.; I know students (Alban for instance) were struggling also with the BeamLinearMapping.; Can you update us on this topic ?; Is it working well for you?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-509667857
https://github.com/sofa-framework/sofa/pull/1018#issuecomment-487919483:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018#issuecomment-487919483
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487670191:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487670191
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:2,Deployability,integrat,integrated,2,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:2,Integrability,integrat,integrated,2,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:145,Usability,simpl,simple,145,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721
https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041:53,Availability,error,error,53,Those scenes were not tested? How did you detect the error?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041
https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041:42,Safety,detect,detect,42,Those scenes were not tested? How did you detect the error?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041
https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041:22,Testability,test,tested,22,Those scenes were not tested? How did you detect the error?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041
https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489637824:24,Testability,test,tests,24,Report from users. They tests the example and it does not work;,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489637824
https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989:68,Safety,detect,detection,68,Would it be easy to add theme to the scene tests for future problem detection?; They were not crashing I guess...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989
https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989:43,Testability,test,tests,43,Would it be easy to add theme to the scene tests for future problem detection?; They were not crashing I guess...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989
https://github.com/sofa-framework/sofa/pull/1021#issuecomment-489147885:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1021#issuecomment-489147885
https://github.com/sofa-framework/sofa/pull/1024#issuecomment-490002931:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1024#issuecomment-490002931
https://github.com/sofa-framework/sofa/pull/1027#issuecomment-490832607:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1027#issuecomment-490832607
https://github.com/sofa-framework/sofa/pull/1027#issuecomment-490832607:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1027#issuecomment-490832607
https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270:82,Usability,feedback,feedback,82,"you are welcomed, I did it as well as I need it.; Do not hesitate to send me some feedback if you see bugs or potential improvement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270
https://github.com/sofa-framework/sofa/pull/1031#issuecomment-490919768:110,Deployability,release,release,110,"Hello Olivier,. As said by Antoine Furetière in the the XVII century... it is the small PRs that make the big release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1031#issuecomment-490919768
https://github.com/sofa-framework/sofa/pull/1031#issuecomment-493378115:195,Deployability,update,update,195,@olivier-goury I'm coming back to this PR as it is now crashing in the precise case where points are removed.; For example at step N we remove all the points and now d_X0 is empty but we need to update the engine to clean output Data which need to be empty now as well (but where not at step N-1). I'm checking the code of BoxROI::doUpdate and I don't see where it could crash if d_X0 was not yet set at init.; Normally no loop is done if the vector is empty.; Could you detail me where it crashes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1031#issuecomment-493378115
https://github.com/sofa-framework/sofa/pull/1033#issuecomment-491805017:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1033#issuecomment-491805017
https://github.com/sofa-framework/sofa/pull/1034#issuecomment-491609275:20,Testability,test,tests,20,"[ci-build][with-all-tests]; I am pretty sure Erik meant a c++ alias, isn't it @epernod ? Aliases for scenes is already done; Do you have an example of how to proceed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-491609275
https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840:11,Availability,error,error,11,"Is this CI error is related to the PR ? ; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1034/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/6/testReport/(root)/Assembly_test/testDecomposedString/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840
https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840:156,Deployability,release,release,156,"Is this CI error is related to the PR ? ; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1034/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/6/testReport/(root)/Assembly_test/testDecomposedString/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840
https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840:166,Testability,test,testReport,166,"Is this CI error is related to the PR ? ; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1034/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/6/testReport/(root)/Assembly_test/testDecomposedString/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840
https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840:198,Testability,test,testDecomposedString,198,"Is this CI error is related to the PR ? ; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1034/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/6/testReport/(root)/Assembly_test/testDecomposedString/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840
https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494462467:85,Testability,test,test,85,"I really think this isnt related to this PR. I don't see any ""CollisionModel"" in the test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494462467
https://github.com/sofa-framework/sofa/pull/1035#issuecomment-491581728:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1035#issuecomment-491581728
https://github.com/sofa-framework/sofa/pull/1037#issuecomment-494474133:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1037#issuecomment-494474133
https://github.com/sofa-framework/sofa/pull/1048#issuecomment-498996872:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1048#issuecomment-498996872
https://github.com/sofa-framework/sofa/pull/1049#issuecomment-499000733:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1049#issuecomment-499000733
https://github.com/sofa-framework/sofa/pull/1055#issuecomment-503017172:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1055#issuecomment-503017172
https://github.com/sofa-framework/sofa/pull/1055#issuecomment-504414180:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1055#issuecomment-504414180
https://github.com/sofa-framework/sofa/pull/1056#issuecomment-494806977:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1056#issuecomment-494806977
https://github.com/sofa-framework/sofa/pull/1060#issuecomment-495254972:227,Safety,avoid,avoid,227,"Yes , for me it's better to create a new PR because the removal of; isMultiGroup() function will affect the LinearSolver and other few files; not only the CollisionGroupManager.; I think I can do it quickly from this branch to avoid conflicts.; I let you know. On Thu, May 23, 2019 at 2:58 PM Hugo <notifications@github.com> wrote:. > Nice Federico, will you PR the removal of the MultiGroup (maybe another; > PR)? if not, I can do it; > Cheers; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/1060?email_source=notifications&email_token=AA55OZHW3KLSKL43E6LUPW3PW2IGPA5CNFSM4HOWAPAKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWCEIMI#issuecomment-495207473>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AA55OZDPDLZSGI2CDTSO5C3PW2IGPANCNFSM4HOWAPAA>; > .; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-495254972
https://github.com/sofa-framework/sofa/pull/1060#issuecomment-495341806:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-495341806
https://github.com/sofa-framework/sofa/pull/1060#issuecomment-496853737:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-496853737
https://github.com/sofa-framework/sofa/pull/1060#issuecomment-498606513:27,Testability,test,tests,27,[ci-build][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-498606513
https://github.com/sofa-framework/sofa/pull/1060#issuecomment-500892127:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-500892127
https://github.com/sofa-framework/sofa/pull/1060#issuecomment-500892127:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-500892127
https://github.com/sofa-framework/sofa/pull/1061#issuecomment-496159792:33,Deployability,update,update,33,I just merged #1052. Now you can update Regression_test commit anytime in applications/projects/Regression/ExternalProjectConfig.cmake.in :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-496159792
https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499859915:11,Testability,test,tests,11,Regression tests execution time before:; real 0m41.202s; user 0m0.000s; sys 0m0.015s; Reference dir: 32 mo,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499859915
https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499862525:11,Testability,test,tests,11,Regression tests execution time after:; real 0m22.666s; user 0m0.000s; sys 0m0.015s; Reference size dir: 2.96 mo,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499862525
https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499865836:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499865836
https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499867119:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499867119
https://github.com/sofa-framework/sofa/pull/1063#issuecomment-495338255:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1063#issuecomment-495338255
https://github.com/sofa-framework/sofa/pull/1064#issuecomment-575320727:12,Testability,test,tests,12,[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1064#issuecomment-575320727
https://github.com/sofa-framework/sofa/pull/1065#issuecomment-496417360:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1065#issuecomment-496417360
https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496293593:253,Deployability,update,update,253,"Hi @etagliabue,. Thanks a lot for you pull-request. . Could you elaborate a bit more on which use case requires the changes you are proposing. For the moment I don't understand which use case you are working on which would defeat the existing lazy data update mechanism used by Sofa engines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496293593
https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496416619:78,Deployability,update,update,78,"Hi @damienmarchal,; Thank you for your comment. I needed the engine output to update at each time step, but I think you are right and the default lazy mechanism may be enough for my use case. I made this change together with @hugtalbot, mainly to go through the process of opening a PR :); Anyway, I think the things mentioned in the todo list (especially adding visualization part) could be helpful. But of course we could close this PR and open another later with those improvements.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496416619
https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349:270,Usability,simpl,simplicity,270,"Hello @etagliabue ; Thanks for your contribution. However, as @damienmarchal said, I don't see a use case where you would want this behavior instead of the engine behavior.; For the other proposals, I believe it should be done in another PR, just for the sake coherency/simplicity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349
https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265:37,Usability,feedback,feedback,37,"Right, thank you guys for your quick feedback.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265
https://github.com/sofa-framework/sofa/pull/1067#issuecomment-496410779:139,Availability,ERROR,ERROR,139,"If a ""REQUIRED"" is not found, the project processing stops. Everything after that is omitted. --> Changed ""REQUIRED + WARNING"" to ""QUIET + ERROR"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1067#issuecomment-496410779
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498193900:2,Testability,test,tested,2,"I tested it on OSX Mojave and this PR is miraculous. The caduceus goes from 35FPS to 130FPS by adding "" forceFloat=1"" to each of the 4 OglModel in the scene. ; I approve this fix (once forceFloat is set to ""on"" by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498193900
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498195211:15,Testability,test,tests,15,Thanks for the tests...actually I was more thinking to remove the forceFloat data field that was just here for testing purpose. What is your opinion ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498195211
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498195211:111,Testability,test,testing,111,Thanks for the tests...actually I was more thinking to remove the forceFloat data field that was just here for testing purpose. What is your opinion ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498195211
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498992413:68,Testability,test,tests,68,@fredroy Do you have some time to take a look?; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498992413
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089:158,Usability,guid,guidelines,158,"It is a good idea to finally remove the flag sofa_have_glew (it would be cool to remove it entirely in Sofa by the way), and I don't see anything wrong (code guidelines like prefixes etc, is not the point of this PR).; I dont know if we should flag this PR as ¨breaking¨ as some data have been removed (useVBO and isToPrint) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392999:120,Integrability,message,message,120,Hello @fredroy . Thanks for the review.; Removing glew everywhere is in PR #1071 ; I will add right now two deprecation message for the two data field that have been removed. [DONE]. If you agree can you pass it to ready & merge ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392999
https://github.com/sofa-framework/sofa/issues/1070#issuecomment-497911918:318,Performance,perform,performance,318,"I looked into the OglModel implementation. The implementation contains very old OpenGL rendering code (OpenGL 2.0) and is very hard to read because of excessive use of #ifdef all around. . So I made a PR to clean it a bit (remove the GLEW stuff) ...because do we need such a thing in 2018 ? ; In the PR I also fix the performance issue by converting all the doubles arrays to float array before passing them to the vertex buffer object. This resulted in performance boost on Linux, I would be happy to have someone confirming this also fix the problem on MacOS. . https://github.com/sofa-framework/sofa/pull/1069",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1070#issuecomment-497911918
https://github.com/sofa-framework/sofa/issues/1070#issuecomment-497911918:454,Performance,perform,performance,454,"I looked into the OglModel implementation. The implementation contains very old OpenGL rendering code (OpenGL 2.0) and is very hard to read because of excessive use of #ifdef all around. . So I made a PR to clean it a bit (remove the GLEW stuff) ...because do we need such a thing in 2018 ? ; In the PR I also fix the performance issue by converting all the doubles arrays to float array before passing them to the vertex buffer object. This resulted in performance boost on Linux, I would be happy to have someone confirming this also fix the problem on MacOS. . https://github.com/sofa-framework/sofa/pull/1069",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1070#issuecomment-497911918
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:79,Deployability,release,release,79,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:331,Integrability,message,messages,331,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:283,Modifiability,plugin,plugin,283,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499395521:76,Modifiability,plugin,plugin,76,"The purpose of this PR is to completely encapsule all OpenGL code into that plugin?; (according to the description :wink: ).; Otherwise there are some stuff from the framework/kernel, especially DrawToolGL (in good ol' opengl 2 :cowboy_hat_face: )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499395521
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:217,Deployability,update,updated,217,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:181,Integrability,depend,dependencies,181,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:51,Modifiability,plugin,pluginization,51,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:104,Modifiability,plugin,plugin,104,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448:368,Modifiability,plugin,plugin,368,"Hi Mimesis-bot, I'm happy to hear you have an opinion on this PR :); AI is making super impressive progress nowaydays. EDIT: . To me the good design should be to have:; - SofaOpenglRendering (which contains the DrawToolGl implementation and the gl helpers). ; - SofaOpenglVisual (which contains component that draw stuff using ogl). The PR only wanted to isolate in a plugin the sofa (object/component) so the SofaOpenglVisual that are used for rendering not the remove all gl rendering from Sofa so gl rendering is handle in away similar to the other plugin and now with this #ifdef SOFA_NO_OPENGL. . EDIT: ; But I would prefer to focus on having that done for either:; - SofaOpengl4Rendering; - SofaOpengl4Visuals. Or; - SofaQt3DRendering; - SofaQt3DVisuals; ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448
https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448:552,Modifiability,plugin,plugin,552,"Hi Mimesis-bot, I'm happy to hear you have an opinion on this PR :); AI is making super impressive progress nowaydays. EDIT: . To me the good design should be to have:; - SofaOpenglRendering (which contains the DrawToolGl implementation and the gl helpers). ; - SofaOpenglVisual (which contains component that draw stuff using ogl). The PR only wanted to isolate in a plugin the sofa (object/component) so the SofaOpenglVisual that are used for rendering not the remove all gl rendering from Sofa so gl rendering is handle in away similar to the other plugin and now with this #ifdef SOFA_NO_OPENGL. . EDIT: ; But I would prefer to focus on having that done for either:; - SofaOpengl4Rendering; - SofaOpengl4Visuals. Or; - SofaQt3DRendering; - SofaQt3DVisuals; ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448
https://github.com/sofa-framework/sofa/pull/1080#issuecomment-501708451:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1080#issuecomment-501708451
https://github.com/sofa-framework/sofa/pull/1080#issuecomment-501708451:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1080#issuecomment-501708451
https://github.com/sofa-framework/sofa/pull/1080#issuecomment-504000825:0,Testability,Test,Test,0,Test SceneChecker_test.checkDuplicatedNames is now working further to Damien's commit.; Merge as agreed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1080#issuecomment-504000825
https://github.com/sofa-framework/sofa/pull/1081#issuecomment-501667969:32,Testability,test,tests,32,When #1080 is merged and scenes tests will be checked I will add change to remove fileMesh inside oglModel.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1081#issuecomment-501667969
https://github.com/sofa-framework/sofa/pull/1081#issuecomment-504001359:21,Energy Efficiency,green,green,21,"The #1080 is merged, green light",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1081#issuecomment-504001359
https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712:242,Integrability,message,message,242,"Take a look at the removed overload. ; ```; SetDirectory::SetDirectory(const std::string& filename); {; SetDirectory(filename.c_str());; }; ``` ; is not valid object creation.; It is both wrong and unneeded. As for the link with #992, latest message mention failing tests, which are due to the aforementionned bug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712
https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712:266,Testability,test,tests,266,"Take a look at the removed overload. ; ```; SetDirectory::SetDirectory(const std::string& filename); {; SetDirectory(filename.c_str());; }; ``` ; is not valid object creation.; It is both wrong and unneeded. As for the link with #992, latest message mention failing tests, which are due to the aforementionned bug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712
https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503449780:578,Modifiability,inherit,inherits,578,"That's a very good question....; I think that initially it was used to sort components by categories (Forcefields, masses, collision algorithms, etc.); There was a binding in SofaPython that was returning the categories associated to a component. Also, a class named SofaLibrary is using CategoryLibrary.; After your comment, a quick search in the sources shows me that SofaLibrary is not used anywhere actually:; - SofaLibrary itself is used nowhere. SofaModeler does hold a pointer to a SofaLibrary, but this pointer is never used antwhere in the code... ; - QSofaTreeLibrary inherits SofaLibrary -> not used anywhere in SOFA. So now that I see that, I vote for removing the CategoryLibrary / SofaLibrary / QSofaTreeLibrary from SOFA altogether. What do you say?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503449780
https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503450931:102,Testability,test,testing,102,As far as know this is useful (and we use it in python) to get kind of parent class of an object (eg: testing if an object is a FF or a constraint or whatever).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503450931
https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891:52,Modifiability,refactor,refactoring,52,"Yes, I reported that in the PR related to BaseClass refactoring.; To my understanding Sofa is ""broken by design"" on that aspect. . Broken because the code that create the class object is using template with inner static object to create a singleton. This means that in every .cpp, the templated functions are generated, but, as they have static object in them...they are actually different (which is a kind of ODR violation). This is not a real problem when all the corresponding .cpp are assembled in a single programe because the linker implements a mecanisme to detect ""the duplicated templates instances"" and pick one. But there is no such runtime ""unification"" when working with dynamically loaded shared libraries (plugin) which can cause a lot of troubles. . Changing that means refactoring the whole class introspection system.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891
https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891:721,Modifiability,plugin,plugin,721,"Yes, I reported that in the PR related to BaseClass refactoring.; To my understanding Sofa is ""broken by design"" on that aspect. . Broken because the code that create the class object is using template with inner static object to create a singleton. This means that in every .cpp, the templated functions are generated, but, as they have static object in them...they are actually different (which is a kind of ODR violation). This is not a real problem when all the corresponding .cpp are assembled in a single programe because the linker implements a mecanisme to detect ""the duplicated templates instances"" and pick one. But there is no such runtime ""unification"" when working with dynamically loaded shared libraries (plugin) which can cause a lot of troubles. . Changing that means refactoring the whole class introspection system.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891
https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891:786,Modifiability,refactor,refactoring,786,"Yes, I reported that in the PR related to BaseClass refactoring.; To my understanding Sofa is ""broken by design"" on that aspect. . Broken because the code that create the class object is using template with inner static object to create a singleton. This means that in every .cpp, the templated functions are generated, but, as they have static object in them...they are actually different (which is a kind of ODR violation). This is not a real problem when all the corresponding .cpp are assembled in a single programe because the linker implements a mecanisme to detect ""the duplicated templates instances"" and pick one. But there is no such runtime ""unification"" when working with dynamically loaded shared libraries (plugin) which can cause a lot of troubles. . Changing that means refactoring the whole class introspection system.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891
https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891:696,Performance,load,loaded,696,"Yes, I reported that in the PR related to BaseClass refactoring.; To my understanding Sofa is ""broken by design"" on that aspect. . Broken because the code that create the class object is using template with inner static object to create a singleton. This means that in every .cpp, the templated functions are generated, but, as they have static object in them...they are actually different (which is a kind of ODR violation). This is not a real problem when all the corresponding .cpp are assembled in a single programe because the linker implements a mecanisme to detect ""the duplicated templates instances"" and pick one. But there is no such runtime ""unification"" when working with dynamically loaded shared libraries (plugin) which can cause a lot of troubles. . Changing that means refactoring the whole class introspection system.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891
https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891:565,Safety,detect,detect,565,"Yes, I reported that in the PR related to BaseClass refactoring.; To my understanding Sofa is ""broken by design"" on that aspect. . Broken because the code that create the class object is using template with inner static object to create a singleton. This means that in every .cpp, the templated functions are generated, but, as they have static object in them...they are actually different (which is a kind of ODR violation). This is not a real problem when all the corresponding .cpp are assembled in a single programe because the linker implements a mecanisme to detect ""the duplicated templates instances"" and pick one. But there is no such runtime ""unification"" when working with dynamically loaded shared libraries (plugin) which can cause a lot of troubles. . Changing that means refactoring the whole class introspection system.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891
https://github.com/sofa-framework/sofa/pull/1088#issuecomment-504901361:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1088#issuecomment-504901361
https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813:99,Modifiability,plugin,plugin,99,"@guparan thanks for the reply!; Actually, ASAP would be great: I need to this setup the CI for the plugin SofaPython3 alongside our other plugins @SofaDefrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813
https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813:138,Modifiability,plugin,plugins,138,"@guparan thanks for the reply!; Actually, ASAP would be great: I need to this setup the CI for the plugin SofaPython3 alongside our other plugins @SofaDefrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813
https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504909034:8,Deployability,update,update,8,OK I'll update mine ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504909034
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-507180918:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-507180918
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:51,Deployability,update,update,51,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:342,Deployability,update,updates,342,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:624,Deployability,update,updates,624,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:676,Deployability,update,update,676,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:854,Deployability,update,update,854,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:781,Security,attack,attack,781,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510788154:328,Deployability,update,update,328,"Hi @hugtalbot ,; we discussed it as well with @marques-bruno and @damienmarchal on gitter, we all have several way do to it. Can't say if one is best.; I want to put a generic mechanism in BaseObject (or another child/parent) that you could call, if you want, at init to link a dataTracker and which would automatically call an update (maybe not exactly the name update to not confuse with engines) virtual method. . I suggest either we start a discussion issue on this and/or we add that discussion for the next dev meeting agenda.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510788154
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510788154:363,Deployability,update,update,363,"Hi @hugtalbot ,; we discussed it as well with @marques-bruno and @damienmarchal on gitter, we all have several way do to it. Can't say if one is best.; I want to put a generic mechanism in BaseObject (or another child/parent) that you could call, if you want, at init to link a dataTracker and which would automatically call an update (maybe not exactly the name update to not confuse with engines) virtual method. . I suggest either we start a discussion issue on this and/or we add that discussion for the next dev meeting agenda.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510788154
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-524784250:15,Deployability,update,update,15,@hugtalbot any update on the Data update callback?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-524784250
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-524784250:34,Deployability,update,update,34,@hugtalbot any update on the Data update callback?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-524784250
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513207:17,Testability,test,test,17,@epernod you can test the perf aspects it compiles with #1131 ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513207
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513905:103,Testability,test,test,103,It won't compile here on the CI if you don't merge your PR in this one. Or I missed something.; I will test it on my computer.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513905
https://github.com/sofa-framework/sofa/pull/1093#issuecomment-528295143:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-528295143
https://github.com/sofa-framework/sofa/pull/1094#issuecomment-507180950:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1094#issuecomment-507180950
https://github.com/sofa-framework/sofa/pull/1095#issuecomment-507228826:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1095#issuecomment-507228826
https://github.com/sofa-framework/sofa/pull/1096#issuecomment-507681462:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1096#issuecomment-507681462
https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:52,Integrability,message,message,52,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235
https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:60,Modifiability,refactor,refactoring,60,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235
https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:31,Testability,test,test,31,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235
https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510018883:14,Modifiability,refactor,refactoring,14,It's only msg refactoring. Title is misleading.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510018883
https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510019064:4,Availability,error,error,4,The error to be fixed was due to `using namespace std;` removal.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510019064
https://github.com/sofa-framework/sofa/pull/1098#issuecomment-507804208:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1098#issuecomment-507804208
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510035069:183,Deployability,install,install,183,"> not possible to use a git submodule? or another mechanism to not store the lib internally in the repo ?. I agree !. Edit: even better, give the user the choice to use its own eigen install, like Qt.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510035069
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:765,Integrability,depend,dependency,765,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:399,Modifiability,plugin,plugin,399,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:520,Modifiability,config,configure,520,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:39,Usability,simpl,simply,39,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252:106,Availability,down,downloading,106,Why not using the normal git submodule for this one?; It won't be linked to cmake config/build. Just like downloading the source code and its dependencies when you clone the repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252:142,Integrability,depend,dependencies,142,Why not using the normal git submodule for this one?; It won't be linked to cmake config/build. Just like downloading the source code and its dependencies when you clone the repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252:82,Modifiability,config,config,82,Why not using the normal git submodule for this one?; It won't be linked to cmake config/build. Just like downloading the source code and its dependencies when you clone the repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:0,Availability,Error,Errors,0,"Errors start from Compliant. First error on MacOS:; ```; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:1:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.h:5:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/MechanicalVisitor.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Visitor.h:26:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Node.h:50:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:35,Availability,error,error,35,"Errors start from Compliant. First error on MacOS:; ```; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:1:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.h:5:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/MechanicalVisitor.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Visitor.h:26:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Node.h:50:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:1819,Availability,error,error,1819,"/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,typename traits<Rhs>::StorageKind,_LhsNested::Flags & RowMajorBit,_RhsNested::Flags & RowMajorBit>::value; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/EigenBase.h:41:30: note: in instantiation of template class 'Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> > >' requested here; typedef typename internal::traits<Derived>::StorageKind StorageKind;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseMatrixBase.h:27:12: note: in instantiation of template class 'Eigen::EigenBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:167,Modifiability,plugin,plugins,167,"Errors start from Compliant. First error on MacOS:; ```; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:1:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.h:5:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/MechanicalVisitor.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Visitor.h:26:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Node.h:50:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:328,Modifiability,plugin,plugins,328,"Errors start from Compliant. First error on MacOS:; ```; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:1:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.h:5:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/MechanicalVisitor.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Visitor.h:26:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Node.h:50:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:4615,Modifiability,plugin,plugins,4615,"-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:78:10: note: in instantiation of template class 'Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2>, Eigen::Sparse>' requested here; public CwiseBinaryOpImpl<; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:669:32: note: in instantiation of template class 'Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; return derived() = derived() + other.derived();; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyHelper.h:53:14: note: in instantiation of function template specialization 'Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> >::operator+=<Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; lval += rval;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:536:27: note: in instantiation of function template specialization 'sofa::add<Eigen::SparseMatrix<double, 1, int>, Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; if( !empty(Jp0) ) add( it->J, shift_left<rmat>( 0, it->ff->getMechModel1()->getMatrixSize(), it->H.rows() ) * Jp0 );; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:539:66: note: partial specialization matches [with LhsKind = Eigen::Sparse, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:5017,Modifiability,plugin,plugins,5017,"; public CwiseBinaryOpImpl<; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:669:32: note: in instantiation of template class 'Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; return derived() = derived() + other.derived();; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyHelper.h:53:14: note: in instantiation of function template specialization 'Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> >::operator+=<Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; lval += rval;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:536:27: note: in instantiation of function template specialization 'sofa::add<Eigen::SparseMatrix<double, 1, int>, Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; if( !empty(Jp0) ) add( it->J, shift_left<rmat>( 0, it->ff->getMechModel1()->getMatrixSize(), it->H.rows() ) * Jp0 );; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:539:66: note: partial specialization matches [with LhsKind = Eigen::Sparse, LhsOrder = 1, RhsOrder = 0]; template <typename LhsKind, int LhsOrder, int RhsOrder> struct cwise_promote_storage_order<LhsKind,Sparse,LhsOrder,RhsOrder> { enum { value = RhsOrder }; };; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:540:66: note: partial specialization matches [with RhsKind = Eigen::Sparse, LhsO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-534173478:68,Availability,error,errors,68,Build passes with Eigen 3.2.10; Will investigate a bit to fix build errors with 3.3.7,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-534173478
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-537053781:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-537053781
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-538727046:0,Testability,Test,Tested,0,Tested with my PR #1162 and works with an additional compile flag.; Good to merge for me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-538727046
https://github.com/sofa-framework/sofa/pull/1102#issuecomment-510059490:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1102#issuecomment-510059490
https://github.com/sofa-framework/sofa/pull/1102#issuecomment-510383097:6,Energy Efficiency,green,green,6,super green!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1102#issuecomment-510383097
https://github.com/sofa-framework/sofa/pull/1104#issuecomment-514533700:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1104#issuecomment-514533700
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249:39,Usability,feedback,feedback,39,"Hi Didier @dweckmann ; thanks for your feedback! we actually had very recently a discussion about better supporting the latest version of libraries required for SOFA like CMake.; Are you using the master branch? because the TARGET parameter seems to be defined. Whatever, happy to see you back in the game!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513251952:12,Testability,test,testing,12,"Yeah, I was testing head of 19.06.00. But I forgot to mention that I'm on macOS, don't know if it is related. A colleague told me that it seems to work on windows.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513251952
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513288655:78,Deployability,release,release,78,"ok, this might be due to recent changes in the SofaMacros done for the recent release.; Let me add @guparan in the discussion !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513288655
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931:107,Availability,error,error,107,"Just my 2 cents, on macOS 10.14.5, Xcode 10.2.1 , Cmake 3.15.0 and Sofa sync with master, I don't have any error with the configuration.; **BUT** Cmake 3.15.0 wants to link the OpenGL framework from a non-existing /Applications/Xcode-beta.app (I dont have any beta version of XCode), and obviously breaks the make process.; So I suppose there are some bugs in the 3.15.0 version of cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931:122,Deployability,configurat,configuration,122,"Just my 2 cents, on macOS 10.14.5, Xcode 10.2.1 , Cmake 3.15.0 and Sofa sync with master, I don't have any error with the configuration.; **BUT** Cmake 3.15.0 wants to link the OpenGL framework from a non-existing /Applications/Xcode-beta.app (I dont have any beta version of XCode), and obviously breaks the make process.; So I suppose there are some bugs in the 3.15.0 version of cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931:122,Modifiability,config,configuration,122,"Just my 2 cents, on macOS 10.14.5, Xcode 10.2.1 , Cmake 3.15.0 and Sofa sync with master, I don't have any error with the configuration.; **BUT** Cmake 3.15.0 wants to link the OpenGL framework from a non-existing /Applications/Xcode-beta.app (I dont have any beta version of XCode), and obviously breaks the make process.; So I suppose there are some bugs in the 3.15.0 version of cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-515094912:18,Deployability,update,update,18,Hi @dweckmann any update ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-515094912
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-527074240:75,Availability,error,error,75,"Hi @fbridault could you share your CMakeCache.txt?; I can't reproduce this error on Windows (tried with CMake 3.15.[0,1,2]) :confused:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-527074240
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497:132,Deployability,integrat,integration,132,"Hi @fbridault ; Did you give a try to the latest v19.12 ?; If you face any issue, please poke me directly. I want to make sure your integration is working fine.; Best.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497:132,Integrability,integrat,integration,132,"Hi @fbridault ; Did you give a try to the latest v19.12 ?; If you face any issue, please poke me directly. I want to make sure your integration is working fine.; Best.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-614735966:160,Deployability,update,update,160,Hey @fbridault @dweckmann ; I am writing again on this issue since our Technical Committee is approaching and its associated coding spring (29-30th April). Any update on your side?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-614735966
https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596:23,Usability,guid,guidelines,23,Changes DONE following guidelines of SOFA dev meeting.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596
https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:125,Availability,error,error,125,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731
https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:18,Integrability,depend,dependency,18,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731
https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:136,Modifiability,plugin,plugins,136,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731
https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:202,Modifiability,plugin,plugins,202,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731
https://github.com/sofa-framework/sofa/pull/1110#issuecomment-516750498:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1110#issuecomment-516750498
https://github.com/sofa-framework/sofa/pull/1110#issuecomment-516839841:36,Availability,error,error,36,The scene CarvingTool.scn throws an error: `[CarvingManager(carvingManager1)] m_surfaceCollisionModels not found. Set tag 'CarvingSurface' to the right collision models.`; Could you have a look @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1110#issuecomment-516839841
https://github.com/sofa-framework/sofa/pull/1110#issuecomment-520876839:186,Deployability,release,release,186,"Minor comment otherwise fine to me.; Just the scene [_CarvingTool.scn_](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1110/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/2/warnings3Result/) is now failing due with the new checks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1110#issuecomment-520876839
https://github.com/sofa-framework/sofa/pull/1110#issuecomment-524815752:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1110#issuecomment-524815752
https://github.com/sofa-framework/sofa/pull/1111#issuecomment-515113560:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1111#issuecomment-515113560
https://github.com/sofa-framework/sofa/pull/1112#issuecomment-516753997:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1112#issuecomment-516753997
https://github.com/sofa-framework/sofa/pull/1114#issuecomment-515915971:54,Deployability,install,install,54,nothing on CImgPlugin... 😢 ; Still have my problem of install on windows...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1114#issuecomment-515915971
https://github.com/sofa-framework/sofa/pull/1114#issuecomment-520339203:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1114#issuecomment-520339203
https://github.com/sofa-framework/sofa/pull/1115#issuecomment-515760507:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1115#issuecomment-515760507
https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823:78,Deployability,continuous,continuous,78,"Very nice work @Wall-E-76 ! Impressive !; Thank you very much, let's wait the continuous integration !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823
https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823:89,Deployability,integrat,integration,89,"Very nice work @Wall-E-76 ! Impressive !; Thank you very much, let's wait the continuous integration !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823
https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823:89,Integrability,integrat,integration,89,"Very nice work @Wall-E-76 ! Impressive !; Thank you very much, let's wait the continuous integration !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823
https://github.com/sofa-framework/sofa/pull/1116#issuecomment-519806389:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-519806389
https://github.com/sofa-framework/sofa/pull/1121#issuecomment-520090251:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1121#issuecomment-520090251
https://github.com/sofa-framework/sofa/pull/1121#issuecomment-522877166:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1121#issuecomment-522877166
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-523345808:399,Modifiability,plugin,plugins,399,"Hi @lakehanne, thank you for your PR and welcome to the SOFA community :wave: . I just retargeted your PR towards sofa-framework:master because it seems that you merged master into your v19.06 so it makes more sense (the diff is now readable). About the changes you made, we have our own way to include external repositories in SOFA (we don't use git submodules). Please have a look at applications/plugins/SofaHighOrder or applications/projects/Regression. Moreover, I'm not sure we want to add ROS, SoftRobots and STLIB in SOFA as external repos. This should be discussed with @sofa-framework/reviewers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-523345808
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:134,Deployability,release,released,134,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:43,Integrability,depend,dependency,43,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:71,Modifiability,plugin,plugins,71,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952:53,Deployability,install,install,53,"About sofa-spm, it is possible to submit new plugins install recipes by making PR to https://github.com/SofaDefrost/SPM-RECIPES",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952:45,Modifiability,plugin,plugins,45,"About sofa-spm, it is possible to submit new plugins install recipes by making PR to https://github.com/SofaDefrost/SPM-RECIPES",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952
https://github.com/sofa-framework/sofa/pull/1122#issuecomment-543611884:52,Availability,avail,available,52,I close this PR because this is duplicating feature available in SPM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-543611884
https://github.com/sofa-framework/sofa/pull/1125#issuecomment-523348395:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1125#issuecomment-523348395
https://github.com/sofa-framework/sofa/pull/1126#issuecomment-523489916:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1126#issuecomment-523489916
https://github.com/sofa-framework/sofa/pull/1127#issuecomment-525818506:23,Testability,test,tests,23,The changes broke some tests (forcing the strict case).; I will have a look at it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1127#issuecomment-525818506
https://github.com/sofa-framework/sofa/pull/1127#issuecomment-527072311:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1127#issuecomment-527072311
https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929:318,Modifiability,variab,variable,318,"@JeremieA ; Hi Jeremie, as you might know, I am currently working on multithreaded simulation with SOFA.; In this PR, I propose to remove the checkValidStorage() test in Node::ExecuteVisitor function because it prevents some parallel execution and also suggest to remove the thread specific declaration for ExecParams variable.; Do you see a reason to keep the ExecParams specific for each thread?; I especially noticed accessing the thread local memory of a thread A from the thread B with these different ExecParams is significantly slow (~20%) . ; Your opinion would be valuable for us. Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929
https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929:420,Security,access,accessing,420,"@JeremieA ; Hi Jeremie, as you might know, I am currently working on multithreaded simulation with SOFA.; In this PR, I propose to remove the checkValidStorage() test in Node::ExecuteVisitor function because it prevents some parallel execution and also suggest to remove the thread specific declaration for ExecParams variable.; Do you see a reason to keep the ExecParams specific for each thread?; I especially noticed accessing the thread local memory of a thread A from the thread B with these different ExecParams is significantly slow (~20%) . ; Your opinion would be valuable for us. Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929
https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929:162,Testability,test,test,162,"@JeremieA ; Hi Jeremie, as you might know, I am currently working on multithreaded simulation with SOFA.; In this PR, I propose to remove the checkValidStorage() test in Node::ExecuteVisitor function because it prevents some parallel execution and also suggest to remove the thread specific declaration for ExecParams variable.; Do you see a reason to keep the ExecParams specific for each thread?; I especially noticed accessing the thread local memory of a thread A from the thread B with these different ExecParams is significantly slow (~20%) . ; Your opinion would be valuable for us. Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-525810260:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-525810260
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834:170,Deployability,update,updateIfDirty,170,"it's not compiling on the CI due to incompatibility of gcc 5.4 with C++17; otherwise I would appreciate a feedback from @epernod and @marques-bruno, especially about the updateIfDirty (and no clean dirty) thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834:106,Usability,feedback,feedback,106,"it's not compiling on the CI due to incompatibility of gcc 5.4 with C++17; otherwise I would appreciate a feedback from @epernod and @marques-bruno, especially about the updateIfDirty (and no clean dirty) thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526584524:75,Deployability,update,update,75,With the example used in PR #1093; here is the time of the visitor when no update is done. (green line); ![image](https://user-images.githubusercontent.com/21199245/64020981-3dac8d80-cb33-11e9-9707-5c4b09500975.png),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526584524
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526584524:92,Energy Efficiency,green,green,92,With the example used in PR #1093; here is the time of the visitor when no update is done. (green line); ![image](https://user-images.githubusercontent.com/21199245/64020981-3dac8d80-cb33-11e9-9707-5c4b09500975.png),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526584524
https://github.com/sofa-framework/sofa/pull/1132#issuecomment-526574191:36,Testability,test,tested,36,yes because the QWT option is never tested I guess (but SofaGuiQt is),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1132#issuecomment-526574191
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:246,Modifiability,plugin,plugins,246,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:46,Testability,test,test,46,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:78,Usability,clear,clearly,78,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-527897456:155,Modifiability,variab,variable,155,"Hi @maddin200; after discussion with the SOFA reviewers, we would be really glad if you could propose the change you suggested (removing the uninitialized variable ind and make the for loop over [i] instead of [ind]).; Could you contribute your proposal?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-527897456
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-529117142:43,Deployability,patch,patch,43,Would be grant if somebody can provide the patch - may be there are more things to change. Thanks for asking.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-529117142
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-529835435:194,Deployability,patch,patch,194,"Hi @maddin200 I would suggest that you try to do it since it is a good first issue to experience the contributing steps:; - creating a fork of SOFA; - create a specific branch, implementing the patch; - pull-requesting this branch in master of sofa-framework. If more things are to change we would assist you, but please, don't worry about making mistakes while contributing!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-529835435
https://github.com/sofa-framework/sofa/issues/1134#issuecomment-527578294:60,Deployability,patch,patch,60,"Hi , ; would be fine with me if your guys could provide the patch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1134#issuecomment-527578294
https://github.com/sofa-framework/sofa/issues/1134#issuecomment-527683573:191,Deployability,upgrade,upgrade,191,"Hi @maddin200, thank you for the bug report. ; I checked on Qwt website: https://sourceforge.net/p/qwt/news/; and this has been fixed in new version of the lib. I just pushed the PR #1136 to upgrade the version of Qwt. Could you have a try?; Otherwise the patch you are asking for is here:; https://github.com/sofa-framework/sofa/pull/1136/files#diff-4f1be8e83adaddcbf84145436b7d5b80",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1134#issuecomment-527683573
https://github.com/sofa-framework/sofa/issues/1134#issuecomment-527683573:256,Deployability,patch,patch,256,"Hi @maddin200, thank you for the bug report. ; I checked on Qwt website: https://sourceforge.net/p/qwt/news/; and this has been fixed in new version of the lib. I just pushed the PR #1136 to upgrade the version of Qwt. Could you have a try?; Otherwise the patch you are asking for is here:; https://github.com/sofa-framework/sofa/pull/1136/files#diff-4f1be8e83adaddcbf84145436b7d5b80",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1134#issuecomment-527683573
https://github.com/sofa-framework/sofa/issues/1134#issuecomment-529117207:15,Deployability,patch,patch,15,Thanks for the patch.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1134#issuecomment-529117207
https://github.com/sofa-framework/sofa/pull/1136#issuecomment-527796786:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1136#issuecomment-527796786
https://github.com/sofa-framework/sofa/pull/1136#issuecomment-528468238:22,Availability,avail,available,22,Hi @maddin200 are you available to review this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1136#issuecomment-528468238
https://github.com/sofa-framework/sofa/pull/1137#issuecomment-529345427:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1137#issuecomment-529345427
https://github.com/sofa-framework/sofa/pull/1139#issuecomment-528832117:329,Modifiability,inherit,inheritance,329,"Because it is creating a new type, and we will break instancing templated class like Mapping and so on. If you do MyMapping<Vec3, ExtVec3> it will complain that there is no BaseMapping<Vec3, ExtVec3> and so on. (basically).; I remember asking people in a weekly meeting, and we agreed it was better to do a typedef instead of an inheritance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1139#issuecomment-528832117
https://github.com/sofa-framework/sofa/pull/1145#issuecomment-531935932:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-531935932
https://github.com/sofa-framework/sofa/pull/1145#issuecomment-537057560:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-537057560
https://github.com/sofa-framework/sofa/pull/1145#issuecomment-542787267:19,Testability,test,test,19,let's wait for the test / scene to see if it generate any warning,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-542787267
https://github.com/sofa-framework/sofa/pull/1145#issuecomment-543905626:7,Availability,avail,available,7,anyone available for a merge?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-543905626
https://github.com/sofa-framework/sofa/pull/1146#issuecomment-532596369:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1146#issuecomment-532596369
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:849,Deployability,integrat,integrations,849,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:3262,Deployability,update,update,3262,"if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads would now share the same mode. But as ExecMode was only ever used for KAAPI support (now removed), it is possible to decide to remove this as well without losing much.; 7. As a final point, one alternative fix (that I would personally prefer, but I am no longer involved directly so it is not up to me) would be to redesign this such that checkValidStorage() is no longer needed. The core issue is more related to the multithread TaskScheduler, where if a MechanicalParams (or another child of ExecParams) is copied from one thread to another as part of a Task, we can have functions that are called with the wrong ""storage"" pointer belonging to the calling thread. This is a very bad situation because the other thread might have moved on to other codes that changed the values, and more importantly ExecParams::defaultInstance() method used in many placed would see a different set of values. Currently this is fixed manually by calling mparams.update() at the beginning of the Task, but this is not always done, hence the check in the visitors as many Sofa computations end up using visitors somewhere. But if that could be the responsibility of the Task/TaskScheduler, they we could remove this check. This could be done for example by adjusting the ExecParams handling in a way that guarantees that inter-thread copies are by value of the storage (i.e. the value of ExecMode/.. but excluding threadID) instead of by reference, and known to the scheduler so that the parameters are correctly copied in the thread executing each runTask() without relying on manual updates. I hope this helps,. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:3883,Deployability,update,updates,3883,"if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads would now share the same mode. But as ExecMode was only ever used for KAAPI support (now removed), it is possible to decide to remove this as well without losing much.; 7. As a final point, one alternative fix (that I would personally prefer, but I am no longer involved directly so it is not up to me) would be to redesign this such that checkValidStorage() is no longer needed. The core issue is more related to the multithread TaskScheduler, where if a MechanicalParams (or another child of ExecParams) is copied from one thread to another as part of a Task, we can have functions that are called with the wrong ""storage"" pointer belonging to the calling thread. This is a very bad situation because the other thread might have moved on to other codes that changed the values, and more importantly ExecParams::defaultInstance() method used in many placed would see a different set of values. Currently this is fixed manually by calling mparams.update() at the beginning of the Task, but this is not always done, hence the check in the visitors as many Sofa computations end up using visitors somewhere. But if that could be the responsibility of the Task/TaskScheduler, they we could remove this check. This could be done for example by adjusting the ExecParams handling in a way that guarantees that inter-thread copies are by value of the storage (i.e. the value of ExecMode/.. but excluding threadID) instead of by reference, and known to the scheduler so that the parameters are correctly copied in the thread executing each runTask() without relying on manual updates. I hope this helps,. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:3764,Energy Efficiency,schedul,scheduler,3764,"if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads would now share the same mode. But as ExecMode was only ever used for KAAPI support (now removed), it is possible to decide to remove this as well without losing much.; 7. As a final point, one alternative fix (that I would personally prefer, but I am no longer involved directly so it is not up to me) would be to redesign this such that checkValidStorage() is no longer needed. The core issue is more related to the multithread TaskScheduler, where if a MechanicalParams (or another child of ExecParams) is copied from one thread to another as part of a Task, we can have functions that are called with the wrong ""storage"" pointer belonging to the calling thread. This is a very bad situation because the other thread might have moved on to other codes that changed the values, and more importantly ExecParams::defaultInstance() method used in many placed would see a different set of values. Currently this is fixed manually by calling mparams.update() at the beginning of the Task, but this is not always done, hence the check in the visitors as many Sofa computations end up using visitors somewhere. But if that could be the responsibility of the Task/TaskScheduler, they we could remove this check. This could be done for example by adjusting the ExecParams handling in a way that guarantees that inter-thread copies are by value of the storage (i.e. the value of ExecMode/.. but excluding threadID) instead of by reference, and known to the scheduler so that the parameters are correctly copied in the thread executing each runTask() without relying on manual updates. I hope this helps,. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:265,Integrability,depend,dependent,265,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:849,Integrability,integrat,integrations,849,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:1477,Integrability,depend,depends,1477," (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads would now share the same mode. But as ExecMode was only ever used for KAAPI support (now removed), it is possible to decide to remove this as well without losing much.; 7. As a final p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:106,Performance,perform,performance,106,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:1165,Performance,perform,performance,1165,"not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to ch",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:1282,Performance,perform,performances,1282,"instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads wo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:1331,Performance,optimiz,optimization,1331,"instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads wo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:1847,Safety,safe,safe,1847,"ual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecParams::defaultInstance(), with the guarantee that this will always provide exactly the correct values (as there is a single copy per thread). For instance, this could allow to change the ExecMode in order to trace/profile a specific part of the computation. Without TLS, all calls done in parallel in other threads would now share the same mode. But as ExecMode was only ever used for KAAPI support (now removed), it is possible to decide to remove this as well without losing much.; 7. As a final point, one alternative fix (that I would personally prefer, but I am no longer involved directly so it is not up to me) would be to redesign this such that checkValidStorage() is no longer needed. The core issue is more related to the multithread TaskScheduler, where if a MechanicalParams (or another child of ExecParams) is copied from one thread to another as part of a Task, we can have functions that are called with the wrong ""storage"" pointer belonging to the ca",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:543,Security,access,access,543,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:947,Security,expose,exposed,947,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:333,Testability,test,test,333,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:1046,Testability,test,tested,1046,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748
https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989:187,Deployability,pipeline,pipeline,187,Thank you @fangzhouzisb for raising this again and your investigation.; Unfortunately I didn't had time to work on that issue specifically and I'm not expert of the constraint resolution pipeline. But I'm in a middle of a deadline involving the Geomagic plugin and I also found several wrong behavior that I'm trying to fix. ; I'm going to try your fix and merge all that in one PR. maybe @hugtalbot could you poke someone expert in FreeMotion and constraint pipeline to see if this fix will have side effects?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989
https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989:459,Deployability,pipeline,pipeline,459,Thank you @fangzhouzisb for raising this again and your investigation.; Unfortunately I didn't had time to work on that issue specifically and I'm not expert of the constraint resolution pipeline. But I'm in a middle of a deadline involving the Geomagic plugin and I also found several wrong behavior that I'm trying to fix. ; I'm going to try your fix and merge all that in one PR. maybe @hugtalbot could you poke someone expert in FreeMotion and constraint pipeline to see if this fix will have side effects?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989
https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989:254,Modifiability,plugin,plugin,254,Thank you @fangzhouzisb for raising this again and your investigation.; Unfortunately I didn't had time to work on that issue specifically and I'm not expert of the constraint resolution pipeline. But I'm in a middle of a deadline involving the Geomagic plugin and I also found several wrong behavior that I'm trying to fix. ; I'm going to try your fix and merge all that in one PR. maybe @hugtalbot could you poke someone expert in FreeMotion and constraint pipeline to see if this fix will have side effects?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989
https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533220233:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533220233
https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683:17,Testability,test,tests,17,[with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683
https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683:36,Testability,test,tests,36,[with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-533445096:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-533445096
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:0,Availability,Error,Error,0,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:629,Availability,ERROR,ERROR,629,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:689,Deployability,update,update,689,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:233,Integrability,message,message,233,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:13,Testability,test,test,13,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149
https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:337,Testability,test,tests,337,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149
https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533527847:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533527847
https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533996059:22,Testability,test,tests,22,"there are 2 more unit tests failing on windows only, could you check if relevant to this PR or not. thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533996059
https://github.com/sofa-framework/sofa/pull/1152#issuecomment-533864860:0,Availability,Error,Error,0,Error from CI : ; ```; Binding_Data.cpp:866:35: error: cannot convert ‘const string {aka const std::__cxx11::basic_string<char>}’ to ‘const char*’ in initialization; const char *h = data->getHelp() ;; ```. Could you also give explanation for this change @marques-bruno ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1152#issuecomment-533864860
https://github.com/sofa-framework/sofa/pull/1152#issuecomment-533864860:48,Availability,error,error,48,Error from CI : ; ```; Binding_Data.cpp:866:35: error: cannot convert ‘const string {aka const std::__cxx11::basic_string<char>}’ to ‘const char*’ in initialization; const char *h = data->getHelp() ;; ```. Could you also give explanation for this change @marques-bruno ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1152#issuecomment-533864860
https://github.com/sofa-framework/sofa/pull/1152#issuecomment-534458342:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1152#issuecomment-534458342
https://github.com/sofa-framework/sofa/pull/1152#issuecomment-540459919:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1152#issuecomment-540459919
https://github.com/sofa-framework/sofa/pull/1152#issuecomment-542114514:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1152#issuecomment-542114514
https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462:132,Deployability,install,install,132,![image](https://acegif.com/wp-content/gifs/non-25.gif). file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-install/plugins/SceneCreator/lib.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462
https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462:140,Modifiability,plugin,plugins,140,![image](https://acegif.com/wp-content/gifs/non-25.gif). file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-install/plugins/SceneCreator/lib.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462
https://github.com/sofa-framework/sofa/pull/1155#issuecomment-535568313:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1155#issuecomment-535568313
https://github.com/sofa-framework/sofa/pull/1156#issuecomment-537053450:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1156#issuecomment-537053450
https://github.com/sofa-framework/sofa/pull/1159#issuecomment-539457727:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1159#issuecomment-539457727
https://github.com/sofa-framework/sofa/pull/1160#issuecomment-537109500:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1160#issuecomment-537109500
https://github.com/sofa-framework/sofa/pull/1160#issuecomment-541583797:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1160#issuecomment-541583797
https://github.com/sofa-framework/sofa/pull/1162#issuecomment-536200068:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1162#issuecomment-536200068
https://github.com/sofa-framework/sofa/pull/1163#issuecomment-536195449:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1163#issuecomment-536195449
https://github.com/sofa-framework/sofa/pull/1163#issuecomment-536195449:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1163#issuecomment-536195449
https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537466462:300,Modifiability,plugin,plugins,300,"Hello @epernod,. For the future: ; Shouldn't we move the SpatialGridContainer into SofaVolumetricData ? In addition there is in SofaEulerianFluid some dedicated data structure for storing the quantities. ; Merging al that could be intereting. . Shouldn't we merge everything into a single SofaFluids plugins ? . EDIT: And the MarchingCube code is also duplicated in several places; EDIT2: And the FastMarching algorithm either :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537466462
https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470:140,Modifiability,plugin,plugin,140,"@damienmarchal yes totally agree on the different points. But as you say: ""for the future"".; I will move one step at a time, by making this plugin works again first. But indeed it is a topic I wanted to speak about but the meeting was already too long.; It would be good to either merge some plugins or have some high level option in the cmake of sofa, for example, SOFA_HAVE_FLUID which will add, Sph, Eulerian, Volumetric rendering plugins etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470
https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470:292,Modifiability,plugin,plugins,292,"@damienmarchal yes totally agree on the different points. But as you say: ""for the future"".; I will move one step at a time, by making this plugin works again first. But indeed it is a topic I wanted to speak about but the meeting was already too long.; It would be good to either merge some plugins or have some high level option in the cmake of sofa, for example, SOFA_HAVE_FLUID which will add, Sph, Eulerian, Volumetric rendering plugins etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470
https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470:434,Modifiability,plugin,plugins,434,"@damienmarchal yes totally agree on the different points. But as you say: ""for the future"".; I will move one step at a time, by making this plugin works again first. But indeed it is a topic I wanted to speak about but the meeting was already too long.; It would be good to either merge some plugins or have some high level option in the cmake of sofa, for example, SOFA_HAVE_FLUID which will add, Sph, Eulerian, Volumetric rendering plugins etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470
https://github.com/sofa-framework/sofa/pull/1165#issuecomment-538688300:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-538688300
https://github.com/sofa-framework/sofa/pull/1165#issuecomment-538688300:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-538688300
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-537630335:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-537630335
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-538281996:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-538281996
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-538281996:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-538281996
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-538376783:4,Energy Efficiency,green,green,4,"all green guys, ready for review",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-538376783
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539882908:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539882908
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539882908:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539882908
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483:45,Testability,test,tests,45,[ci-build][force-full-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483
https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483:63,Testability,test,tests,63,[ci-build][force-full-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483
https://github.com/sofa-framework/sofa/pull/1168#issuecomment-539103791:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1168#issuecomment-539103791
https://github.com/sofa-framework/sofa/pull/1168#issuecomment-539103791:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1168#issuecomment-539103791
https://github.com/sofa-framework/sofa/pull/1172#issuecomment-538688280:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1172#issuecomment-538688280
https://github.com/sofa-framework/sofa/pull/1172#issuecomment-538688280:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1172#issuecomment-538688280
https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751:47,Modifiability,plugin,plugin,47,"A small TLDR of the discussion at [SofaDefrost/plugin.SofaPython3#110](https://github.com/SofaDefrost/plugin.SofaPython3/pull/110):. In python, it is frequent to use a controller component to drive the simulation. Sometime, the controller needs to pre-compute some stuff before the simulation begins. To do so, it might need the data of the components found in the scene. We didn't have any event until this PR that makes the controller (or any component) know when the scene as finished its initialization process (when the init function has been called in every components of the scene graph). With this PR, we can now listen to the **onSimulationInitStart** and **onSimulationInitDone** events, which will be triggered by the simulation before and after the call to the init visitor of the scene graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751
https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751:102,Modifiability,plugin,plugin,102,"A small TLDR of the discussion at [SofaDefrost/plugin.SofaPython3#110](https://github.com/SofaDefrost/plugin.SofaPython3/pull/110):. In python, it is frequent to use a controller component to drive the simulation. Sometime, the controller needs to pre-compute some stuff before the simulation begins. To do so, it might need the data of the components found in the scene. We didn't have any event until this PR that makes the controller (or any component) know when the scene as finished its initialization process (when the init function has been called in every components of the scene graph). With this PR, we can now listen to the **onSimulationInitStart** and **onSimulationInitDone** events, which will be triggered by the simulation before and after the call to the init visitor of the scene graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751
https://github.com/sofa-framework/sofa/pull/1173#issuecomment-539883068:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-539883068
https://github.com/sofa-framework/sofa/pull/1173#issuecomment-539883068:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-539883068
https://github.com/sofa-framework/sofa/pull/1174#issuecomment-539879728:21,Testability,test,test,21,I don't know if this test has ever been working properly...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1174#issuecomment-539879728
https://github.com/sofa-framework/sofa/pull/1175#issuecomment-539446978:99,Availability,avail,available,99,"Within recent version of Eigen installed on most OS, there is already a cmake find_package(Eigen3) available. By create a FindEigen3.cmake you will override this. I've seen a couple of projects dealing with this kind of problem with, for example:. SofaKernel/cmake/Modules/**FindEigen3Sofa**.cmake:; ```; # try to find ""FindEigen3.cmake"" from system Eigen; find_package(Eigen3) . if (not Eigen3); # do your thing here; else(); # use system Eigen3; endif(); ```. CMakeLists.txt; `find_package(Eigen3Sofa)`. pybind11 do this for example with find_package(PythonNew) which point to their PythonNew.cmake which trigger a system find_package(Python). Maybe it could be a solution for us?. Edit: Sorry I'm polluting this fast-merge PR for that, we can discuss this elsewhere ;-D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1175#issuecomment-539446978
https://github.com/sofa-framework/sofa/pull/1175#issuecomment-539446978:31,Deployability,install,installed,31,"Within recent version of Eigen installed on most OS, there is already a cmake find_package(Eigen3) available. By create a FindEigen3.cmake you will override this. I've seen a couple of projects dealing with this kind of problem with, for example:. SofaKernel/cmake/Modules/**FindEigen3Sofa**.cmake:; ```; # try to find ""FindEigen3.cmake"" from system Eigen; find_package(Eigen3) . if (not Eigen3); # do your thing here; else(); # use system Eigen3; endif(); ```. CMakeLists.txt; `find_package(Eigen3Sofa)`. pybind11 do this for example with find_package(PythonNew) which point to their PythonNew.cmake which trigger a system find_package(Python). Maybe it could be a solution for us?. Edit: Sorry I'm polluting this fast-merge PR for that, we can discuss this elsewhere ;-D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1175#issuecomment-539446978
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540041015:1160,Deployability,install,installs,1160,"> The question is: does [VideoRecorderFFMPEG need FFMPEG_exec](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/framework/sofa/helper/CMakeLists.txt#L308-L311)?. Yes it does, because, watch out.... [SofaKernel/framework/sofa/helper/gl/VideoRecorderFFMPEG.cpp](https://github.com/sofa-framework/sofa/blob/ef4114de87ccb97ad6792f553419644b5e77eb98/SofaKernel/framework/sofa/helper/gl/VideoRecorderFFMPEG.cpp#L97); ```; std::stringstream ss;; ss << FFMPEG_EXEC_FILE; << "" -r "" << m_framerate; << "" -f rawvideo -pix_fmt rgba ""; << "" -s "" << m_ffmpegWidth << ""x"" << m_ffmpegHeight; << "" -i - -threads 0 -y""; << "" -preset fast ""; << "" -pix_fmt "" << codec // yuv420p "" // "" yuv444p ""; << "" -crf 17 ""; << "" -vf vflip ""; << ""\"""" << m_filename << ""\""""; // @TODO C++14 : replace with std::quoted; ```. Yes, `FFMPEG_EXEC_FILE` is hard-coded and defined by . `add_definitions( ""-DFFMPEG_EXEC_FILE=\""${FFMPEG_EXEC_FILE}\"""" )` in [findFFMPEG_exec.cmake](https://github.com/sofa-framework/sofa/blob/ef4114de87ccb97ad6792f553419644b5e77eb98/cmake/Modules/FindFFMPEG_exec.cmake#L18). Which means that don't you ever package Sofa with FFMPEG support. If the user who installs your package has its ffmpeg elsewhere, everything will collapse.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540041015
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862:176,Deployability,install,installing,176,"Ok, very nasty...; So I agree with your PR, we should not impose the `find_package(FFMPEG_exec)` to dependencies.; But it is not enough. We should clean this hardcoded path by installing the executable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862:100,Integrability,depend,dependencies,100,"Ok, very nasty...; So I agree with your PR, we should not impose the `find_package(FFMPEG_exec)` to dependencies.; But it is not enough. We should clean this hardcoded path by installing the executable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540442502:130,Deployability,update,update,130,"I just replaced the nasty `add_definitions( ""-DFFMPEG_EXEC_FILE=\""${FFMPEG_EXEC_FILE}\"""" )` by a dynamic `.ini` file. ; Could you update your review @fredroy ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540442502
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199:144,Usability,simpl,simply,144,"To be honest, I don't think this INI file should be in the Sofa API, but more on the application side (GUI, python or whatever). The API should simply be giving the FFMPEG path by the application.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519:696,Availability,down,downloaded,696,"Hey @guparan, sorry for the delay. It looks much better now. The only thing that bugs me is, why make the ffmpeg option dependant on compilation checks if only the ffmpeg executable is needed. I would remove completely the compilation checks for ffmpeg, and always show the option in the GUI, with a textbox to specify the ffmpeg path. If no path are specified, check the INI file if it has one, if not then gray-out the options for ffmpeg output. If it is a valid path (checked during runtime), then save that path in the INI file. I think this would make much more sense and would not restrict the user if he have ffmpeg somewhere on his computer that was not found during compilation or if he downloaded a compiled version of Sofa with ffmpeg support but his ffmpeg path doesn't match the one used for compilation. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519:120,Integrability,depend,dependant,120,"Hey @guparan, sorry for the delay. It looks much better now. The only thing that bugs me is, why make the ffmpeg option dependant on compilation checks if only the ffmpeg executable is needed. I would remove completely the compilation checks for ffmpeg, and always show the option in the GUI, with a textbox to specify the ffmpeg path. If no path are specified, check the INI file if it has one, if not then gray-out the options for ffmpeg output. If it is a valid path (checked during runtime), then save that path in the INI file. I think this would make much more sense and would not restrict the user if he have ffmpeg somewhere on his computer that was not found during compilation or if he downloaded a compiled version of Sofa with ffmpeg support but his ffmpeg path doesn't match the one used for compilation. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-632717414:37,Modifiability,plugin,plugin,37,"Hi guys, This PR breaks the headless plugin, at least the version I am using. @jnbrunet or @guparan if one of you have time to explain me more on monday. Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-632717414
https://github.com/sofa-framework/sofa/pull/1179#issuecomment-540234499:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1179#issuecomment-540234499
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:195,Deployability,install,installing,195,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:378,Deployability,install,install,378,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:184,Usability,simpl,simpler,184,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540491073:99,Deployability,install,installing,99,"Okay, I guess we will also need to change SofaSimulationCommon and others since right now they are installing into the package SofaSimulation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540491073
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837:579,Deployability,install,install,579,"That's were it goes non-logical...; Historically, in SOFA we have:; ```; SofaFramework package; SofaCore: SofaKernel/framework/sofa/core; SofaDefaultType: SofaKernel/framework/sofa/defaulttype; SofaHelper: SofaKernel/framework/sofa/helper; SofaSimulationCore: SofaKernel/framework/sofa/simulation; SofaSimulation package; SofaSimulationCommon: SofaKernel/modules/SofaSimulation/SofaSimulationCommon; SofaSimulationGraph: SofaKernel/modules/SofaSimulation/SofaSimulationGraph; SofaSimulationTree: SofaKernel/modules/SofaSimulation/SofaSimulationTree; ```. So by just changing the install dir of SofaSimulationCore we will retrieve consistency between install architecture and CMake packages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837:650,Deployability,install,install,650,"That's were it goes non-logical...; Historically, in SOFA we have:; ```; SofaFramework package; SofaCore: SofaKernel/framework/sofa/core; SofaDefaultType: SofaKernel/framework/sofa/defaulttype; SofaHelper: SofaKernel/framework/sofa/helper; SofaSimulationCore: SofaKernel/framework/sofa/simulation; SofaSimulation package; SofaSimulationCommon: SofaKernel/modules/SofaSimulation/SofaSimulationCommon; SofaSimulationGraph: SofaKernel/modules/SofaSimulation/SofaSimulationGraph; SofaSimulationTree: SofaKernel/modules/SofaSimulation/SofaSimulationTree; ```. So by just changing the install dir of SofaSimulationCore we will retrieve consistency between install architecture and CMake packages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837:24,Testability,log,logical,24,"That's were it goes non-logical...; Historically, in SOFA we have:; ```; SofaFramework package; SofaCore: SofaKernel/framework/sofa/core; SofaDefaultType: SofaKernel/framework/sofa/defaulttype; SofaHelper: SofaKernel/framework/sofa/helper; SofaSimulationCore: SofaKernel/framework/sofa/simulation; SofaSimulation package; SofaSimulationCommon: SofaKernel/modules/SofaSimulation/SofaSimulationCommon; SofaSimulationGraph: SofaKernel/modules/SofaSimulation/SofaSimulationGraph; SofaSimulationTree: SofaKernel/modules/SofaSimulation/SofaSimulationTree; ```. So by just changing the install dir of SofaSimulationCore we will retrieve consistency between install architecture and CMake packages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:548,Availability,error,error,548,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:472,Deployability,install,install,472,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:22,Modifiability,config,config,22,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:571,Modifiability,config,config,571,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:639,Modifiability,config,config,639,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:70,Usability,simpl,simply,70,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540955130:96,Modifiability,config,config,96,How can you do `#include <sofa/simulation/simulationcore.h>` and not `#include <sofa/simulation/config.h>` ? ; Both files are in the same place :confused:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540955130
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343:21,Deployability,install,install,21,"Except it is not !. `install/include/SofaSimulation/sofa/simulation/config.h`; `install/include/SofaFramework/sofa/simulation/simulationcore.h`. **SofaSimulation** include path is only included if I link against **SofaSimulationCommon**, **SofaSimulationTree** or **SofaSimulationGraph**. Here I don't need those targets, but only the **SofaSimulationCore** target.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343:80,Deployability,install,install,80,"Except it is not !. `install/include/SofaSimulation/sofa/simulation/config.h`; `install/include/SofaFramework/sofa/simulation/simulationcore.h`. **SofaSimulation** include path is only included if I link against **SofaSimulationCommon**, **SofaSimulationTree** or **SofaSimulationGraph**. Here I don't need those targets, but only the **SofaSimulationCore** target.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343:68,Modifiability,config,config,68,"Except it is not !. `install/include/SofaSimulation/sofa/simulation/config.h`; `install/include/SofaFramework/sofa/simulation/simulationcore.h`. **SofaSimulation** include path is only included if I link against **SofaSimulationCommon**, **SofaSimulationTree** or **SofaSimulationGraph**. Here I don't need those targets, but only the **SofaSimulationCore** target.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:4,Modifiability,config,config,4,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:18,Usability,clear,clearly,18,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903
https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540589933:12,Performance,load,load,12,Bon pour le load onDemand je vote pour toi au SofaAward :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540589933
https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456:31,Deployability,patch,patch,31,non je refuse un award pour un patch sur un design de qtwidget aussi compliqué! Alors qu'il y a tellement moyen de faire simple avec qt....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456
https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456:121,Usability,simpl,simple,121,non je refuse un award pour un patch sur un design de qtwidget aussi compliqué! Alors qu'il y a tellement moyen de faire simple avec qt....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456
https://github.com/sofa-framework/sofa/pull/1182#issuecomment-542127827:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1182#issuecomment-542127827
https://github.com/sofa-framework/sofa/pull/1183#issuecomment-541686333:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-541686333
https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168:43,Usability,clear,clearer,43,Review done. Amazing PR it will be so much clearer in a few months !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168
https://github.com/sofa-framework/sofa/pull/1185#issuecomment-541198303:31,Testability,test,tests,31,FYI : no need to run the scene tests etc.; It works!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1185#issuecomment-541198303
https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542372722:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542372722
https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542637878:41,Modifiability,plugin,plugin,41,"@guparan @hugtalbot could you check this plugin is compiled on the CI, I have a doubt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542637878
https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542682672:32,Testability,test,tests,32,"Done, let's [ci-build][with-all-tests] again :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542682672
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546874968:195,Integrability,depend,dependency,195,"@guparan here it is... Not 100% sure of what I did.; Is it:; ```if(SOFAGUIQT_HAVE_NODEEDITOR)``` or ```if (SOFAGUIQT_ENABLE_NODEGRAPH)``` ?. just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546874968
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:405,Integrability,depend,dependency,405,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:1053,Integrability,depend,dependency,1053,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:1006,Modifiability,config,configure,1006,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:1278,Modifiability,plugin,plugins,1278,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:1294,Modifiability,plugin,pluginized,1294,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:674,Performance,load,loaded,674,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310
https://github.com/sofa-framework/sofa/pull/1187#issuecomment-547040556:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-547040556
https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542678895:109,Modifiability,plugin,plugin,109,"sorry @simogasp this is coming from my recent changes and went through our CI.; I did more change in the SPH plugin, do not hesitate to contact me if this impact your project.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542678895
https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542688805:87,Modifiability,plugin,plugin,87,Not sure I have your fix in mine. Lets wait for CI compilation.; Are you using the Sph plugin right now? I would be interested to see some use case.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542688805
https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542690339:175,Integrability,depend,dependency,175,"yes you have it, it's here; https://github.com/sofa-framework/sofa/pull/1186/files#diff-5a95499e7294bee7079356a42a6b2b00R196; No, I'm not using it directly, it is needed as a dependency by another one",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542690339
https://github.com/sofa-framework/sofa/pull/1189#issuecomment-545341375:64,Modifiability,plugin,plugin,64,Hey @simogasp thank you again for your contribution on the HAPI plugin! Do not hesitate to join us in Paris to present your work related to simulations at the [SOFA Week 2019](https://www.sofa-framework.org/sofa-events/sofa-week-2019/#Symposium%20Program)! Even more if you have some haptics demo!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1189#issuecomment-545341375
https://github.com/sofa-framework/sofa/pull/1190#issuecomment-544722443:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1190#issuecomment-544722443
https://github.com/sofa-framework/sofa/pull/1192#issuecomment-544416773:264,Deployability,Update,Update,264,"It was supposed to be supported from VS2015: https://docs.microsoft.com/en-us/cpp/build/reference/zc-cplusplus?view=vs-2015 . But according to https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/ , it seems to be enabled only from VS2017 Update 15.7 . For now, this option is not needed while the C++ standard is still c++11. ; And the moment we enable c++17 will be the same time we will abandon VS2015, so everything should be OK (in theory)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1192#issuecomment-544416773
https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544728687:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544728687
https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544885851:18,Testability,test,tested,18,"Very cool, I just tested it. ; - But I see it is not possible to put black background?; - The fluid is not visible in front of another VisualModel, is it due to ZBuffer?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544885851
https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544897706:214,Deployability,upgrade,upgrade,214,"Those issues could be fixed when the OglFluidModel will be a VisualManager or something like that, to do multitexturing with the current FrameBuffer in Sofa.; This rendering is mostly a Proof of Concept so I shall upgrade it when I have time in the future ;); Or if it is deemed necessary...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544897706
https://github.com/sofa-framework/sofa/pull/1194#issuecomment-546053902:121,Testability,Test,Tested,121,![ezgif com-crop](https://user-images.githubusercontent.com/21199245/67515939-f4466d80-f69f-11e9-8db7-ef8bd1fb6deb.gif). Tested with the last changes in ParticleSource and ParticleSink ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-546053902
https://github.com/sofa-framework/sofa/pull/1195#issuecomment-546291767:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1195#issuecomment-546291767
https://github.com/sofa-framework/sofa/pull/1195#issuecomment-548098271:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1195#issuecomment-548098271
https://github.com/sofa-framework/sofa/pull/1196#issuecomment-546723187:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1196#issuecomment-546723187
https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547321288:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547321288
https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547827389:17,Availability,error,error,17,"Weird to get the error:; _No topology component found at path: _ with no path given, it should say : _No path to topology given in the scene_. Strange that AddingTetra2TriangleProcess AddingTrianglesProcess return:; _Object must have a Triangular Set Topology._",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547827389
https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547830019:92,Testability,log,logic,92,"Hmmm ok, the Add*.scn are created with empty topo and then topology is created.; Warning is logic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547830019
https://github.com/sofa-framework/sofa/pull/1201#issuecomment-547387463:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1201#issuecomment-547387463
https://github.com/sofa-framework/sofa/pull/1202#issuecomment-547387569:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1202#issuecomment-547387569
https://github.com/sofa-framework/sofa/pull/1203#issuecomment-552047154:36,Testability,test,tested,36,"@damienmarchal @courtecuisse I have tested the mapping and done the change requested but I'm not able to push the change in mimesis-inria/sofa , any idea why?; If complicated I can recreate a PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1203#issuecomment-552047154
https://github.com/sofa-framework/sofa/pull/1203#issuecomment-553487062:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1203#issuecomment-553487062
https://github.com/sofa-framework/sofa/pull/1208#issuecomment-549386435:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1208#issuecomment-549386435
https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407:108,Availability,error,error,108,"@hugtalbot CI is not happy with this one... ; ``` ; applications/plugins/CGALPlugin/CylinderMesh.inl:503:6: error: ; ‘void cgal::CylinderMesh<DataTypes>::draw() ; [with DataTypes = sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>]’ ; marked ‘override’, but does not override; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407
https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407:65,Modifiability,plugin,plugins,65,"@hugtalbot CI is not happy with this one... ; ``` ; applications/plugins/CGALPlugin/CylinderMesh.inl:503:6: error: ; ‘void cgal::CylinderMesh<DataTypes>::draw() ; [with DataTypes = sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>]’ ; marked ‘override’, but does not override; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407
https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549863740:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549863740
https://github.com/sofa-framework/sofa/pull/1211#issuecomment-553468035:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1211#issuecomment-553468035
https://github.com/sofa-framework/sofa/pull/1212#issuecomment-551909670:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1212#issuecomment-551909670
https://github.com/sofa-framework/sofa/pull/1212#issuecomment-551921002:7,Testability,test,tested,7,"I have tested both mass on a triangulation and tetra mesh, seems to work. Let's see the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1212#issuecomment-551921002
https://github.com/sofa-framework/sofa/issues/1213#issuecomment-553807961:125,Testability,test,test,125,"Hi,. yes you are right, thanks!; Do you have a small use case where you could see that bug? (it could be helpful to create a test). Could you push the fix in a PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1213#issuecomment-553807961
https://github.com/sofa-framework/sofa/pull/1215#issuecomment-555408021:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1215#issuecomment-555408021
https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674:156,Deployability,update,update,156,"@fjourdes if you have 2 sec, could you please give your feedback on the 2 lines change in the FreeAnimationLoop. ; It was done to fix a problem of position update between the mapped tool and the geomagic driver. See #1148 ; I don't have the knowledge to say if it is a real fix or if it will bring side effects. ; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674
https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674:56,Usability,feedback,feedback,56,"@fjourdes if you have 2 sec, could you please give your feedback on the 2 lines change in the FreeAnimationLoop. ; It was done to fix a problem of position update between the mapped tool and the geomagic driver. See #1148 ; I don't have the knowledge to say if it is a real fix or if it will bring side effects. ; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674
https://github.com/sofa-framework/sofa/pull/1217#issuecomment-672729743:13,Deployability,update,update,13,Closed as no update regarding https://github.com/sofa-framework/sofa/issues/1148; The fix concerning #1213 has been merged with #1247,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-672729743
https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:37,Availability,error,error,37,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417
https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:68,Modifiability,plugin,plugin,68,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417
https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:118,Usability,simpl,simple,118,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417
https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498:83,Deployability,install,install,83,SofaDistanceGrid has been pluginized and (seems that) is now well exported at sofa install.; Closing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498
https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498:26,Modifiability,plugin,pluginized,26,SofaDistanceGrid has been pluginized and (seems that) is now well exported at sofa install.; Closing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498
https://github.com/sofa-framework/sofa/issues/1220#issuecomment-777505294:130,Modifiability,plugin,plugin,130,Clarifying this issue:; The goal is to port the previous SofaPython scenes (from the deprecated Python2) to the newer SofaPython3 plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-777505294
https://github.com/sofa-framework/sofa/issues/1220#issuecomment-851365305:28,Modifiability,plugin,plugin,28,Are you targeting a special plugin? Since we really don't have python scenes in Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-851365305
https://github.com/sofa-framework/sofa/issues/1220#issuecomment-972595503:64,Modifiability,plugin,plugins,64,The ones remaining seem to be located in image and registration plugins (examples).; That's it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-972595503
https://github.com/sofa-framework/sofa/issues/1220#issuecomment-2439637936:38,Modifiability,plugin,plugin,38,Not relevant anymore with SofaPython3 plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-2439637936
https://github.com/sofa-framework/sofa/pull/1221#issuecomment-557156852:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1221#issuecomment-557156852
https://github.com/sofa-framework/sofa/pull/1222#issuecomment-557539311:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1222#issuecomment-557539311
https://github.com/sofa-framework/sofa/pull/1223#issuecomment-557588797:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1223#issuecomment-557588797
https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580:73,Usability,clear,clearly,73,"Hey @hugtalbot , the double flag was on purpose actually.. :D; The PR is clearly WIP (NOT to be merged) but I wanted it to be discussed today at the SOFA meeting",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421:61,Availability,robust,robustness,61,"Hey @marques-bruno !. I think this will help us a lot to add robustness to our components. With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?. Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?. Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421:284,Usability,simpl,simply,284,"Hey @marques-bruno !. I think this will help us a lot to add robustness to our components. With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?. Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?. Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194:69,Availability,robust,robustness,69,"> Hey @marques-bruno !; > ; > I think this will help us a lot to add robustness to our components.; > ; > With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?; > ; > Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; > `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?; > ; > Thanks !. Thanks @jnbrunet for your review, I'll do the changes tomorrow.; Regarding using BaseLink instead of BaseDdgLink, BaseLinks are actually used internally in DDGNodes (for input/outputs). So they have their use. What I want to replace with DDGLink, are the SingleLink entries in sofa components.; We'll discuss it at the sofa meeting if you're there tomorrow ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194:305,Usability,simpl,simply,305,"> Hey @marques-bruno !; > ; > I think this will help us a lot to add robustness to our components.; > ; > With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?; > ; > Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; > `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?; > ; > Thanks !. Thanks @jnbrunet for your review, I'll do the changes tomorrow.; Regarding using BaseLink instead of BaseDdgLink, BaseLinks are actually used internally in DDGNodes (for input/outputs). So they have their use. What I want to replace with DDGLink, are the SingleLink entries in sofa components.; We'll discuss it at the sofa meeting if you're there tomorrow ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194
https://github.com/sofa-framework/sofa/pull/1228#issuecomment-561085994:397,Deployability,update,update,397,"Hey @marques-bruno,. I think the idea was to have a collection of ""DDGLinks"" seen as one data. For example:. ```; // Inputs; DDGLink<MechanicalObject> d_mechanical_object; // One mechanical object; DDGLinks<BaseForceField> d_forcefields; // Multiple forcefields acting on the MO; DDGLink<BaseMass> d_mass; // One mass acting on the MO. // Outputs; Data<VecCoord> d_solution;; ```. Here we want to update the solution vector if either the MO, one of the forcefields, or the mass has changed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1228#issuecomment-561085994
https://github.com/sofa-framework/sofa/pull/1228#issuecomment-561199342:435,Deployability,update,update,435,"> Hey @marques-bruno,; > ; > I think the idea was to have a collection of ""DDGLinks"" seen as one data. For example:; > ; > ```; > // Inputs; > DDGLink<MechanicalObject> d_mechanical_object; // One mechanical object; > DDGLinks<BaseForceField> d_forcefields; // Multiple forcefields acting on the MO; > DDGLink<BaseMass> d_mass; // One mass acting on the MO; > ; > // Outputs; > Data<VecCoord> d_solution;; > ```; > ; > Here we want to update the solution vector if either the MO, one of the forcefields, or the mass has changed. Hi @jnbrunet, that's another issue right? This PR proposes to get some sort of ""bidirectionality"" in the Data Links without breaking the ""acyclicity"" of the DDG.; I guess it would not be a problem to overload DDGLink<T> to handle a vector of links of the same type instead of a single link of type T. Just to understand a bit better: your example code would be the kind of code one would find in an ode solver for instance, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1228#issuecomment-561199342
https://github.com/sofa-framework/sofa/pull/1230#issuecomment-561571583:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1230#issuecomment-561571583
https://github.com/sofa-framework/sofa/pull/1230#issuecomment-564526435:148,Deployability,patch,patch,148,"Seems this PR doesn't change the algorithm, so should be non breaking. It is however weird that the pointer get changed by the solver... While this patch will work around this, I would be quite interested to know why it was happening in the first place. @fredroy , could you just change `WriteAccessor` to `WriteOnlyAccessor` so that we do not trigger a data update every time (we are overriding every entries of the position vector).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1230#issuecomment-564526435
https://github.com/sofa-framework/sofa/pull/1230#issuecomment-564526435:359,Deployability,update,update,359,"Seems this PR doesn't change the algorithm, so should be non breaking. It is however weird that the pointer get changed by the solver... While this patch will work around this, I would be quite interested to know why it was happening in the first place. @fredroy , could you just change `WriteAccessor` to `WriteOnlyAccessor` so that we do not trigger a data update every time (we are overriding every entries of the position vector).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1230#issuecomment-564526435
https://github.com/sofa-framework/sofa/pull/1231#issuecomment-561542438:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1231#issuecomment-561542438
https://github.com/sofa-framework/sofa/pull/1232#issuecomment-564107760:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1232#issuecomment-564107760
https://github.com/sofa-framework/sofa/pull/1233#issuecomment-564107590:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1233#issuecomment-564107590
https://github.com/sofa-framework/sofa/pull/1234#issuecomment-564707361:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1234#issuecomment-564707361
https://github.com/sofa-framework/sofa/issues/1235#issuecomment-777513013:64,Deployability,release,release,64,"Cannot reproduce this issue (or seems to be fixed in the latest release) on Windows 10/MSVC207/Cmake 3.15.; Closing the issue, and if it is still happening, feel free to reopen it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1235#issuecomment-777513013
https://github.com/sofa-framework/sofa/pull/1236#issuecomment-568517448:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1236#issuecomment-568517448
https://github.com/sofa-framework/sofa/pull/1237#issuecomment-568517868:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1237#issuecomment-568517868
https://github.com/sofa-framework/sofa/pull/1237#issuecomment-576051589:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1237#issuecomment-576051589
https://github.com/sofa-framework/sofa/pull/1238#issuecomment-571955672:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1238#issuecomment-571955672
https://github.com/sofa-framework/sofa/pull/1238#issuecomment-571978585:63,Testability,test,tests,63,@hugtalbot Why do you want to remove DataTrackerEngine and its tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1238#issuecomment-571978585
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572043454:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572043454
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:8,Availability,error,error,8,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:73,Availability,Error,Error,73,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:260,Deployability,configurat,configuration,260,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:381,Deployability,install,installation,381,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:260,Modifiability,config,configuration,260,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:359,Modifiability,config,config,359,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709
https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572973788:4,Availability,error,error,4,The error is gone apparently :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572973788
https://github.com/sofa-framework/sofa/pull/1241#issuecomment-573033457:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1241#issuecomment-573033457
https://github.com/sofa-framework/sofa/pull/1241#issuecomment-573061786:124,Testability,test,tests,124,This PR will finally add warning due to the CollisionModel.; Another PR will come to fix them in SOFA.; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1241#issuecomment-573061786
https://github.com/sofa-framework/sofa/pull/1241#issuecomment-583044529:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1241#issuecomment-583044529
https://github.com/sofa-framework/sofa/pull/1242#issuecomment-575726986:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1242#issuecomment-575726986
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-576737073:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-576737073
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750:212,Availability,error,error,212,the ```return``` was added intentionally in a previous PR where mechanism to force the initialization of topology container have been added to avoid time bomb. ; Removing the return means you don't bother of the error sent just before and you continue to fill or not fill data and you will get a crash later in another component due to inconsistent topology buffers access. Can you check how many errors you get in your example without this return?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750:397,Availability,error,errors,397,the ```return``` was added intentionally in a previous PR where mechanism to force the initialization of topology container have been added to avoid time bomb. ; Removing the return means you don't bother of the error sent just before and you continue to fill or not fill data and you will get a crash later in another component due to inconsistent topology buffers access. Can you check how many errors you get in your example without this return?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750:143,Safety,avoid,avoid,143,the ```return``` was added intentionally in a previous PR where mechanism to force the initialization of topology container have been added to avoid time bomb. ; Removing the return means you don't bother of the error sent just before and you continue to fill or not fill data and you will get a crash later in another component due to inconsistent topology buffers access. Can you check how many errors you get in your example without this return?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750:366,Security,access,access,366,the ```return``` was added intentionally in a previous PR where mechanism to force the initialization of topology container have been added to avoid time bomb. ; Removing the return means you don't bother of the error sent just before and you continue to fill or not fill data and you will get a crash later in another component due to inconsistent topology buffers access. Can you check how many errors you get in your example without this return?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577243956:68,Availability,failure,failure,68,"You can actually refer to the issue #1243 ; The result is that this failure, leads to no creation of the edgesInTriangle structure, ie no TriangleSetAlgorithms, ie crashes in some components relying on it in the scene (MeshMatrixMass, DampingForceField etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577243956
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657:454,Availability,error,error,454,"The creation of TriangleSetAlgorithms is not linked to the creation of triangleSetTopologyContainer arrays like edgesInTriangle. what can be possible is that MeshMatrixMass access to edgesInTriangle which is not filled due to the return.; But the return is reached because the input topology is not consistent. And the choice was done to break instead of simulating potential wrong behavior. My question was, in your PR, by removing the return, how many error is dumped if you test #1243 ?. each error means an inconsistency between the Triangle, the Edge and the EdgeInTriangles structure so potentially if FEM is using edges and mass the EdgeInTriangles, you won't fill the matrix in the same order.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657:496,Availability,error,error,496,"The creation of TriangleSetAlgorithms is not linked to the creation of triangleSetTopologyContainer arrays like edgesInTriangle. what can be possible is that MeshMatrixMass access to edgesInTriangle which is not filled due to the return.; But the return is reached because the input topology is not consistent. And the choice was done to break instead of simulating potential wrong behavior. My question was, in your PR, by removing the return, how many error is dumped if you test #1243 ?. each error means an inconsistency between the Triangle, the Edge and the EdgeInTriangles structure so potentially if FEM is using edges and mass the EdgeInTriangles, you won't fill the matrix in the same order.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657:173,Security,access,access,173,"The creation of TriangleSetAlgorithms is not linked to the creation of triangleSetTopologyContainer arrays like edgesInTriangle. what can be possible is that MeshMatrixMass access to edgesInTriangle which is not filled due to the return.; But the return is reached because the input topology is not consistent. And the choice was done to break instead of simulating potential wrong behavior. My question was, in your PR, by removing the return, how many error is dumped if you test #1243 ?. each error means an inconsistency between the Triangle, the Edge and the EdgeInTriangles structure so potentially if FEM is using edges and mass the EdgeInTriangles, you won't fill the matrix in the same order.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657
https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657:477,Testability,test,test,477,"The creation of TriangleSetAlgorithms is not linked to the creation of triangleSetTopologyContainer arrays like edgesInTriangle. what can be possible is that MeshMatrixMass access to edgesInTriangle which is not filled due to the return.; But the return is reached because the input topology is not consistent. And the choice was done to break instead of simulating potential wrong behavior. My question was, in your PR, by removing the return, how many error is dumped if you test #1243 ?. each error means an inconsistency between the Triangle, the Edge and the EdgeInTriangles structure so potentially if FEM is using edges and mass the EdgeInTriangles, you won't fill the matrix in the same order.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657
https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707:122,Usability,clear,clear,122,I've also mark const the source arguments from both `baseVector2MultiVector` and `multiVectorPeqBaseVector` so that it is clear that the source will never be changed by those two functions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-584161233:14,Deployability,upgrade,upgrade,14,"No, we should upgrade the CI to support this PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-584161233
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-585110991:0,Deployability,Update,Update,0,Update documentation (supported version) : see [pages](https://www.sofa-framework.org/community/doc/getting-started/build/linux/); and make sure that the CI is following these (Guillaume will work on this),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-585110991
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-591330540:13,Modifiability,plugin,plugins,13,FYI external plugins can already be compiled with compilation mode c++17,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-591330540
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:173,Deployability,integrat,integrate,173,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:173,Integrability,integrat,integrate,173,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:59,Modifiability,plugin,plugins,59,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-597202358:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-597202358
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:46,Availability,error,error,46,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:146,Availability,error,error,146,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:375,Deployability,release,release,375,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:72,Modifiability,plugin,plugins,72,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:6,Usability,clear,clear,6,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598146790:26,Availability,error,error,26,"Hi, ; What about the link error to ARTrack on windows ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598146790
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458:161,Availability,error,error,161,I can't push on your branch. Did you forbid it?; Removing `using namespace std;` in applications/plugins/ARTrack/extlibs/ARTrackLib/mainTracker.cpp does fix the error on Windows.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458:97,Modifiability,plugin,plugins,97,I can't push on your branch. Did you forbid it?; Removing `using namespace std;` in applications/plugins/ARTrack/extlibs/ARTrackLib/mainTracker.cpp does fix the error on Windows.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-601193731:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-601193731
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-601193731:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-601193731
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-603353767:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-603353767
https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518:0,Modifiability,Refactor,Refactoring,0,"Refactoring to avoid confusion is good.; Another PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray); Issue created: #1255",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518
https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518:58,Modifiability,refactor,refactor,58,"Refactoring to avoid confusion is good.; Another PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray); Issue created: #1255",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518
https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518:187,Modifiability,refactor,refactoring,187,"Refactoring to avoid confusion is good.; Another PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray); Issue created: #1255",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518
https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518:15,Safety,avoid,avoid,15,"Refactoring to avoid confusion is good.; Another PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray); Issue created: #1255",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518
https://github.com/sofa-framework/sofa/pull/1252#issuecomment-585127388:48,Performance,optimiz,optimized,48,Loop using the sin and cos in the loop could be optimized with buffer.; To improve when needed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1252#issuecomment-585127388
https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384:81,Availability,error,error,81,`SofaKernel\modules\SofaHelper\..\SofaDefaultType\src\sofa/defaulttype/Ray.h(6): error C2429: language feature 'nested-namespace-definition' requires compiler flag '/std:c++17'`. Dependency on #1249 @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384
https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384:179,Integrability,Depend,Dependency,179,`SofaKernel\modules\SofaHelper\..\SofaDefaultType\src\sofa/defaulttype/Ray.h(6): error C2429: language feature 'nested-namespace-definition' requires compiler flag '/std:c++17'`. Dependency on #1249 @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384
https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311:20,Usability,feedback,feedback,20,Why there is not CI feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311
https://github.com/sofa-framework/sofa/pull/1257#issuecomment-587364476:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1257#issuecomment-587364476
https://github.com/sofa-framework/sofa/pull/1258#issuecomment-590798175:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-590798175
https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740:133,Usability,feedback,feedback,133,Do you have questions guys? From the last SOFA meeting report: . #1258 [SofaKernel] Who hates warnings?; → still to review: wait for feedback from jnbrunet regarding the copy of constructor. @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740
https://github.com/sofa-framework/sofa/pull/1258#issuecomment-594836562:87,Availability,avail,available,87,sorry for not replying before @jnbrunet ; yes we had some small questions. Will you be available tomorrow morning 10am (the sofa-dev meeting takes exceptionally place tomorrow)?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-594836562
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590580366:147,Availability,avail,available,147,"Hi remi,. Thanks for the PR. ; Would it be possible to have that the top of the collision model hierarchy so that the activation filter feature is available for every model instead of Sphere ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590580366
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590768065:33,Availability,avail,available,33,"Actually this feature is already available for PointModel and LineModel. That's why I just added it in the same way for SphereModel.; But you're right, we can try to add it at the top of collision model hierarchy.; One thing is that sometimes when a controller is heritating from this ""PrimitiveActiver"" we want to implement different behaviours for several type of primitive; I guess that with the generalization approach we would have to implement a controller for each behaviour (not that bad), or you can help me understand how we could avoid doing so ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590768065
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590768065:541,Safety,avoid,avoid,541,"Actually this feature is already available for PointModel and LineModel. That's why I just added it in the same way for SphereModel.; But you're right, we can try to add it at the top of collision model hierarchy.; One thing is that sometimes when a controller is heritating from this ""PrimitiveActiver"" we want to implement different behaviours for several type of primitive; I guess that with the generalization approach we would have to implement a controller for each behaviour (not that bad), or you can help me understand how we could avoid doing so ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590768065
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590795653:61,Modifiability,inherit,inherite,61,"Hi, can you explain me in which case you need a contoller to inherite from this class to active or not the sphereModel compare to having a controller that search for the sphereModel and change the Data<bool> activate ; is it to be able to activate only a set of spheres?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590795653
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-592598855:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-592598855
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:173,Integrability,interface,interface,173,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:268,Usability,guid,guidelines,268,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851
https://github.com/sofa-framework/sofa/pull/1260#issuecomment-590566305:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-590566305
https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591341951:38,Testability,test,tests,38,@epernod should add to non regression tests,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591341951
https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591342521:40,Testability,test,tests,40,> @epernod should add to non regression tests. https://github.com/sofa-framework/regression; Let me know if you do it yourself or if you need my input (I have time... this holiday week),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591342521
https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593405839:253,Security,access,accessed,253,"@jnbrunet residual norm and other convergence information should rather be managed by the LinearSolver than the ODESolver.; For matrices, I think what would make sense is what you started to look into: having the matrix as a ""outout"" Data that could be accessed and analyzed outside the class. What's your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593405839
https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593412986:583,Security,access,accessed,583,"> @jnbrunet residual norm and other convergence information should rather be managed by the LinearSolver than the ODESolver. I'll have to disagree on this one. We should be able to get information on the convergence of the system independently of the linear solver used (not all linear solver output convergence information). Not only that, but we should do this in a similar output format for all ODESolver (see the static ODE solver for an example). > For matrices, I think what would make sense is what you started to look into: having the matrix as a ""outout"" Data that could be accessed and analyzed outside the class.; > ; > What's your opinion ?. To get vectors or matrices of the system, we should, for now, use a dedicated ""export"" component that fills whole matrices and vectors (such as Eigen Sparse or Dense, easily compatible with python bindings) from mechanical visitors (see [MechanicalOperations::multiVector2BaseVector](https://github.com/sofa-framework/sofa/blob/c4ac86dec978681044322078a6dce077a02b41e7/SofaKernel/modules/SofaSimulationCore/src/sofa/simulation/MechanicalOperations.h#L138) for an example). We should not, however, print vectors and matrices directly to the standard output (stdout) of the program.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593412986
https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593967820:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593967820
https://github.com/sofa-framework/sofa/issues/1262#issuecomment-598365408:1409,Safety,detect,detection,1409,"In SOFA, when a collision occurs between a pair of objects, some SOFA components are dynamically added into the scene graph. For example, if these two objects respectively carry 3 collision models (Point,Triangle,Line), you'll obtain 4 instances of UnilateralInteractionConstraint components (Point-Point, Point-Line, Point-Triangle, Triangle-Line, Line-Line). And the mechanical values such as the position of the contact points will be scattered in different MechanicalObjects which are maintained by contact mappers. This design raises a limitation of the contact handling in SOFA when using constraints: Adding a constraint on an individual contact point works without any problem. But when you want to apply a single constraint over a set of contact points, things become more complicated. For instance, imagine you want to apply a uniform pressure onto all the contact points as a single constraint (one Lagrange multipler). In this case you would like to have all these points into a single MechanicalObject, right? Unfortunately thoses are stored inside separated MechanicalObjects because you use several collision models... You can still manually use a SubsetMultiMapping to gather all the points into a single MechanicalObject, but this one will have to be regenerated at each time-step, which may be costly. Hence, I think it will be nice to have a clean way to gather some narrow-phase collision detection outputs, to overpass this limitation. For me, gathering contact points into a single MechanicalObject by default seems to be the right approach. In other words, some contact mappers could share a single MechanicalObject to ouputs the contact point data. What do you think about that?. Hope this comment will be considered at the next STC ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1262#issuecomment-598365408
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:57,Performance,optimiz,optimization,57,"I think the `CGLinearSolver` has a good example on such ""optimization"". Let's look at the following un-optimized code:. **Version 1**; ```; x.peq(p,alpha); // x = x + alpha p; r.peq(q,-alpha); // r = r - alpha q; ```. which can be seen as:. ```; VOp op1 = ""x = x + alpha p"";; Visitor(op1);. VOp op2 = ""r = r - alpha q"";; Visitor(op2);; ```. and its optimized version:. **Version 2**; ```; VMultiOp ops;; ops.resize(2);; ops[0].first = (MultiVecDerivId)x;; ops[0].second.push_back(std::make_pair((MultiVecDerivId)x,1.0));; ops[0].second.push_back(std::make_pair((MultiVecDerivId)p,alpha));; ops[1].first = (MultiVecDerivId)r;; ops[1].second.push_back(std::make_pair((MultiVecDerivId)r,1.0));; ops[1].second.push_back(std::make_pair((MultiVecDerivId)q,-alpha));; this->executeVisitor(simulation::MechanicalVMultiOpVisitor(params, ops));; ```. which can be seen as:. ```; VMultiOp ops;; ops[0] = ""x = x + alpha p""; ops[1] = ""r = r - alpha q""; Visitor(ops);; ```. Finally, imagine we have the following scenario:. ```; CGLinearSolver; |; +-------------+--------------; | |; +--------+-----------+ +----------+---------+; | MO1 | | MO2 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xn]| |x: [x0, x1, ..., xm]|; |p: [p0, p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:103,Performance,optimiz,optimized,103,"I think the `CGLinearSolver` has a good example on such ""optimization"". Let's look at the following un-optimized code:. **Version 1**; ```; x.peq(p,alpha); // x = x + alpha p; r.peq(q,-alpha); // r = r - alpha q; ```. which can be seen as:. ```; VOp op1 = ""x = x + alpha p"";; Visitor(op1);. VOp op2 = ""r = r - alpha q"";; Visitor(op2);; ```. and its optimized version:. **Version 2**; ```; VMultiOp ops;; ops.resize(2);; ops[0].first = (MultiVecDerivId)x;; ops[0].second.push_back(std::make_pair((MultiVecDerivId)x,1.0));; ops[0].second.push_back(std::make_pair((MultiVecDerivId)p,alpha));; ops[1].first = (MultiVecDerivId)r;; ops[1].second.push_back(std::make_pair((MultiVecDerivId)r,1.0));; ops[1].second.push_back(std::make_pair((MultiVecDerivId)q,-alpha));; this->executeVisitor(simulation::MechanicalVMultiOpVisitor(params, ops));; ```. which can be seen as:. ```; VMultiOp ops;; ops[0] = ""x = x + alpha p""; ops[1] = ""r = r - alpha q""; Visitor(ops);; ```. Finally, imagine we have the following scenario:. ```; CGLinearSolver; |; +-------------+--------------; | |; +--------+-----------+ +----------+---------+; | MO1 | | MO2 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xn]| |x: [x0, x1, ..., xm]|; |p: [p0, p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:349,Performance,optimiz,optimized,349,"I think the `CGLinearSolver` has a good example on such ""optimization"". Let's look at the following un-optimized code:. **Version 1**; ```; x.peq(p,alpha); // x = x + alpha p; r.peq(q,-alpha); // r = r - alpha q; ```. which can be seen as:. ```; VOp op1 = ""x = x + alpha p"";; Visitor(op1);. VOp op2 = ""r = r - alpha q"";; Visitor(op2);; ```. and its optimized version:. **Version 2**; ```; VMultiOp ops;; ops.resize(2);; ops[0].first = (MultiVecDerivId)x;; ops[0].second.push_back(std::make_pair((MultiVecDerivId)x,1.0));; ops[0].second.push_back(std::make_pair((MultiVecDerivId)p,alpha));; ops[1].first = (MultiVecDerivId)r;; ops[1].second.push_back(std::make_pair((MultiVecDerivId)r,1.0));; ops[1].second.push_back(std::make_pair((MultiVecDerivId)q,-alpha));; this->executeVisitor(simulation::MechanicalVMultiOpVisitor(params, ops));; ```. which can be seen as:. ```; VMultiOp ops;; ops[0] = ""x = x + alpha p""; ops[1] = ""r = r - alpha q""; Visitor(ops);; ```. Finally, imagine we have the following scenario:. ```; CGLinearSolver; |; +-------------+--------------; | |; +--------+-----------+ +----------+---------+; | MO1 | | MO2 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xn]| |x: [x0, x1, ..., xm]|; |p: [p0, p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2478,Performance,optimiz,optimized,2478," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2573,Performance,optimiz,optimize,2573," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:3029,Performance,optimiz,optimized,3029," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:3183,Performance,optimiz,optimization,3183," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2921,Testability,benchmark,benchmark,2921," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2723,Usability,simpl,simply,2723," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026:358,Modifiability,refactor,refactoring,358,"Hi Hugo,. Thanks for the question and @jnbrunet for the very interesting answer. . To me #define activated feature must always be removed in any case. So the question should be,; do we transform that into a runtime feature that is activated by a data<boolean> or to directly remove it. If version ""optimized"" is always faster we could probably keep it...but refactoring the API using c++11&c++17 so it look shorter and nicer. . I just notice this ugly #ifdef DISPLAY_TIME in CGLinearSolver......cleaning... cleaning...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026:298,Performance,optimiz,optimized,298,"Hi Hugo,. Thanks for the question and @jnbrunet for the very interesting answer. . To me #define activated feature must always be removed in any case. So the question should be,; do we transform that into a runtime feature that is activated by a data<boolean> or to directly remove it. If version ""optimized"" is always faster we could probably keep it...but refactoring the API using c++11&c++17 so it look shorter and nicer. . I just notice this ugly #ifdef DISPLAY_TIME in CGLinearSolver......cleaning... cleaning...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:69,Testability,test,tests,69,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:37,Usability,feedback,feedback,37,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317
https://github.com/sofa-framework/sofa/pull/1268#issuecomment-598224082:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1268#issuecomment-598224082
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-600533257:3,Security,validat,validated,3,Ok validated by @epernod @fredroy ; @JeremieA @fjourdes do not hesitate to let us know your opinion on this. We keep the PR in quarantine for 7 days. + wait for c++17 compilation,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-600533257
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486:237,Availability,down,downstream,237,"There are too many changes for me to review this PR ;); But from a quick glance, personally I would have preferred to keep the optional ExecParams* parameter in the Data* APIs even if it is unused now. This would remove frustrations for downstream / plugin codes that could be broken by this change. One option would be to add them back with a [[deprecated]] attribute.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486:250,Modifiability,plugin,plugin,250,"There are too many changes for me to review this PR ;); But from a quick glance, personally I would have preferred to keep the optional ExecParams* parameter in the Data* APIs even if it is unused now. This would remove frustrations for downstream / plugin codes that could be broken by this change. One option would be to add them back with a [[deprecated]] attribute.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481:15,Usability,feedback,feedback,15,Thanks for the feedback...actually this is what is done:; https://github.com/sofa-framework/sofa/pull/1269/files#diff-5b014f309073c89dc456a09768028992. But having hunderds of thousand of warnings for using deprecation method give me the envy to fix all the visible calling points.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221:22,Testability,test,tests,22,[ci-build][with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221:46,Testability,test,tests,46,[ci-build][with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604891598:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604891598
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-607109002:29,Testability,test,tests,29,Ci is running : wait for the tests.; If successful --> ready,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-607109002
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-607522141:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-607522141
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-610036837:22,Testability,test,test,22,"Hi all, . The failing test in Compliant seems to be broken by design. The object holds in SPTR pointers are reused (dof1, node1) while there is dangling WriteAccessor still pointing to them...leading to a crash in the WriteAccessor's destructor. So it is just ""normal"" for the tests to crash and it a good news it does now so we can fix it in a future PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-610036837
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-610036837:277,Testability,test,tests,277,"Hi all, . The failing test in Compliant seems to be broken by design. The object holds in SPTR pointers are reused (dof1, node1) while there is dangling WriteAccessor still pointing to them...leading to a crash in the WriteAccessor's destructor. So it is just ""normal"" for the tests to crash and it a good news it does now so we can fix it in a future PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-610036837
https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601113212:37,Availability,error,error,37,"Merged too quickly, there was a link error on Windows :disappointed:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601113212
https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601275605:121,Integrability,depend,dependencies,121,> @jnbrunet Why did you set SofaModeler library SHARED instead of STATIC?. @guparan Because static libraries bring their dependencies with them. This is especially bad in this case since the SofaModeler (the exec) is the only one depending on SofaModeler (the lib). This was the main cause of having to find tinyxml in every project that links against Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601275605
https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601275605:230,Integrability,depend,depending,230,> @jnbrunet Why did you set SofaModeler library SHARED instead of STATIC?. @guparan Because static libraries bring their dependencies with them. This is especially bad in this case since the SofaModeler (the exec) is the only one depending on SofaModeler (the lib). This was the main cause of having to find tinyxml in every project that links against Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601275605
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-600535230:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-600535230
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604355702:116,Modifiability,Plugin,PluginManager,116,Segfault happens during SofaHelper_test exit and is somehow related to PluginManager_test. ; I tried to catch it in PluginManager::TearDown() without success.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604355702
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:456,Availability,ERROR,ERROR,456,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:567,Availability,error,error,567,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:646,Availability,ERROR,ERROR,646,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1200,Availability,down,down,1200,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1296,Availability,fault,fault,1296,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:391,Modifiability,Plugin,PluginManager,391,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:413,Modifiability,plugin,plugin,413,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:654,Modifiability,Plugin,PluginManager,654,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:857,Modifiability,Plugin,PluginManager,857,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:944,Modifiability,Plugin,PluginManager,944,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:103,Performance,load,loadTestPluginByPath,103,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:171,Performance,load,loadTestPluginByPath,171,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:358,Performance,load,loadTestPluginByPath,358,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:406,Performance,Load,Loaded,406,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1069,Performance,load,loadTestPluginByPath,1069,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:138,Testability,Test,Test,138,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:216,Testability,test,test,216,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:228,Testability,test,test,228,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:260,Testability,test,test,260,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:301,Testability,test,test,301,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:436,Testability,Test,TestPlugin,436,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:769,Testability,Test,TestPlugin,769,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:840,Testability,Test,TestPlugin,840,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:997,Testability,Test,TestPlugin,997,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1114,Testability,test,test,1114,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1178,Testability,test,test,1178,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1221,Testability,test,test,1221,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1233,Testability,test,test,1233,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:1276,Testability,test,test,1276,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435
https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604360809:32,Testability,log,log,32,"same here.; When looking at the log, the trace gives:; ```; ObjectFactory::ClassEntry::~ClassEntry(); _M_erase()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604360809
https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603749909:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603749909
https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893:158,Deployability,release,release,158,"Something is broken here. See tests results: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1275/CI_CONFIG=ubuntu_gcc-7,CI_PLUGINS=options,CI_TYPE=release/3/testReport/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893
https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893:30,Testability,test,tests,30,"Something is broken here. See tests results: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1275/CI_CONFIG=ubuntu_gcc-7,CI_PLUGINS=options,CI_TYPE=release/3/testReport/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893
https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893:168,Testability,test,testReport,168,"Something is broken here. See tests results: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1275/CI_CONFIG=ubuntu_gcc-7,CI_PLUGINS=options,CI_TYPE=release/3/testReport/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893
https://github.com/sofa-framework/sofa/pull/1275#issuecomment-606189457:0,Availability,Error,Errors,0,Errors are fixed. Ready to merge! :tada:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-606189457
https://github.com/sofa-framework/sofa/issues/1276#issuecomment-601107401:76,Testability,test,tests,76,"thanks for the quick reply @hugtalbot , I'll open a PR and add some regress tests as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1276#issuecomment-601107401
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:631,Deployability,update,update,631,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:1005,Deployability,update,updates,1005,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:162,Integrability,interface,interface,162,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:583,Safety,avoid,avoid,583,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:1065,Safety,avoid,avoid,1065,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:257,Usability,feedback,feedback,257,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:456,Availability,down,down,456,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:59,Deployability,update,update,59,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:623,Deployability,update,updateBoundingBoxVisitor,623,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:761,Deployability,update,update,761,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:797,Deployability,update,updateCallback,797,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:44,Integrability,depend,depends,44,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-630012571:4,Deployability,update,update,4,Any update on this? Could we revert https://github.com/sofa-framework/sofa/pull/1268 in the meantime?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-630012571
https://github.com/sofa-framework/sofa/pull/1278#issuecomment-603750083:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1278#issuecomment-603750083
https://github.com/sofa-framework/sofa/pull/1279#issuecomment-604645863:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1279#issuecomment-604645863
https://github.com/sofa-framework/sofa/pull/1281#issuecomment-604700099:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-604700099
https://github.com/sofa-framework/sofa/pull/1281#issuecomment-606811590:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-606811590
https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544:200,Deployability,integrat,integrate,200,"Minor remaining change use pre processor #if condition instead of #ifdef (since it allows to detect more various cases: is defined and true, defined and false or undefined); CGAL : remove changes and integrate changes from #1308; → back to wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544
https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544:200,Integrability,integrat,integrate,200,"Minor remaining change use pre processor #if condition instead of #ifdef (since it allows to detect more various cases: is defined and true, defined and false or undefined); CGAL : remove changes and integrate changes from #1308; → back to wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544
https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544:93,Safety,detect,detect,93,"Minor remaining change use pre processor #if condition instead of #ifdef (since it allows to detect more various cases: is defined and true, defined and false or undefined); CGAL : remove changes and integrate changes from #1308; → back to wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544
https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607692774:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607692774
https://github.com/sofa-framework/sofa/pull/1283#issuecomment-617672075:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283#issuecomment-617672075
https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623663671:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623663671
https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623663671:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623663671
https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623879938:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623879938
https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623879938:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283#issuecomment-623879938
https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480:1198,Availability,error,error,1198,"This won't be enough. All bindings made for SofaPython fail when building in C++17.; ```; [1208/2186] Building CXX object modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; FAILED: modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; < ... >; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.cpp:24:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.h:25:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonMacros.h:29:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonCommon.h:27:; In file included from /usr/include/python2.7/Python.h:88:; /usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```; See https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1284/CI_CONFIG=ubuntu_clang-6,CI_PLUGINS=options,CI_TYPE=release/2/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480
https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480:1452,Deployability,release,release,1452,"This won't be enough. All bindings made for SofaPython fail when building in C++17.; ```; [1208/2186] Building CXX object modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; FAILED: modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; < ... >; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.cpp:24:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.h:25:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonMacros.h:29:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonCommon.h:27:; In file included from /usr/include/python2.7/Python.h:88:; /usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```; See https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1284/CI_CONFIG=ubuntu_clang-6,CI_PLUGINS=options,CI_TYPE=release/2/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480
https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480:857,Modifiability,plugin,plugins,857,"This won't be enough. All bindings made for SofaPython fail when building in C++17.; ```; [1208/2186] Building CXX object modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; FAILED: modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; < ... >; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.cpp:24:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.h:25:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonMacros.h:29:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonCommon.h:27:; In file included from /usr/include/python2.7/Python.h:88:; /usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```; See https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1284/CI_CONFIG=ubuntu_clang-6,CI_PLUGINS=options,CI_TYPE=release/2/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480
https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480:1040,Modifiability,plugin,plugins,1040,"This won't be enough. All bindings made for SofaPython fail when building in C++17.; ```; [1208/2186] Building CXX object modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; FAILED: modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; < ... >; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.cpp:24:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.h:25:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonMacros.h:29:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonCommon.h:27:; In file included from /usr/include/python2.7/Python.h:88:; /usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```; See https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1284/CI_CONFIG=ubuntu_clang-6,CI_PLUGINS=options,CI_TYPE=release/2/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480
https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:104,Deployability,continuous,continuous,104,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906
https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:115,Deployability,integrat,integration,115,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906
https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:115,Integrability,integrat,integration,115,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906
https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:51,Modifiability,plugin,plugins,51,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-605446157:65,Modifiability,plugin,plugin,65,"Hi,; could you post what you wrote in the Cmakelists.txt of your plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-605446157
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:378,Deployability,install,install,378,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:496,Deployability,install,install,496,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:961,Deployability,install,installed,961,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:1050,Deployability,install,install,1050,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:1592,Usability,simpl,simplify,1592,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/pull/1289#issuecomment-604937066:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1289#issuecomment-604937066
https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764:65,Modifiability,plugin,plugin,65,"Hi @nawuxicaa ; Welcome on the SOFA github repository.; The CGAL plugin can (for now) only be built within SOFA, in other words, you have to clone SOFA (which includes the SOFA [CGAL plugin](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/CGALPlugin)), activate the CGAL cmake option and build the whole project. Hope this helps.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764
https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764:183,Modifiability,plugin,plugin,183,"Hi @nawuxicaa ; Welcome on the SOFA github repository.; The CGAL plugin can (for now) only be built within SOFA, in other words, you have to clone SOFA (which includes the SOFA [CGAL plugin](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/CGALPlugin)), activate the CGAL cmake option and build the whole project. Hope this helps.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764
https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764:255,Modifiability,plugin,plugins,255,"Hi @nawuxicaa ; Welcome on the SOFA github repository.; The CGAL plugin can (for now) only be built within SOFA, in other words, you have to clone SOFA (which includes the SOFA [CGAL plugin](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/CGALPlugin)), activate the CGAL cmake option and build the whole project. Hope this helps.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764
https://github.com/sofa-framework/sofa/pull/1291#issuecomment-605424696:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1291#issuecomment-605424696
https://github.com/sofa-framework/sofa/pull/1292#issuecomment-605131698:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1292#issuecomment-605131698
https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605432979:266,Integrability,message,message,266,"Hi @jjcasmar . MultiMapping need both an 'input' and 'output' data attributes pointing to valid mechanical objects. With your example:; `final.addObject(""CPFMapping"", template=""Vec3"", input=""path/to/mo1"", output=""path/to/mo2"" )`. We are working on better diagnostic message for such failed object creation, see #1266 and #1294",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605432979
https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605438196:62,Testability,test,test,62,"Hi. I completely thought it was fromModels and toModels. I'll test with input and output, thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605438196
https://github.com/sofa-framework/sofa/pull/1294#issuecomment-605486004:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1294#issuecomment-605486004
https://github.com/sofa-framework/sofa/pull/1294#issuecomment-606865059:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1294#issuecomment-606865059
https://github.com/sofa-framework/sofa/pull/1295#issuecomment-605497796:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1295#issuecomment-605497796
https://github.com/sofa-framework/sofa/pull/1295#issuecomment-605637090:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1295#issuecomment-605637090
https://github.com/sofa-framework/sofa/pull/1296#issuecomment-605665494:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1296#issuecomment-605665494
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605872827:102,Integrability,interface,interface,102,Just in case someone have doubts:. **BaseContext.cpp** (line 172); ```cpp; /// Mesh Topology (unified interface for both static and dynamic topologies); core::topology::BaseMeshTopology* BaseContext::getMeshTopology(SearchDirection dir) const; {; return this->get<sofa::core::topology::BaseMeshTopology>(dir);; }. core::topology::BaseMeshTopology* BaseContext::getMeshTopologyLink(SearchDirection dir) const; {; return this->get<sofa::core::topology::BaseMeshTopology>(dir);; } ; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605872827
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145:233,Usability,simpl,simply,233,"Hey @epernod ,. Look at both methods, they are exactly the same. In #744 , we are talking about how such methods should not be used, which I agree completely. But here, `getMeshTopologyLink` is not giving us an answer to this, it is simply an alias to `getMeshTopology`, which is quite confusing as we can find both of them in the source code, and it seems they are used for the same exact reason, find the first mesh topology in the current context (which is probably wrong since we can have more than one in the context).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605885366:439,Security,access,accessible,439,"yes, this is the work started in the other issue:. > 1. Depreciate all getXXXMeshTopology for 19.12; > 2. Use explicit SingleLink; > 3. if easy will see to automatically add a SingleLink each time a getXXXMeshTopology is used for the in-between period. 2 and 3 have been done in most components through several PR. 1. is a little late in the planning...; The idea was to keep GetMeshTopology for unset case but as a last solution, and not accessible through the API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605885366
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979:223,Usability,simpl,simply,223,"I understand completely. Here, we are not talking about bringing back `getMeshTopology`. We are saying that both `getMeshTopologyLink` and `getMeshTopology` are the same. Following #744, both should be removed. Here we are simply talking about removing the duplicated one, even if at some point it should be also be removed and replaced by either a link or a new **getTopologies()** (plural) method that makes it clear we can have more than one topology in the context.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979:413,Usability,clear,clear,413,"I understand completely. Here, we are not talking about bringing back `getMeshTopology`. We are saying that both `getMeshTopologyLink` and `getMeshTopology` are the same. Following #744, both should be removed. Here we are simply talking about removing the duplicated one, even if at some point it should be also be removed and replaced by either a link or a new **getTopologies()** (plural) method that makes it clear we can have more than one topology in the context.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582:148,Deployability,update,updated,148,"ok sorry, got it. Yes I have duplicated this method in #1223. In the idea of deleting both. The idea was to make a smooth transition period:; - All updated component use now a SingleLink to the topology they want (allowing multiple topologies in the same context) and if not set, use GetMeshTopologyLink() with a warning telling that the result is uncertain.; - Component still using the old method GetMeshTopology should have a deprecated method message in 19.12 before deletion in 20.06. I let that unfinished. ; So as you want either we put the deprecated message or we replace directly both methods by a new one like ""GetFirstEncounteredTopology"" inside a breaking PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582:447,Integrability,message,message,447,"ok sorry, got it. Yes I have duplicated this method in #1223. In the idea of deleting both. The idea was to make a smooth transition period:; - All updated component use now a SingleLink to the topology they want (allowing multiple topologies in the same context) and if not set, use GetMeshTopologyLink() with a warning telling that the result is uncertain.; - Component still using the old method GetMeshTopology should have a deprecated method message in 19.12 before deletion in 20.06. I let that unfinished. ; So as you want either we put the deprecated message or we replace directly both methods by a new one like ""GetFirstEncounteredTopology"" inside a breaking PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582:559,Integrability,message,message,559,"ok sorry, got it. Yes I have duplicated this method in #1223. In the idea of deleting both. The idea was to make a smooth transition period:; - All updated component use now a SingleLink to the topology they want (allowing multiple topologies in the same context) and if not set, use GetMeshTopologyLink() with a warning telling that the result is uncertain.; - Component still using the old method GetMeshTopology should have a deprecated method message in 19.12 before deletion in 20.06. I let that unfinished. ; So as you want either we put the deprecated message or we replace directly both methods by a new one like ""GetFirstEncounteredTopology"" inside a breaking PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582
https://github.com/sofa-framework/sofa/pull/1299#issuecomment-606890411:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1299#issuecomment-606890411
https://github.com/sofa-framework/sofa/pull/1299#issuecomment-607128752:14,Integrability,message,message,14,Add a warning message when used in scene without RequiredPlugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1299#issuecomment-607128752
https://github.com/sofa-framework/sofa/pull/1299#issuecomment-609465176:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1299#issuecomment-609465176
https://github.com/sofa-framework/sofa/pull/1299#issuecomment-617621892:43,Deployability,update,updated,43,This PR has been merged but status was not updated due to GitHub service degradation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1299#issuecomment-617621892
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606078012:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606078012
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606227220:5,Availability,error,errors,5,1974 errors .. ![](https://media2.giphy.com/media/p5JZ3sSPj8qY/giphy.gif),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606227220
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:84,Modifiability,plugin,plugins,84,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:123,Security,secur,security,123,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:64,Testability,test,tests,64,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607158413:22,Testability,test,tested,22,This should be really tested also with CUDA.; @guparan do you confirm that it is compiled and tested on CI ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607158413
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607158413:94,Testability,test,tested,94,This should be really tested also with CUDA.; @guparan do you confirm that it is compiled and tested on CI ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607158413
https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607207302:33,Testability,test,tested,33,"great so conclusion, it has been tested (as least the compilation part); thanks @guparan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607207302
https://github.com/sofa-framework/sofa/pull/1302#issuecomment-606877543:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1302#issuecomment-606877543
https://github.com/sofa-framework/sofa/pull/1302#issuecomment-626542741:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1302#issuecomment-626542741
https://github.com/sofa-framework/sofa/issues/1303#issuecomment-606616400:242,Deployability,update,updated,242,"Eh, let us note that, one is a [tractive force](https://en.wikipedia.org/wiki/Tractive_force), while the other is a [pressure](https://en.wikipedia.org/wiki/Pressure). The force direction of the pressure field will change with respect of the updated surface normal. The force direction of the tractive forcefield won't change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1303#issuecomment-606616400
https://github.com/sofa-framework/sofa/issues/1303#issuecomment-606626414:296,Performance,load,loads,296,"We could still re-factor them, maybe into a **PressureForceField** and a **TractiveForceField**, where both can handle surface elements (triangle and quads in 3D; or edges in 2D) and maybe support an increment ramp (increment the amount of force in time) to help the convergence of large applied loads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1303#issuecomment-606626414
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-608780353:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-608780353
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:469,Deployability,install,install,469,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:97,Integrability,depend,dependencies,97,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:171,Integrability,depend,dependencies,171,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:154,Modifiability,plugin,plugin,154,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:274,Modifiability,config,config,274,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:293,Modifiability,plugin,plugin,293,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:483,Deployability,install,install,483,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:708,Deployability,install,install,708,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:730,Deployability,install,install,730,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:105,Integrability,depend,dependencies,105,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:179,Integrability,depend,dependencies,179,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:162,Modifiability,plugin,plugin,162,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:282,Modifiability,config,config,282,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:301,Modifiability,plugin,plugin,301,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:691,Modifiability,variab,variable,691,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:645,Safety,avoid,avoid,645,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:496,Deployability,install,install,496,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:742,Deployability,install,install,742,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:764,Deployability,install,install,764,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:114,Integrability,depend,dependencies,114,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:188,Integrability,depend,dependencies,188,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:171,Modifiability,plugin,plugin,171,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:291,Modifiability,config,config,291,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:310,Modifiability,plugin,plugin,310,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:725,Modifiability,variab,variable,725,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:679,Safety,avoid,avoid,679,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1046,Testability,test,test,1046,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1143,Usability,feedback,feedback,1143,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:12,Availability,avail,available,12,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:756,Deployability,Release,Release,756,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:378,Integrability,message,message,378,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:259,Modifiability,VARIAB,VARIABLES,259,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:2918,Modifiability,Config,Configuring,2918,"u/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux-gnu; CGAL_LIBRARY = /usr/lib/x86_64-linux-gnu/libCGAL.so.13.0.1; CGAL_MAJOR_VERSION = 4; CGAL_MINOR_VERSION = 11; CGAL_MODULES_DIR = /usr//lib/x86_64-linux-gnu/cmake/CGAL; CGAL_MODULE_LINKER_FLAGS_DEBUG_INIT = ; CGAL_MODULE_LINKER_FLAGS_INIT = -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed; CGAL_MODULE_LINKER_FLAGS_RELEASE_INIT = ; CGAL_SCM_BRANCH_NAME = ; CGAL_SHARED_LINKER_FLAGS_DEBUG_INIT = ; CGAL_SHARED_LINKER_FLAGS_INIT = -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed; CGAL_SHARED_LINKER_FLAGS_RELEASE_INIT = ; CGAL_SUPPORTING_3RD_PARTY_LIBRARIES = GMP;GMPXX;MPFR;ZLIB;OpenGL;LEDA;MPFI;RS;RS3;OpenNL;Eigen3;BLAS;LAPACK;QGLViewer;ESBTL;Coin3D;NTL;IPE; CGAL_USE_FILE = /usr//lib/x86_64-linux-gnu/cmake/CGAL/UseCGAL.cmake; CGAL_VERSION = 4.11.0; CGAL_VERSION_COUNT = 3; CGAL_VERSION_MAJOR = 4; CGAL_VERSION_MINOR = 11; CGAL_VERSION_PATCH = 1000; CGAL_VERSION_TWEAK = 0; -- Configuring done; -- Generating done; -- Build files have been written to: /root/project/build; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:1337,Security,secur,security,1337,"/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux-gnu; CGAL_LIBRARY = /usr/lib/x86_64-linux-gnu/libCGAL.so.13.0.1; CGAL_MAJOR_VERSION = 4; CGAL_MINOR_VERSION = 11; CGAL_MODULES_DIR = /usr//lib/x86_64-linux-gnu/cmake/CGAL; CGAL_MODULE_LINKER_FLAGS_DEBUG_INIT = ; CGAL_MODULE_LINKER_FLAGS_INIT = -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed; CGAL_MODULE_LINKER_FLAGS_RELEASE_INIT = ; CGAL_SCM_BRANCH_NAME = ; CGAL_SHARED_LINKER_FLAGS_DEBUG_INIT = ; CGAL_SHARED_LINKER_FLAGS_INIT = -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed; CGAL_SHARED_LINKER_FLAGS_RELEASE_INIT = ; CGAL_SUPPORTING_3RD_PARTY_LIBRARIES = GMP;GMPXX;MPFR;ZLIB;OpenGL;LEDA;MPFI;RS;RS3;OpenNL;Eigen3;BLAS;LAPACK;QGLVi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:152,Testability,test,test,152,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421
https://github.com/sofa-framework/sofa/pull/1314#issuecomment-608120223:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1314#issuecomment-608120223
https://github.com/sofa-framework/sofa/pull/1314#issuecomment-608270679:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1314#issuecomment-608270679
https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321347:46,Deployability,install,installed,46,I did like for QtChart. As it is not a module installed by default in Qt. ; Otherwise be sure to tell user to install that module when installing Qt.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321347
https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321347:110,Deployability,install,install,110,I did like for QtChart. As it is not a module installed by default in Qt. ; Otherwise be sure to tell user to install that module when installing Qt.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321347
https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321347:135,Deployability,install,installing,135,I did like for QtChart. As it is not a module installed by default in Qt. ; Otherwise be sure to tell user to install that module when installing Qt.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321347
https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321479:104,Deployability,install,installed,104,"Just my 2 cents, if there is an option to disable it, I'll probably use it even tho I have Qt5WebEngine installed, since I like to keep only the minimum options activated to reduce compilation time and I don't think I'll use this feature.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321479
https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321479:174,Energy Efficiency,reduce,reduce,174,"Just my 2 cents, if there is an option to disable it, I'll probably use it even tho I have Qt5WebEngine installed, since I like to keep only the minimum options activated to reduce compilation time and I don't think I'll use this feature.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1315#issuecomment-608321479
https://github.com/sofa-framework/sofa/pull/1316#issuecomment-608408622:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1316#issuecomment-608408622
https://github.com/sofa-framework/sofa/pull/1317#issuecomment-608421430:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1317#issuecomment-608421430
https://github.com/sofa-framework/sofa/pull/1318#issuecomment-609012309:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1318#issuecomment-609012309
https://github.com/sofa-framework/sofa/pull/1319#issuecomment-609507732:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1319#issuecomment-609507732
https://github.com/sofa-framework/sofa/pull/1320#issuecomment-609641221:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1320#issuecomment-609641221
https://github.com/sofa-framework/sofa/pull/1321#issuecomment-609669017:30,Testability,test,tests,30,@hugtalbot as we are on those tests. Could you quickly test if this one is working fine on your computer:; Regression_test/TopologyRegression_test.sceneTest/RemovingTetra2TriangleProcess_withOptions. I'm not sure to understand what is the problem here.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1321#issuecomment-609669017
https://github.com/sofa-framework/sofa/pull/1321#issuecomment-609669017:55,Testability,test,test,55,@hugtalbot as we are on those tests. Could you quickly test if this one is working fine on your computer:; Regression_test/TopologyRegression_test.sceneTest/RemovingTetra2TriangleProcess_withOptions. I'm not sure to understand what is the problem here.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1321#issuecomment-609669017
https://github.com/sofa-framework/sofa/pull/1323#issuecomment-609768346:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1323#issuecomment-609768346
https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:493,Availability,error,error,493,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834
https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:499,Integrability,message,messages,499,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834
https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:362,Safety,detect,detect,362,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834
https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:134,Security,access,accessors,134,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834
https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:218,Testability,log,log,218,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834
https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:555,Testability,test,test,555,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834
https://github.com/sofa-framework/sofa/pull/1328#issuecomment-665128049:44,Deployability,Release,ReleaseWithDebugInfo,44,Nothing much ; as everybody is debugging in ReleaseWithDebugInfo mode 🤔 ; I will let it on stand-by for now.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1328#issuecomment-665128049
https://github.com/sofa-framework/sofa/pull/1329#issuecomment-612966889:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1329#issuecomment-612966889
https://github.com/sofa-framework/sofa/pull/1330#issuecomment-623926859:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1330#issuecomment-623926859
https://github.com/sofa-framework/sofa/pull/1330#issuecomment-623926859:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1330#issuecomment-623926859
https://github.com/sofa-framework/sofa/issues/1331#issuecomment-613110288:43,Modifiability,config,config,43,"actually this seems to happen during CMake config (not during ""normal"" MSVC compilation).; Also note that I am using v19.12, not master (so you might have already solved this?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1331#issuecomment-613110288
https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613879243:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613879243
https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165:73,Deployability,update,updated,73,"These files are not in the CMakeLists of SofaGeneralEngine, and were not updated for 14mo.; And the good BoxROI is still in SofaEngine, still updated and tested. So I guess there is no problem with deleting those (and it seems this PR does it well 🐱‍🐉)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165
https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165:142,Deployability,update,updated,142,"These files are not in the CMakeLists of SofaGeneralEngine, and were not updated for 14mo.; And the good BoxROI is still in SofaEngine, still updated and tested. So I guess there is no problem with deleting those (and it seems this PR does it well 🐱‍🐉)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165
https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165:154,Testability,test,tested,154,"These files are not in the CMakeLists of SofaGeneralEngine, and were not updated for 14mo.; And the good BoxROI is still in SofaEngine, still updated and tested. So I guess there is no problem with deleting those (and it seems this PR does it well 🐱‍🐉)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165
https://github.com/sofa-framework/sofa/issues/1334#issuecomment-621363273:107,Availability,error,error,107,"Hi, ; could you specify which version of CGAL and which version of SOFA you are using.; Could you past the error log as well; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1334#issuecomment-621363273
https://github.com/sofa-framework/sofa/issues/1334#issuecomment-621363273:113,Testability,log,log,113,"Hi, ; could you specify which version of CGAL and which version of SOFA you are using.; Could you past the error log as well; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1334#issuecomment-621363273
https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540:20,Usability,simpl,simple,20,I quickly applied a simple formatter online and finished manually. This file was a mess.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540
https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614507613:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614507613
https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614777371:59,Testability,test,test,59,@epernod I needed to have two different names for the same test:; - one when edges are computed from an existing triangle topology; - and one when edges are computed from hexa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614777371
https://github.com/sofa-framework/sofa/pull/1338#issuecomment-615309161:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1338#issuecomment-615309161
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616496056:116,Availability,avail,available,116,Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; - Is any test available with these new classes?; - is there any example scene?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616496056
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616496056:111,Testability,test,test,111,Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; - Is any test available with these new classes?; - is there any example scene?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616496056
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:124,Availability,avail,available,124,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:325,Integrability,depend,dependencies,325,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:318,Modifiability,plugin,plugin,318,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:119,Testability,test,test,119,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:273,Testability,test,test,273,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264:113,Usability,guid,guidelines,113,"Amazing work @sergeiNikolaev !; However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines 👍 ; So could you: ; - remove all useless commented code?; - set prefix for Data<> (d_) and member (m_) ?; - remove serr with msg_error; - maybe uncomment all the msg_info (as it is not print if you dont enable printLog); - would be cool to use pragma once instead of the preprocessor guards (ifdef); Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-617800918:725,Integrability,depend,depends,725,"Hello.; Thank you for your comments, guys. @Younesssss , answering to your questions:. > 1. First the reference (paper where you got this force equation from) of the equation 1. It is a general spring equation. You could find it for example here: Nealen A. et al ""Physically Based Deformable Models in Computer Graphics"" ; https://matthias-research.github.io/pages/publications/egstar2005.pdf or in StiffSpringForceField SOFA component.; A spring force contains two parts: value and direction. Compared with linear spring the value now is computed like a result of polynomial. The computation of direction remains the same. The S (cross-section area) technically has to describe the characteristics of material, but since it depends on sample shape we are trying to simulate, finally we could say that we compute force intensity instead of object force and, thus, have to recompute it based on sample shape and amount of springs we are using for simulation. > 2. In the first image why you have absolute value on the current length (∆l) if this is a length it probably positif rigth?. Yes, the length is always positive. I added absolute value since square root, in general, might also mean negative value. . > 3. Why current length ∆l = (∆x^2 + ∆y^2 +∆z^2 )^(1/2) it looks more like the formula of the displacement right ?. Yes, it is a displacement, but this displacement describes a distance between spring endpoints (actually, p1 - p2), not the displacement between the object and its rest shape. Therefore, I marked these displacements with notation ∆. Spring length is a norm of this distance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-617800918
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061:117,Usability,guid,guidelines,117,"> Amazing work @sergeiNikolaev !; > However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines ; > So could you:; > ; > * remove all useless commented code?; > * set prefix for Data<> (d_) and member (m_) ?; > * remove serr with msg_error; > * maybe uncomment all the msg_info (as it is not print if you dont enable printLog); > * would be cool to use pragma once instead of the preprocessor guards (ifdef); > Thanks !. @fredroy ; I have submitted the correction to the code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:124,Availability,avail,available,124,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:1626,Deployability,configurat,configuration,1626,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:1626,Modifiability,config,configuration,1626,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:1133,Performance,load,loads,1133,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:119,Testability,test,test,119,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:216,Testability,test,test,216,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:384,Testability,test,test,384,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:1587,Testability,test,test,1587,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742:51,Deployability,integrat,integrate,51,"@guparan, @Younesssss, @hugtalbot any volunteer to integrate the test in the normal test framework so we can merge this asap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742:51,Integrability,integrat,integrate,51,"@guparan, @Younesssss, @hugtalbot any volunteer to integrate the test in the normal test framework so we can merge this asap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742:65,Testability,test,test,65,"@guparan, @Younesssss, @hugtalbot any volunteer to integrate the test in the normal test framework so we can merge this asap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742:84,Testability,test,test,84,"@guparan, @Younesssss, @hugtalbot any volunteer to integrate the test in the normal test framework so we can merge this asap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624527110:52,Testability,test,test,52,"Hi @sergeiNikolaev ; thank you for sharing your zip test. I think we will be able to work it out from here.; TODO for me:; - Need a test in c++ for checking new functionality, to be implemented from py example.; - Add an example in SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624527110
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624527110:132,Testability,test,test,132,"Hi @sergeiNikolaev ; thank you for sharing your zip test. I think we will be able to work it out from here.; TODO for me:; - Need a test in c++ for checking new functionality, to be implemented from py example.; - Add an example in SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624527110
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296:507,Performance,perform,perform,507,"Hello. > Hi @sergeiNikolaev; > thank you for sharing your zip test. I think we will be able to work it out from here.; > TODO for me:; > ; > * Need a test in c++ for checking new functionality, to be implemented from py example.; > * Add an example in SOFA. My question is what test it is possible to write for Polynomial springs?; Personally me, I verified them by generating some data using the scene from .zip and then compare it visually with the polynomial result. But, I am not sure it is possible to perform the same stuff as a functional test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296:62,Testability,test,test,62,"Hello. > Hi @sergeiNikolaev; > thank you for sharing your zip test. I think we will be able to work it out from here.; > TODO for me:; > ; > * Need a test in c++ for checking new functionality, to be implemented from py example.; > * Add an example in SOFA. My question is what test it is possible to write for Polynomial springs?; Personally me, I verified them by generating some data using the scene from .zip and then compare it visually with the polynomial result. But, I am not sure it is possible to perform the same stuff as a functional test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296:150,Testability,test,test,150,"Hello. > Hi @sergeiNikolaev; > thank you for sharing your zip test. I think we will be able to work it out from here.; > TODO for me:; > ; > * Need a test in c++ for checking new functionality, to be implemented from py example.; > * Add an example in SOFA. My question is what test it is possible to write for Polynomial springs?; Personally me, I verified them by generating some data using the scene from .zip and then compare it visually with the polynomial result. But, I am not sure it is possible to perform the same stuff as a functional test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296:278,Testability,test,test,278,"Hello. > Hi @sergeiNikolaev; > thank you for sharing your zip test. I think we will be able to work it out from here.; > TODO for me:; > ; > * Need a test in c++ for checking new functionality, to be implemented from py example.; > * Add an example in SOFA. My question is what test it is possible to write for Polynomial springs?; Personally me, I verified them by generating some data using the scene from .zip and then compare it visually with the polynomial result. But, I am not sure it is possible to perform the same stuff as a functional test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296:546,Testability,test,test,546,"Hello. > Hi @sergeiNikolaev; > thank you for sharing your zip test. I think we will be able to work it out from here.; > TODO for me:; > ; > * Need a test in c++ for checking new functionality, to be implemented from py example.; > * Add an example in SOFA. My question is what test it is possible to write for Polynomial springs?; Personally me, I verified them by generating some data using the scene from .zip and then compare it visually with the polynomial result. But, I am not sure it is possible to perform the same stuff as a functional test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:35,Performance,latency,latency,35,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:58,Testability,test,tests,58,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:96,Usability,simpl,simple,96,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:38,Performance,latency,latency,38,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:61,Testability,test,tests,61,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:99,Usability,simpl,simple,99,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800:38,Usability,simpl,simple,38,@sergeiNikolaev would you also have a simple example scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644911157:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644911157
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-646594194:0,Testability,Test,Test,0,Test and scene examples are added.; Doc is ready here: https://github.com/sofa-framework/doc/pull/38/files. Looks now fine to me.; Anyone else I merge by the end of the week.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-646594194
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-655631523:37,Testability,test,test,37,"changes taken into account, only the test to go!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-655631523
https://github.com/sofa-framework/sofa/pull/1343#issuecomment-617252384:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1343#issuecomment-617252384
https://github.com/sofa-framework/sofa/pull/1344#issuecomment-619102306:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-619102306
https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624647049:92,Integrability,message,message,92,"SOFA dev meeting: @guparan will investigate a cleaner backward compatibility.; If no other, message warning user explaining which option to activate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624647049
https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624686655:173,Modifiability,variab,variable,173,"Unfortunately I did not find a better way to ensure full backward compatibility.; I vote for solution 2 (breaking but not too much): tell user to enable all needed MODULE_* variable, then fail.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624686655
https://github.com/sofa-framework/sofa/pull/1344#issuecomment-626620397:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-626620397
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757:247,Deployability,install,install,247,"I got the problem with Windows (no Eigen3Config.cmake) with a custom out-of-tree plugin.; The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly.; You need a pass of Cmake/""compilation""/install to have a full directory with a configured Eigen3Config.cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757:81,Modifiability,plugin,plugin,81,"I got the problem with Windows (no Eigen3Config.cmake) with a custom out-of-tree plugin.; The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly.; You need a pass of Cmake/""compilation""/install to have a full directory with a configured Eigen3Config.cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757:287,Modifiability,config,configured,287,"I got the problem with Windows (no Eigen3Config.cmake) with a custom out-of-tree plugin.; The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly.; You need a pass of Cmake/""compilation""/install to have a full directory with a configured Eigen3Config.cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619367609:161,Availability,down,downloading,161,"> The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly. Which actually makes sense, since you are downloading the source code of Eigen, and not a packaged one (as with package managers apt, dnf, etc.). Even if Eigen is header only, it is still the raw source code you are downloading. Not sure what's the good way to go here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619367609
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619367609:335,Availability,down,downloading,335,"> The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly. Which actually makes sense, since you are downloading the source code of Eigen, and not a packaged one (as with package managers apt, dnf, etc.). Even if Eigen is header only, it is still the raw source code you are downloading. Not sure what's the good way to go here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619367609
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:2,Deployability,Update,Update,2,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:292,Deployability,install,installed,292,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:496,Deployability,install,install,496,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:336,Modifiability,plugin,plugin,336,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:425,Modifiability,Config,Config,425,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251
https://github.com/sofa-framework/sofa/pull/1348#issuecomment-665092279:79,Deployability,install,install,79,Sorry this PR went under the radar. I actually added `FindEigen3.cmake` to the install of SOFA in #1397. ; See https://github.com/sofa-framework/sofa/blob/master/CMakeLists.txt#L74-L80. I guess we can close this PR now @jnbrunet ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-665092279
https://github.com/sofa-framework/sofa/pull/1351#issuecomment-621452701:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1351#issuecomment-621452701
https://github.com/sofa-framework/sofa/pull/1352#issuecomment-621453891:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352#issuecomment-621453891
https://github.com/sofa-framework/sofa/pull/1352#issuecomment-623630123:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352#issuecomment-623630123
https://github.com/sofa-framework/sofa/pull/1352#issuecomment-627840978:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352#issuecomment-627840978
https://github.com/sofa-framework/sofa/pull/1352#issuecomment-629373058:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352#issuecomment-629373058
https://github.com/sofa-framework/sofa/pull/1352#issuecomment-631272046:16,Availability,error,errors,16,"Some formatting errors (tabs) but looking at your work @epernod it does not matter, we could maybe run the format-script.; Anyway, a short question: for the MMMass for instance, even before your changes it would not have supported a mixed mesh (mix of hexa & tets for instance) ? right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352#issuecomment-631272046
https://github.com/sofa-framework/sofa/pull/1352#issuecomment-631429311:44,Performance,load,loaded,44,"It could not happen in current file formats loaded in SOFA. But in the future we might want to be able to support mixed meshes. As discussed this morning, the physics could be defined on each part (hex/tet) and it should work as long they use the same DOFs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352#issuecomment-631429311
https://github.com/sofa-framework/sofa/pull/1353#issuecomment-629373224:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-629373224
https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631272998:40,Availability,error,error,40,"ok fine, just could you explain why the error is sometime sent directly and sometimes it remains conditional to the _checkTopology_ data ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631272998
https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631316753:108,Integrability,message,message,108,"the checkTopology Data is only used to activate/unactivate the method CheckTopology. ; It should not change message conditio. If it is the case, I missed it. Could you point the line?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631316753
https://github.com/sofa-framework/sofa/pull/1354#issuecomment-623707444:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1354#issuecomment-623707444
https://github.com/sofa-framework/sofa/pull/1357#issuecomment-623111524:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1357#issuecomment-623111524
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-623103428:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-623103428
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-624500753:299,Deployability,update,update,299,"Hello @epernod,. thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR) . Maybe we could just keep the old deprecated name with something like:; ```; class Base {; [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; DeprecatedAndRemoved m_componentstate; ; }; ``` ; Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-624500753
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-624500753:465,Deployability,update,update,465,"Hello @epernod,. thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR) . Maybe we could just keep the old deprecated name with something like:; ```; class Base {; [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; DeprecatedAndRemoved m_componentstate; ; }; ``` ; Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-624500753
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-627844375:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-627844375
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287:322,Deployability,update,update,322,"> Hello @epernod,; > ; > thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR); > ; > Maybe we could just keep the old deprecated name with something like:; > ; > ```; > class Base {; > [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; > DeprecatedAndRemoved m_componentstate; ; > }; > ```; > ; > Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do. Hi, @damienmarchal ; I was going to do what you suggested, but while reading again your comment I realized I don't remember what we said or I didn't really get it.; In this PR there are 2 potential breaking changes:. - The upper case letter S of the Data: . ```; Data< sofa::core::objectmodel::ComponentState > d_componentstate; ; into ; Data< sofa::core::objectmodel::ComponentState > d_componentState; ; ```. - And I uncomment the line [[ deprecated ... for the m_componentstate.; ```; [[deprecated(""m_componentstate was renamed to d_componentState. Please upgrade your code"")]]; Data< sofa::core::objectmodel::ComponentState >& m_componentstate{d_componentState}; ///< the object state; ```. For which one do you want to add what you suggested? And just to be sure, the idea is to create a class ""DeprecatedAndRemoved"" that does nothing so you can declare the variable but compilation will failed when using it in the code and you put a [[deprecated(""..."" above ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287:499,Deployability,update,update,499,"> Hello @epernod,; > ; > thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR); > ; > Maybe we could just keep the old deprecated name with something like:; > ; > ```; > class Base {; > [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; > DeprecatedAndRemoved m_componentstate; ; > }; > ```; > ; > Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do. Hi, @damienmarchal ; I was going to do what you suggested, but while reading again your comment I realized I don't remember what we said or I didn't really get it.; In this PR there are 2 potential breaking changes:. - The upper case letter S of the Data: . ```; Data< sofa::core::objectmodel::ComponentState > d_componentstate; ; into ; Data< sofa::core::objectmodel::ComponentState > d_componentState; ; ```. - And I uncomment the line [[ deprecated ... for the m_componentstate.; ```; [[deprecated(""m_componentstate was renamed to d_componentState. Please upgrade your code"")]]; Data< sofa::core::objectmodel::ComponentState >& m_componentstate{d_componentState}; ///< the object state; ```. For which one do you want to add what you suggested? And just to be sure, the idea is to create a class ""DeprecatedAndRemoved"" that does nothing so you can declare the variable but compilation will failed when using it in the code and you put a [[deprecated(""..."" above ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287:1119,Deployability,upgrade,upgrade,1119,"> Hello @epernod,; > ; > thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR); > ; > Maybe we could just keep the old deprecated name with something like:; > ; > ```; > class Base {; > [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; > DeprecatedAndRemoved m_componentstate; ; > }; > ```; > ; > Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do. Hi, @damienmarchal ; I was going to do what you suggested, but while reading again your comment I realized I don't remember what we said or I didn't really get it.; In this PR there are 2 potential breaking changes:. - The upper case letter S of the Data: . ```; Data< sofa::core::objectmodel::ComponentState > d_componentstate; ; into ; Data< sofa::core::objectmodel::ComponentState > d_componentState; ; ```. - And I uncomment the line [[ deprecated ... for the m_componentstate.; ```; [[deprecated(""m_componentstate was renamed to d_componentState. Please upgrade your code"")]]; Data< sofa::core::objectmodel::ComponentState >& m_componentstate{d_componentState}; ///< the object state; ```. For which one do you want to add what you suggested? And just to be sure, the idea is to create a class ""DeprecatedAndRemoved"" that does nothing so you can declare the variable but compilation will failed when using it in the code and you put a [[deprecated(""..."" above ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287:1423,Modifiability,variab,variable,1423,"> Hello @epernod,; > ; > thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR); > ; > Maybe we could just keep the old deprecated name with something like:; > ; > ```; > class Base {; > [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; > DeprecatedAndRemoved m_componentstate; ; > }; > ```; > ; > Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do. Hi, @damienmarchal ; I was going to do what you suggested, but while reading again your comment I realized I don't remember what we said or I didn't really get it.; In this PR there are 2 potential breaking changes:. - The upper case letter S of the Data: . ```; Data< sofa::core::objectmodel::ComponentState > d_componentstate; ; into ; Data< sofa::core::objectmodel::ComponentState > d_componentState; ; ```. - And I uncomment the line [[ deprecated ... for the m_componentstate.; ```; [[deprecated(""m_componentstate was renamed to d_componentState. Please upgrade your code"")]]; Data< sofa::core::objectmodel::ComponentState >& m_componentstate{d_componentState}; ///< the object state; ```. For which one do you want to add what you suggested? And just to be sure, the idea is to create a class ""DeprecatedAndRemoved"" that does nothing so you can declare the variable but compilation will failed when using it in the code and you put a [[deprecated(""..."" above ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-644716475:260,Deployability,upgrade,upgrade,260,"Hello Erik,. Sorry to reply late... the idea is to have something like that:; ```cpp; class DeprecatedAndRemoved {};; ```; Then in Base you can:; ```cpp; class Base; {; ///....; [[deprecated(""m_componentstate was renamed to d_componentState in PR#1358. Please upgrade your code"")]]; DeprecatedAnremove & m_componentstate ; . [[deprecated(""d_componentstate was renamed to d_componentState in PR#1358. Please upgrade your code"")]]; DeprecatedAnremove & d_componentstate ; ; };; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-644716475
https://github.com/sofa-framework/sofa/pull/1358#issuecomment-644716475:407,Deployability,upgrade,upgrade,407,"Hello Erik,. Sorry to reply late... the idea is to have something like that:; ```cpp; class DeprecatedAndRemoved {};; ```; Then in Base you can:; ```cpp; class Base; {; ///....; [[deprecated(""m_componentstate was renamed to d_componentState in PR#1358. Please upgrade your code"")]]; DeprecatedAnremove & m_componentstate ; . [[deprecated(""d_componentstate was renamed to d_componentState in PR#1358. Please upgrade your code"")]]; DeprecatedAnremove & d_componentstate ; ; };; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-644716475
https://github.com/sofa-framework/sofa/pull/1359#issuecomment-623103603:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359#issuecomment-623103603
https://github.com/sofa-framework/sofa/pull/1359#issuecomment-631273444:13,Deployability,integrat,integrated,13,@epernod you integrated Guillaume's remark. @guparan fine for you? :traffic_light:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359#issuecomment-631273444
https://github.com/sofa-framework/sofa/pull/1359#issuecomment-631273444:13,Integrability,integrat,integrated,13,@epernod you integrated Guillaume's remark. @guparan fine for you? :traffic_light:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359#issuecomment-631273444
https://github.com/sofa-framework/sofa/pull/1360#issuecomment-637648587:78,Modifiability,config,configure,78,need to change this? https://github.com/sofa-framework/ci/blob/master/scripts/configure.sh,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-637648587
https://github.com/sofa-framework/sofa/pull/1360#issuecomment-637648788:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-637648788
https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850:73,Usability,simpl,simple,73,The FindAssimp you use does not seem to handle versions so let's keep it simple.; ```cmake; find_package(Assimp NO_MODULE QUIET; PATHS /usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}/cmake; ); ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850
https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662089855:94,Modifiability,config,configure,94,@guparan faut il changer ce fichier: https://github.com/sofa-framework/ci/blob/master/scripts/configure.sh#L338-L344,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662089855
https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662862840:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662862840
https://github.com/sofa-framework/sofa/issues/1362#issuecomment-623281806:75,Availability,error,error,75,"Hi @lyl00 ; Thank you for your interest in SOFA. Could you please post the error return by GitHub or any further information?. NB: please, next time use the [SOFA forum](https://www.sofa-framework.org/community/forum/) for non-developer questions (building, using SOFA).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1362#issuecomment-623281806
https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:160,Integrability,depend,dependency-pack,160,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284
https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:523,Integrability,depend,dependency-pack,523,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284
https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:309,Modifiability,variab,variable,309,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284
https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:421,Performance,load,load,421,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639:130,Deployability,integrat,integrating,130,"Hey @hugtalbot , would you mind elaborate a little bit more on this? What was the problem? . We definitely need some doc on those integrating factors...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639:130,Integrability,integrat,integrating,130,"Hey @hugtalbot , would you mind elaborate a little bit more on this? What was the problem? . We definitely need some doc on those integrating factors...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:23,Deployability,integrat,integration,23,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:391,Deployability,integrat,integration,391,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:459,Deployability,update,updated,459,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:23,Integrability,integrat,integration,23,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:258,Integrability,depend,depend,258,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:391,Integrability,integrat,integration,391,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:343,Performance,tune,tuned,343,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738:66,Deployability,integrat,integration,66,"Not really, but only because of my lack of understanding of these integration factors :-). I'm sure this PR is fine, I was just curious. Really looking forward to our next white board meeting !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738
https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738:66,Integrability,integrat,integration,66,"Not really, but only because of my lack of understanding of these integration factors :-). I'm sure this PR is fine, I was just curious. Really looking forward to our next white board meeting !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738
https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626689330:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626689330
https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626689330:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626689330
https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626992108:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626992108
https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626992108:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-626992108
https://github.com/sofa-framework/sofa/pull/1372#issuecomment-627197521:31,Testability,test,tests,31,OMG... it compiles and it pass tests... DDGNode clean step1 will be over soon. ; next-step...BaseData/Data.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-627197521
https://github.com/sofa-framework/sofa/pull/1373#issuecomment-627882567:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1373#issuecomment-627882567
https://github.com/sofa-framework/sofa/pull/1373#issuecomment-630061682:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1373#issuecomment-630061682
https://github.com/sofa-framework/sofa/pull/1373#issuecomment-631274536:97,Testability,test,tests,97,CI on CentOS not happy with CUDA and stopped on MacOS.; Let's restart it to check (Mac) with the tests!. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1373#issuecomment-631274536
https://github.com/sofa-framework/sofa/pull/1373#issuecomment-631274536:125,Testability,test,tests,125,CI on CentOS not happy with CUDA and stopped on MacOS.; Let's restart it to check (Mac) with the tests!. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1373#issuecomment-631274536
https://github.com/sofa-framework/sofa/pull/1375#issuecomment-626130173:20,Testability,test,test,20,[ci-build][with-all-test],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-626130173
https://github.com/sofa-framework/sofa/pull/1375#issuecomment-627320642:8,Deployability,update,update,8,"To redo/update this PR, go in SOFA sources and run ; ```bash; ./scripts/licenseUpdater/licenseUpdater.sh . auto; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-627320642
https://github.com/sofa-framework/sofa/pull/1375#issuecomment-629144002:142,Testability,test,tests,142,"The merge with master is done.; If the CI does not complain, please ""review"" (maybe rather look at commits) and merge :). [ci-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-629144002
https://github.com/sofa-framework/sofa/pull/1377#issuecomment-627940072:20,Testability,test,tests,20,[ci-build][with-all-tests]; Then ready if it passes,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1377#issuecomment-627940072
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:75,Availability,avail,available,75,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:178,Deployability,pipeline,pipeline,178,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:285,Deployability,patch,patch,285,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:337,Integrability,depend,dependencies,337,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:46,Modifiability,plugin,plugins,46,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:252,Modifiability,plugin,plugins,252,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144
https://github.com/sofa-framework/sofa/pull/1383#issuecomment-631369549:285,Safety,avoid,avoid,285,"Hi @faichele ; As said by @jnbrunet, for some months now, we are aiming at coding following the standard way.; Would you have some time to change this?; Moreover, regarding authoring, when contributing, you are welcome to appear in the Author.txt at the root of SOFA, but we prefer to avoid polluting the code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-631369549
https://github.com/sofa-framework/sofa/pull/1384#issuecomment-629090318:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1384#issuecomment-629090318
https://github.com/sofa-framework/sofa/pull/1386#issuecomment-629789506:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1386#issuecomment-629789506
https://github.com/sofa-framework/sofa/pull/1386#issuecomment-631443254:17,Testability,test,test,17,"FYI guys another test was failing, it's fixed as well.; Close your eyes and believe me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1386#issuecomment-631443254
https://github.com/sofa-framework/sofa/pull/1387#issuecomment-632301551:13,Energy Efficiency,green,green,13,Done and all green,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1387#issuecomment-632301551
https://github.com/sofa-framework/sofa/pull/1391#issuecomment-633005045:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1391#issuecomment-633005045
https://github.com/sofa-framework/sofa/pull/1394#issuecomment-635624134:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1394#issuecomment-635624134
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:59,Modifiability,plugin,plugins,59,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:136,Modifiability,Plugin,Plugins,136,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:215,Modifiability,Plugin,PluginManager,215,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:270,Modifiability,plugin,plugins,270,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:359,Modifiability,plugin,plugins,359,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:412,Modifiability,Plugin,PluginManager,412,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:449,Modifiability,Plugin,PluginManager,449,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:526,Modifiability,plugin,plugins,526,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:163,Performance,load,loaded,163,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:390,Performance,load,load,390,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:466,Performance,load,load,466,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825:153,Integrability,depend,dependencies,153,"Hey @guparan ,. Sorry for the late response, I'm having a slow week. Yeah I agree with your solution 2, if SofaValidation and SofaNonUniformFem are hard dependencies of core libraries, they becomes almost ""core"" libraries themselves and should be in ""lib"" (""bin"" on Windows). . Will this be in your big cmake refactoring branch (aka #1397)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825
https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825:309,Modifiability,refactor,refactoring,309,"Hey @guparan ,. Sorry for the late response, I'm having a slow week. Yeah I agree with your solution 2, if SofaValidation and SofaNonUniformFem are hard dependencies of core libraries, they becomes almost ""core"" libraries themselves and should be in ""lib"" (""bin"" on Windows). . Will this be in your big cmake refactoring branch (aka #1397)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825
https://github.com/sofa-framework/sofa/pull/1396#issuecomment-640439789:34,Energy Efficiency,Green,Green,34,Change has been done. CI is fine. Green light.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1396#issuecomment-640439789
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-638100826:14,Testability,test,test,14,TODO: ; - [ ] test with SofaPython3 out-of-tree; - [x] add warnings in transitional headers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-638100826
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-645338634:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-645338634
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:82,Availability,error,error,82,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:201,Modifiability,plugin,plugins,201,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:174,Testability,test,tests,174,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:324,Testability,test,tests,324,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637
https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:236,Usability,Simpl,SimpleBox-,236,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637
https://github.com/sofa-framework/sofa/pull/1398#issuecomment-637543613:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1398#issuecomment-637543613
https://github.com/sofa-framework/sofa/pull/1399#issuecomment-635437037:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1399#issuecomment-635437037
https://github.com/sofa-framework/sofa/pull/1399#issuecomment-637545131:22,Availability,error,errors,22,"I guess all the scene errors like ""method must be implemented by a child topology"" on CI are normal? Do you plan to fix them in another PR @epernod ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1399#issuecomment-637545131
https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636437950:62,Integrability,message,message,62,"I tried to at the Community Help:: Using Sofa, but I get this message. ![image](https://user-images.githubusercontent.com/5296582/83347681-2f9ad000-a344-11ea-972d-13af8256f792.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636437950
https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829:135,Deployability,install,install,135,"Hello, it could also mean that one of CGALPlugin's dll dependencies were not found as well (namely gmp or mpfr).; Add [Where your cgal install is]\auxiliary\gmp\lib to your system PATH.; Or copy paste those dlls alongside CGALPlugin.dll (not recommended)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829
https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829:55,Integrability,depend,dependencies,55,"Hello, it could also mean that one of CGALPlugin's dll dependencies were not found as well (namely gmp or mpfr).; Add [Where your cgal install is]\auxiliary\gmp\lib to your system PATH.; Or copy paste those dlls alongside CGALPlugin.dll (not recommended)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829
https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460:44,Availability,error,error,44,"Hi, @Namdhari, ; as @fredroy mentioned, the error message could mean one of the dll used by CGALPlugin.dll is not present. If you are using the compiled version of CGAL, be sure to put the lib directy of CGAL into your env. paths or to copy the dll of CGAL inside the bin directory of SOFA where the CGALPlugin.dll is located. Anyway, if the header verison is working fine I think you can close this issue. thanks,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460
https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460:50,Integrability,message,message,50,"Hi, @Namdhari, ; as @fredroy mentioned, the error message could mean one of the dll used by CGALPlugin.dll is not present. If you are using the compiled version of CGAL, be sure to put the lib directy of CGAL into your env. paths or to copy the dll of CGAL inside the bin directory of SOFA where the CGALPlugin.dll is located. Anyway, if the header verison is working fine I think you can close this issue. thanks,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460
https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518:20,Testability,test,tests,20,"[ci-build][with-all-tests]; Fine to me. Let's see the CI tests, then ready.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518
https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518:57,Testability,test,tests,57,"[ci-build][with-all-tests]; Fine to me. Let's see the CI tests, then ready.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518
https://github.com/sofa-framework/sofa/pull/1405#issuecomment-640046429:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1405#issuecomment-640046429
https://github.com/sofa-framework/sofa/pull/1406#issuecomment-639397648:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1406#issuecomment-639397648
https://github.com/sofa-framework/sofa/pull/1406#issuecomment-645446057:166,Deployability,Update,Updated,166,In last commits:; - DataTrackerEngine is deprecated; - CallbackEngine is renamed as DataTrackerCallback & tests use it instead of the deprecated DataTrackerEngine; - Updated doc for the DataTrackerCallback; - const DataTracker& passed as argument to callback function: this makes it possible to call hasChanged() on datafields using the dataTracker in each DataTrackerCallback. @jnbrunet @damienmarchal if that's OK with you. If it passes I think that should be all on this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1406#issuecomment-645446057
https://github.com/sofa-framework/sofa/pull/1406#issuecomment-645446057:106,Testability,test,tests,106,In last commits:; - DataTrackerEngine is deprecated; - CallbackEngine is renamed as DataTrackerCallback & tests use it instead of the deprecated DataTrackerEngine; - Updated doc for the DataTrackerCallback; - const DataTracker& passed as argument to callback function: this makes it possible to call hasChanged() on datafields using the dataTracker in each DataTrackerCallback. @jnbrunet @damienmarchal if that's OK with you. If it passes I think that should be all on this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1406#issuecomment-645446057
https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209:136,Deployability,update,updated,136,"> You may add a consistency check if the given path is actually a dir when it is supposed to be. I'm ok with the rest of the code. I've updated the code to check for path types according to isDirectory.; I also propagated the mechanism to DataFileNameVectors (if one of the paths in the vector is not of the right type, I simply set it to """". Dunno if thats the right way but it seems right)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209
https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209:322,Usability,simpl,simply,322,"> You may add a consistency check if the given path is actually a dir when it is supposed to be. I'm ok with the rest of the code. I've updated the code to check for path types according to isDirectory.; I also propagated the mechanism to DataFileNameVectors (if one of the paths in the vector is not of the right type, I simply set it to """". Dunno if thats the right way but it seems right)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209
https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639521293:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639521293
https://github.com/sofa-framework/sofa/pull/1407#issuecomment-645395957:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-645395957
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248:299,Deployability,update,update,299,"> move generic addUpdateCallback inside MeshLoader parent class.; > ; > * position; > ; > * normals; > ; > * edges; > ; > * triangles; > ; > * quads; > etc.. see Data declared in MeshLoader. Hi @epernod ! After reviewing my code a bit more, I now remember why MeshLoader doesn't contain a ""generic"" update callback: there's no ""load"" method in MeshLoader, only a set of datafield definitions, then used by other components subclassing it. thus a callback function would not be able to perform any loading operation on input changes. I agree that it is sub-optimal to have to add a specific callback for each meshLoaders (although they have custom behaviors anyway) but as-is I don't see how to better the current system. Ideally, we could imagine having a pure virtual ""load"" method overridden in the subclasses, which would then be callable from a callbackEngine, but that would probably go out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248:328,Performance,load,load,328,"> move generic addUpdateCallback inside MeshLoader parent class.; > ; > * position; > ; > * normals; > ; > * edges; > ; > * triangles; > ; > * quads; > etc.. see Data declared in MeshLoader. Hi @epernod ! After reviewing my code a bit more, I now remember why MeshLoader doesn't contain a ""generic"" update callback: there's no ""load"" method in MeshLoader, only a set of datafield definitions, then used by other components subclassing it. thus a callback function would not be able to perform any loading operation on input changes. I agree that it is sub-optimal to have to add a specific callback for each meshLoaders (although they have custom behaviors anyway) but as-is I don't see how to better the current system. Ideally, we could imagine having a pure virtual ""load"" method overridden in the subclasses, which would then be callable from a callbackEngine, but that would probably go out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248:485,Performance,perform,perform,485,"> move generic addUpdateCallback inside MeshLoader parent class.; > ; > * position; > ; > * normals; > ; > * edges; > ; > * triangles; > ; > * quads; > etc.. see Data declared in MeshLoader. Hi @epernod ! After reviewing my code a bit more, I now remember why MeshLoader doesn't contain a ""generic"" update callback: there's no ""load"" method in MeshLoader, only a set of datafield definitions, then used by other components subclassing it. thus a callback function would not be able to perform any loading operation on input changes. I agree that it is sub-optimal to have to add a specific callback for each meshLoaders (although they have custom behaviors anyway) but as-is I don't see how to better the current system. Ideally, we could imagine having a pure virtual ""load"" method overridden in the subclasses, which would then be callable from a callbackEngine, but that would probably go out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248:497,Performance,load,loading,497,"> move generic addUpdateCallback inside MeshLoader parent class.; > ; > * position; > ; > * normals; > ; > * edges; > ; > * triangles; > ; > * quads; > etc.. see Data declared in MeshLoader. Hi @epernod ! After reviewing my code a bit more, I now remember why MeshLoader doesn't contain a ""generic"" update callback: there's no ""load"" method in MeshLoader, only a set of datafield definitions, then used by other components subclassing it. thus a callback function would not be able to perform any loading operation on input changes. I agree that it is sub-optimal to have to add a specific callback for each meshLoaders (although they have custom behaviors anyway) but as-is I don't see how to better the current system. Ideally, we could imagine having a pure virtual ""load"" method overridden in the subclasses, which would then be callable from a callbackEngine, but that would probably go out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248:770,Performance,load,load,770,"> move generic addUpdateCallback inside MeshLoader parent class.; > ; > * position; > ; > * normals; > ; > * edges; > ; > * triangles; > ; > * quads; > etc.. see Data declared in MeshLoader. Hi @epernod ! After reviewing my code a bit more, I now remember why MeshLoader doesn't contain a ""generic"" update callback: there's no ""load"" method in MeshLoader, only a set of datafield definitions, then used by other components subclassing it. thus a callback function would not be able to perform any loading operation on input changes. I agree that it is sub-optimal to have to add a specific callback for each meshLoaders (although they have custom behaviors anyway) but as-is I don't see how to better the current system. Ideally, we could imagine having a pure virtual ""load"" method overridden in the subclasses, which would then be callable from a callbackEngine, but that would probably go out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643164248
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643175509:253,Deployability,update,updateCallback,253,"Hi @marques-bruno wasn't it merging the #1407 into this one (#1408) ?. My notes on this PR were: Rebase #1407 in #1408.; SetValue on componentState should not be required: bool parse() calls getValue on the m_repositoryPath, which in turn will call the updateCallback, which itself sets the component State. Thus setting it again would be useless.; fileMesh to remove",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643175509
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643959920:263,Deployability,update,updateCallback,263,"> Hi @marques-bruno wasn't it merging the #1407 into this one (#1408) ?; > ; > My notes on this PR were: Rebase #1407 in #1408.; > SetValue on componentState should not be required: bool parse() calls getValue on the m_repositoryPath, which in turn will call the updateCallback, which itself sets the component State. Thus setting it again would be useless.; > fileMesh to remove. That's what's been done here no? Both 1406 & 1407 are merged into this PR (see branch diffs), the parsing code has been updated in AddResourceRepository & fileMesh has been removed.; To me this should be flagged ready, as soon as @epernod validates",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643959920
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643959920:501,Deployability,update,updated,501,"> Hi @marques-bruno wasn't it merging the #1407 into this one (#1408) ?; > ; > My notes on this PR were: Rebase #1407 in #1408.; > SetValue on componentState should not be required: bool parse() calls getValue on the m_repositoryPath, which in turn will call the updateCallback, which itself sets the component State. Thus setting it again would be useless.; > fileMesh to remove. That's what's been done here no? Both 1406 & 1407 are merged into this PR (see branch diffs), the parsing code has been updated in AddResourceRepository & fileMesh has been removed.; To me this should be flagged ready, as soon as @epernod validates",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643959920
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643959920:620,Security,validat,validates,620,"> Hi @marques-bruno wasn't it merging the #1407 into this one (#1408) ?; > ; > My notes on this PR were: Rebase #1407 in #1408.; > SetValue on componentState should not be required: bool parse() calls getValue on the m_repositoryPath, which in turn will call the updateCallback, which itself sets the component State. Thus setting it again would be useless.; > fileMesh to remove. That's what's been done here no? Both 1406 & 1407 are merged into this PR (see branch diffs), the parsing code has been updated in AddResourceRepository & fileMesh has been removed.; To me this should be flagged ready, as soon as @epernod validates",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-643959920
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-645230526:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-645230526
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-649504295:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-649504295
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-669055764:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-669055764
https://github.com/sofa-framework/sofa/pull/1408#issuecomment-676025850:43,Deployability,update,update,43,"Good to me, ready!; We finally have a nice update mechanisms for Data in components others than Engines!; Thanks @marques-bruno 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408#issuecomment-676025850
https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843:253,Modifiability,plugin,plugin,253,"I'm surprised this hasn't caused problem before, especially with mac os since I have a feeling its XCode's clang compiler often has different default settings (could be the reason why Stephane had weird problems when overriding some SOFA methods in his plugin on his mac, whereas no problem with GCC or Ubuntu's clang version). I just realized that we aren't using LTO in SOFA. At some points, we could converge towards a clean :. - visibility=hidden everywhere; - explicit public visibility with SOFA_EXPORT_DYNAMIC_LIBRARY; - LTO. Anyway, +1 for this PR, and I think we should discuss the default visibility and link-time optimizations at some point.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843
https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843:624,Performance,optimiz,optimizations,624,"I'm surprised this hasn't caused problem before, especially with mac os since I have a feeling its XCode's clang compiler often has different default settings (could be the reason why Stephane had weird problems when overriding some SOFA methods in his plugin on his mac, whereas no problem with GCC or Ubuntu's clang version). I just realized that we aren't using LTO in SOFA. At some points, we could converge towards a clean :. - visibility=hidden everywhere; - explicit public visibility with SOFA_EXPORT_DYNAMIC_LIBRARY; - LTO. Anyway, +1 for this PR, and I think we should discuss the default visibility and link-time optimizations at some point.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843
https://github.com/sofa-framework/sofa/pull/1417#issuecomment-642677482:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1417#issuecomment-642677482
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-643992298:184,Modifiability,plugin,plugin,184,"Hi @EmDash00 ; Welcome on the SOFA GitHub and thank you for the detailed issue. It helps a lot providing a maximum of information!; A recent work in #1361 aimed at updating the OpenCL plugin, which remained inactive for some time. But it led to the duplication of an instantiation. Removing the line 71 should make it work.; If so, could you please contribute this change back?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-643992298
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-644175288:189,Modifiability,plugin,plugin,189,"> Hi @EmDash00; > Welcome on the SOFA GitHub and thank you for the detailed issue. It helps a lot providing a maximum of information!; > A recent work in #1361 aimed at updating the OpenCL plugin, which remained inactive for some time. But it led to the duplication of an instantiation.; > ; > Removing the line 71 should make it work.; > If so, could you please contribute this change back?. Hi @hugtalbot, thanks for the quick response. That was the original solution I tried and it _seemed_ to work, but I was skeptical if it was a bandaid over a bigger problem or not. Thank you for confirming. I'd love to make a PR back later today.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-644175288
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:110,Availability,error,error,110,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:233,Availability,error,error,233,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:377,Availability,Error,Error,377,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:491,Availability,Error,Error,491,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:530,Availability,Error,Error,530,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:294,Modifiability,plugin,plugins,294,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:441,Modifiability,plugin,plugins,441,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-655380222:19,Availability,error,error,19,Hey @EmDash00 your error shows that you do not properly link with csparse.; Do you have it installed?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-655380222
https://github.com/sofa-framework/sofa/issues/1419#issuecomment-655380222:91,Deployability,install,installed,91,Hey @EmDash00 your error shows that you do not properly link with csparse.; Do you have it installed?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-655380222
https://github.com/sofa-framework/sofa/pull/1420#issuecomment-644790245:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1420#issuecomment-644790245
https://github.com/sofa-framework/sofa/pull/1420#issuecomment-646511574:19,Testability,test,tests,19,add non-regression tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1420#issuecomment-646511574
https://github.com/sofa-framework/sofa/pull/1422#issuecomment-644614341:22,Modifiability,config,config,22,"some other `#include ""config.h""` in UniformMass,ConstantFF and MeshMatrixMass 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1422#issuecomment-644614341
https://github.com/sofa-framework/sofa/pull/1422#issuecomment-649265003:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1422#issuecomment-649265003
https://github.com/sofa-framework/sofa/pull/1423#issuecomment-644619454:117,Deployability,update,updateVisual,117,"Hum, you would be better to have a look at VisualModelImpl, which is the real location managing the data, especially updateVisual().",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1423#issuecomment-644619454
https://github.com/sofa-framework/sofa/pull/1423#issuecomment-644625370:58,Deployability,update,updated,58,And you have to make sure that the GL buffers are created/updated/modified while having an OpenGL context (so either in initVisual()/updateVisual()/drawVisual()...),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1423#issuecomment-644625370
https://github.com/sofa-framework/sofa/pull/1423#issuecomment-644625370:133,Deployability,update,updateVisual,133,And you have to make sure that the GL buffers are created/updated/modified while having an OpenGL context (so either in initVisual()/updateVisual()/drawVisual()...),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1423#issuecomment-644625370
https://github.com/sofa-framework/sofa/pull/1425#issuecomment-647398126:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1425#issuecomment-647398126
https://github.com/sofa-framework/sofa/pull/1427#issuecomment-652273244:33,Modifiability,plugin,plugin,33,TODO: ; 1. rename the repository plugin.SofaPython3 into SofaPython3; 2. report the change in this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1427#issuecomment-652273244
https://github.com/sofa-framework/sofa/pull/1428#issuecomment-654886620:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1428#issuecomment-654886620
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655515305:61,Deployability,install,installed,61,"Hi @jjcasmar, thanks for spotting this issue :+1:; I see you installed the v20.06 binaries in your system. Did you have a previous installation before?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655515305
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655515305:131,Deployability,install,installation,131,"Hi @jjcasmar, thanks for spotting this issue :+1:; I see you installed the v20.06 binaries in your system. Did you have a previous installation before?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655515305
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:28,Deployability,install,installation,28,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:129,Deployability,install,install,129,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:161,Deployability,install,installed,161,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:137,Integrability,depend,dependending,137,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:53,Testability,test,tested,53,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967:45,Availability,error,error,45,Unfortunately no. SofaPython3 builds without error on my Ubuntu 18.04; My config:; - SOFA v20.06 binaries unzipped in my home; - pybind11 2.4.3 installed in my system; - python 3.8.3 installed in my system,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967:144,Deployability,install,installed,144,Unfortunately no. SofaPython3 builds without error on my Ubuntu 18.04; My config:; - SOFA v20.06 binaries unzipped in my home; - pybind11 2.4.3 installed in my system; - python 3.8.3 installed in my system,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967:183,Deployability,install,installed,183,Unfortunately no. SofaPython3 builds without error on my Ubuntu 18.04; My config:; - SOFA v20.06 binaries unzipped in my home; - pybind11 2.4.3 installed in my system; - python 3.8.3 installed in my system,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967:74,Modifiability,config,config,74,Unfortunately no. SofaPython3 builds without error on my Ubuntu 18.04; My config:; - SOFA v20.06 binaries unzipped in my home; - pybind11 2.4.3 installed in my system; - python 3.8.3 installed in my system,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967
https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656196361:74,Deployability,install,installs,74,I'll try later with a docker image to ensure there is no rest of previous installs,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656196361
https://github.com/sofa-framework/sofa/pull/1430#issuecomment-662326926:16,Modifiability,plugin,plugin,16,The name of the plugin has been changed.; PR can be merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1430#issuecomment-662326926
https://github.com/sofa-framework/sofa/pull/1431#issuecomment-656868492:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1431#issuecomment-656868492
https://github.com/sofa-framework/sofa/pull/1432#issuecomment-658832490:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1432#issuecomment-658832490
https://github.com/sofa-framework/sofa/pull/1433#issuecomment-661670081:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1433#issuecomment-661670081
https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026:116,Modifiability,plugin,plugin,116,the new factors/parameters were set arbitrary using qualitative tests as we still don't have automatic test on this plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026
https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026:64,Testability,test,tests,64,the new factors/parameters were set arbitrary using qualitative tests as we still don't have automatic test on this plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026
https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026:103,Testability,test,test,103,the new factors/parameters were set arbitrary using qualitative tests as we still don't have automatic test on this plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-663853203:22,Testability,test,test,22,"new feature, new unit test?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-663853203
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:724,Integrability,depend,depending,724,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:913,Integrability,depend,dependent,913,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1282,Integrability,depend,depending,1282,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:24,Testability,test,test,24,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:71,Testability,test,test,71,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:190,Testability,test,tests,190,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1176,Testability,test,test,1176,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1410,Testability,test,test,1410,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1086,Usability,simpl,simple,1086,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-665563974:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-665563974
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666225397:0,Integrability,Message,Message,0,Message has been added by @marques-bruno looks good to me know.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666225397
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666320495:50,Energy Efficiency,green,green,50,":+1: CI is busy, so let's wait a bit but light is green!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666320495
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666327296:9,Energy Efficiency,green,green,9,isn't it green ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666327296
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666379449:6,Energy Efficiency,green,green,6,super green!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666379449
https://github.com/sofa-framework/sofa/pull/1439#issuecomment-667726055:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1439#issuecomment-667726055
https://github.com/sofa-framework/sofa/pull/1443#issuecomment-668659689:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1443#issuecomment-668659689
https://github.com/sofa-framework/sofa/pull/1445#issuecomment-668632443:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1445#issuecomment-668632443
https://github.com/sofa-framework/sofa/pull/1447#issuecomment-673102909:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1447#issuecomment-673102909
https://github.com/sofa-framework/sofa/pull/1447#issuecomment-676040952:206,Performance,perform,performance,206,This PR makes me think that it would be nice to have a description of the ConstraintCorrection (one for each). If I recall correctly this was done for multithreading purposes. It would be nice to check any performance change if any. ; Let's rediscuss about it when everybody comes back!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1447#issuecomment-676040952
https://github.com/sofa-framework/sofa/pull/1448#issuecomment-673132514:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-673132514
https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830:44,Availability,error,error,44,"Scene angularSpringForceField.scn throws an error, related to the message you just added @epernod ; Is this normal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830
https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830:66,Integrability,message,message,66,"Scene angularSpringForceField.scn throws an error, related to the message you just added @epernod ; Is this normal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830
https://github.com/sofa-framework/sofa/pull/1448#issuecomment-679205362:156,Availability,error,error,156,ok I thought I had understood the ArticulatedSystemMapping but... it seems to works fine with different input and output sizes...; I removed that check and error case.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-679205362
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-673108801:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-673108801
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-673315660:42,Testability,test,tests,42,Let's count warnings: [ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-673315660
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:201,Deployability,release,release,201,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:509,Deployability,release,release,509,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:270,Modifiability,plugin,plugins,270,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:63,Testability,test,testOmniDriverEmu,63,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:243,Testability,test,tests,243,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:305,Testability,test,testOmniDriverEmu,305,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:551,Testability,test,tests,551,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679266455:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679266455
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679390995:120,Availability,error,error,120,I checked the QuaterTest **EulerAngles** and it is not using code touched by this PR. This sounds like another blinking error test. ; Ok to open an issue on that but it is not related to this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679390995
https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679390995:126,Testability,test,test,126,I checked the QuaterTest **EulerAngles** and it is not using code touched by this PR. This sounds like another blinking error test. ; Ok to open an issue on that but it is not related to this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679390995
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-673413456:69,Availability,error,error,69,Do you have an example that you could share easily to reproduce this error?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-673413456
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:555,Availability,toler,tolerance,555,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:626,Availability,toler,tolerance,626,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:2372,Availability,error,error,2372,"olver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""articulationCenter1"">; 				<ArticulationCenter parentIndex=""0"" childIndex=""1"" posOnParent=""294 22 0"" posOnChild=""0 0 0"" />; 				<Node name=""articulations"">; 					<Articulation translation=""0"" rotation=""1"" rotationAxis=""0 0 -1"" articulationIndex=""0""/>; 				</Node>; 			</Node>; 		</Node>; 	</Node>; 	; </Node>; ```. When my application is started, the above pointer is empty error appears, but when the component ""GenericConstraintSolver"" is changed to ""LCPConstraintSolver"" in ""test.scn"", the above pointer is empty problem no longer occurs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:207,Modifiability,plugin,pluginName,207,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:257,Modifiability,plugin,pluginName,257,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:746,Performance,load,load,746,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:861,Performance,load,loader,861,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:957,Performance,load,loader,957,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:979,Performance,load,loader,979,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:987,Performance,load,load,987,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:20,Testability,test,test,20,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:2476,Testability,test,test,2476,"olver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""articulationCenter1"">; 				<ArticulationCenter parentIndex=""0"" childIndex=""1"" posOnParent=""294 22 0"" posOnChild=""0 0 0"" />; 				<Node name=""articulations"">; 					<Articulation translation=""0"" rotation=""1"" rotationAxis=""0 0 -1"" articulationIndex=""0""/>; 				</Node>; 			</Node>; 		</Node>; 	</Node>; 	; </Node>; ```. When my application is started, the above pointer is empty error appears, but when the component ""GenericConstraintSolver"" is changed to ""LCPConstraintSolver"" in ""test.scn"", the above pointer is empty problem no longer occurs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696
https://github.com/sofa-framework/sofa/pull/1450#issuecomment-689419989:33,Deployability,update,updated,33,"Hey @vr3dvr !; Any news? keep us updated, we will have to temporarily set it as wip.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-689419989
https://github.com/sofa-framework/sofa/pull/1453#issuecomment-676122500:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1453#issuecomment-676122500
https://github.com/sofa-framework/sofa/pull/1453#issuecomment-692893440:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1453#issuecomment-692893440
https://github.com/sofa-framework/sofa/pull/1453#issuecomment-694084492:3,Testability,Test,Tests,3,CI/Tests seem fine 😙,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1453#issuecomment-694084492
https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677718305:2,Deployability,Update,Update,2,"> Update SofaMacros.cmake by setting the policy CMP0057 NEW for supporting the IN_LIST operator of if().; > . Thanks @olivier-goury! Which version of CMake do you have?; Since this policy was introduced in 3.3 and SOFA required 3.12 minimum according to what I've seen in the main CMakeLists of sofa, I don't see how this can cause problems. Maybe the policy should be set elsewhere though, like in the main CMakeLists.txt? @guparan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677718305
https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677722602:4,Deployability,Update,Update,4,"> > Update SofaMacros.cmake by setting the policy CMP0057 NEW for supporting the IN_LIST operator of if().; > ; > Thanks @olivier-goury! Which version of CMake do you have?; > Since this policy was introduced in 3.3 and SOFA required 3.12 minimum according to what I've seen in the main CMakeLists of sofa, I don't see how this can cause problems. Maybe the policy should be set elsewhere though, like in the main CMakeLists.txt? @guparan. I am on cmake version 3.16.3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677722602
https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575:219,Deployability,update,updated,219,"@guparan what's this macro for actually (sofa_auto_set_target_properties) ? apparently it is only used in external plugins (only SoftRobots.Inverse it seems...) maybe the macro should be removed, and SoftRobots.Inverse updated..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575
https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575:115,Modifiability,plugin,plugins,115,"@guparan what's this macro for actually (sofa_auto_set_target_properties) ? apparently it is only used in external plugins (only SoftRobots.Inverse it seems...) maybe the macro should be removed, and SoftRobots.Inverse updated..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575
https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831:840,Modifiability,plugin,plugin,840,"> Hello guys,; > ; > CMP0057 and any other policy added before CMake 3.12 are set to NEW by https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaFrameworkConfig.cmake.in#L2; > ; > @olivier-goury I think you have this issue because you do `include(SofaMacros)` instead of `find_package(SofaFramework)`. The latter (or any find_package leading to it) must be preferred because it's more transparent (no need to manually reach a file where all the SOFA macros are defined) and it calls `cmake_minimum_required(VERSION 3.12)` before actually doing `include(SofaMacros)`.; > ; > Another `cmake_minimum_required(VERSION 3.12)` could be added at the top of SofaMacros though, so this PR makes sense in a way. Hey I take over this PR since @olivier-goury is on holidays :); Indeed, after taking a look at the problematic plugin, there's a find_package(SofaFramework)... but there's also a `include(${SofaFramework_DIR}/SofaMacros.cmake)` that shouldn't be there obviously. So the problem does come from the plugin's CMakeLists.txt if I get it right.; So not a real problem. I guess we could still homogenize the list(FIND) vs IN_LIST calls in cmake, if we want to do this right =)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831
https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831:1026,Modifiability,plugin,plugin,1026,"> Hello guys,; > ; > CMP0057 and any other policy added before CMake 3.12 are set to NEW by https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaFrameworkConfig.cmake.in#L2; > ; > @olivier-goury I think you have this issue because you do `include(SofaMacros)` instead of `find_package(SofaFramework)`. The latter (or any find_package leading to it) must be preferred because it's more transparent (no need to manually reach a file where all the SOFA macros are defined) and it calls `cmake_minimum_required(VERSION 3.12)` before actually doing `include(SofaMacros)`.; > ; > Another `cmake_minimum_required(VERSION 3.12)` could be added at the top of SofaMacros though, so this PR makes sense in a way. Hey I take over this PR since @olivier-goury is on holidays :); Indeed, after taking a look at the problematic plugin, there's a find_package(SofaFramework)... but there's also a `include(${SofaFramework_DIR}/SofaMacros.cmake)` that shouldn't be there obviously. So the problem does come from the plugin's CMakeLists.txt if I get it right.; So not a real problem. I guess we could still homogenize the list(FIND) vs IN_LIST calls in cmake, if we want to do this right =)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450:792,Modifiability,refactor,refactoring,792,"Hello @marques-bruno . My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level. . My current approach to handle this kind of scenario was to implement an easing function like that:; ```cpp; std::string sofa::helper::objectmodel::getPathName(Base* o); {; BaseNode *node = dynamic_cast<BaseNode>(o);; if(node); return node->getPathName();; BaseObject *object = dynamic_cast<BaseNode>(o);; if(object); return object->getPathName();; ...; }; ```; To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's. ; But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450:603,Safety,avoid,avoid,603,"Hello @marques-bruno . My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level. . My current approach to handle this kind of scenario was to implement an easing function like that:; ```cpp; std::string sofa::helper::objectmodel::getPathName(Base* o); {; BaseNode *node = dynamic_cast<BaseNode>(o);; if(node); return node->getPathName();; BaseObject *object = dynamic_cast<BaseNode>(o);; if(object); return object->getPathName();; ...; }; ```; To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's. ; But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:839,Modifiability,refactor,refactoring,839,"> Hello @marques-bruno; > ; > My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:1486,Modifiability,inherit,inheriting,1486,"raph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a virtual getPathName in Base has a constant cost. But again...the calling costs is probably very small compared to what the function actually do :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:1654,Performance,perform,performance,1654,"raph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a virtual getPathName in Base has a constant cost. But again...the calling costs is probably very small compared to what the function actually do :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:649,Safety,avoid,avoid,649,"> Hello @marques-bruno; > ; > My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769
https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:1699,Testability,benchmark,benchmark,1699,"raph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a virtual getPathName in Base has a constant cost. But again...the calling costs is probably very small compared to what the function actually do :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769
https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680725772:53,Modifiability,plugin,plugins,53,"Nice, there seem to be some includes missing in some plugins for the CI to pass though (DistanceGridFF)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680725772
https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680766526:23,Modifiability,plugin,plugins,23,"Yes, there is a lot of plugins to activate to propagate the change...but given how far it goes I'm sure this is doable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680766526
https://github.com/sofa-framework/sofa/issues/1461#issuecomment-774170003:77,Testability,test,testOmniDriverEmu,77,"HexahedronForceFieldTopologyChangeHandling.scn has been fixed in #1573 ; and testOmniDriverEmu.scn fixed in .... PR ? Can't find where, feel free to fill this up if somebody know. Closing the issue itself",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1461#issuecomment-774170003
https://github.com/sofa-framework/sofa/issues/1462#issuecomment-680828677:167,Deployability,install,install,167,"Hey @AlbanOdot ,. From the [documentation](https://www.sofa-framework.org/community/doc/getting-started/build/linux/#core-required):. > - Boost (>= 1.65.1); `sudo apt install libboost-all-dev`. So you need to install **libboost-all-dev** and not just **libboost-dev**. J-N",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462#issuecomment-680828677
https://github.com/sofa-framework/sofa/issues/1462#issuecomment-680828677:209,Deployability,install,install,209,"Hey @AlbanOdot ,. From the [documentation](https://www.sofa-framework.org/community/doc/getting-started/build/linux/#core-required):. > - Boost (>= 1.65.1); `sudo apt install libboost-all-dev`. So you need to install **libboost-all-dev** and not just **libboost-dev**. J-N",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462#issuecomment-680828677
https://github.com/sofa-framework/sofa/pull/1464#issuecomment-681500862:14,Testability,test,test,14,Can't wait to test this today! Awesome idea!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1464#issuecomment-681500862
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-682379074:245,Safety,avoid,avoid,245,"Hello @epernod,. Thanks for the fix... I also fixed it in a different way (and lost in the middle of all the changes) in the PR#1460. ; My fix was using enum class (C++11) instead of the classic enum (C). Enum class was designed to specifically avoid name clash so it is nice to use them.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-682379074
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-682424203:254,Safety,avoid,avoid,254,"> Hello @epernod,; > ; > Thanks for the fix... I also fixed it in a different way (and lost in the middle of all the changes) in the PR#1460.; > My fix was using enum class (C++11) instead of the classic enum (C). Enum class was designed to specifically avoid name clash so it is nice to use them. Ok just saw your fix @damienmarchal . Do you prefer your way? I can change this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-682424203
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-684552769:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-684552769
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-685456214:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-685456214
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-685546824:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-685546824
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-685969694:72,Safety,timeout,timeout,72,THere is 16 scene crashing on centos....but this seems to be because of timeout.; Any idea ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-685969694
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-686046047:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-686046047
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-686376515:116,Availability,error,errors,116,> THere is 16 scene crashing on centos....but this seems to be because of timeout.; > Any idea ?. blinking time out errors on the CI I guess...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-686376515
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-686376515:74,Safety,timeout,timeout,74,> THere is 16 scene crashing on centos....but this seems to be because of timeout.; > Any idea ?. blinking time out errors on the CI I guess...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-686376515
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583:40,Availability,error,errors,40,Yes I'm using that fix and I do not see errors but I didn't run all the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583:72,Testability,test,tests,72,Yes I'm using that fix and I do not see errors but I didn't run all the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583
https://github.com/sofa-framework/sofa/pull/1465#issuecomment-689421908:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-689421908
https://github.com/sofa-framework/sofa/pull/1466#issuecomment-685459680:12,Testability,test,tests,12,ready if CI+tests compiles,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-685459680
https://github.com/sofa-framework/sofa/pull/1466#issuecomment-687108720:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-687108720
https://github.com/sofa-framework/sofa/pull/1466#issuecomment-687108720:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-687108720
https://github.com/sofa-framework/sofa/pull/1466#issuecomment-691101857:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-691101857
https://github.com/sofa-framework/sofa/issues/1469#issuecomment-774285932:238,Performance,load,loaded,238,I would be very surprised this could have anything to do with STLIB. STLIB is a pure python libray that just create a Sofa scene. My first guess would be that the created scene is crashing...but the same scene would crash the same way if loaded from XML.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1469#issuecomment-774285932
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:191,Integrability,interface,interface,191,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:50,Usability,UX,UX,50,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:55,Usability,Usab,Usability,55,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:96,Usability,clear,clearest,96,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:140,Usability,UX,UX,140,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1472#issuecomment-693266844:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1472#issuecomment-693266844
https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689364724:13,Integrability,message,message,13,But I see no message warning that a scene is not being run with the version set in APIVersion.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689364724
https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715:467,Availability,error,error,467,"> But I see no message warning that a scene is not being run with the version set in APIVersion. That's either because you're running a scene with no APIVersion component in it, or, and it's most likely, because you're using an up-to-date version of SOFA, so even if there's an APIVersion in it, you will be at best running the scene with a higher version, at worst with the same version that's mentioned in APIVersion::level.; My understanding of APIVersion is that error messages should only appear if your scene is ran with an old version of SOFA while the APIVersion's level expects a newer version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715
https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715:15,Integrability,message,message,15,"> But I see no message warning that a scene is not being run with the version set in APIVersion. That's either because you're running a scene with no APIVersion component in it, or, and it's most likely, because you're using an up-to-date version of SOFA, so even if there's an APIVersion in it, you will be at best running the scene with a higher version, at worst with the same version that's mentioned in APIVersion::level.; My understanding of APIVersion is that error messages should only appear if your scene is ran with an old version of SOFA while the APIVersion's level expects a newer version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715
https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715:473,Integrability,message,messages,473,"> But I see no message warning that a scene is not being run with the version set in APIVersion. That's either because you're running a scene with no APIVersion component in it, or, and it's most likely, because you're using an up-to-date version of SOFA, so even if there's an APIVersion in it, you will be at best running the scene with a higher version, at worst with the same version that's mentioned in APIVersion::level.; My understanding of APIVersion is that error messages should only appear if your scene is ran with an old version of SOFA while the APIVersion's level expects a newer version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715
https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693511374:51,Deployability,install,installation,51,"Actually, I have fixed It. Aparently I had a 19.06 installation and I was mixing library versions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693511374
https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752:22,Usability,feedback,feedback,22,"Great, thanks for the feedback JuanJo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752
https://github.com/sofa-framework/sofa/pull/1478#issuecomment-692275848:498,Modifiability,plugin,plugin,498,"Hello @hugtalbot,. Thanks for the PR which fix old code. But I think this is not the way to fix that as you rely on #ifdef #endif which is almost as deprecated as the code to fix. ; I suggest you to:; - remove all #ifdef #endif ; - replace gl code with the use of the drawTools in draw(); - you can still use real gl functions but only if you are in drawVisual() function (the objec's function is to render something). If this is the case the better is to move these object in a rendering specific plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-692275848
https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625:341,Integrability,depend,dependency,341,"> Maybe just one last point (for @guparan) why are the `find_package` in the MyPlugin.cmake.in files always QUIET REQUIRED? is that normal or should it be coherent with the CMakeList.txt sofa_find_package ?. It is normal.; **QUIET** because we don't want to spam the users of our package (people doing `find_package(MyPlugin)`) with all our dependency solving. It will still fail with a message if the dependency is not found.; **REQUIRED** because if our package was built-with and linked-to a dependency (even a soft one), then this dependency becomes mandatory for the users of our package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625
https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625:387,Integrability,message,message,387,"> Maybe just one last point (for @guparan) why are the `find_package` in the MyPlugin.cmake.in files always QUIET REQUIRED? is that normal or should it be coherent with the CMakeList.txt sofa_find_package ?. It is normal.; **QUIET** because we don't want to spam the users of our package (people doing `find_package(MyPlugin)`) with all our dependency solving. It will still fail with a message if the dependency is not found.; **REQUIRED** because if our package was built-with and linked-to a dependency (even a soft one), then this dependency becomes mandatory for the users of our package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625
https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625:402,Integrability,depend,dependency,402,"> Maybe just one last point (for @guparan) why are the `find_package` in the MyPlugin.cmake.in files always QUIET REQUIRED? is that normal or should it be coherent with the CMakeList.txt sofa_find_package ?. It is normal.; **QUIET** because we don't want to spam the users of our package (people doing `find_package(MyPlugin)`) with all our dependency solving. It will still fail with a message if the dependency is not found.; **REQUIRED** because if our package was built-with and linked-to a dependency (even a soft one), then this dependency becomes mandatory for the users of our package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625
https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625:495,Integrability,depend,dependency,495,"> Maybe just one last point (for @guparan) why are the `find_package` in the MyPlugin.cmake.in files always QUIET REQUIRED? is that normal or should it be coherent with the CMakeList.txt sofa_find_package ?. It is normal.; **QUIET** because we don't want to spam the users of our package (people doing `find_package(MyPlugin)`) with all our dependency solving. It will still fail with a message if the dependency is not found.; **REQUIRED** because if our package was built-with and linked-to a dependency (even a soft one), then this dependency becomes mandatory for the users of our package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625
https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625:535,Integrability,depend,dependency,535,"> Maybe just one last point (for @guparan) why are the `find_package` in the MyPlugin.cmake.in files always QUIET REQUIRED? is that normal or should it be coherent with the CMakeList.txt sofa_find_package ?. It is normal.; **QUIET** because we don't want to spam the users of our package (people doing `find_package(MyPlugin)`) with all our dependency solving. It will still fail with a message if the dependency is not found.; **REQUIRED** because if our package was built-with and linked-to a dependency (even a soft one), then this dependency becomes mandatory for the users of our package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625
https://github.com/sofa-framework/sofa/pull/1479#issuecomment-693272508:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1479#issuecomment-693272508
https://github.com/sofa-framework/sofa/pull/1480#issuecomment-693272586:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1480#issuecomment-693272586
https://github.com/sofa-framework/sofa/pull/1480#issuecomment-693275647:73,Testability,test,test,73,Good to me.; Just a small note that in a future PR it would be better to test if the componentState is Valid before drawing.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1480#issuecomment-693275647
https://github.com/sofa-framework/sofa/pull/1482#issuecomment-693272655:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1482#issuecomment-693272655
https://github.com/sofa-framework/sofa/pull/1483#issuecomment-695957397:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1483#issuecomment-695957397
https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694241107:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694241107
https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694241107:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694241107
https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694629313:0,Energy Efficiency,Green,Green,0,Green green green... may I ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694629313
https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694629313:6,Energy Efficiency,green,green,6,Green green green... may I ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694629313
https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694629313:12,Energy Efficiency,green,green,12,Green green green... may I ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485#issuecomment-694629313
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:422,Modifiability,refactor,refactored,422,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:215,Usability,feedback,feedback,215,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:326,Usability,guid,guidelines,326,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251:249,Usability,feedback,feedback,249,Hello @damienmarchal It seems this file was included by mistake.; The code was commented because it didn't compile but I didn't mean to put it in the pull request.; Only the commits about SofaGeneralEngine should have been there.; Thank you for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149:233,Deployability,Update,Update,233,"good job @coolteemf ; All you have to do is, go on your branch and revert your commit:; ```; # Make sure you are on the right branch; git checkout Improve_MeshBarycentricMapperEngine. # Undo the desired commit; git revert 130a13d. # Update the remote with the undo of the code; git push origin Improve_MeshBarycentricMapperEngine; ```; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149:186,Usability,Undo,Undo,186,"good job @coolteemf ; All you have to do is, go on your branch and revert your commit:; ```; # Make sure you are on the right branch; git checkout Improve_MeshBarycentricMapperEngine. # Undo the desired commit; git revert 130a13d. # Update the remote with the undo of the code; git push origin Improve_MeshBarycentricMapperEngine; ```; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149:260,Usability,undo,undo,260,"good job @coolteemf ; All you have to do is, go on your branch and revert your commit:; ```; # Make sure you are on the right branch; git checkout Improve_MeshBarycentricMapperEngine. # Undo the desired commit; git revert 130a13d. # Update the remote with the undo of the code; git push origin Improve_MeshBarycentricMapperEngine; ```; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149
https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:709,Deployability,update,updates,709,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930
https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:892,Integrability,message,messages,892,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930
https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:806,Modifiability,refactor,refactor,806,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930
https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:736,Testability,log,logic,736,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930
https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695968046:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695968046
https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700352321:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700352321
https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158:22,Testability,test,test,22,[ci-build][with-scene-test][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158
https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158:44,Testability,test,tests,44,[ci-build][with-scene-test][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158
https://github.com/sofa-framework/sofa/pull/1490#issuecomment-701720706:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-701720706
https://github.com/sofa-framework/sofa/pull/1490#issuecomment-701720706:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-701720706
https://github.com/sofa-framework/sofa/pull/1491#issuecomment-702187234:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1491#issuecomment-702187234
https://github.com/sofa-framework/sofa/pull/1491#issuecomment-702714354:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1491#issuecomment-702714354
https://github.com/sofa-framework/sofa/pull/1492#issuecomment-707132044:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1492#issuecomment-707132044
https://github.com/sofa-framework/sofa/issues/1494#issuecomment-696157313:92,Availability,error,error,92,"Hi @zhangm365 ; thanks for the notification, could your solution / the problem causing this error please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1494#issuecomment-696157313
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423:192,Availability,error,error,192,The changes have not been propagated everywhere @epernod ; ```bash; /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; radius.beginEdit()->clear();; ^~~~~~; d_radius; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423:284,Usability,clear,clear,284,The changes have not been propagated everywhere @epernod ; ```bash; /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; radius.beginEdit()->clear();; ^~~~~~; d_radius; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121:210,Availability,error,error,210,> ; > ; > The changes have not been propagated everywhere @epernod; > ; > ```shell; > /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; > radius.beginEdit()->clear();; > ^~~~~~; > d_radius; > ```. I don't see what you are speaking about...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121:304,Usability,clear,clear,304,> ; > ; > The changes have not been propagated everywhere @epernod; > ; > ```shell; > /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; > radius.beginEdit()->clear();; > ^~~~~~; > d_radius; > ```. I don't see what you are speaking about...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644:45,Performance,load,load,45,order of call right now:; ```; SphereLoader::load(); addUpdateCallback; SphereLoader::load(); SphereLoader::load() Exit; SphereLoader::applyTransform(); SphereLoader::applyTransform() Exit; SphereLoader::load() Exit; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644:86,Performance,load,load,86,order of call right now:; ```; SphereLoader::load(); addUpdateCallback; SphereLoader::load(); SphereLoader::load() Exit; SphereLoader::applyTransform(); SphereLoader::applyTransform() Exit; SphereLoader::load() Exit; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644:108,Performance,load,load,108,order of call right now:; ```; SphereLoader::load(); addUpdateCallback; SphereLoader::load(); SphereLoader::load() Exit; SphereLoader::applyTransform(); SphereLoader::applyTransform() Exit; SphereLoader::load() Exit; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644:204,Performance,load,load,204,order of call right now:; ```; SphereLoader::load(); addUpdateCallback; SphereLoader::load(); SphereLoader::load() Exit; SphereLoader::applyTransform(); SphereLoader::applyTransform() Exit; SphereLoader::load() Exit; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-715270644
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:374,Deployability,update,updateTransformPosition,374,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:548,Deployability,update,updateTransformPosition,548,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:83,Performance,load,load,83,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:134,Performance,load,load,134,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:242,Performance,load,load,242,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:327,Performance,load,load,327,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800:627,Performance,load,load,627,"This is the new call stack after last commit, calling applyTransform at the end of load method... To be discussed. ```; SphereLoader::load; SphereLoader::applyTransform; !! addUpdateCallback filename; m_filename has changed: 1; SphereLoader::load; SphereLoader::applyTransform; SphereLoader::applyTransform exit; SphereLoader::load exit; !! addUpdateCallback exit valid; !! updateTransformPosition; d_translation has changed: 0; d_rotation has changed: 0; d_scale has changed: 1; SphereLoader::applyTransform; SphereLoader::applyTransform exit; !! updateTransformPosition exit; SphereLoader::applyTransform exit; SphereLoader::load exit; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-716717800
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:89,Testability,test,test,89,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:16,Usability,simpl,simplified,16,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-743479048:15,Modifiability,variab,variable,15,@hugtalbot the variable m_savedPositions is not defined.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-743479048
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:125,Deployability,update,updateFileNameAndTransformPosition,125,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1042,Deployability,update,update,1042,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:81,Performance,load,load,81,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:101,Performance,load,load,101,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:275,Performance,load,load,275,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:295,Performance,load,load,295,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:402,Performance,load,load,402,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:445,Performance,load,loaded,445,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:518,Performance,Load,Loader,518,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:614,Performance,load,load,614,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:817,Performance,Load,Load,817,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:937,Performance,load,load,937,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:964,Performance,Load,Loader,964,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1097,Performance,Load,Loader,1097,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1108,Performance,load,loading,1108,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1251,Performance,load,loader,1251,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:708,Safety,avoid,avoided,708,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1062,Testability,log,log,1062,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744837495:82,Performance,load,loading,82,btw... this means that probably all MeshLoader using a callback on m_filename are loading mesh twice at start...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744837495
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-745160497:28,Performance,load,loader,28,the init() function of this loader does nothing. Everything is already in the callback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-745160497
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-745213034:69,Performance,Load,Loader,69,@hugtalbot I propose to open an issue on that particular problem for Loader in general and merge that PR. Is it ok for you?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-745213034
https://github.com/sofa-framework/sofa/issues/1496#issuecomment-698234678:58,Deployability,update,update,58,"Just pushing the problem, but a solution could be to just update QWT to 6.1.5.; Extract of the Changelog of Qwt 6.1.5: ; `- Missing includes of QPainterPath ( Qt 5.15 ) added`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1496#issuecomment-698234678
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-700120269:184,Deployability,update,update,184,"1 - Two PRs are preferable because you want to solve two radically different issues (DataEigen and the QWT Stuff); 2- As for QWT, instead of modifying directly the source by yourself, update directly the source in extlibs to 6.1.5 which seems to solve your problem of compilation. #1496 ; Link: https://sourceforge.net/projects/qwt/files/qwt/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-700120269
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-701293179:76,Testability,test,tests,76,"this will be very useful ... So, this PR would be perfect with some unitary tests",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-701293179
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-703543088:13,Testability,test,test,13,I don't have test yet.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-703543088
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-704803455:61,Integrability,depend,depending,61,Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template).; Is there no way to have a more generic way for other Eigen types (like MatrixXf)? @Younesssss ; @jnbrunet @fredroy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-704803455
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022:219,Integrability,depend,depending,219,"It really appears as a proof of concept.This work will be very useful, especially regarding the recent discussion on matrix formats in SOFA relying on Eigen. Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template): Vec3 or Real. Let’s make it explicitly only for double. A test is also needed here (e.g. AbstractTypeInfo). We need in a future.a more generic way for other Eigen types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022:337,Testability,test,test,337,"It really appears as a proof of concept.This work will be very useful, especially regarding the recent discussion on matrix formats in SOFA relying on Eigen. Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template): Vec3 or Real. Let’s make it explicitly only for double. A test is also needed here (e.g. AbstractTypeInfo). We need in a future.a more generic way for other Eigen types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-884057216:46,Modifiability,plugin,plugin,46,@jnbrunet did you do something similar in the plugin SofaCaribou ? aka set an EigenMatrix in a Data?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-884057216
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:2132,Testability,test,test,2132,"en::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::Dynamic) {; return data.resize(size, data.cols);; } else {; return false; ; }; }; ; // (...); }; ```. And test it with a couple of matrix types, for example:; ```c++; data<Eigen::Matrix<double, Eigen::Dynamic, 3>> data_1;; data<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>> data_2;; data<Eigen::Matrix<double, 8, 3>> data_3;; data<Eigen::Map<Eigen::Matrix<double, 8, 3>>> data_4;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:698,Usability,Simpl,SimpleCopy,698," unfortunately. Eigen matrices have a nice compile-time introspection. Hence it would be possible to do something like:. ```c++; template <Derived>; struct EigenMatrixTypeInfo {; /// 1 if this type has valid infos; static constexpr auto ValidInfo = 1; ; ; /// 1 if this type has a fixed size -> always 1 single pair of vec3; static constexpr auto FixedSize = (Derived::RowsAtCompileTime != Eigen::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:751,Usability,simpl,simply,751," unfortunately. Eigen matrices have a nice compile-time introspection. Hence it would be possible to do something like:. ```c++; template <Derived>; struct EigenMatrixTypeInfo {; /// 1 if this type has valid infos; static constexpr auto ValidInfo = 1; ; ; /// 1 if this type has a fixed size -> always 1 single pair of vec3; static constexpr auto FixedSize = (Derived::RowsAtCompileTime != Eigen::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:812,Usability,Simpl,SimpleLayout,812," unfortunately. Eigen matrices have a nice compile-time introspection. Hence it would be possible to do something like:. ```c++; template <Derived>; struct EigenMatrixTypeInfo {; /// 1 if this type has valid infos; static constexpr auto ValidInfo = 1; ; ; /// 1 if this type has a fixed size -> always 1 single pair of vec3; static constexpr auto FixedSize = (Derived::RowsAtCompileTime != Eigen::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:147,Deployability,integrat,integrate,147,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:147,Integrability,integrat,integrate,147,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:84,Usability,clear,clear,84,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819
https://github.com/sofa-framework/sofa/pull/1500#issuecomment-700519121:259,Deployability,update,updated,259,"Just a bit of explanation:; -> fetching matrices using glGetFloatv(GL_{MODELVIEW/PROJECTION}_MATRIX is really, really old-style OpenGL and should be avoided. That's why one should use the stored matrices in visualParams. ; In this case, the matrices were not updated during the 2nd viewport rendering ; code using glGetMatrix() was fine but code using things stored in visualparams was not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1500#issuecomment-700519121
https://github.com/sofa-framework/sofa/pull/1500#issuecomment-700519121:149,Safety,avoid,avoided,149,"Just a bit of explanation:; -> fetching matrices using glGetFloatv(GL_{MODELVIEW/PROJECTION}_MATRIX is really, really old-style OpenGL and should be avoided. That's why one should use the stored matrices in visualParams. ; In this case, the matrices were not updated during the 2nd viewport rendering ; code using glGetMatrix() was fine but code using things stored in visualparams was not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1500#issuecomment-700519121
https://github.com/sofa-framework/sofa/issues/1502#issuecomment-704745014:74,Modifiability,refactor,refactoring,74,"Hi @epernod,. Thanks for the report. I will give that some time after the refactoring done :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1502#issuecomment-704745014
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-704505017:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-704505017
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-704505017:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-704505017
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:286,Modifiability,refactor,refactoring,286,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:30,Usability,feedback,feedback,30,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:683,Usability,clear,clear,683,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-707185890:39,Energy Efficiency,reduce,reduces,39,"Hi damien !. It's a great news that it reduces the compilation time. Indeed, I didn't see that this way :); I think my problem can easily be fixed taking a vector of string and doing the parse in the graph myself to get basedata pointers. I have a specific component that exports a list of data at specific time using the << opereator. I previously used the datalink feature on basedata to get the pointers, but indeed it's maybe a specific need that does not justify 20% additional compilation time ! . Therefore, thanks for your job and I will implement the string version for this specific component. . Hadrien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-707185890
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1748,Security,validat,validate,1748,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:975,Testability,log,logError,975,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1090,Testability,log,logError,1090,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1474,Testability,log,logError,1474,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:214,Usability,simpl,simply,214,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:812,Usability,simpl,simply,812,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:267,Deployability,update,update,267,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:336,Deployability,update,update,336,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:432,Usability,usab,usable,432,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:372,Modifiability,refactor,refactor,372,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:476,Modifiability,refactor,refactored,476,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:586,Modifiability,refactor,refactored,586,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:630,Modifiability,plugin,plugin,630,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:20,Usability,clear,clear,20,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109:122,Modifiability,refactor,refactoring,122,"Hey @epernod and @damienmarchal . I fully agree on removing `canCreate`, however I do not see any better way here without refactoring all forcefields, and since this solution works without too much effort, I think we should use this as a first step, and ultimately do another refactoring for the canCreate with a better solution (which we have to find first). @epernod , to answer your question, the mechanical state found during the `canCreate` (or `create`) method exists (its constructor has been called and the pointer is valid), but hasn't been initialized (its size will be 0). These two methods follow the order in which the scene was _parsed_ (eg xml or python), and after that the init stage will follow the scene graph order. The constructor of the forcefield is called _after_ the `canCreate` by a static call to `forcefield::create`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109:276,Modifiability,refactor,refactoring,276,"Hey @epernod and @damienmarchal . I fully agree on removing `canCreate`, however I do not see any better way here without refactoring all forcefields, and since this solution works without too much effort, I think we should use this as a first step, and ultimately do another refactoring for the canCreate with a better solution (which we have to find first). @epernod , to answer your question, the mechanical state found during the `canCreate` (or `create`) method exists (its constructor has been called and the pointer is valid), but hasn't been initialized (its size will be 0). These two methods follow the order in which the scene was _parsed_ (eg xml or python), and after that the init stage will follow the scene graph order. The constructor of the forcefield is called _after_ the `canCreate` by a static call to `forcefield::create`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109
https://github.com/sofa-framework/sofa/pull/1508#issuecomment-701689660:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1508#issuecomment-701689660
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126:24,Usability,feedback,feedback,24,I would be glad to have feedback on this one...especially the switch from sofa::simulation::Node::Sptr to sofa::core::sptr<>,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429:117,Usability,simpl,simplification,117,"This PR seems to include several major changes (ptr / include vs typedef). All directly or indirectly related to the simplification of the headers. Could you also explain if we earn something by the change on typedef (perf, etc) or is this in prevision for c++20 modules? is this lightening the compilation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809:36,Energy Efficiency,reduce,reduce,36,"It is always the same problem, ; to reduce dependency between software components (header included in header) you may want to use forward declaration.; Such forward declaration allows to write code manipulating pointer or reference to the forwarded declared object. Not doing that requires to include the full definition of the manipulated class. Reducing the amount of edges in the dependency graph favor a good separation between software components, reducing compilation speed and reducing the need to recompile when something change. . D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809:43,Integrability,depend,dependency,43,"It is always the same problem, ; to reduce dependency between software components (header included in header) you may want to use forward declaration.; Such forward declaration allows to write code manipulating pointer or reference to the forwarded declared object. Not doing that requires to include the full definition of the manipulated class. Reducing the amount of edges in the dependency graph favor a good separation between software components, reducing compilation speed and reducing the need to recompile when something change. . D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809:383,Integrability,depend,dependency,383,"It is always the same problem, ; to reduce dependency between software components (header included in header) you may want to use forward declaration.; Such forward declaration allows to write code manipulating pointer or reference to the forwarded declared object. Not doing that requires to include the full definition of the manipulated class. Reducing the amount of edges in the dependency graph favor a good separation between software components, reducing compilation speed and reducing the need to recompile when something change. . D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-706166486:114,Testability,test,test,114,"Hello @hugtalbot,. Actually I'm not really in favor of merging this PR and view it as a compiling (and regression test) draft that I wanted to share so we can discuss. . Before discussing about having a naming convention to me the real question is to ask ask ourself if we want to have all the forward declarations in a single file on a per sofa module basis or not :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-706166486
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773:592,Usability,clear,clear,592,"Hello @olivier-goury,. Thank you for the PR. ; I have added some comments (mostly about coding-style). . As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; ```cpp; /******************************************************************************; * Contributors: ; * - damien.marchal@univ-lille.fr ; * - olivier.goury@inria.fr ; ******************************************************************************; ```. I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701446275:302,Modifiability,refactor,refactoring,302,"Hummm the code of PointSplatRenderer is strangely *very* similar to PointSplatModel 🤔(which is also in SofaOpenGLVisual 🙃 ); Intentional ?; The difference I could see is that the new one takes explicit data (PointSplatModel gets context, etc). In any case, I would be against copy/paste and more about refactoring/cleaning the existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701446275
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584:630,Usability,clear,clear,630,"> Hello @olivier-goury,; > ; > Thank you for the PR.; > I have added some comments (mostly about coding-style).; > ; > As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; > ; > ```c++; > /******************************************************************************; > * Contributors: ; > * - damien.marchal@univ-lille.fr ; > * - olivier.goury@inria.fr ; > ******************************************************************************; > ```; > ; > I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections. Hey thanks for all the comments, yes I can do that, no problem!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701480994:311,Modifiability,refactor,refactoring,311,"> Hummm the code of PointSplatRenderer is strangely _very_ similar to PointSplatModel (which is also in SofaOpenGLVisual ); > Intentional ?; > The difference I could see is that the new one takes explicit data (PointSplatModel gets context, etc); > ; > In any case, I would be against copy/paste and more about refactoring/cleaning the existing code. Thanks for the comment! That code was written by @damienmarchal , I let him reply on this one. Maybe I can remove those files from this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701480994
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-704146619:47,Modifiability,refactor,refactor,47,"Hi all,. On my side I have no plan to clean or refactor the existing sofa code in the next week.; It was just there for helping student to debug their implicit field and without the RaymarchingEngine to generate the splats it is of very small use. So let's move PointSplatRender shouldn't out of this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-704146619
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-716648240:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-716648240
https://github.com/sofa-framework/sofa/pull/1512#issuecomment-701928474:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1512#issuecomment-701928474
https://github.com/sofa-framework/sofa/pull/1513#issuecomment-703487159:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1513#issuecomment-703487159
https://github.com/sofa-framework/sofa/pull/1514#issuecomment-702593738:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1514#issuecomment-702593738
https://github.com/sofa-framework/sofa/pull/1515#issuecomment-703167658:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1515#issuecomment-703167658
https://github.com/sofa-framework/sofa/pull/1516#issuecomment-703339103:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1516#issuecomment-703339103
https://github.com/sofa-framework/sofa/issues/1517#issuecomment-703699909:167,Deployability,update,update,167,"Hello @jjcasmar, . thanks for reporting an issue. . My first guess is that this is not related to sofapython3 but more on the design of MechanicalObject that does not update the different data fields (position, rest_position, etc) in a coherent manner. ; I think that the recent PR made by @marques-bruno try to fix that: https://github.com/sofa-framework/sofa/pulls . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1517#issuecomment-703699909
https://github.com/sofa-framework/sofa/issues/1517#issuecomment-703709218:68,Testability,assert,assert,68,"I have tried that, but is not running yet correctly. I get the same assert. ```; xNObject = coarseObject.addChild(""xN""); xN_mo = xNObject.addObject(""MechanicalObject"", template=""Vec1"", name=""xN_MO"", size=3); xN_mo.rest_position = np.array([[0,0.25,0.75]]).T; ```. Is the assignment to rest_position correct?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1517#issuecomment-703709218
https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705527067:0,Testability,Test,Tests,0,"Tests passed so, mergin' 🎵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705527067
https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124:25,Integrability,message,message,25,ahah I wanted to leave a message and merge... And I just left the message.; 🥇,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124
https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124:66,Integrability,message,message,66,ahah I wanted to leave a message and merge... And I just left the message.; 🥇,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124
https://github.com/sofa-framework/sofa/pull/1520#issuecomment-706287704:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1520#issuecomment-706287704
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-705544809:47,Testability,log,logging,47,"A draft: (the existing ones first); -io; -gl; -logging; -messaging; -system; -testing; -types (with Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray); -basictypes (fixed_array, vector, map etc); -algo (Polynmial_LD, decompose, Mat_*, lcpsolver); -utilities (rest of the mess)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-705544809
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-705544809:78,Testability,test,testing,78,"A draft: (the existing ones first); -io; -gl; -logging; -messaging; -system; -testing; -types (with Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray); -basictypes (fixed_array, vector, map etc); -algo (Polynmial_LD, decompose, Mat_*, lcpsolver); -utilities (rest of the mess)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-705544809
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:609,Integrability,depend,dependency,609,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:653,Integrability,depend,dependency,653,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:315,Modifiability,Config,Config,315,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:338,Testability,Log,Logging,338,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:585,Testability,Test,Testing,585,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737
https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:6,Usability,Feedback,Feedback,6,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737
https://github.com/sofa-framework/sofa/pull/1522#issuecomment-706017298:17,Availability,error,errors,17,Well done to fix errors introduced in recent previous merge ( not detected in the reviews 😭),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-706017298
https://github.com/sofa-framework/sofa/pull/1522#issuecomment-706017298:66,Safety,detect,detected,66,Well done to fix errors introduced in recent previous merge ( not detected in the reviews 😭),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-706017298
https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971:7,Deployability,integrat,integrated,7,I just integrated your changes @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971
https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971:7,Integrability,integrat,integrated,7,I just integrated your changes @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971
https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706132405:694,Performance,tune,tune,694,"Hello @jjcasmar . In order to added a new template to a component you need to add that where the object is registered ; to the component factory as in MechanicalObject.; ```cpp; int MechanicalObjectClass = core::RegisterObject(""mechanical state vectors""); .add< MechanicalObject<Vec3Types> >(true) // default template; .add< MechanicalObject<Vec2Types> >(); .add< MechanicalObject<Vec1Types> >(); .add< MechanicalObject<Vec6Types> >(); .add< MechanicalObject<Rigid3Types> >(); .add< MechanicalObject<Rigid2Types> >();; ```. This is where the component become accessible to the runtime point of view. The name you can use in the scene is automatically generated out of the c++ name. But you can tune that as done in RigidTypes. I'm not 100% sure but this should correspond to these lines in RigidTypes.h; ```cpp; typedef StdRigidTypes<2,double> Rigid2dTypes;; typedef RigidMass<2,double> Rigid2dMass;; template<> inline const char* Rigid2dTypes::Name() { return ""Rigid2d""; }; ``` . Hope this will help you,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706132405
https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706132405:559,Security,access,accessible,559,"Hello @jjcasmar . In order to added a new template to a component you need to add that where the object is registered ; to the component factory as in MechanicalObject.; ```cpp; int MechanicalObjectClass = core::RegisterObject(""mechanical state vectors""); .add< MechanicalObject<Vec3Types> >(true) // default template; .add< MechanicalObject<Vec2Types> >(); .add< MechanicalObject<Vec1Types> >(); .add< MechanicalObject<Vec6Types> >(); .add< MechanicalObject<Rigid3Types> >(); .add< MechanicalObject<Rigid2Types> >();; ```. This is where the component become accessible to the runtime point of view. The name you can use in the scene is automatically generated out of the c++ name. But you can tune that as done in RigidTypes. I'm not 100% sure but this should correspond to these lines in RigidTypes.h; ```cpp; typedef StdRigidTypes<2,double> Rigid2dTypes;; typedef RigidMass<2,double> Rigid2dMass;; template<> inline const char* Rigid2dTypes::Name() { return ""Rigid2d""; }; ``` . Hope this will help you,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706132405
https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225:1067,Availability,error,error,1067,"I have tried something like that and doesnt work. Following what I found in the Flexible plugin I have two files. DeformationGradientTypes.h; ```; using Vec9 = sofa::defaulttype::Vec<9, double>;; using F33D = sofa::defaulttype::StdVectorTypes<VNCS::Vec9, VNCS::Vec9, double>;. } // namespace VNCS. template <>; struct sofa::defaulttype::DataTypeInfo<VNCS::F33D::Deriv>; : public FixedArrayTypeInfo<VNCS::F33D::Deriv, VNCS::F33D::Deriv::total_size> {; static std::string name(); {; std::ostringstream o;; o << ""F33D"";; return o.str();; }; };. template <>; struct sofa::defaulttype::DataTypeName<VNCS::F33D::Coord> {; static const char *name() { return ""F33D::CoordOrDeriv""; }; };. template <>; inline const char *VNCS::F33D::Name(); {; return ""F33D"";; }; ```. and in my initPlugin.cpp. ```; #include ""DeformationGradientTypes.h""; ...; template class sofa::core::State<VNCS::F33D>;; template class sofa::component::container::MechanicalObject<VNCS::F33D>;; static sofa::defaulttype::RegisterTemplateAlias alias0(""F33D"", VNCS::F33D::Name());; ```. All this gives me the error I showed previously",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225
https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225:80,Modifiability,Flexible,Flexible,80,"I have tried something like that and doesnt work. Following what I found in the Flexible plugin I have two files. DeformationGradientTypes.h; ```; using Vec9 = sofa::defaulttype::Vec<9, double>;; using F33D = sofa::defaulttype::StdVectorTypes<VNCS::Vec9, VNCS::Vec9, double>;. } // namespace VNCS. template <>; struct sofa::defaulttype::DataTypeInfo<VNCS::F33D::Deriv>; : public FixedArrayTypeInfo<VNCS::F33D::Deriv, VNCS::F33D::Deriv::total_size> {; static std::string name(); {; std::ostringstream o;; o << ""F33D"";; return o.str();; }; };. template <>; struct sofa::defaulttype::DataTypeName<VNCS::F33D::Coord> {; static const char *name() { return ""F33D::CoordOrDeriv""; }; };. template <>; inline const char *VNCS::F33D::Name(); {; return ""F33D"";; }; ```. and in my initPlugin.cpp. ```; #include ""DeformationGradientTypes.h""; ...; template class sofa::core::State<VNCS::F33D>;; template class sofa::component::container::MechanicalObject<VNCS::F33D>;; static sofa::defaulttype::RegisterTemplateAlias alias0(""F33D"", VNCS::F33D::Name());; ```. All this gives me the error I showed previously",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225
https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225:89,Modifiability,plugin,plugin,89,"I have tried something like that and doesnt work. Following what I found in the Flexible plugin I have two files. DeformationGradientTypes.h; ```; using Vec9 = sofa::defaulttype::Vec<9, double>;; using F33D = sofa::defaulttype::StdVectorTypes<VNCS::Vec9, VNCS::Vec9, double>;. } // namespace VNCS. template <>; struct sofa::defaulttype::DataTypeInfo<VNCS::F33D::Deriv>; : public FixedArrayTypeInfo<VNCS::F33D::Deriv, VNCS::F33D::Deriv::total_size> {; static std::string name(); {; std::ostringstream o;; o << ""F33D"";; return o.str();; }; };. template <>; struct sofa::defaulttype::DataTypeName<VNCS::F33D::Coord> {; static const char *name() { return ""F33D::CoordOrDeriv""; }; };. template <>; inline const char *VNCS::F33D::Name(); {; return ""F33D"";; }; ```. and in my initPlugin.cpp. ```; #include ""DeformationGradientTypes.h""; ...; template class sofa::core::State<VNCS::F33D>;; template class sofa::component::container::MechanicalObject<VNCS::F33D>;; static sofa::defaulttype::RegisterTemplateAlias alias0(""F33D"", VNCS::F33D::Name());; ```. All this gives me the error I showed previously",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225
https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706542777:308,Modifiability,plugin,plugins,308,"Hey @jjcasmar . Thank you, this is indeed a good suggestion. There are probably other places where such operator overload is used and should be replaced by a free function. We should decide on where to place these free functions and maybe try to list all operator overloads usage in the rest of SOFA and its plugins. J-N",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706542777
https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706554627:162,Availability,error,errors,162,Probably the best way to see where this operator overloads are used is to remove them from StdVectorTypes (Vec3Types and family) and see where we get the compile errors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706554627
https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:1879,Integrability,depend,dependent,1879,"re a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can only be used as a dependent DoF (for example, in this case, VNCS::F33D is a deformation gradient which is by definition a dependent DoF), that storeResetState could be specialized.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184
https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:2019,Integrability,depend,dependent,2019,"re a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can only be used as a dependent DoF (for example, in this case, VNCS::F33D is a deformation gradient which is by definition a dependent DoF), that storeResetState could be specialized.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184
https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:2123,Integrability,depend,dependent,2123,"re a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can only be used as a dependent DoF (for example, in this case, VNCS::F33D is a deformation gradient which is by definition a dependent DoF), that storeResetState could be specialized.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184
https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:215,Security,access,access,215,"For the record, what I am doing to alleviate this issue is to specialize the MechanicalObject functions that fail to compile with the default implementation and my DataType. There are a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184
https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858:315,Performance,load,loaded,315,"Nothing to add except that after few test my conclusion is that Include-what-you-use is ok but can only detect includes that are not needed. Thus an include needed because of an single inline method in a .h will not be detected as not-needed. . On my side I'm using the -H options of g++ to prints all the includes loaded when compiling a .cpp then I use a small python script to generate an html page out of that to navigate from includes to includes. Because I lack of time it is as-is, ; https://github.com/damienmarchal/snippets/blob/master/include-analyzer.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858
https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858:104,Safety,detect,detect,104,"Nothing to add except that after few test my conclusion is that Include-what-you-use is ok but can only detect includes that are not needed. Thus an include needed because of an single inline method in a .h will not be detected as not-needed. . On my side I'm using the -H options of g++ to prints all the includes loaded when compiling a .cpp then I use a small python script to generate an html page out of that to navigate from includes to includes. Because I lack of time it is as-is, ; https://github.com/damienmarchal/snippets/blob/master/include-analyzer.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858
https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858:219,Safety,detect,detected,219,"Nothing to add except that after few test my conclusion is that Include-what-you-use is ok but can only detect includes that are not needed. Thus an include needed because of an single inline method in a .h will not be detected as not-needed. . On my side I'm using the -H options of g++ to prints all the includes loaded when compiling a .cpp then I use a small python script to generate an html page out of that to navigate from includes to includes. Because I lack of time it is as-is, ; https://github.com/damienmarchal/snippets/blob/master/include-analyzer.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858
https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858:37,Testability,test,test,37,"Nothing to add except that after few test my conclusion is that Include-what-you-use is ok but can only detect includes that are not needed. Thus an include needed because of an single inline method in a .h will not be detected as not-needed. . On my side I'm using the -H options of g++ to prints all the includes loaded when compiling a .cpp then I use a small python script to generate an html page out of that to navigate from includes to includes. Because I lack of time it is as-is, ; https://github.com/damienmarchal/snippets/blob/master/include-analyzer.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858
https://github.com/sofa-framework/sofa/issues/1527#issuecomment-771480416:4,Deployability,update,update,4,"NG1 update: (v20.12 & master). <img src=""https://user-images.githubusercontent.com/11028016/106576513-842ec480-653d-11eb-91ee-7ffb3228b72f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106576614-a7597400-653d-11eb-897b-e206951575ba.png"" width=""350"" >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-771480416
https://github.com/sofa-framework/sofa/issues/1529#issuecomment-735659970:25,Modifiability,plugin,pluginized,25,SofaGeneral is now fully pluginized! :tada: ; Thanks a lot @fredroy :+1: :+1: :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1529#issuecomment-735659970
https://github.com/sofa-framework/sofa/pull/1530#issuecomment-707348647:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1530#issuecomment-707348647
https://github.com/sofa-framework/sofa/pull/1531#issuecomment-707582488:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1531#issuecomment-707582488
https://github.com/sofa-framework/sofa/pull/1532#issuecomment-711417926:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1532#issuecomment-711417926
https://github.com/sofa-framework/sofa/pull/1532#issuecomment-711957272:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1532#issuecomment-711957272
https://github.com/sofa-framework/sofa/pull/1533#issuecomment-707260026:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1533#issuecomment-707260026
https://github.com/sofa-framework/sofa/pull/1533#issuecomment-711418096:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1533#issuecomment-711418096
https://github.com/sofa-framework/sofa/pull/1533#issuecomment-711958029:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1533#issuecomment-711958029
https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815:377,Deployability,update,updated,377,"Hi,. nice to have you back!. I think the fact that the ```doLoad``` is called 3 times is because your callback is not connected to all your output data at the same time. So each time you ask for a data independently it will relaunch the callback. Then the second point is because you don't override the method ```doClearBuffers```. you can see how ```meshObjLoader``` has been updated in commit ca3a1a4 (I don't know how to link the commit here...); date of the commit: Date: Wednesday, June 24, 2020 2:26:41 PM. I didn't know this loader. It would be nice if you could push a small example with it's mesh in the main repository of SOFA. Like for the other meshloader in: examples/Components/loader/ ; Moreover as soon as a scene is set, it would be tested by the CI of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815
https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815:532,Performance,load,loader,532,"Hi,. nice to have you back!. I think the fact that the ```doLoad``` is called 3 times is because your callback is not connected to all your output data at the same time. So each time you ask for a data independently it will relaunch the callback. Then the second point is because you don't override the method ```doClearBuffers```. you can see how ```meshObjLoader``` has been updated in commit ca3a1a4 (I don't know how to link the commit here...); date of the commit: Date: Wednesday, June 24, 2020 2:26:41 PM. I didn't know this loader. It would be nice if you could push a small example with it's mesh in the main repository of SOFA. Like for the other meshloader in: examples/Components/loader/ ; Moreover as soon as a scene is set, it would be tested by the CI of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815
https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815:692,Performance,load,loader,692,"Hi,. nice to have you back!. I think the fact that the ```doLoad``` is called 3 times is because your callback is not connected to all your output data at the same time. So each time you ask for a data independently it will relaunch the callback. Then the second point is because you don't override the method ```doClearBuffers```. you can see how ```meshObjLoader``` has been updated in commit ca3a1a4 (I don't know how to link the commit here...); date of the commit: Date: Wednesday, June 24, 2020 2:26:41 PM. I didn't know this loader. It would be nice if you could push a small example with it's mesh in the main repository of SOFA. Like for the other meshloader in: examples/Components/loader/ ; Moreover as soon as a scene is set, it would be tested by the CI of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815
https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815:750,Testability,test,tested,750,"Hi,. nice to have you back!. I think the fact that the ```doLoad``` is called 3 times is because your callback is not connected to all your output data at the same time. So each time you ask for a data independently it will relaunch the callback. Then the second point is because you don't override the method ```doClearBuffers```. you can see how ```meshObjLoader``` has been updated in commit ca3a1a4 (I don't know how to link the commit here...); date of the commit: Date: Wednesday, June 24, 2020 2:26:41 PM. I didn't know this loader. It would be nice if you could push a small example with it's mesh in the main repository of SOFA. Like for the other meshloader in: examples/Components/loader/ ; Moreover as soon as a scene is set, it would be tested by the CI of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815
https://github.com/sofa-framework/sofa/issues/1538#issuecomment-709137125:66,Energy Efficiency,POWER,POWER,66,👍; I am ok with that but I don't really use a lot of the topology POWER 💪,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1538#issuecomment-709137125
https://github.com/sofa-framework/sofa/issues/1538#issuecomment-709906220:61,Energy Efficiency,green,green,61,you are the voice of the consortium now! so I take that as a green light 🛩️,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1538#issuecomment-709906220
https://github.com/sofa-framework/sofa/issues/1539#issuecomment-780642089:32,Modifiability,inherit,inherited,32,"BaseVector/BaseMatrix and their inherited classes uses int as Index, because some fields are required to be signed (offset mechanism); An idea could be to create a SignedIndex.; Issue raised in the PR #1792",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1539#issuecomment-780642089
https://github.com/sofa-framework/sofa/pull/1540#issuecomment-710667769:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1540#issuecomment-710667769
https://github.com/sofa-framework/sofa/pull/1541#issuecomment-712772469:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1541#issuecomment-712772469
https://github.com/sofa-framework/sofa/pull/1546#issuecomment-711855056:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-711855056
https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633:508,Deployability,update,updated,508,Regarding last review comments (as I'm not sure to be there for the next review):. - I would like to remove those header directly... do we have to go through the 6 months of deprecated before... ?; - Do you want me to put keep empty headers with the SOFA_DEPRECATED_HEADER macro? ; - I would keep the xxxSetGeometryAlgorithms and not put everything inside xxxSetTopologyXXX because the name Geometry make sense here to indicate we depend on the type of dof (aka mechanicalObject). Tests and scenes have been updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633
https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633:431,Integrability,depend,depend,431,Regarding last review comments (as I'm not sure to be there for the next review):. - I would like to remove those header directly... do we have to go through the 6 months of deprecated before... ?; - Do you want me to put keep empty headers with the SOFA_DEPRECATED_HEADER macro? ; - I would keep the xxxSetGeometryAlgorithms and not put everything inside xxxSetTopologyXXX because the name Geometry make sense here to indicate we depend on the type of dof (aka mechanicalObject). Tests and scenes have been updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633
https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633:481,Testability,Test,Tests,481,Regarding last review comments (as I'm not sure to be there for the next review):. - I would like to remove those header directly... do we have to go through the 6 months of deprecated before... ?; - Do you want me to put keep empty headers with the SOFA_DEPRECATED_HEADER macro? ; - I would keep the xxxSetGeometryAlgorithms and not put everything inside xxxSetTopologyXXX because the name Geometry make sense here to indicate we depend on the type of dof (aka mechanicalObject). Tests and scenes have been updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633
https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597:54,Modifiability,plugin,plugin,54,"I close this PR, It changes a lot the behavior of the plugin loader, that now complains that many symbols are not defined. I guess it's the same behavior for CPU alreadydefine symbols. I d'ont know how we could remove the thousands of warnings it generates anyway.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597
https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597:61,Performance,load,loader,61,"I close this PR, It changes a lot the behavior of the plugin loader, that now complains that many symbols are not defined. I guess it's the same behavior for CPU alreadydefine symbols. I d'ont know how we could remove the thousands of warnings it generates anyway.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597
https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713560956:982,Availability,error,error,982,"sse,. I'm not fully sure I understand the problem...but extern declaration of template are not related to old version of gcc in any way they are related to wether or not we control where the templated code is instanciated. The default behavior is that any used templates are instanciated and code is generated in each translation unit (so in each .cpp there is the compilation of the full Vec<double, 3>, Vec<real, 3> for every templates used). The consequence is that this generates huge binary (.o) files each containing identical machine code. This duplicated machine code in every .o is removed during the link. So said differently the compiler makes a lot of work to generate machine code then the linked makes a lot of code to remove it and keep only one version. The solution in c++ is to use the ""extern"" keyword to tell the compiler not to instanciate the templated code, extern means that the machine code will be provide elsewhere. To work and not have link error it is the needed to have a least one version of the template instanciated somewhere. This is why in the .cpp files we often instanciate the same template (without the extern). ; The design pattern o use to avoid the redeclaration warnings is a bit tricky so here is an example.; In myclass.h; ```cpp; template<typename T> ; MyClass ; {; /// ...; };. /// here is the trick .. to differentiate when we include the .h everywhere in the codebase where we want the extern from where it is included from myclass.cpp where we don't want it we do the following; #ifndef MY_CLASS_CPP ; extern template MyClass<double> /// d'ont emit machinecode for this one we provides it ""somewhere else""; extern template MyClass<float> /// don't emit machinecode for this one we provides it ""somewhere else""; #endif /// ; ``` . In the myclass.cpp; ```cpp; #define MY_CLASS_CPP /// You tll the myclass.h that you are where the machine code will be emitted...so no need for the externs version... ; #include ""myclass.h"". template MyClass<double> /// s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713560956
https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713560956:1194,Safety,avoid,avoid,1194,"code is instanciated. The default behavior is that any used templates are instanciated and code is generated in each translation unit (so in each .cpp there is the compilation of the full Vec<double, 3>, Vec<real, 3> for every templates used). The consequence is that this generates huge binary (.o) files each containing identical machine code. This duplicated machine code in every .o is removed during the link. So said differently the compiler makes a lot of work to generate machine code then the linked makes a lot of code to remove it and keep only one version. The solution in c++ is to use the ""extern"" keyword to tell the compiler not to instanciate the templated code, extern means that the machine code will be provide elsewhere. To work and not have link error it is the needed to have a least one version of the template instanciated somewhere. This is why in the .cpp files we often instanciate the same template (without the extern). ; The design pattern o use to avoid the redeclaration warnings is a bit tricky so here is an example.; In myclass.h; ```cpp; template<typename T> ; MyClass ; {; /// ...; };. /// here is the trick .. to differentiate when we include the .h everywhere in the codebase where we want the extern from where it is included from myclass.cpp where we don't want it we do the following; #ifndef MY_CLASS_CPP ; extern template MyClass<double> /// d'ont emit machinecode for this one we provides it ""somewhere else""; extern template MyClass<float> /// don't emit machinecode for this one we provides it ""somewhere else""; #endif /// ; ``` . In the myclass.cpp; ```cpp; #define MY_CLASS_CPP /// You tll the myclass.h that you are where the machine code will be emitted...so no need for the externs version... ; #include ""myclass.h"". template MyClass<double> /// specifically emit machinecode for this double version; template MyClass<float> /// specifically emit machinecode for this float version; ``` . EDIT: I see you closed the PR @courtecuisse, it is unclear",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713560956
https://github.com/sofa-framework/sofa/pull/1549#issuecomment-712318335:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1549#issuecomment-712318335
https://github.com/sofa-framework/sofa/pull/1549#issuecomment-882671884:7,Deployability,update,updated,7,"I just updated this PR. To be reviewed again.; @courtecuisse if you are not willing to read/acknowledge the work done by reviewers, then I will take the decisions and potentially (surely?) mess your work.; Cheers :v:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1549#issuecomment-882671884
https://github.com/sofa-framework/sofa/pull/1549#issuecomment-882672407:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1549#issuecomment-882672407
https://github.com/sofa-framework/sofa/pull/1551#issuecomment-712369166:54,Deployability,update,update,54,"#1515 will be imminently merged, this will require to update this one",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1551#issuecomment-712369166
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712786434:108,Modifiability,plugin,plugins,108,The `VirtualTypeInfoA` is there to ease the transition from static to dynamic (ie not breaking current code/plugins)? Or is it a long time design?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712786434
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:41,Testability,test,test,41,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:107,Usability,clear,clearly,107,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:481,Modifiability,extend,extend,481,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:43,Testability,test,test,43,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:440,Testability,test,testing,440,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:109,Usability,clear,clearly,109,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:496,Modifiability,extend,extend,496,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:45,Testability,test,test,45,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:455,Testability,test,testing,455,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:111,Usability,clear,clearly,111,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1553#issuecomment-713184529:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1553#issuecomment-713184529
https://github.com/sofa-framework/sofa/pull/1553#issuecomment-713689635:39,Safety,avoid,avoiding,39,Closing until it is somewhat finished (avoiding further spam 🤫),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1553#issuecomment-713689635
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713089550:135,Deployability,update,update,135,"Hi @EulalieCoevoet . Thanks for the PR.; You mentioned in #1534 that ""The problem I have is that the component is not working with the update callback mechanism"". What was the update process you were expecting? Could you detail what you meant by not working please?. After this PR we will take a look at the MeshGmsh one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713089550
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713089550:176,Deployability,update,update,176,"Hi @EulalieCoevoet . Thanks for the PR.; You mentioned in #1534 that ""The problem I have is that the component is not working with the update callback mechanism"". What was the update process you were expecting? Could you detail what you meant by not working please?. After this PR we will take a look at the MeshGmsh one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713089550
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:179,Availability,failure,failures,179,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:553,Energy Efficiency,reduce,reduced,553,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:544,Performance,load,loaders,544,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:676,Performance,load,loading,676,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:459,Security,access,access,459,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:52,Usability,clear,clearing,52,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-714621942:214,Performance,load,loaded,214,"So at the end the PR also fixes MeshGmshLoader, MeshOffLoader, and MeshTrianLoader. ; If you want to reproduce the bug you can run the corresponding examples on master, you'll see that too many positions are being loaded. . **Breaking**: Btw, I've removed the duplicated function addTriangle()... It may break some loaders that I haven't compiled, but I think it's cleaner this way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-714621942
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-714621942:315,Performance,load,loaders,315,"So at the end the PR also fixes MeshGmshLoader, MeshOffLoader, and MeshTrianLoader. ; If you want to reproduce the bug you can run the corresponding examples on master, you'll see that too many positions are being loaded. . **Breaking**: Btw, I've removed the duplicated function addTriangle()... It may break some loaders that I haven't compiled, but I think it's cleaner this way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-714621942
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715221852:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715221852
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715222971:109,Performance,load,loader,109,"@EulalieCoevoet when you say it fix MeshGmshLoader, you mean only the ```getWriteOnlyAccessor``` or was this loader also loading too much point at start?; I'm using this loader a lot to work on topology and I didn't notice that problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715222971
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715222971:121,Performance,load,loading,121,"@EulalieCoevoet when you say it fix MeshGmshLoader, you mean only the ```getWriteOnlyAccessor``` or was this loader also loading too much point at start?; I'm using this loader a lot to work on topology and I didn't notice that problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715222971
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715222971:170,Performance,load,loader,170,"@EulalieCoevoet when you say it fix MeshGmshLoader, you mean only the ```getWriteOnlyAccessor``` or was this loader also loading too much point at start?; I'm using this loader a lot to work on topology and I didn't notice that problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-715222971
https://github.com/sofa-framework/sofa/pull/1555#issuecomment-730222741:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-730222741
https://github.com/sofa-framework/sofa/pull/1555#issuecomment-746011358:17,Modifiability,Config,Config,17,Waiting for Sofa.Config... closing for now,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-746011358
https://github.com/sofa-framework/sofa/pull/1555#issuecomment-763807250:23,Modifiability,Config,Config,23,Lets not wait for Sofa.Config... reopening.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-763807250
https://github.com/sofa-framework/sofa/pull/1555#issuecomment-766683112:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-766683112
https://github.com/sofa-framework/sofa/pull/1556#issuecomment-716389021:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1556#issuecomment-716389021
https://github.com/sofa-framework/sofa/pull/1556#issuecomment-719603658:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1556#issuecomment-719603658
https://github.com/sofa-framework/sofa/pull/1557#issuecomment-714823073:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1557#issuecomment-714823073
https://github.com/sofa-framework/sofa/pull/1558#issuecomment-714822858:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-714822858
https://github.com/sofa-framework/sofa/pull/1558#issuecomment-746025687:308,Modifiability,variab,variable,308,Hey @Younesssss ; Thank you for the code review but we wanted a bit more insight from your previous experience:. - can you confirm me that you implemented a similar feature during your PhD?; - in which case you were having fixed points although drifting ?; - does it make sense to add such a projectVelocity variable?. We want to know if this contribution still makes sense. Thank you @Younesssss,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-746025687
https://github.com/sofa-framework/sofa/pull/1558#issuecomment-780423515:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-780423515
https://github.com/sofa-framework/sofa/pull/1559#issuecomment-714800077:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1559#issuecomment-714800077
https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422:172,Availability,down,down,172,"Should be fine now; I ran some tests, looks fine to me. MeshNewProximityIntersection is rarely used.; Regarding the TriangleModel the new options seems to add some 1% slow down on a test scene I made, but it's just an option. Ready for me, I wait for a second eye :eye:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422
https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422:31,Testability,test,tests,31,"Should be fine now; I ran some tests, looks fine to me. MeshNewProximityIntersection is rarely used.; Regarding the TriangleModel the new options seems to add some 1% slow down on a test scene I made, but it's just an option. Ready for me, I wait for a second eye :eye:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422
https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422:182,Testability,test,test,182,"Should be fine now; I ran some tests, looks fine to me. MeshNewProximityIntersection is rarely used.; Regarding the TriangleModel the new options seems to add some 1% slow down on a test scene I made, but it's just an option. Ready for me, I wait for a second eye :eye:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422
https://github.com/sofa-framework/sofa/issues/1560#issuecomment-780660230:60,Deployability,release,release,60,"This issue has been fixed (or should have been 😛) since the release of the v20.12.; Install and out-of-tree compilation have been a priority for this release.; If there is still some issue on this topic, please don't hesitate to re-open this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1560#issuecomment-780660230
https://github.com/sofa-framework/sofa/issues/1560#issuecomment-780660230:84,Deployability,Install,Install,84,"This issue has been fixed (or should have been 😛) since the release of the v20.12.; Install and out-of-tree compilation have been a priority for this release.; If there is still some issue on this topic, please don't hesitate to re-open this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1560#issuecomment-780660230
https://github.com/sofa-framework/sofa/issues/1560#issuecomment-780660230:150,Deployability,release,release,150,"This issue has been fixed (or should have been 😛) since the release of the v20.12.; Install and out-of-tree compilation have been a priority for this release.; If there is still some issue on this topic, please don't hesitate to re-open this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1560#issuecomment-780660230
https://github.com/sofa-framework/sofa/pull/1563#issuecomment-716821219:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1563#issuecomment-716821219
https://github.com/sofa-framework/sofa/pull/1564#issuecomment-717051760:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1564#issuecomment-717051760
https://github.com/sofa-framework/sofa/pull/1565#issuecomment-717253988:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1565#issuecomment-717253988
https://github.com/sofa-framework/sofa/pull/1566#issuecomment-717528108:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1566#issuecomment-717528108
https://github.com/sofa-framework/sofa/issues/1567#issuecomment-717753014:318,Availability,avail,available,318,"Hey @jjcasmar ,. I also got this with nvidia proprietary drivers. This is obviously a bug, and is probably related to the fact that we haven't really touched the rendering of SOFA for the past ~8 years or so. I'm not sure we will be able to have a fix soon unfortunately. . As you said, using `prime-run runSofa` when available to force SOFA to run on the GPU seems to be working. In Fedora 32 with nvidia drivers, I've done it with; `$ __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia runSofa`. Thank you anyway for this report, hopefully someone will have some time at some point to look at this.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1567#issuecomment-717753014
https://github.com/sofa-framework/sofa/issues/1567#issuecomment-724744131:44,Availability,avail,available,44,"> As you said, using prime-run runSofa when available to force SOFA to run on the GPU seems to be working. Actually, when not using prime-run it still runs on the GPU. I have two GPUs, one AMD 5700XT and a nVidia 1650. On AMD doesn't work, on nVidia it works. Could be something related only with the amd driver. Haven't tested it on other mesa based drivers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1567#issuecomment-724744131
https://github.com/sofa-framework/sofa/issues/1567#issuecomment-724744131:321,Testability,test,tested,321,"> As you said, using prime-run runSofa when available to force SOFA to run on the GPU seems to be working. Actually, when not using prime-run it still runs on the GPU. I have two GPUs, one AMD 5700XT and a nVidia 1650. On AMD doesn't work, on nVidia it works. Could be something related only with the amd driver. Haven't tested it on other mesa based drivers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1567#issuecomment-724744131
https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548:139,Deployability,release,release,139,"Here are binaries of this PR to test:; [Linux binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=ubuntu_gcc-7,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Linux.zip); [Windows binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=windows10_vs-2017,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Win64.zip)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548
https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548:296,Deployability,release,release,296,"Here are binaries of this PR to test:; [Linux binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=ubuntu_gcc-7,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Linux.zip); [Windows binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=windows10_vs-2017,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Win64.zip)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548
https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548:32,Testability,test,test,32,"Here are binaries of this PR to test:; [Linux binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=ubuntu_gcc-7,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Linux.zip); [Windows binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=windows10_vs-2017,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Win64.zip)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548
https://github.com/sofa-framework/sofa/pull/1572#issuecomment-718884311:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1572#issuecomment-718884311
https://github.com/sofa-framework/sofa/pull/1573#issuecomment-719406076:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1573#issuecomment-719406076
https://github.com/sofa-framework/sofa/pull/1575#issuecomment-719898153:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1575#issuecomment-719898153
https://github.com/sofa-framework/sofa/pull/1576#issuecomment-719674031:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1576#issuecomment-719674031
https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958:21,Availability,error,error,21,"Make sense that this error does not appear on the CI, as the assert() is not processed by the compiler in other mode than Debug (and I suppose the CI compiles in Release mode with MSVC); and the ambiguity comes from the fact there are two invalidID things, one defined in the sofa namespace and one other defined in the defaulttype namespace for compatibility.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958
https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958:162,Deployability,Release,Release,162,"Make sense that this error does not appear on the CI, as the assert() is not processed by the compiler in other mode than Debug (and I suppose the CI compiles in Release mode with MSVC); and the ambiguity comes from the fact there are two invalidID things, one defined in the sofa namespace and one other defined in the defaulttype namespace for compatibility.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958
https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958:61,Testability,assert,assert,61,"Make sense that this error does not appear on the CI, as the assert() is not processed by the compiler in other mode than Debug (and I suppose the CI compiles in Release mode with MSVC); and the ambiguity comes from the fact there are two invalidID things, one defined in the sofa namespace and one other defined in the defaulttype namespace for compatibility.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958
https://github.com/sofa-framework/sofa/pull/1578#issuecomment-719918526:17,Energy Efficiency,green,green,17,Fast-merge + all green = 👍,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1578#issuecomment-719918526
https://github.com/sofa-framework/sofa/pull/1579#issuecomment-719922063:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1579#issuecomment-719922063
https://github.com/sofa-framework/sofa/pull/1580#issuecomment-719947065:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1580#issuecomment-719947065
https://github.com/sofa-framework/sofa/pull/1581#issuecomment-720005068:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1581#issuecomment-720005068
https://github.com/sofa-framework/sofa/pull/1581#issuecomment-724770470:34,Testability,test,test,34,However it seems to add a failing test on the CI: could this be due to the differences noticed between your machine and the CI?; @epernod @guparan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1581#issuecomment-724770470
https://github.com/sofa-framework/sofa/pull/1582#issuecomment-720007910:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1582#issuecomment-720007910
https://github.com/sofa-framework/sofa/pull/1583#issuecomment-720401085:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1583#issuecomment-720401085
https://github.com/sofa-framework/sofa/pull/1583#issuecomment-720577448:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1583#issuecomment-720577448
https://github.com/sofa-framework/sofa/pull/1586#issuecomment-720989950:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1586#issuecomment-720989950
https://github.com/sofa-framework/sofa/pull/1588#issuecomment-723060949:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1588#issuecomment-723060949
https://github.com/sofa-framework/sofa/issues/1589#issuecomment-784952675:0,Deployability,Update,Update,0,Update of FixedConstraint in PR #1806,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1589#issuecomment-784952675
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526:71,Integrability,depend,dependencies,71,Do we wait the end of the pluginization of SofaGeneral to see if other dependencies are broken?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526:26,Modifiability,plugin,pluginization,26,Do we wait the end of the pluginization of SofaGeneral to see if other dependencies are broken?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375:145,Integrability,depend,dependencies,145,"Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; So I would say that there is a problem with the nightlies (and the CI is correct)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375:10,Modifiability,Flexible,Flexible,10,"Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; So I would say that there is a problem with the nightlies (and the CI is correct)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375:94,Modifiability,plugin,plugin,94,"Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; So I would say that there is a problem with the nightlies (and the CI is correct)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632:155,Integrability,depend,dependencies,155,"> ; > ; > Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; > So I would say that there is a problem with the nightlies (and the CI is correct). But SofaValidation does not link on SofaGeneralEngine nor SofaBoundaryCondition :raised_eyebrow:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632:20,Modifiability,Flexible,Flexible,20,"> ; > ; > Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; > So I would say that there is a problem with the nightlies (and the CI is correct). But SofaValidation does not link on SofaGeneralEngine nor SofaBoundaryCondition :raised_eyebrow:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632
https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632:104,Modifiability,plugin,plugin,104,"> ; > ; > Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; > So I would say that there is a problem with the nightlies (and the CI is correct). But SofaValidation does not link on SofaGeneralEngine nor SofaBoundaryCondition :raised_eyebrow:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632
https://github.com/sofa-framework/sofa/pull/1592#issuecomment-723202107:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1592#issuecomment-723202107
https://github.com/sofa-framework/sofa/pull/1593#issuecomment-723433246:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1593#issuecomment-723433246
https://github.com/sofa-framework/sofa/pull/1593#issuecomment-735452918:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1593#issuecomment-735452918
https://github.com/sofa-framework/sofa/pull/1593#issuecomment-739053110:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1593#issuecomment-739053110
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743323217:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743323217
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743748962:17,Testability,test,test,17,Is there any ... test 🤓 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743748962
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466:0,Testability,test,test,0,test the component that will do the tests. Could be possible I think,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466:36,Testability,test,tests,36,test the component that will do the tests. Could be possible I think,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-791824558:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-791824558
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-803054861:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-803054861
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-805387663:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-805387663
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-806292048:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-806292048
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-806988625:25,Testability,test,tests,25,"@fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-806988625
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807059522:35,Testability,test,tests,35,"> ; > ; > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR. Could you identify them in the code (in a comment, maybe add the url or the number of this PR) ; In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807059522
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807059522:347,Testability,test,tests,347,"> ; > ; > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR. Could you identify them in the code (in a comment, maybe add the url or the number of this PR) ; In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807059522
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906:37,Testability,test,tests,37,"> ; > ; > > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR; > ; > Could you identify them in the code (in a comment, maybe add the url or the number of this PR); > In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏. In fact the checker had a bug. All the tests are now working. Thanks for the review, the tests were worth it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906:356,Testability,test,tests,356,"> ; > ; > > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR; > ; > Could you identify them in the code (in a comment, maybe add the url or the number of this PR); > In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏. In fact the checker had a bug. All the tests are now working. Thanks for the review, the tests were worth it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906:415,Testability,test,tests,415,"> ; > ; > > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR; > ; > Could you identify them in the code (in a comment, maybe add the url or the number of this PR); > In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏. In fact the checker had a bug. All the tests are now working. Thanks for the review, the tests were worth it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906
https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906:465,Testability,test,tests,465,"> ; > ; > > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR; > ; > Could you identify them in the code (in a comment, maybe add the url or the number of this PR); > In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏. In fact the checker had a bug. All the tests are now working. Thanks for the review, the tests were worth it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906
https://github.com/sofa-framework/sofa/pull/1595#issuecomment-723316465:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1595#issuecomment-723316465
https://github.com/sofa-framework/sofa/pull/1596#issuecomment-723436142:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1596#issuecomment-723436142
https://github.com/sofa-framework/sofa/pull/1598#issuecomment-723495488:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1598#issuecomment-723495488
https://github.com/sofa-framework/sofa/pull/1599#issuecomment-723656371:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1599#issuecomment-723656371
https://github.com/sofa-framework/sofa/pull/1600#issuecomment-724115616:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1600#issuecomment-724115616
https://github.com/sofa-framework/sofa/pull/1601#issuecomment-724237014:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1601#issuecomment-724237014
https://github.com/sofa-framework/sofa/pull/1602#issuecomment-724771996:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1602#issuecomment-724771996
https://github.com/sofa-framework/sofa/pull/1603#issuecomment-725445299:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1603#issuecomment-725445299
https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:40,Deployability,install,installed,40,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111
https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:157,Deployability,install,install-dir,157,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111
https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:219,Deployability,install,install-dir,219,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111
https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:137,Integrability,depend,dependencies,137,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111
https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:68,Modifiability,plugin,plugins,68,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111
https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:170,Modifiability,plugin,plugins,170,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111
https://github.com/sofa-framework/sofa/pull/1605#issuecomment-726778540:66,Testability,test,tests,66,Now it compiles let's try the full damages: [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-726778540
https://github.com/sofa-framework/sofa/pull/1605#issuecomment-726778540:89,Testability,test,tests,89,Now it compiles let's try the full damages: [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-726778540
https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330:103,Modifiability,inherit,inheritance,103,To fix the last test I had to be able to detect that some data are child of BaseImage. So I have added inheritance mecanism in the DataTypeInfoWrapper.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330
https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330:41,Safety,detect,detect,41,To fix the last test I had to be able to detect that some data are child of BaseImage. So I have added inheritance mecanism in the DataTypeInfoWrapper.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330
https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330:16,Testability,test,test,16,To fix the last test I had to be able to detect that some data are child of BaseImage. So I have added inheritance mecanism in the DataTypeInfoWrapper.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330
https://github.com/sofa-framework/sofa/pull/1606#issuecomment-726820198:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1606#issuecomment-726820198
https://github.com/sofa-framework/sofa/pull/1607#issuecomment-727268038:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1607#issuecomment-727268038
https://github.com/sofa-framework/sofa/pull/1608#issuecomment-727579624:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1608#issuecomment-727579624
https://github.com/sofa-framework/sofa/pull/1609#issuecomment-728255998:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1609#issuecomment-728255998
https://github.com/sofa-framework/sofa/pull/1610#issuecomment-729588553:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1610#issuecomment-729588553
https://github.com/sofa-framework/sofa/pull/1610#issuecomment-729932600:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1610#issuecomment-729932600
https://github.com/sofa-framework/sofa/pull/1610#issuecomment-730252522:0,Testability,Test,Tests,0,"Tests ok, merging",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1610#issuecomment-730252522
https://github.com/sofa-framework/sofa/pull/1611#issuecomment-731045309:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1611#issuecomment-731045309
https://github.com/sofa-framework/sofa/pull/1611#issuecomment-731045309:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1611#issuecomment-731045309
https://github.com/sofa-framework/sofa/pull/1612#issuecomment-730268703:66,Modifiability,Plugin,Pluginmanager,66,In PR description you should also say that there other stuff than Pluginmanager are removed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1612#issuecomment-730268703
https://github.com/sofa-framework/sofa/pull/1613#issuecomment-731570763:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1613#issuecomment-731570763
https://github.com/sofa-framework/sofa/pull/1613#issuecomment-744741888:138,Modifiability,plugin,plugin,138,"> ; > ; > @fspadoni do you think this could be breaking on your side ?. He send a mail : ""It's OK, no problem to remove the SMP code , my plugin doesn't link to it.""; So I guess we are good to go 😚",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1613#issuecomment-744741888
https://github.com/sofa-framework/sofa/pull/1616#issuecomment-740533170:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1616#issuecomment-740533170
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358:276,Modifiability,plugin,plugin,276,"Hello @Camille-K . Thanks for the PR:; several comments to be conformant with sofa coding standards:; - use #pragma once everywhere; - use c++11 compact namespaces eg; ```cpp; namespace sofa::core::objectmodel {}; ```; - about namespace, the current idea in sofa is that each plugin's namespace should have the name of the plugin. ; Eg:; ```cpp; namespace sofa::plugin::beamplastic::component ; {; class BeamPlasticForceField {};; class StiffnessContainer {};; class PoissonContainer {};; }; ```; - rename basic_example in just example; - there shouldn't have no definition(code) in the .h, only declaration. ; - shouldn't PlasticConstitutiveLaw::getXXXX be pure virtual ? ; - the SOFA_TARGET is not defined in the init.h; - remove or use StiffnessContainer and PoissonContainer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358:323,Modifiability,plugin,plugin,323,"Hello @Camille-K . Thanks for the PR:; several comments to be conformant with sofa coding standards:; - use #pragma once everywhere; - use c++11 compact namespaces eg; ```cpp; namespace sofa::core::objectmodel {}; ```; - about namespace, the current idea in sofa is that each plugin's namespace should have the name of the plugin. ; Eg:; ```cpp; namespace sofa::plugin::beamplastic::component ; {; class BeamPlasticForceField {};; class StiffnessContainer {};; class PoissonContainer {};; }; ```; - rename basic_example in just example; - there shouldn't have no definition(code) in the .h, only declaration. ; - shouldn't PlasticConstitutiveLaw::getXXXX be pure virtual ? ; - the SOFA_TARGET is not defined in the init.h; - remove or use StiffnessContainer and PoissonContainer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358:362,Modifiability,plugin,plugin,362,"Hello @Camille-K . Thanks for the PR:; several comments to be conformant with sofa coding standards:; - use #pragma once everywhere; - use c++11 compact namespaces eg; ```cpp; namespace sofa::core::objectmodel {}; ```; - about namespace, the current idea in sofa is that each plugin's namespace should have the name of the plugin. ; Eg:; ```cpp; namespace sofa::plugin::beamplastic::component ; {; class BeamPlasticForceField {};; class StiffnessContainer {};; class PoissonContainer {};; }; ```; - rename basic_example in just example; - there shouldn't have no definition(code) in the .h, only declaration. ; - shouldn't PlasticConstitutiveLaw::getXXXX be pure virtual ? ; - the SOFA_TARGET is not defined in the init.h; - remove or use StiffnessContainer and PoissonContainer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:111,Modifiability,Plugin,PluginExample,111,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:95,Usability,guid,guidelines,95,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713:54,Modifiability,variab,variables,54,@Camille-K there are several places where you declare variables with the same name than another variable already declared before. Please keep names unique,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713:96,Modifiability,variab,variable,96,@Camille-K there are several places where you declare variables with the same name than another variable already declared before. Please keep names unique,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-1459709024:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-1459709024
https://github.com/sofa-framework/sofa/pull/1622#issuecomment-742390601:217,Modifiability,plugin,plugin,217,"And maybe a slight warning on the breaking side, as people implementing new Mappings will certainly have to include `<sofa/core/Mapping.inl>`; (as they will complain about missing references with the linking of their plugin/code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1622#issuecomment-742390601
https://github.com/sofa-framework/sofa/issues/1624#issuecomment-847873206:92,Modifiability,plugin,plugin,92,"#2073 #2081 #2084; Instead, it will be moved in SofaMiscCollision instead of an independent plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1624#issuecomment-847873206
https://github.com/sofa-framework/sofa/pull/1625#issuecomment-734409693:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1625#issuecomment-734409693
https://github.com/sofa-framework/sofa/pull/1625#issuecomment-734744731:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1625#issuecomment-734744731
https://github.com/sofa-framework/sofa/pull/1625#issuecomment-744467567:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1625#issuecomment-744467567
https://github.com/sofa-framework/sofa/pull/1626#issuecomment-745392986:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1626#issuecomment-745392986
https://github.com/sofa-framework/sofa/pull/1630#issuecomment-735646115:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1630#issuecomment-735646115
https://github.com/sofa-framework/sofa/pull/1635#issuecomment-736785547:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1635#issuecomment-736785547
https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656:14,Usability,simpl,simplify,14,Can't wait to simplify all this !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656
https://github.com/sofa-framework/sofa/issues/1637#issuecomment-853723962:184,Availability,mask,masks,184,"> Should it be removed ?. After discussion at the STC#11, nobody seems to be using them, but Anatoscope (in their own private SOFA fork). However, it appears that the functionality of masks could be embedded directly inside mappings. Therefore, it has been decided to remove ForceMask during STC#11.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1637#issuecomment-853723962
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:90,Availability,error,error,90,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:22,Deployability,update,updated,22,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:118,Modifiability,config,config,118,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:56,Usability,feedback,feedback,56,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737210116:119,Availability,error,error,119,"Hey @damienmarchal ,. This looks very good to me, I quite like this idea of having some depreciated code triggering an error while others (default behavior) triggering a warning. . :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737210116
https://github.com/sofa-framework/sofa/pull/1640#issuecomment-737138426:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1640#issuecomment-737138426
https://github.com/sofa-framework/sofa/pull/1640#issuecomment-747298018:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1640#issuecomment-747298018
https://github.com/sofa-framework/sofa/pull/1646#issuecomment-738862545:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1646#issuecomment-738862545
https://github.com/sofa-framework/sofa/pull/1646#issuecomment-740486542:28,Testability,test,tests,28,"Looks fine to me, build and tests are passing (windows fails due to lack of free space). fast-merge -> let's merge this to alleviate our dev meetings",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1646#issuecomment-740486542
https://github.com/sofa-framework/sofa/pull/1649#issuecomment-738943814:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649#issuecomment-738943814
https://github.com/sofa-framework/sofa/pull/1649#issuecomment-745260937:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649#issuecomment-745260937
https://github.com/sofa-framework/sofa/pull/1649#issuecomment-745557492:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649#issuecomment-745557492
https://github.com/sofa-framework/sofa/pull/1649#issuecomment-750370826:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649#issuecomment-750370826
https://github.com/sofa-framework/sofa/pull/1649#issuecomment-755389883:121,Safety,safe,safe,121,"MacOS CI stalled for some reason. But the CI passed just before and the subsequent changes were minimal, so it should be safe to merge.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649#issuecomment-755389883
https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739839094:283,Integrability,depend,dependencies,283,"Are you building DiffusionSolver out-of-tree?; `<src>/include` is supposed to by added to CMAKE_INCLUDE_PATH here: https://github.com/sofa-framework/sofa/blob/master/CMakeLists.txt#L138. I think the issue is coming from the fact that CImgPlugin does not use imported targets for its dependencies (JPEG, TIFF and PNG).; We should have something like `target_link_libraries(${PROJECT_NAME} PUBLIC PNG::PNG JPEG::JPEG TIFF::TIFF)` in CImgPlugin/CMakeLists.txt. Exporting `<src>/include` in the include directories of SofaHelper is overkill :smile:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739839094
https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739847443:165,Integrability,depend,dependencies,165,"> ; > ; > Are you building DiffusionSolver out-of-tree?. Nope; > ; > I think the issue is coming from the fact that CImgPlugin does not use imported targets for its dependencies (JPEG, TIFF and PNG).; > We should have something like `target_link_libraries(${PROJECT_NAME} PUBLIC PNG::PNG JPEG::JPEG TIFF::TIFF)` in CImgPlugin/CMakeLists.txt. A solution as well. > Exporting `<src>/include` in the include directories of SofaHelper is overkill 😄. Exporting this directory is already done if you have GLEW 👺 (+SOFA_NO_OPENGL disabled)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739847443
https://github.com/sofa-framework/sofa/pull/1651#issuecomment-740482337:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-740482337
https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099:58,Security,validat,validate,58,Tested on my side for #1649 (locally); it is working so I validate it 😙,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099
https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099:0,Testability,Test,Tested,0,Tested on my side for #1649 (locally); it is working so I validate it 😙,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099
https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960:94,Usability,usab,usable,94,"The suggested change is much better, thank @jnbrunet for all the pr helping to make sofa more usable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960
https://github.com/sofa-framework/sofa/pull/1653#issuecomment-741200592:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1653#issuecomment-741200592
https://github.com/sofa-framework/sofa/pull/1655#issuecomment-742407775:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1655#issuecomment-742407775
https://github.com/sofa-framework/sofa/pull/1656#issuecomment-746134150:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1656#issuecomment-746134150
https://github.com/sofa-framework/sofa/pull/1656#issuecomment-746458506:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1656#issuecomment-746458506
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925:113,Deployability,update,updated,113,Thanks @hugtalbot for this PR !. Were there any example scenes in the sofa/examples folder that would need to be updated and maybe move in this plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925:144,Modifiability,plugin,plugin,144,Thanks @hugtalbot for this PR !. Were there any example scenes in the sofa/examples folder that would need to be updated and maybe move in this plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-744738890:122,Modifiability,plugin,plugin,122,@jnbrunet no existing example scene to my knowledge. other comments taken into account :+1: thanks to the reviewers!. PS: plugin is listed in the CMakeLists in _applications/plugins_,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-744738890
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745112140:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745112140
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547:134,Modifiability,plugin,plugin,134,"> @jnbrunet no existing example scene to my knowledge; > ; > other comments taken into account +1 thanks to the reviewers!; > ; > PS: plugin is listed in the CMakeLists in _applications/plugins_. Hey @hugtalbot . From a quick grep, I got these scene files :. - examples/Components/constraint/Compare_FixConstraints.scn; - examples/Components/constraint/DOFBlockerLMConstraint.scn; - examples/Components/constraint/DistanceLMConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint_DirectSolver.scn; - examples/Components/constraint/FixedLMConstraint.scn; - examples/Components/constraint/LMConstraintCollisionResponse.scn. Do you think we should move them to the plugin?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547:749,Modifiability,plugin,plugin,749,"> @jnbrunet no existing example scene to my knowledge; > ; > other comments taken into account +1 thanks to the reviewers!; > ; > PS: plugin is listed in the CMakeLists in _applications/plugins_. Hey @hugtalbot . From a quick grep, I got these scene files :. - examples/Components/constraint/Compare_FixConstraints.scn; - examples/Components/constraint/DOFBlockerLMConstraint.scn; - examples/Components/constraint/DistanceLMConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint_DirectSolver.scn; - examples/Components/constraint/FixedLMConstraint.scn; - examples/Components/constraint/LMConstraintCollisionResponse.scn. Do you think we should move them to the plugin?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-758827116:126,Availability,error,error,126,Review taken into account.Just not sure about the removed macro ```SOFA_BASE_CAST_IMPLEMENTATION(BaseLMConstraint)``` causing error:; ```; error: 'toBaseLMConstraint' marked 'override' but does not override any member functions; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-758827116
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-758827116:139,Availability,error,error,139,Review taken into account.Just not sure about the removed macro ```SOFA_BASE_CAST_IMPLEMENTATION(BaseLMConstraint)``` causing error:; ```; error: 'toBaseLMConstraint' marked 'override' but does not override any member functions; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-758827116
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-762379716:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-762379716
https://github.com/sofa-framework/sofa/pull/1659#issuecomment-762990102:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-762990102
https://github.com/sofa-framework/sofa/issues/1661#issuecomment-780670499:14,Modifiability,Config,Config,14,"Now that Sofa.Config is in master, (#1674), we just have to remove the duplicated code in the CMakeFile of SofaPython3.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1661#issuecomment-780670499
https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292:38,Availability,Error,Error,38,"Thanks for the reply @damienmarchal ; Error of link apparently is remaining. I guess that SofaGeneralExplicitOdeSolver and SofaGeneralImplicitOdeSolver which were depending on SofaSimulationTree, had also a dependency to the SofaSimulationTree's dependency: SofaSimulationCommon",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292
https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292:163,Integrability,depend,depending,163,"Thanks for the reply @damienmarchal ; Error of link apparently is remaining. I guess that SofaGeneralExplicitOdeSolver and SofaGeneralImplicitOdeSolver which were depending on SofaSimulationTree, had also a dependency to the SofaSimulationTree's dependency: SofaSimulationCommon",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292
https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292:207,Integrability,depend,dependency,207,"Thanks for the reply @damienmarchal ; Error of link apparently is remaining. I guess that SofaGeneralExplicitOdeSolver and SofaGeneralImplicitOdeSolver which were depending on SofaSimulationTree, had also a dependency to the SofaSimulationTree's dependency: SofaSimulationCommon",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292
https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292:246,Integrability,depend,dependency,246,"Thanks for the reply @damienmarchal ; Error of link apparently is remaining. I guess that SofaGeneralExplicitOdeSolver and SofaGeneralImplicitOdeSolver which were depending on SofaSimulationTree, had also a dependency to the SofaSimulationTree's dependency: SofaSimulationCommon",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292
https://github.com/sofa-framework/sofa/pull/1664#issuecomment-752015138:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-752015138
https://github.com/sofa-framework/sofa/pull/1664#issuecomment-752015138:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-752015138
https://github.com/sofa-framework/sofa/pull/1665#issuecomment-745467909:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1665#issuecomment-745467909
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:133,Deployability,update,updateFileNameAndTransformPosition,133,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:1050,Deployability,update,update,1050,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:89,Performance,load,load,89,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:109,Performance,load,load,109,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:283,Performance,load,load,283,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:303,Performance,load,load,303,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:410,Performance,load,load,410,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:453,Performance,load,loaded,453,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:526,Performance,Load,Loader,526,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:622,Performance,load,load,622,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:825,Performance,Load,Load,825,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:945,Performance,load,load,945,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:972,Performance,Load,Loader,972,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:1105,Performance,Load,Loader,1105,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:1116,Performance,load,loading,1116,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:1259,Performance,load,loader,1259,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:716,Safety,avoid,avoided,716,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:22,Testability,log,logs,22,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:1070,Testability,log,log,1070,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677:63,Performance,load,load,63,"Hi @epernod @marques-bruno ; I actually do not understand why `load()` is called (in `parse()` of MeshLoader if `canLoad()`). In fact, using the new callback mechanism, any component in the scene could actually be linked to the data, independently from their ordering. If the loaded data is needed by any component, since iniData would dirtify all, the callback would be automatically called if a `getValue()` is triggered.; Don't you think?. So why not changing the parse of MeshLoader back to :. ```; success = canLoad();; // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```. instead of:; ```; if (canLoad()); success = load();. // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677:276,Performance,load,loaded,276,"Hi @epernod @marques-bruno ; I actually do not understand why `load()` is called (in `parse()` of MeshLoader if `canLoad()`). In fact, using the new callback mechanism, any component in the scene could actually be linked to the data, independently from their ordering. If the loaded data is needed by any component, since iniData would dirtify all, the callback would be automatically called if a `getValue()` is triggered.; Don't you think?. So why not changing the parse of MeshLoader back to :. ```; success = canLoad();; // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```. instead of:; ```; if (canLoad()); success = load();. // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677:537,Performance,load,loaded,537,"Hi @epernod @marques-bruno ; I actually do not understand why `load()` is called (in `parse()` of MeshLoader if `canLoad()`). In fact, using the new callback mechanism, any component in the scene could actually be linked to the data, independently from their ordering. If the loaded data is needed by any component, since iniData would dirtify all, the callback would be automatically called if a `getValue()` is triggered.; Don't you think?. So why not changing the parse of MeshLoader back to :. ```; success = canLoad();; // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```. instead of:; ```; if (canLoad()); success = load();. // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677:716,Performance,load,load,716,"Hi @epernod @marques-bruno ; I actually do not understand why `load()` is called (in `parse()` of MeshLoader if `canLoad()`). In fact, using the new callback mechanism, any component in the scene could actually be linked to the data, independently from their ordering. If the loaded data is needed by any component, since iniData would dirtify all, the callback would be automatically called if a `getValue()` is triggered.; Don't you think?. So why not changing the parse of MeshLoader back to :. ```; success = canLoad();; // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```. instead of:; ```; if (canLoad()); success = load();. // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677
https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677:737,Performance,load,loaded,737,"Hi @epernod @marques-bruno ; I actually do not understand why `load()` is called (in `parse()` of MeshLoader if `canLoad()`). In fact, using the new callback mechanism, any component in the scene could actually be linked to the data, independently from their ordering. If the loaded data is needed by any component, since iniData would dirtify all, the callback would be automatically called if a `getValue()` is triggered.; Don't you think?. So why not changing the parse of MeshLoader back to :. ```; success = canLoad();; // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```. instead of:; ```; if (canLoad()); success = load();. // File not loaded, component is set to invalid; if (!success); d_componentState.setValue(sofa::core::objectmodel::ComponentState::Invalid);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-841487677
https://github.com/sofa-framework/sofa/pull/1668#issuecomment-746558769:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-746558769
https://github.com/sofa-framework/sofa/pull/1668#issuecomment-748716799:81,Deployability,patch,patch,81,Thanks @damienmarchal . I guess you tried to run the tests on SP3 to see if your patch was fixing the original issue?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-748716799
https://github.com/sofa-framework/sofa/pull/1668#issuecomment-748716799:53,Testability,test,tests,53,Thanks @damienmarchal . I guess you tried to run the tests on SP3 to see if your patch was fixing the original issue?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-748716799
https://github.com/sofa-framework/sofa/pull/1668#issuecomment-750883623:7,Testability,test,tested,7,"I just tested it, it works :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-750883623
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-746359280:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-746359280
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-747744836:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-747744836
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:109,Integrability,message,message,109,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:234,Integrability,depend,depends,234,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:120,Testability,test,tests,120,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:163,Testability,test,test,163,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:202,Testability,test,test,202,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:135,Integrability,message,message,135,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:260,Integrability,depend,depends,260,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:359,Integrability,message,messages,359,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:146,Testability,test,tests,146,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:189,Testability,test,test,189,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372
https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:228,Testability,test,test,228,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:151,Deployability,install,install,151,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:198,Deployability,install,install,198,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:259,Deployability,install,installed,259,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:318,Deployability,install,installation,318,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:6021,Deployability,install,install,6021,nts.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── easingSceneMatplotlib.py; ├── easingScene.py; ├── emptyController.py; ├── emptyDataEngine.py; ├── emptyForceField.py; ├── example-forcefield2.py; ├── example-forcefield.py; ├── example.pyscn; ├── example-scriptcontroller.py; ├── keyEvents.py; ├── pygame_test.py; ├── ReadTheDocs_Example.py; ├── realTimeClockScene.py; ├── SofaGui.py; └── test.scn. ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:932,Integrability,Message,Message,932,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:1299,Modifiability,config,config,1299,thon3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h; │   │   │   ├── Binding_BaseObject.h; │   │   │   ├── Binding_ContactListener_doc.h; │   │   │   ├── Binding_ContactListener.h; │   │   │   ├── Binding_Context.h; │   │   │   ├── Binding_Controller_doc.h; │   │   │   ├── Binding_Controller.h; │   │   │   ├── Binding_DataDict_do,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:4264,Modifiability,Plugin,PluginConfig,4264,itory.h; │   │   │   └── Submodule_System.h; │   │   ├── Simulation; │   │   │   └── Submodule_Simulation_doc.h; │   │   └── Types; │   │   └── Binding_BoundingBox.h; │   ├── SofaBaseTopology; │   │   ├── Binding_RegularGridTopology_doc.h; │   │   ├── Binding_RegularGridTopology.h; │   │   ├── Binding_SparseGridTopology_doc.h; │   │   └── Binding_SparseGridTopology.h; │   ├── SofaDeformable; │   │   ├── Binding_LinearSpring_doc.h; │   │   ├── Binding_LinearSpring.h; │   │   ├── Binding_SpringForceField_doc.h; │   │   └── Binding_SpringForceField.h; │   ├── SofaGui; │   │   ├── Binding_BaseGui.h; │   │   └── Binding_GUIManager.h; │   ├── SofaRuntime; │   │   └── Timer; │   │   ├── Submodule_Timer_doc.h; │   │   └── Submodule_Timer.h; │   └── SofaTypes; │   ├── Binding_Mat.h; │   ├── Binding_Quat.h; │   └── Binding_Vec.h; ├── lib; │   ├── cmake; │   │   └── SofaPython3; │   │   ├── BindingsConfig.cmake; │   │   ├── BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── So,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:4296,Modifiability,Plugin,PluginTargets,4296,le_System.h; │   │   ├── Simulation; │   │   │   └── Submodule_Simulation_doc.h; │   │   └── Types; │   │   └── Binding_BoundingBox.h; │   ├── SofaBaseTopology; │   │   ├── Binding_RegularGridTopology_doc.h; │   │   ├── Binding_RegularGridTopology.h; │   │   ├── Binding_SparseGridTopology_doc.h; │   │   └── Binding_SparseGridTopology.h; │   ├── SofaDeformable; │   │   ├── Binding_LinearSpring_doc.h; │   │   ├── Binding_LinearSpring.h; │   │   ├── Binding_SpringForceField_doc.h; │   │   └── Binding_SpringForceField.h; │   ├── SofaGui; │   │   ├── Binding_BaseGui.h; │   │   └── Binding_GUIManager.h; │   ├── SofaRuntime; │   │   └── Timer; │   │   ├── Submodule_Timer_doc.h; │   │   └── Submodule_Timer.h; │   └── SofaTypes; │   ├── Binding_Mat.h; │   ├── Binding_Quat.h; │   └── Binding_Vec.h; ├── lib; │   ├── cmake; │   │   └── SofaPython3; │   │   ├── BindingsConfig.cmake; │   │   ├── BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:4329,Modifiability,Plugin,PluginTargets-debug,4329, │   │   │   └── Submodule_Simulation_doc.h; │   │   └── Types; │   │   └── Binding_BoundingBox.h; │   ├── SofaBaseTopology; │   │   ├── Binding_RegularGridTopology_doc.h; │   │   ├── Binding_RegularGridTopology.h; │   │   ├── Binding_SparseGridTopology_doc.h; │   │   └── Binding_SparseGridTopology.h; │   ├── SofaDeformable; │   │   ├── Binding_LinearSpring_doc.h; │   │   ├── Binding_LinearSpring.h; │   │   ├── Binding_SpringForceField_doc.h; │   │   └── Binding_SpringForceField.h; │   ├── SofaGui; │   │   ├── Binding_BaseGui.h; │   │   └── Binding_GUIManager.h; │   ├── SofaRuntime; │   │   └── Timer; │   │   ├── Submodule_Timer_doc.h; │   │   └── Submodule_Timer.h; │   └── SofaTypes; │   ├── Binding_Mat.h; │   ├── Binding_Quat.h; │   └── Binding_Vec.h; ├── lib; │   ├── cmake; │   │   └── SofaPython3; │   │   ├── BindingsConfig.cmake; │   │   ├── BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-3,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:5586,Performance,cache,cacher,5586,nts.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── easingSceneMatplotlib.py; ├── easingScene.py; ├── emptyController.py; ├── emptyDataEngine.py; ├── emptyForceField.py; ├── example-forcefield2.py; ├── example-forcefield.py; ├── example.pyscn; ├── example-scriptcontroller.py; ├── keyEvents.py; ├── pygame_test.py; ├── ReadTheDocs_Example.py; ├── realTimeClockScene.py; ├── SofaGui.py; └── test.scn. ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:44,Testability,test,tested,44,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:415,Testability,Test,Tests,415,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:451,Testability,Test,Tests,451,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:480,Testability,Test,Tests,480,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:514,Testability,Test,Tests,514,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:1151,Testability,test,tests,1151,"l some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h; │   │   │   ├── Binding_BaseObject.h; │   │   │   ├── Binding_ContactListener_doc.h; │   │   │   ├── Binding_ContactListener.h; │   │   │   ├── Binding_Con",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:5192,Testability,test,test,5192,─ BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── e,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:6524,Testability,test,test,6524,nts.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── easingSceneMatplotlib.py; ├── easingScene.py; ├── emptyController.py; ├── emptyDataEngine.py; ├── emptyForceField.py; ├── example-forcefield2.py; ├── example-forcefield.py; ├── example.pyscn; ├── example-scriptcontroller.py; ├── keyEvents.py; ├── pygame_test.py; ├── ReadTheDocs_Example.py; ├── realTimeClockScene.py; ├── SofaGui.py; └── test.scn. ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592
https://github.com/sofa-framework/sofa/pull/1671#issuecomment-758099811:34,Deployability,install,install,34,"@jnbrunet Thanks for the explicit install tree, just what I needed :+1:; https://github.com/sofa-framework/SofaPython3/pull/83 should bring us that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-758099811
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432:349,Availability,down,downgraded,349,"I managed to solve the issue. The main reason appeared to be the location of the ""python3"" directory. Apperently, it should be located one directory higher than the directory containing all the built DLLs. ; So I changed the the CMake variable `SP3_PYTHON_PACKAGES_DIRECTORY` from ""python3/site-packages"" to ""**bin**/python3/site-packages"".; I also downgraded python from 3.9.1 to 3.7.9 and pulled the last commits from sofa master but I think the issue came from the python3 directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432:235,Modifiability,variab,variable,235,"I managed to solve the issue. The main reason appeared to be the location of the ""python3"" directory. Apperently, it should be located one directory higher than the directory containing all the built DLLs. ; So I changed the the CMake variable `SP3_PYTHON_PACKAGES_DIRECTORY` from ""python3/site-packages"" to ""**bin**/python3/site-packages"".; I also downgraded python from 3.9.1 to 3.7.9 and pulled the last commits from sofa master but I think the issue came from the python3 directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-780672279:76,Deployability,release,release,76,"Hi @lytyo , sorry for the delay.; Do you still have problem with the v20.12 release of SOFA ? SofaPython3 is being shipped inside and emphasis has been placed on compilation/build/install with python path, etc.; Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-780672279
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-780672279:180,Deployability,install,install,180,"Hi @lytyo , sorry for the delay.; Do you still have problem with the v20.12 release of SOFA ? SofaPython3 is being shipped inside and emphasis has been placed on compilation/build/install with python path, etc.; Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-780672279
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-783522388:152,Modifiability,variab,variable,152,"Hi @fredroy, thank you for your reply,. I recently pulled Sofa 20.12 and SofaPython3 and I did not observe this issue. But it is maybe because my cmake variable `SP3_PYTHON_PACKAGES_DIRECTORY` was already set to `bin/python3/site-packages`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-783522388
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337:24,Deployability,update,update,24,"Hi @fredroy,. I have an update concerning this issue. I tried compiling SOFA with SofaPython3 in Debug mode and I encountered the issue again.; Firstly, in Visual Studio, I had to add the Python3 libs folder as additional library reference to the python3 related projects. (Otherwise python39.lib was not found). In `PythonEnvironment::Init()`, the line `py::module::import(""SofaRuntime"");` causes the crash. So apparently the import fails. . I think the cause could be that the .pyd files make reference to unreachable dependencies. So I ran Dependencies and did not notice anything wrong :; ![image](https://user-images.githubusercontent.com/24836743/108839575-87195400-75d5-11eb-8438-1cbf28fe8bb2.png). I precise that I installed the Python Debug binairies (so python39_d.dll exists).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337:723,Deployability,install,installed,723,"Hi @fredroy,. I have an update concerning this issue. I tried compiling SOFA with SofaPython3 in Debug mode and I encountered the issue again.; Firstly, in Visual Studio, I had to add the Python3 libs folder as additional library reference to the python3 related projects. (Otherwise python39.lib was not found). In `PythonEnvironment::Init()`, the line `py::module::import(""SofaRuntime"");` causes the crash. So apparently the import fails. . I think the cause could be that the .pyd files make reference to unreachable dependencies. So I ran Dependencies and did not notice anything wrong :; ![image](https://user-images.githubusercontent.com/24836743/108839575-87195400-75d5-11eb-8438-1cbf28fe8bb2.png). I precise that I installed the Python Debug binairies (so python39_d.dll exists).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337:520,Integrability,depend,dependencies,520,"Hi @fredroy,. I have an update concerning this issue. I tried compiling SOFA with SofaPython3 in Debug mode and I encountered the issue again.; Firstly, in Visual Studio, I had to add the Python3 libs folder as additional library reference to the python3 related projects. (Otherwise python39.lib was not found). In `PythonEnvironment::Init()`, the line `py::module::import(""SofaRuntime"");` causes the crash. So apparently the import fails. . I think the cause could be that the .pyd files make reference to unreachable dependencies. So I ran Dependencies and did not notice anything wrong :; ![image](https://user-images.githubusercontent.com/24836743/108839575-87195400-75d5-11eb-8438-1cbf28fe8bb2.png). I precise that I installed the Python Debug binairies (so python39_d.dll exists).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337:543,Integrability,Depend,Dependencies,543,"Hi @fredroy,. I have an update concerning this issue. I tried compiling SOFA with SofaPython3 in Debug mode and I encountered the issue again.; Firstly, in Visual Studio, I had to add the Python3 libs folder as additional library reference to the python3 related projects. (Otherwise python39.lib was not found). In `PythonEnvironment::Init()`, the line `py::module::import(""SofaRuntime"");` causes the crash. So apparently the import fails. . I think the cause could be that the .pyd files make reference to unreachable dependencies. So I ran Dependencies and did not notice anything wrong :; ![image](https://user-images.githubusercontent.com/24836743/108839575-87195400-75d5-11eb-8438-1cbf28fe8bb2.png). I precise that I installed the Python Debug binairies (so python39_d.dll exists).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337
https://github.com/sofa-framework/sofa/issues/1672#issuecomment-2439639280:19,Availability,error,error,19,Look like the same error as this thread: https://github.com/sofa-framework/sofa/discussions/4383,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-2439639280
https://github.com/sofa-framework/sofa/pull/1673#issuecomment-750826880:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1673#issuecomment-750826880
https://github.com/sofa-framework/sofa/pull/1674#issuecomment-752050022:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1674#issuecomment-752050022
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239:553,Performance,load,load,553,"Hello Eulalie,. Hello @EulalieCoevoet and thanks for the suggestion. . I'm not sure isSet() could be used for this task. ; Because there are cases:; - where a Data field has a default value and that this default value is used.; - there are cases where a Data field has a default value and that this default value is not used (ie. it is optional as in your example). Let's see for the other flags... There is the isDisplayed() flag. This flag can control if we show the data is showed all. The side effect of using it for hiding means that if not set at load time then it cannot be changed anymore later. . There is also the isRequired() flag. It is not used a lot and was primarely designed to indicate that need to be setted (mandatory)...which sound a bit like the reverse of ""optional"". Currently in Sofa component most of the data are not set to required (despite I bet that a lot of them are) and there is not graphical feedback related to this flag. So I will think a bit about this one to see if we can something out of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239:925,Usability,feedback,feedback,925,"Hello Eulalie,. Hello @EulalieCoevoet and thanks for the suggestion. . I'm not sure isSet() could be used for this task. ; Because there are cases:; - where a Data field has a default value and that this default value is used.; - there are cases where a Data field has a default value and that this default value is not used (ie. it is optional as in your example). Let's see for the other flags... There is the isDisplayed() flag. This flag can control if we show the data is showed all. The side effect of using it for hiding means that if not set at load time then it cannot be changed anymore later. . There is also the isRequired() flag. It is not used a lot and was primarely designed to indicate that need to be setted (mandatory)...which sound a bit like the reverse of ""optional"". Currently in Sofa component most of the data are not set to required (despite I bet that a lot of them are) and there is not graphical feedback related to this flag. So I will think a bit about this one to see if we can something out of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924:417,Usability,clear,clearly,417,Another alternative that could make sense would be to use std::optional that is part of the c++ language (see: https://en.cppreference.com/w/cpp/utility/optional). So in CableActuator it would look like:; ```; Data<float> m_actuatorValue; Data<std::optional<float>> m_actuatorMinValue;; Data<std::optional<float>> m_actuatorMaxValue;; ```. Of course it make things more verbose...but the good side of that is that it clearly indicate at every use of actuatorMinValue/MaxValue that these values are optional. So optionality is no more a runSofa widget issue but a structural property of the contained data. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762250139:50,Availability,redundant,redundant,50,"What about an isOptional() flag...? It may sounds redundant with the isRequired() flag, but a data may not be required and still have a default value. ; Otherwise, what I’m really looking for is a way to say that my data has no default value. It could also just be a hasDefaultValue() flag.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762250139
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762250139:50,Safety,redund,redundant,50,"What about an isOptional() flag...? It may sounds redundant with the isRequired() flag, but a data may not be required and still have a default value. ; Otherwise, what I’m really looking for is a way to say that my data has no default value. It could also just be a hasDefaultValue() flag.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762250139
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:158,Availability,redundant,redundant,158,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:856,Deployability,Update,Update,856,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:225,Modifiability,refactor,refactoring,225,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:158,Safety,redund,redundant,158,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:73,Usability,simpl,simpler,73,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:322,Usability,clear,clear,322,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198:482,Availability,error,error,482,"I agree with this idea. ; The only drawback is that all current `setRequired(true)` would require an update... To sum up, if I get it right:. - `isRequired()` should be true by default; - `hasDefaultValue()` should be true by default as well; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that...; - in BaseObject::init() print a warning/error message `if (!data->hasDefaultValue() && !data->isSet())`; - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; ; Is that all, and what you had in mind?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198:101,Deployability,update,update,101,"I agree with this idea. ; The only drawback is that all current `setRequired(true)` would require an update... To sum up, if I get it right:. - `isRequired()` should be true by default; - `hasDefaultValue()` should be true by default as well; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that...; - in BaseObject::init() print a warning/error message `if (!data->hasDefaultValue() && !data->isSet())`; - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; ; Is that all, and what you had in mind?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198:557,Deployability,update,update,557,"I agree with this idea. ; The only drawback is that all current `setRequired(true)` would require an update... To sum up, if I get it right:. - `isRequired()` should be true by default; - `hasDefaultValue()` should be true by default as well; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that...; - in BaseObject::init() print a warning/error message `if (!data->hasDefaultValue() && !data->isSet())`; - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; ; Is that all, and what you had in mind?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198:488,Integrability,message,message,488,"I agree with this idea. ; The only drawback is that all current `setRequired(true)` would require an update... To sum up, if I get it right:. - `isRequired()` should be true by default; - `hasDefaultValue()` should be true by default as well; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that...; - in BaseObject::init() print a warning/error message `if (!data->hasDefaultValue() && !data->isSet())`; - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; ; Is that all, and what you had in mind?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:476,Availability,error,error,476,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:734,Deployability,update,update,734,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:1054,Deployability,update,update,1054,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:482,Integrability,message,message,482,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:600,Integrability,message,message,600,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:842,Testability,test,tests,842,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:1019,Testability,test,tests,1019,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475
https://github.com/sofa-framework/sofa/pull/1676#issuecomment-748463896:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1676#issuecomment-748463896
https://github.com/sofa-framework/sofa/pull/1676#issuecomment-749218409:58,Performance,load,loaded,58,"Why is this one breaking if by default SofaBase are ""auto loaded"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1676#issuecomment-749218409
https://github.com/sofa-framework/sofa/pull/1676#issuecomment-749420946:68,Performance,load,loaded,68,"> ; > ; > Why is this one breaking if by default SofaBase are ""auto loaded"" ?. Breaking because I changed some functions signatures (int to Size/Index); Could be breaking for people overriding them",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1676#issuecomment-749420946
https://github.com/sofa-framework/sofa/pull/1677#issuecomment-748596949:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1677#issuecomment-748596949
https://github.com/sofa-framework/sofa/pull/1678#issuecomment-748638560:17,Availability,error,error,17,"Just observed an error that occurs, when contacts ""disengage"".; No collision -> number of contacts 0; Following collision -> number of contacts 25 (for example); No collision (the first step, after collisions ""disengage"") -> number of contacts 431914097 (or other giant number). Any ideas?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1678#issuecomment-748638560
https://github.com/sofa-framework/sofa/pull/1678#issuecomment-750828172:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1678#issuecomment-750828172
https://github.com/sofa-framework/sofa/pull/1678#issuecomment-751642371:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1678#issuecomment-751642371
https://github.com/sofa-framework/sofa/pull/1680#issuecomment-749236925:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1680#issuecomment-749236925
https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751660556:56,Testability,log,log,56,"And when you see that, on the CI, for Windows, that the log size is going from 16MB to 1.6MB... you know it was useful 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751660556
https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751700038:161,Testability,test,test,161,"> ; > ; > > ```; > > * add a compiler flags no-attributes for MSVC; > > ```; > ; > I didn't do it for MSVC, is there an equivalent?. My bad, i thought the cmake test was ""if is MSVC"" 🙄; As for your question, no idea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751700038
https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751705348:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751705348
https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983:23,Deployability,integrat,integrate,23,Hi @jnbrunet ; Did you integrate what was done by @courtecuisse in #1549 or is it is still worth having a look at 1549 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983
https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983:23,Integrability,integrat,integrate,23,Hi @jnbrunet ; Did you integrate what was done by @courtecuisse in #1549 or is it is still worth having a look at 1549 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983
https://github.com/sofa-framework/sofa/pull/1683#issuecomment-751679300:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1683#issuecomment-751679300
https://github.com/sofa-framework/sofa/pull/1683#issuecomment-751693769:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1683#issuecomment-751693769
https://github.com/sofa-framework/sofa/pull/1686#issuecomment-753983231:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1686#issuecomment-753983231
https://github.com/sofa-framework/sofa/pull/1686#issuecomment-753983231:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1686#issuecomment-753983231
https://github.com/sofa-framework/sofa/pull/1687#issuecomment-754215844:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1687#issuecomment-754215844
https://github.com/sofa-framework/sofa/pull/1687#issuecomment-754215844:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1687#issuecomment-754215844
https://github.com/sofa-framework/sofa/pull/1687#issuecomment-754530497:215,Deployability,update,updated,215,"Doing the same as for Eigen, boost is definitely the way to go. Given that I want to stay focused on other tasks I let anyone with free time to do that nicer move. And if no one has time..then I suggest merging the updated version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1687#issuecomment-754530497
https://github.com/sofa-framework/sofa/pull/1689#issuecomment-753904506:12,Testability,test,tests,12,And it pass tests at first time :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1689#issuecomment-753904506
https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753604398:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753604398
https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753879358:214,Testability,test,test,214,👍; I remember it was at a time where Intel driver and Linux was crashing #526 with Core profile (I guess?); Maybe a bug in mesa at that time or the intel driver.; Anyway we would need people using Intel & Linux to test this on their setup.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753879358
https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753931342:223,Testability,test,test,223,"> +1; > I remember it was at a time where Intel driver and Linux was crashing #526 with Core profile (I guess?); > Maybe a bug in mesa at that time or the intel driver.; > Anyway we would need people using Intel & Linux to test this on their setup. Thanks for linking this issue, I wasn't aware. . I wouldn't be surprise that the crash that was initially happening was for the same reason as the one for which I made this PR (the 0 GL extension -> std::string(nullptr) -> crash). With this PR, such a crash won't happen anymore. In addition, the extensions will now be found due to the magic call to `f.setOption(QSurfaceFormat::DeprecatedFunctions, true);`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753931342
https://github.com/sofa-framework/sofa/pull/1693#issuecomment-754888294:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1693#issuecomment-754888294
https://github.com/sofa-framework/sofa/pull/1694#issuecomment-754916397:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1694#issuecomment-754916397
https://github.com/sofa-framework/sofa/pull/1697#issuecomment-758489643:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1697#issuecomment-758489643
https://github.com/sofa-framework/sofa/pull/1697#issuecomment-758489643:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1697#issuecomment-758489643
https://github.com/sofa-framework/sofa/pull/1697#issuecomment-759413476:65,Testability,test,tests,65,"@hugtalbot, @fredroy ; I did the layout organization without the tests.; I would be in favor of merging it so we can directly write the functional tests during the planned meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1697#issuecomment-759413476
https://github.com/sofa-framework/sofa/pull/1697#issuecomment-759413476:147,Testability,test,tests,147,"@hugtalbot, @fredroy ; I did the layout organization without the tests.; I would be in favor of merging it so we can directly write the functional tests during the planned meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1697#issuecomment-759413476
https://github.com/sofa-framework/sofa/pull/1699#issuecomment-758489777:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1699#issuecomment-758489777
https://github.com/sofa-framework/sofa/pull/1699#issuecomment-758489777:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1699#issuecomment-758489777
https://github.com/sofa-framework/sofa/pull/1700#issuecomment-758535869:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1700#issuecomment-758535869
https://github.com/sofa-framework/sofa/pull/1700#issuecomment-758535869:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1700#issuecomment-758535869
https://github.com/sofa-framework/sofa/pull/1700#issuecomment-760411732:64,Availability,avail,available,64,"This PR is ready but breaking, it thereore needs to stay 7 days available for remarks. Resist @epernod ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1700#issuecomment-760411732
https://github.com/sofa-framework/sofa/pull/1701#issuecomment-758110542:87,Energy Efficiency,green,green,87,Dot-to-underscore replacement had to be done earlier in the macro. Fixed it.; If CI is green then ready!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1701#issuecomment-758110542
https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994:154,Deployability,update,update,154,"Hi Eulalie, . The template instantiation part (in the .cpp) is not synchronized with the extern template part (in MechanicalMatrixMapper.h). ; But we can update that in a separate PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994
https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994:67,Integrability,synchroniz,synchronized,67,"Hi Eulalie, . The template instantiation part (in the .cpp) is not synchronized with the extern template part (in MechanicalMatrixMapper.h). ; But we can update that in a separate PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994
https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625:22,Testability,test,tests,22,[ci-build][with-scene-tests] ; [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625
https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625:48,Testability,test,tests,48,[ci-build][with-scene-tests] ; [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625
https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268:25,Testability,test,tests,25,[ci-build][ci-with-scene-tests][ci-with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268
https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268:51,Testability,test,tests,51,[ci-build][ci-with-scene-tests][ci-with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268
https://github.com/sofa-framework/sofa/pull/1708#issuecomment-759584141:196,Deployability,release,release,196,"I just tested this on SP3/Windows out-of-tree, and it works. Not sure why the Windows CI post-job failed, but it looks unrelated to this PR. I will merge this now since we need it quickly for the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1708#issuecomment-759584141
https://github.com/sofa-framework/sofa/pull/1708#issuecomment-759584141:7,Testability,test,tested,7,"I just tested this on SP3/Windows out-of-tree, and it works. Not sure why the Windows CI post-job failed, but it looks unrelated to this PR. I will merge this now since we need it quickly for the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1708#issuecomment-759584141
https://github.com/sofa-framework/sofa/pull/1712#issuecomment-764586035:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1712#issuecomment-764586035
https://github.com/sofa-framework/sofa/pull/1714#issuecomment-767115299:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1714#issuecomment-767115299
https://github.com/sofa-framework/sofa/pull/1714#issuecomment-767115299:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1714#issuecomment-767115299
https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767039971:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767039971
https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767039971:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767039971
https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767115515:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767115515
https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767115515:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1717#issuecomment-767115515
https://github.com/sofa-framework/sofa/pull/1719#issuecomment-762749301:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1719#issuecomment-762749301
https://github.com/sofa-framework/sofa/issues/1723#issuecomment-821018599:58,Modifiability,enhance,enhancements,58,Seems to be fixed #1948 (just tried with master) but some enhancements could be done for exporting the graph IMO.; Issue itself is closed nonetheless.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1723#issuecomment-821018599
https://github.com/sofa-framework/sofa/pull/1726#issuecomment-764886431:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1726#issuecomment-764886431
https://github.com/sofa-framework/sofa/pull/1727#issuecomment-768216185:2,Deployability,Update,Updated,2,I Updated the change to take into account's guillaume comments,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1727#issuecomment-768216185
https://github.com/sofa-framework/sofa/pull/1728#issuecomment-765543605:60,Safety,avoid,avoiding,60,"I pushed some change to handle the paths at a higher level, avoiding hard coded paths as much as possible.; Also, QtWebEngine copy at the end of the script had to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1728#issuecomment-765543605
https://github.com/sofa-framework/sofa/pull/1728#issuecomment-765556597:62,Safety,avoid,avoiding,62,"> I pushed some change to handle the paths at a higher level, avoiding hard coded paths as much as possible. This is way better than what I had, thanks a lot !. > Also, QtWebEngine copy at the end of the script should be fixed. Not sure I'm super happy about this ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1728#issuecomment-765556597
https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850:20,Testability,test,tests,20,[ci-build][ci-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850
https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850:43,Testability,test,tests,43,[ci-build][ci-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850
https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767829203:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767829203
https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767829203:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767829203
https://github.com/sofa-framework/sofa/pull/1730#issuecomment-768371273:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-768371273
https://github.com/sofa-framework/sofa/pull/1730#issuecomment-768371273:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-768371273
https://github.com/sofa-framework/sofa/pull/1733#issuecomment-772508288:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1733#issuecomment-772508288
https://github.com/sofa-framework/sofa/pull/1734#issuecomment-767166456:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1734#issuecomment-767166456
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767115931:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767115931
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767115931:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767115931
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767509151:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767509151
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767509151:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767509151
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767829915:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767829915
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767829915:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-767829915
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-768126741:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-768126741
https://github.com/sofa-framework/sofa/pull/1735#issuecomment-768126741:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1735#issuecomment-768126741
https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767116025:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767116025
https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767116025:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767116025
https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767830094:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767830094
https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767830094:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1736#issuecomment-767830094
https://github.com/sofa-framework/sofa/pull/1738#issuecomment-892055859:107,Modifiability,plugin,plugin,107,"I'd like this PR to be reviewed as I think the new features are really nice, especially for the SoftRobots plugin. ; @damienmarchal would you agree to remove the WIP label?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1738#issuecomment-892055859
https://github.com/sofa-framework/sofa/pull/1740#issuecomment-767527820:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1740#issuecomment-767527820
https://github.com/sofa-framework/sofa/pull/1743#issuecomment-767809094:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1743#issuecomment-767809094
https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090:16,Testability,test,tests,16,[ci-build][with-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090
https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090:34,Testability,test,tests,34,[ci-build][with-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090
https://github.com/sofa-framework/sofa/pull/1744#issuecomment-800264722:16,Testability,test,tests,16,[ci-build][with-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-800264722
https://github.com/sofa-framework/sofa/pull/1744#issuecomment-800264722:34,Testability,test,tests,34,[ci-build][with-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-800264722
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:482,Deployability,continuous,continuous,482,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:493,Deployability,integrat,integration,493,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:493,Integrability,integrat,integration,493,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:360,Testability,test,tests,360,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:370,Testability,test,testing,370,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:469,Testability,test,test,469,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:86,Usability,feedback,feedback,86,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:1849,Availability,avail,available,1849,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:496,Deployability,continuous,continuous,496,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:507,Deployability,integrat,integration,507,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:507,Integrability,integrat,integration,507,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:374,Testability,test,tests,374,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:384,Testability,test,testing,384,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:483,Testability,test,test,483,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:89,Usability,feedback,feedback,89,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349:19,Deployability,update,update,19,"Thank you for your update @nhnhan92 ; I added two reviews in the code. Regarding the license, we need the SOFA header to be added in order to display the official license of the project. If this is not possible, an alternative would be to create a dedicated plugin which could have its own open-source license. Finally, a last question would be : would it be possible to have a regression test comparing your material with a analytical/manufactured solution?. Thanks again for this nice piece of work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349:258,Modifiability,plugin,plugin,258,"Thank you for your update @nhnhan92 ; I added two reviews in the code. Regarding the license, we need the SOFA header to be added in order to display the official license of the project. If this is not possible, an alternative would be to create a dedicated plugin which could have its own open-source license. Finally, a last question would be : would it be possible to have a regression test comparing your material with a analytical/manufactured solution?. Thanks again for this nice piece of work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349:389,Testability,test,test,389,"Thank you for your update @nhnhan92 ; I added two reviews in the code. Regarding the license, we need the SOFA header to be added in order to display the official license of the project. If this is not possible, an alternative would be to create a dedicated plugin which could have its own open-source license. Finally, a last question would be : would it be possible to have a regression test comparing your material with a analytical/manufactured solution?. Thanks again for this nice piece of work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:1180,Availability,reliab,reliability,1180,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:520,Deployability,update,updated,520,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:802,Modifiability,plugin,plugin,802,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:1100,Testability,test,test,1100,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:1150,Testability,test,test,1150,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:1171,Testability,test,test,1171,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:593,Energy Efficiency,power,power,593,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:311,Modifiability,plugin,plugin,311,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:816,Security,validat,validation,816,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:452,Testability,test,test,452,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:647,Testability,test,test,647,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:678,Testability,test,test,678,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:772,Testability,test,test,772,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:548,Usability,simpl,simply,548,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:603,Energy Efficiency,power,power,603,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:321,Modifiability,plugin,plugin,321,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:828,Security,validat,validation,828,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:462,Testability,test,test,462,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:663,Testability,test,test,663,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:694,Testability,test,test,694,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:784,Testability,test,test,784,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:1244,Testability,test,test,1244,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:1315,Testability,test,testing,1315,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:558,Usability,simpl,simply,558,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:1375,Usability,guid,guidance,1375,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:559,Modifiability,Plugin,PluginExample,559,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:643,Modifiability,plugin,plugins,643,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:651,Modifiability,Plugin,PluginExample,651,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:279,Testability,test,test,279,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:414,Testability,test,test,414,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:525,Testability,test,tests,525,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:573,Testability,test,test,573,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:577,Modifiability,Plugin,PluginExample,577,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:661,Modifiability,plugin,plugins,661,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:669,Modifiability,Plugin,PluginExample,669,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:289,Testability,test,test,289,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:424,Testability,test,test,424,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:541,Testability,test,tests,541,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:591,Testability,test,test,591,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:858,Testability,test,test,858,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:780,Usability,clear,clear,780,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-805278512:58,Testability,test,test,58,Compilation has been fixed with master and the regression test has been added.; Only the PR on regression must be merged and then reference in regression submodule udpated. Let's get it merged tomorrow.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-805278512
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-805950172:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-805950172
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-806216521:87,Testability,test,testing,87,"Owh, CI seems not happy.; I will make sure to fix it (coming from the recent change in testing, to be propagated in regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-806216521
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-806226147:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-806226147
https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:209,Availability,error,error,209,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531
https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:244,Availability,ERROR,ERROR,244,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531
https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:215,Integrability,message,message,215,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531
https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:112,Testability,test,test,112,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531
https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610:58,Security,validat,validate,58,As it change the behavior of a core component i prefer to validate on regression files. ; [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610
https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610:112,Testability,test,tests,112,As it change the behavior of a core component i prefer to validate on regression files. ; [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610
https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610:135,Testability,test,tests,135,As it change the behavior of a core component i prefer to validate on regression files. ; [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610
https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770276563:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770276563
https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770276563:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770276563
https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770867983:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770867983
https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770867983:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1750#issuecomment-770867983
https://github.com/sofa-framework/sofa/pull/1751#issuecomment-770181110:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1751#issuecomment-770181110
https://github.com/sofa-framework/sofa/pull/1751#issuecomment-770181110:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1751#issuecomment-770181110
https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216:180,Integrability,INTERFACE,INTERFACE,180,"Most probably another package is adding the includes for SofaBaseMechanics but not the library. . Actually, I have `SofaBaseMechanics` in my list of targets. ```; add_library(VNCS INTERFACE ${HEADERS}); target_link_libraries(VNCS INTERFACE; SofaCore; SofaBaseMechanics; SofaBaseTopology; Eigen3::Eigen; CGAL::CGAL; range-v3::range-v3; spdlog::spdlog; Eigen3::Eigen; nlohmann_json::nlohmann_json; ). add_library(VNCS2D SHARED ${SOURCES} ${HEADERS} ${PUBLIC_HEADERS}); set_target_properties(VNCS2D PROPERTIES PUBLIC_HEADER ""${PUBLIC_HEADERS}""); target_link_libraries(VNCS2D PUBLIC VNCS); ```. What I found when trying to workaround this is that the MechanicalObject was `extern` instantiated for the Vec2 and friends. I had to explciitely instantiate in my library.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216
https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216:230,Integrability,INTERFACE,INTERFACE,230,"Most probably another package is adding the includes for SofaBaseMechanics but not the library. . Actually, I have `SofaBaseMechanics` in my list of targets. ```; add_library(VNCS INTERFACE ${HEADERS}); target_link_libraries(VNCS INTERFACE; SofaCore; SofaBaseMechanics; SofaBaseTopology; Eigen3::Eigen; CGAL::CGAL; range-v3::range-v3; spdlog::spdlog; Eigen3::Eigen; nlohmann_json::nlohmann_json; ). add_library(VNCS2D SHARED ${SOURCES} ${HEADERS} ${PUBLIC_HEADERS}); set_target_properties(VNCS2D PROPERTIES PUBLIC_HEADER ""${PUBLIC_HEADERS}""); target_link_libraries(VNCS2D PUBLIC VNCS); ```. What I found when trying to workaround this is that the MechanicalObject was `extern` instantiated for the Vec2 and friends. I had to explciitely instantiate in my library.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216
https://github.com/sofa-framework/sofa/issues/1752#issuecomment-1499064795:54,Safety,avoid,avoid,54,"Hi @jjcasmar,; a bit late, but since you were able to avoid the linking problem, could we close this issue?; On my side, I have troubles understanding why it does not work. Alex",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-1499064795
https://github.com/sofa-framework/sofa/pull/1753#issuecomment-771760869:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-771760869
https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008:167,Usability,guid,guidelines,167,"PR looks fine, but we absolutely need to define the convention about \_doXXX\_ or \_isXXXX\_; This should be definitely generalized within the whole code base AND the guidelines of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008
https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772598715:241,Modifiability,inherit,inheritance,241,"So after discussion on gitter, the convention is ; ""each time you use the Template Method design pattern which delegate to its child private implementation then you must use the double _ to indicate it"".; https://isocpp.org/wiki/faq/strange-inheritance#private-virtuals. If it is not private then feel free (which is exactly how is the sofa code base right now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772598715
https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003:159,Usability,clear,clearly,159,"Appart from that, I did a quick search in the sofa code base, I didn't paid attention to how much of the doXXXX stuff are with a public visibility... which is clearly not what the design pattern suggested initially.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003
https://github.com/sofa-framework/sofa/pull/1756#issuecomment-789573910:114,Deployability,release,release,114,"According to:; https://www.qt.io/blog/add-on-support-in-qt-6.0-and-beyond; Qt 6 will be feature completed for LTS release at version 6.2 which is planned for septembre 2021.; At that time QtChart Qt SerialPort, QtWebEngine, QtDataVisualition will be there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1756#issuecomment-789573910
https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085:1143,Usability,clear,clear,1143,"> ; > ; > > I also changed the code in GLBackend.cpp to remove the ""background is moving when I resize the window"" effect.; > > ```c++; > > double coordWidth = int(screenWidth / w) + 1;; > > double coordHeight = int(screenHeight / h) + 1;; > > ; > > glColor3f(1.0f, 1.0f, 1.0f);; > > glBegin(GL_QUADS);; > > glTexCoord2d(0.0, 0.0); glVertex3d( -w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, 0.0); glVertex3d( w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, coordHeight*2.0); glVertex3d( w*coordWidth, h*coordHeight, 0.0 );; > > glTexCoord2d(0.0, coordHeight*2.0); glVertex3d( -w*coordWidth, h*coordHeight, 0.0 );; > > glEnd();; > > ```; > > ; > > ; > > @fredroy could you review this before I push it in the PR please ?; > ; > `double coordWidth = int(screenWidth / w) + 1;`; > will give warning conversion and why +1 ?. +1 because we want to know how many entire textures we have to display to cover **at least** screenWidth and screenHeight. Thus we do an integer division and add 1 to handle all the cases where `screenWidth % w != 0` (almost all the cases actually).; Not sure this was very clear :eyes:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085
https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769773114:249,Deployability,update,update,249,The PR is all right to me. . In the recent pr experiment I'm doing I tend to have a combo like this one; ```cpp; sofa::core::objectmodel ; {; class BaseObject;; typedef sofa::core::sptr<BaseObject> BaseObjectSPtr ; }; ```; It is much more easier to update the code with mass replacement of BaseObject::SPtr with BaseObjectSPtr.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769773114
https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769774461:146,Safety,avoid,avoiding,146,> ```c++; > sofa::core::sptr<BaseObject>; > ```. `sofa::core::sptr<BaseObject>` is not much longer than `BaseObjectSPtr` and have to advantage of avoiding an alias :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769774461
https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769784026:566,Deployability,deploy,deploy,566,> > ```c++; > > sofa::core::sptr<BaseObject>; > > ```; > ; > `sofa::core::sptr<BaseObject>` is not much longer than `BaseObjectSPtr` and have to advantage of avoiding an alias :-). This is exactly what I was thinking before actually having to do a full replacement of simulation::Node::SPtr on the whole code base. The replacement requires some care to handle correctly the namespace variations everywhere in the code base ; sofa::simulation::Node::SPtr; simulation::Node::SPtr; Node::SPtr ; I found that a mass replacement from Node::SPtr to NodeSPtr was easier to deploy (and revert) massively.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769784026
https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769784026:158,Safety,avoid,avoiding,158,> > ```c++; > > sofa::core::sptr<BaseObject>; > > ```; > ; > `sofa::core::sptr<BaseObject>` is not much longer than `BaseObjectSPtr` and have to advantage of avoiding an alias :-). This is exactly what I was thinking before actually having to do a full replacement of simulation::Node::SPtr on the whole code base. The replacement requires some care to handle correctly the namespace variations everywhere in the code base ; sofa::simulation::Node::SPtr; simulation::Node::SPtr; Node::SPtr ; I found that a mass replacement from Node::SPtr to NodeSPtr was easier to deploy (and revert) massively.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1760#issuecomment-769784026
https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796:36,Usability,feedback,feedback,36,Looks ok to me. Any one for a quick feedback on reviewing this fast-merge PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796
https://github.com/sofa-framework/sofa/pull/1763#issuecomment-770176715:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1763#issuecomment-770176715
https://github.com/sofa-framework/sofa/pull/1763#issuecomment-770176715:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1763#issuecomment-770176715
https://github.com/sofa-framework/sofa/pull/1764#issuecomment-775109056:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1764#issuecomment-775109056
https://github.com/sofa-framework/sofa/pull/1764#issuecomment-780848561:79,Energy Efficiency,reduce,reduce,79,"Here is a doc for you to start from:. Forward declaration; ===============; To reduce the amount of file inclusion in Sofa and thus compilation time it is possible to use forward declaration. ; A forward declaration is a an incomplete type ta complete definition is not provided. ; ```cpp; class AClass; ///< this is a forward declaration of a type. /// This is the full declaration + definition of a type; class AClass ; {; public:; }; ```; Forward declaration can be used in place of the complete type (declaration+definition) when the ""inner"" details of the type are not needed. A classical scenario is the following; ```cpp; #include <sofa/core/objectmodel/BaseObject>; bool myFunction1(BaseObject* a); {; return doSomethingWith(a);; }; ```; As we are manipulating the 'a' object via a pointer and passing it to the doSomethingWith function there is no need to know any details of the BaseObject to compile that properly. Using a forward declaration for BaseObject would save us from the inclusion of the file ```#include <sofa/core/objectmodel/BaseObject>```. Where to put forward declaration; --------------------------------------------; Forward declaration must be in a file called ```fwd.h```. The fwd.h can be located at the module root directory.; Eg:; ```; sofa/core/fwd.h; ```; If there is a lot of forward declaration it is allowed to have a per sub-module ```fwd.h``` file. ; Eg:; ```; sofa/core/objectmodel/fwd.h; sofa/core/behavior/fwd.h; ```; In that case it is mandatory that the module file contains them all. In our example ; ```cpp; sofa/core/fwd.h; #include<sofa/core/objectmodel/fwd.h>; #include<sofa/core/behavior/fwd.h>; ```. Opaque API ; =========; When it is not desirable to have access the full type definition it is possible to make or use what is called an opaque API. The Opaque API mimmics the methods provided by a class but relying only on forward declaration. ; Exemple of the ""transparent"" API: ; ```cpp; #include <Context>; #include <BaseNode>; namespace sofa::s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1764#issuecomment-780848561
https://github.com/sofa-framework/sofa/pull/1764#issuecomment-780848561:1709,Security,access,access,1709,"llowing; ```cpp; #include <sofa/core/objectmodel/BaseObject>; bool myFunction1(BaseObject* a); {; return doSomethingWith(a);; }; ```; As we are manipulating the 'a' object via a pointer and passing it to the doSomethingWith function there is no need to know any details of the BaseObject to compile that properly. Using a forward declaration for BaseObject would save us from the inclusion of the file ```#include <sofa/core/objectmodel/BaseObject>```. Where to put forward declaration; --------------------------------------------; Forward declaration must be in a file called ```fwd.h```. The fwd.h can be located at the module root directory.; Eg:; ```; sofa/core/fwd.h; ```; If there is a lot of forward declaration it is allowed to have a per sub-module ```fwd.h``` file. ; Eg:; ```; sofa/core/objectmodel/fwd.h; sofa/core/behavior/fwd.h; ```; In that case it is mandatory that the module file contains them all. In our example ; ```cpp; sofa/core/fwd.h; #include<sofa/core/objectmodel/fwd.h>; #include<sofa/core/behavior/fwd.h>; ```. Opaque API ; =========; When it is not desirable to have access the full type definition it is possible to make or use what is called an opaque API. The Opaque API mimmics the methods provided by a class but relying only on forward declaration. ; Exemple of the ""transparent"" API: ; ```cpp; #include <Context>; #include <BaseNode>; namespace sofa::simulation; {; class Node : public Context, public BaseNode ; {; public:; double getDt(); ; ///....; };; }; ```. Exemple of the corresponding ""opaque"" API: ; ```cpp; namespace sofa::simulation::node; {; double getDt(Node*); ; }; ```. Opaque API for a given type can be located at the same location where the type is foward declared or if very long in their own dedicated file close to the one where the type definition is. ; ```; sofa/simulation/node.h; sofa/simulation/node.cpp; sofa/simulation/node-fwd.h ; ```; If the second solution is chosen, the ``node-fwd.h` file must be included by the per-module fwd.h.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1764#issuecomment-780848561
https://github.com/sofa-framework/sofa/pull/1770#issuecomment-772474769:46,Availability,error,error,46,... we did not say that we should be throw an error into the end(.... Node*) function ? 😏; I will do an other PR to add it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1770#issuecomment-772474769
https://github.com/sofa-framework/sofa/pull/1774#issuecomment-773302067:83,Availability,error,error,83,"on my side it is ready whenever you want, the fact SofaPython2 was throwing did an error at the compilation because it was calling the end(...Node*) perfectly showed the principle 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1774#issuecomment-773302067
https://github.com/sofa-framework/sofa/pull/1775#issuecomment-773266478:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1775#issuecomment-773266478
https://github.com/sofa-framework/sofa/pull/1777#issuecomment-774197064:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1777#issuecomment-774197064
https://github.com/sofa-framework/sofa/pull/1777#issuecomment-779251012:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1777#issuecomment-779251012
https://github.com/sofa-framework/sofa/pull/1778#issuecomment-773552074:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1778#issuecomment-773552074
https://github.com/sofa-framework/sofa/pull/1779#issuecomment-773550795:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1779#issuecomment-773550795
https://github.com/sofa-framework/sofa/pull/1780#issuecomment-776775591:33,Deployability,update,updates,33,"hey @epernod I see a lot of type updates but I am not sure to identify the exact location of the fix you mention, thanks; (anyway looks perfectly fine to me!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1780#issuecomment-776775591
https://github.com/sofa-framework/sofa/pull/1781#issuecomment-773620434:19,Testability,test,test,19,"waiting to compile/test, to be sure 👮‍♂️",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1781#issuecomment-773620434
https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903:64,Usability,simpl,simple,64,I've just fixed the broken history for the PR so we can see the simple two commits which concern this PR. Hope we can discuss it next week.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-774547723:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-774547723
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:53,Deployability,update,updated,53,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:110,Modifiability,refactor,refactoring,110,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:195,Modifiability,refactor,refactor,195,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:321,Modifiability,refactor,refactor,321,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:62,Testability,test,tested,62,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772
https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785263103:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785263103
https://github.com/sofa-framework/sofa/pull/1790#issuecomment-774754062:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1790#issuecomment-774754062
https://github.com/sofa-framework/sofa/pull/1790#issuecomment-781287920:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1790#issuecomment-781287920
https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838:362,Integrability,interface,interface,362,Just tested it on Windows and it's indeed a mess. | | QGLViewer | QtViewer |; | ----- | ----- | ----- |; | S key | - Opens a dialog to save a screenshot next to runSofa executable<br>- Opens a 2nd dialog for image settings<br>- Captures the viewer only<br>- Crashes if file exists | - Quietly saves a screenshot in the screenshots folder<br>- Captures the whole interface |; | Screenshot<br>button | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the whole interface<br>- Repeats 3 times | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the viewer only<br>- Repeats 2 times |. Which behavior is the right one? :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838
https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838:488,Integrability,interface,interface,488,Just tested it on Windows and it's indeed a mess. | | QGLViewer | QtViewer |; | ----- | ----- | ----- |; | S key | - Opens a dialog to save a screenshot next to runSofa executable<br>- Opens a 2nd dialog for image settings<br>- Captures the viewer only<br>- Crashes if file exists | - Quietly saves a screenshot in the screenshots folder<br>- Captures the whole interface |; | Screenshot<br>button | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the whole interface<br>- Repeats 3 times | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the viewer only<br>- Repeats 2 times |. Which behavior is the right one? :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838
https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838:5,Testability,test,tested,5,Just tested it on Windows and it's indeed a mess. | | QGLViewer | QtViewer |; | ----- | ----- | ----- |; | S key | - Opens a dialog to save a screenshot next to runSofa executable<br>- Opens a 2nd dialog for image settings<br>- Captures the viewer only<br>- Crashes if file exists | - Quietly saves a screenshot in the screenshots folder<br>- Captures the whole interface |; | Screenshot<br>button | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the whole interface<br>- Repeats 3 times | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the viewer only<br>- Repeats 2 times |. Which behavior is the right one? :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838
https://github.com/sofa-framework/sofa/pull/1792#issuecomment-780592648:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1792#issuecomment-780592648
https://github.com/sofa-framework/sofa/pull/1792#issuecomment-780592648:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1792#issuecomment-780592648
https://github.com/sofa-framework/sofa/pull/1792#issuecomment-783301316:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1792#issuecomment-783301316
https://github.com/sofa-framework/sofa/pull/1792#issuecomment-783301316:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1792#issuecomment-783301316
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-776064280:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-776064280
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-776064280:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-776064280
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-779823378:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-779823378
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-783709072:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-783709072
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-783709072:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-783709072
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:608,Availability,error,error,608,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:886,Availability,error,error,886,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2616,Availability,error,error,2616,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1263,Deployability,release,release,1263,"ce.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. I",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1287,Deployability,release,release,1287,"&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1964,Deployability,release,release,1964,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1988,Deployability,release,release,1988,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:259,Integrability,interface,interface,259,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:649,Integrability,interface,interface,649,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1217,Integrability,message,message,1217,"d to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2133,Integrability,message,message,2133,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1375,Modifiability,config,config,1375,"&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2271,Modifiability,config,config,2271,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:235,Usability,simpl,simple,235,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:338,Usability,usab,usable,338,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:725,Usability,usab,usable,725,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1787,Usability,usab,usable,1787,"nce `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it ha",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2127,Usability,clear,clear,2127,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2716,Usability,usab,usable,2716,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810:53,Deployability,update,updated,53,[ci-build][with-scene-tests]; Regression needs to be updated. . PR to update Regression is: https://github.com/sofa-framework/regression/pull/6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810:70,Deployability,update,update,70,[ci-build][with-scene-tests]; Regression needs to be updated. . PR to update Regression is: https://github.com/sofa-framework/regression/pull/6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810:22,Testability,test,tests,22,[ci-build][with-scene-tests]; Regression needs to be updated. . PR to update Regression is: https://github.com/sofa-framework/regression/pull/6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-792929065:114,Modifiability,plugin,plugins,114,"Hi @guparan,. Thanks for the careful review. ; Here are the changes:; - I fixed the erroneous GetMechanical... in plugins; - I removed all the comment code in /* mparams = xxxx */ because these lines makes no sense neither before the PR or after. ; - The /// is just the normal code comment and I have not expectation for them to generate any doxygen comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-792929065
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-793671807:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-793671807
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:973,Usability,clear,clearly,973,"> When I see a Doxygen comment at a non-Doxygen-standard place, I always wonder ""Why is this here? Does Doxygen now support this?"".; > How can it be more useful to use `///` than `//` ?. I understand your point and here is a summary to boostrap discussion. . Currently in our code base we never esthablish specific rules on the use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:1527,Usability,clear,clear,1527,"he use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ for documenting public API (what should and must be visible in doxygen, mostly the comment close to declaration) ; - always use /// or ///< for internal details (no requirement that it must be close to declaration) ; - use // or /* */ for other usages. . But given our code base ... I'm not sure which direction we should go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-795518623:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-795518623
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-795518623:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-795518623
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-799341844:235,Availability,error,errors,235,"@damienmarchal I just pulled these changes, and I have issues to compile.; I still found `sofa::core::ExecParams::defaultInstance()` instead of `sofa::core::execparams::defaultInstance()`. After changing them, I still have compilation errors:. [error.txt](https://github.com/sofa-framework/sofa/files/6140943/error.txt). EDIT: I reset the SofaPython3 folder and the compilation worked",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-799341844
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-799341844:245,Availability,error,error,245,"@damienmarchal I just pulled these changes, and I have issues to compile.; I still found `sofa::core::ExecParams::defaultInstance()` instead of `sofa::core::execparams::defaultInstance()`. After changing them, I still have compilation errors:. [error.txt](https://github.com/sofa-framework/sofa/files/6140943/error.txt). EDIT: I reset the SofaPython3 folder and the compilation worked",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-799341844
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-799341844:309,Availability,error,error,309,"@damienmarchal I just pulled these changes, and I have issues to compile.; I still found `sofa::core::ExecParams::defaultInstance()` instead of `sofa::core::execparams::defaultInstance()`. After changing them, I still have compilation errors:. [error.txt](https://github.com/sofa-framework/sofa/files/6140943/error.txt). EDIT: I reset the SofaPython3 folder and the compilation worked",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-799341844
https://github.com/sofa-framework/sofa/pull/1797#issuecomment-776132063:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1797#issuecomment-776132063
https://github.com/sofa-framework/sofa/pull/1798#issuecomment-776215753:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1798#issuecomment-776215753
https://github.com/sofa-framework/sofa/pull/1799#issuecomment-786680992:151,Safety,timeout,timeout,151,@damienmarchal are you going to complete this PR in the coming days?; It becomes critical for resuming #1797 and completing NG work. Do you still have timeout issues?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1799#issuecomment-786680992
https://github.com/sofa-framework/sofa/pull/1799#issuecomment-786747437:82,Deployability,update,update,82,Ok it would be nice :+1: my point is only not to brake NG roadmap progress; Let's update about it within the next days,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1799#issuecomment-786747437
https://github.com/sofa-framework/sofa/pull/1799#issuecomment-789070255:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1799#issuecomment-789070255
https://github.com/sofa-framework/sofa/pull/1799#issuecomment-789070255:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1799#issuecomment-789070255
https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559:82,Deployability,update,update,82,Are all pluginisation finished? I would wait for it otherwise you will need to re-update all the scene.; By the way I would be happy to set an option to automatically include the main plugin...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559
https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559:8,Modifiability,plugin,pluginisation,8,Are all pluginisation finished? I would wait for it otherwise you will need to re-update all the scene.; By the way I would be happy to set an option to automatically include the main plugin...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559
https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559:184,Modifiability,plugin,plugin,184,Are all pluginisation finished? I would wait for it otherwise you will need to re-update all the scene.; By the way I would be happy to set an option to automatically include the main plugin...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559
https://github.com/sofa-framework/sofa/pull/1802#issuecomment-777315288:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-777315288
https://github.com/sofa-framework/sofa/pull/1805#issuecomment-778289229:24,Availability,repair,repaired,24,"Thanks Pedro! Since you repaired #1788, this PR is actually not necessary. We will backport #1788 manually into v20.12 :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1805#issuecomment-778289229
https://github.com/sofa-framework/sofa/pull/1806#issuecomment-783650739:2,Testability,test,tested,2,"I tested it: it compiles, it runs fine; Anyone else to test it? @epernod maybe?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1806#issuecomment-783650739
https://github.com/sofa-framework/sofa/pull/1806#issuecomment-783650739:55,Testability,test,test,55,"I tested it: it compiles, it runs fine; Anyone else to test it? @epernod maybe?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1806#issuecomment-783650739
https://github.com/sofa-framework/sofa/pull/1807#issuecomment-785722870:189,Testability,test,tests,189,"Yep, I did not find a ""standard"" std:: thingy to do the is_iterable or something like that (except concept from c++20), so good to go for me as well.; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1807#issuecomment-785722870
https://github.com/sofa-framework/sofa/pull/1808#issuecomment-778509238:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1808#issuecomment-778509238
https://github.com/sofa-framework/sofa/pull/1808#issuecomment-779822691:27,Modifiability,plugin,plugins,27,"Might be breaking for some plugins I suppose, but fine for me",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1808#issuecomment-779822691
https://github.com/sofa-framework/sofa/pull/1810#issuecomment-777275418:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1810#issuecomment-777275418
https://github.com/sofa-framework/sofa/pull/1810#issuecomment-779685559:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1810#issuecomment-779685559
https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835:75,Usability,responsiv,responsive,75,"Hi @EulalieCoevoet @ChristianDuriez ; Good to see you two super active and responsive on GitHub!! The SOFA GitHub is on :fire: . Just FYI pull-requests without a flag ""fast-merge"" are supposed to be let open 7 days for people to see it and review it.; But when @ChristianDuriez agrees, I guess we do as well :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835
https://github.com/sofa-framework/sofa/pull/1816#issuecomment-778107958:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1816#issuecomment-778107958
https://github.com/sofa-framework/sofa/pull/1816#issuecomment-778107958:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1816#issuecomment-778107958
https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778391281:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778391281
https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778474866:23,Modifiability,config,config,23,ahah.... shame all the config for PR are with options... so we don't know if it works...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778474866
https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778490561:25,Modifiability,config,config,25,> ahah.... shame all the config for PR are with options... so we don't know if it works... Now I understand how we didn't noticed that before...I only look at PR much often that the full master dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778490561
https://github.com/sofa-framework/sofa/pull/1818#issuecomment-779386843:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1818#issuecomment-779386843
https://github.com/sofa-framework/sofa/pull/1820#issuecomment-784263603:0,Testability,Test,Tested,0,Tested and working on Linux and Windows :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1820#issuecomment-784263603
https://github.com/sofa-framework/sofa/pull/1823#issuecomment-779848845:17,Testability,Test,Tests,17,Merged too fast! Tests are failing on CentOS.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1823#issuecomment-779848845
https://github.com/sofa-framework/sofa/pull/1824#issuecomment-780453106:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1824#issuecomment-780453106
https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780032801:44,Testability,test,tests,44,Just added a dummy commit to see if ALL the tests are executed on CI (I changed some stuff in CI scripts).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780032801
https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780069074:26,Availability,failure,failures,26,It worked. Note that test failures and crashes are not due to this PR :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780069074
https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780069074:21,Testability,test,test,21,It worked. Note that test failures and crashes are not due to this PR :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780069074
https://github.com/sofa-framework/sofa/issues/1828#issuecomment-781249780:82,Modifiability,plugin,plugin,82,"MatSym is indeed used, mainly in SofaMiscFem and apparently in the future Caribou plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1828#issuecomment-781249780
https://github.com/sofa-framework/sofa/pull/1829#issuecomment-782096370:36,Availability,failure,failure,36,fast-merge but the CI reports a lot failure.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1829#issuecomment-782096370
https://github.com/sofa-framework/sofa/pull/1830#issuecomment-783558014:5,Deployability,update,updated,5,Just updated it @jnbrunet let me know if the explanations suit you,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1830#issuecomment-783558014
https://github.com/sofa-framework/sofa/pull/1831#issuecomment-780930585:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1831#issuecomment-780930585
https://github.com/sofa-framework/sofa/pull/1831#issuecomment-783467227:57,Testability,test,tests,57,Why this is one not yet merge ? ; :) [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1831#issuecomment-783467227
https://github.com/sofa-framework/sofa/pull/1834#issuecomment-797083121:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1834#issuecomment-797083121
https://github.com/sofa-framework/sofa/pull/1834#issuecomment-800547265:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1834#issuecomment-800547265
https://github.com/sofa-framework/sofa/pull/1837#issuecomment-782103381:547,Safety,avoid,avoid,547,"If I remember correctly, what I've seen in other projects is usually to put the check inside the `XXXConfig.cmake`. For example:. ```cmake; # CMakeLists.txt. find_package(SofaFramework REQUIRED) ; ```. ```cmake. # SofaFrameworkConfig.cmake; if (target SofaHelper); return(); endif(); ```. This way everyone (internal and external cmake projects) will get faster result, no matter if they use `find_package()` or `sofa_find_package()`. Edit: I guess it's the same as include guards. So I agree with @damienmarchal , it is probably faster since you avoid a search for `XXXConfig.cmake` or `FindXXX.cmake` files",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-782103381
https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786017626:38,Testability,test,tested,38,@fredroy any progress on this one ? I tested and It worked like a charm ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786017626
https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786627964:852,Integrability,depend,dependencies,852,"As far as I remember, it was said that to encourage PR submission & reviewing the policy on which we agreed was something like ""if no one complains then the PR get merged after if they pass the CI"". . I did a quik review of the PR:; - cpack control seems ok (if I understand correctly this is only for cpacking, which is mostly used by the consortium so in case of problem will be fixed quickly); - sofa_find_package is ok ; - about glob_recurse, you make the assumption that it is mainly for linux but sofa_install_libraries which is often used in the following code: ; ```console; if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif() ; ```; or ; ```; if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(PATHS ${Boost_LIBRARIES}) # Boost_LIBRARIES covers Boost internal dependencies; endif(); ``` ; I would say that it is actually mostly a windows side effect to use it and only Sofa.GL seem to use it for Linux. ; So I wonder if it is worth at all expect for a very limited number of specific corner case that maybe could be detected specifically to activate glob_recurse instead of glob . . About the vitalness of the PR... If the timing is still faster than O(n) with n the number of package we will have to face it oneday (and as with modularization we are making more and more package this day will come earlier that we expect).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786627964
https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786627964:1108,Safety,detect,detected,1108,"As far as I remember, it was said that to encourage PR submission & reviewing the policy on which we agreed was something like ""if no one complains then the PR get merged after if they pass the CI"". . I did a quik review of the PR:; - cpack control seems ok (if I understand correctly this is only for cpacking, which is mostly used by the consortium so in case of problem will be fixed quickly); - sofa_find_package is ok ; - about glob_recurse, you make the assumption that it is mainly for linux but sofa_install_libraries which is often used in the following code: ; ```console; if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif() ; ```; or ; ```; if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(PATHS ${Boost_LIBRARIES}) # Boost_LIBRARIES covers Boost internal dependencies; endif(); ``` ; I would say that it is actually mostly a windows side effect to use it and only Sofa.GL seem to use it for Linux. ; So I wonder if it is worth at all expect for a very limited number of specific corner case that maybe could be detected specifically to activate glob_recurse instead of glob . . About the vitalness of the PR... If the timing is still faster than O(n) with n the number of package we will have to face it oneday (and as with modularization we are making more and more package this day will come earlier that we expect).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786627964
https://github.com/sofa-framework/sofa/pull/1839#issuecomment-783344160:29,Deployability,Release,Release,29,"Just got the issue myself in Release mode, and this fixed the problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1839#issuecomment-783344160
https://github.com/sofa-framework/sofa/pull/1840#issuecomment-782935934:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1840#issuecomment-782935934
https://github.com/sofa-framework/sofa/pull/1842#issuecomment-783706868:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1842#issuecomment-783706868
https://github.com/sofa-framework/sofa/pull/1842#issuecomment-783706868:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1842#issuecomment-783706868
https://github.com/sofa-framework/sofa/pull/1842#issuecomment-789241190:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1842#issuecomment-789241190
https://github.com/sofa-framework/sofa/pull/1842#issuecomment-789241190:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1842#issuecomment-789241190
https://github.com/sofa-framework/sofa/pull/1847#issuecomment-788264614:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1847#issuecomment-788264614
https://github.com/sofa-framework/sofa/pull/1847#issuecomment-788264614:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1847#issuecomment-788264614
https://github.com/sofa-framework/sofa/pull/1848#issuecomment-788012170:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1848#issuecomment-788012170
https://github.com/sofa-framework/sofa/pull/1848#issuecomment-789912106:34,Availability,error,error,34,So for this one the CI showing an error..but I'm not sure it is a real one... I retry ubuntu only.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1848#issuecomment-789912106
https://github.com/sofa-framework/sofa/pull/1849#issuecomment-783615729:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1849#issuecomment-783615729
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-784008844:8,Testability,log,logo,8,The new logo(s) are bitmaps (.bmp) so I dont think it would crash in libpng.... Or something is really wrong 🤐,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-784008844
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:583,Deployability,Release,Release,583,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:613,Deployability,release,release,613,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:673,Deployability,Release,Release,673,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:285,Integrability,depend,dependencies,285,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:561,Integrability,depend,dependency,561,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:261,Performance,load,load,261,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:594,Safety,avoid,avoid,594,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198
https://github.com/sofa-framework/sofa/pull/1853#issuecomment-785356877:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1853#issuecomment-785356877
https://github.com/sofa-framework/sofa/pull/1853#issuecomment-785356877:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1853#issuecomment-785356877
https://github.com/sofa-framework/sofa/pull/1854#issuecomment-784900619:18,Modifiability,rewrite,rewrite,18,So many things to rewrite in this component 🤪 but this is not really the point of this PR anyway,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1854#issuecomment-784900619
https://github.com/sofa-framework/sofa/pull/1854#issuecomment-790027269:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1854#issuecomment-790027269
https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878:9,Deployability,patch,patch,9,Fix with patch; [SofaNonUniformFem] Remove shadow variable; pr: clean pr: fast merge status: ready; #1874 by maddin200 was merged yesterday • Approved,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878
https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878:50,Modifiability,variab,variable,50,Fix with patch; [SofaNonUniformFem] Remove shadow variable; pr: clean pr: fast merge status: ready; #1874 by maddin200 was merged yesterday • Approved,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878
https://github.com/sofa-framework/sofa/pull/1858#issuecomment-785451388:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1858#issuecomment-785451388
https://github.com/sofa-framework/sofa/pull/1859#issuecomment-796120161:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1859#issuecomment-796120161
https://github.com/sofa-framework/sofa/pull/1860#issuecomment-796126180:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1860#issuecomment-796126180
https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796:161,Availability,error,error,161,"CI seems not happy:; ```; Edge2QuadTopologicalMapping.cpp.obj; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2146: syntax error: missing ')' before identifier 'and'; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2065: 'and': undeclared identifier; ```. See [full log](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1861/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/console) here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796
https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796:181,Availability,error,error,181,"CI seems not happy:; ```; Edge2QuadTopologicalMapping.cpp.obj; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2146: syntax error: missing ')' before identifier 'and'; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2065: 'and': undeclared identifier; ```. See [full log](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1861/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/console) here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796
https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796:323,Availability,error,error,323,"CI seems not happy:; ```; Edge2QuadTopologicalMapping.cpp.obj; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2146: syntax error: missing ')' before identifier 'and'; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2065: 'and': undeclared identifier; ```. See [full log](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1861/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/console) here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796
https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796:504,Deployability,release,release,504,"CI seems not happy:; ```; Edge2QuadTopologicalMapping.cpp.obj; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2146: syntax error: missing ')' before identifier 'and'; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2065: 'and': undeclared identifier; ```. See [full log](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1861/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/console) here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796
https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796:381,Testability,log,log,381,"CI seems not happy:; ```; Edge2QuadTopologicalMapping.cpp.obj; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2146: syntax error: missing ')' before identifier 'and'; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2065: 'and': undeclared identifier; ```. See [full log](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1861/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/console) here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796
https://github.com/sofa-framework/sofa/pull/1861#issuecomment-790027142:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-790027142
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-791314794:97,Performance,multi-thread,multi-threaded,97,"I recommend adding tests, and repeat them several times due to the non-deterministic nature of a multi-threaded approach.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-791314794
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-791314794:19,Testability,test,tests,19,"I recommend adding tests, and repeat them several times due to the non-deterministic nature of a multi-threaded approach.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-791314794
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252:311,Modifiability,plugin,plugin,311,"I was testing a benchmark scene with quite a lot of constraints (frictions) and:; (exactly the same scene); ```; master : 5000 iterations done in 203.986 s ( 24.5115 FPS); this PR : 5000 iterations done in 134.177 s ( 37.2643 FPS); ```; with just having to set `multithread=""true""` (and building multithreading plugin) this is **cool** 🥳. Edit: and it was with Windows/MSVC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252:6,Testability,test,testing,6,"I was testing a benchmark scene with quite a lot of constraints (frictions) and:; (exactly the same scene); ```; master : 5000 iterations done in 203.986 s ( 24.5115 FPS); this PR : 5000 iterations done in 134.177 s ( 37.2643 FPS); ```; with just having to set `multithread=""true""` (and building multithreading plugin) this is **cool** 🥳. Edit: and it was with Windows/MSVC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252:16,Testability,benchmark,benchmark,16,"I was testing a benchmark scene with quite a lot of constraints (frictions) and:; (exactly the same scene); ```; master : 5000 iterations done in 203.986 s ( 24.5115 FPS); this PR : 5000 iterations done in 134.177 s ( 37.2643 FPS); ```; with just having to set `multithread=""true""` (and building multithreading plugin) this is **cool** 🥳. Edit: and it was with Windows/MSVC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-803127159:34,Modifiability,plugin,plugin,34,"You don't need the MultiThreading plugin. Since the TaskScheduler is in SofaSimulationCore, I think it's nice to always have the feature, if that's okay. . However... something is off. I guess I did something wrong with the TaskScheduler. Now when I use the feature, 40% of my CPU is used by runSofa without necessarily running the simulation... only one step is enough to make everything go crazy.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-803127159
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-804797317:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-804797317
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:4,Deployability,update,update,4,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:91,Testability,test,test,91,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:68,Usability,simpl,simple,68,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-823044769:0,Testability,Test,Testing,0,"Testing this PR coupled with #1997 on Windows/MSVC and there is no more CPU ""business"" if the simulation is stopped.; So I guess this PR is ready IMO.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-823044769
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:783,Availability,error,error,783,"using cmake-gui, I have now activated the plugin sofa cuda: . here is the output of cmake-gui:; `````; Found CUDA: /usr/local/cuda-11.2 (found version ""11.2"") ; SofaCUDA: Plugin VolumetricRendering was not enabled/found, therefore CudaTetrahedralVisualModel will not be compiled.; SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.; SofaCUDA: optional dependency SofaSphFluid not enabled. ; Autodetected CUDA architecture(s): 7.5; SofaCUDA: nvcc flags: -gencode;arch=compute_75,code=sm_75;-Xcompiler -fPIC; `````. I'm compling sofa on my laptop that has a decent graphical card (a Quadro T2000) but that maybe not inadequate in GPU memory or precision for sofa. Double precision is not activated for instance. Anyway, the same error occurs even if I delete all files from previous compilation adn regenerate the cmake files. `````; 1121/1599] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../Sofa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:3168,Availability,error,error,3168," -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaCore/src -Iinclude/GTest -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCore/src -isystem /home/vozenne/Dev/sofa/src/SofaKernel/extlibs/json -isystem /home/vozenne/Dev/sofa/src/extlibs/gtest/include -isystem /usr/include/eigen3 -Wall -W -Wno-padded -O3 -DNDEBUG -fPIC -DFRAMEWORK_TEST_RESOURCES_DIR=\""/home/vozenne/Dev/sofa/src/SofaKernel/SofaFramework/resources/tests\"" -pthread -DGTEST_LINKED_AS_SHARED_LIBRARY=1 -std=gnu++17 -MD -MT modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -MF modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o.d -o modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -c /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp; In file included from /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp:30:; /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.inl:199:9: error: use of undeclared identifier 'glVertexAttribLPointer'; did you mean '__glewVertexAttribIPointer'?; glVertexAttribLPointer(_index, size, type, 0, (char*)nullptr + 0);; ^~~~~~~~~~~~~~~~~~~~~~; __glewVertexAttribIPointer; /home/vozenne/NVIDIA_CUDA-11.2_Samples/common/inc/GL/glew.h:12318:51: note: '__glewVertexAttribIPointer' declared here; GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTERPROC __glewVertexAttribIPointer;. `````",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:408,Integrability,depend,dependency,408,"using cmake-gui, I have now activated the plugin sofa cuda: . here is the output of cmake-gui:; `````; Found CUDA: /usr/local/cuda-11.2 (found version ""11.2"") ; SofaCUDA: Plugin VolumetricRendering was not enabled/found, therefore CudaTetrahedralVisualModel will not be compiled.; SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.; SofaCUDA: optional dependency SofaSphFluid not enabled. ; Autodetected CUDA architecture(s): 7.5; SofaCUDA: nvcc flags: -gencode;arch=compute_75,code=sm_75;-Xcompiler -fPIC; `````. I'm compling sofa on my laptop that has a decent graphical card (a Quadro T2000) but that maybe not inadequate in GPU memory or precision for sofa. Double precision is not activated for instance. Anyway, the same error occurs even if I delete all files from previous compilation adn regenerate the cmake files. `````; 1121/1599] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../Sofa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:42,Modifiability,plugin,plugin,42,"using cmake-gui, I have now activated the plugin sofa cuda: . here is the output of cmake-gui:; `````; Found CUDA: /usr/local/cuda-11.2 (found version ""11.2"") ; SofaCUDA: Plugin VolumetricRendering was not enabled/found, therefore CudaTetrahedralVisualModel will not be compiled.; SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.; SofaCUDA: optional dependency SofaSphFluid not enabled. ; Autodetected CUDA architecture(s): 7.5; SofaCUDA: nvcc flags: -gencode;arch=compute_75,code=sm_75;-Xcompiler -fPIC; `````. I'm compling sofa on my laptop that has a decent graphical card (a Quadro T2000) but that maybe not inadequate in GPU memory or precision for sofa. Double precision is not activated for instance. Anyway, the same error occurs even if I delete all files from previous compilation adn regenerate the cmake files. `````; 1121/1599] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../Sofa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:171,Modifiability,Plugin,Plugin,171,"using cmake-gui, I have now activated the plugin sofa cuda: . here is the output of cmake-gui:; `````; Found CUDA: /usr/local/cuda-11.2 (found version ""11.2"") ; SofaCUDA: Plugin VolumetricRendering was not enabled/found, therefore CudaTetrahedralVisualModel will not be compiled.; SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.; SofaCUDA: optional dependency SofaSphFluid not enabled. ; Autodetected CUDA architecture(s): 7.5; SofaCUDA: nvcc flags: -gencode;arch=compute_75,code=sm_75;-Xcompiler -fPIC; `````. I'm compling sofa on my laptop that has a decent graphical card (a Quadro T2000) but that maybe not inadequate in GPU memory or precision for sofa. Double precision is not activated for instance. Anyway, the same error occurs even if I delete all files from previous compilation adn regenerate the cmake files. `````; 1121/1599] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../Sofa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:2447,Testability,test,tests,2447,"es/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaCore/src -Iinclude/GTest -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCore/src -isystem /home/vozenne/Dev/sofa/src/SofaKernel/extlibs/json -isystem /home/vozenne/Dev/sofa/src/extlibs/gtest/include -isystem /usr/include/eigen3 -Wall -W -Wno-padded -O3 -DNDEBUG -fPIC -DFRAMEWORK_TEST_RESOURCES_DIR=\""/home/vozenne/Dev/sofa/src/SofaKernel/SofaFramework/resources/tests\"" -pthread -DGTEST_LINKED_AS_SHARED_LIBRARY=1 -std=gnu++17 -MD -MT modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -MF modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o.d -o modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -c /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp; In file included from /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp:30:; /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.inl:199:9: error: use of undeclared identifier 'glVertexAttribLPointer'; did you mean '__glewVertexAttribIPointer'?; glVertexAtt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561:60,Availability,error,error,60,"Hello! ; Thanks for reporting the issue; I've not seen such error during my SOFA compilations and I'm not sure it is CUDA related...; I'll keep an eye out when configuring a new PC for an intern on Monday 💻 . @valeryozenne, I'd like to ask just to be sure.; Did you install the libraries needed for SOFA Core (as shown [here](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)):; ```; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev; ```; There might be something off with`libglew-dev` in special since CMake is looking for it in a CUDA samples folder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561:266,Deployability,install,install,266,"Hello! ; Thanks for reporting the issue; I've not seen such error during my SOFA compilations and I'm not sure it is CUDA related...; I'll keep an eye out when configuring a new PC for an intern on Monday 💻 . @valeryozenne, I'd like to ask just to be sure.; Did you install the libraries needed for SOFA Core (as shown [here](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)):; ```; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev; ```; There might be something off with`libglew-dev` in special since CMake is looking for it in a CUDA samples folder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561:418,Deployability,install,install,418,"Hello! ; Thanks for reporting the issue; I've not seen such error during my SOFA compilations and I'm not sure it is CUDA related...; I'll keep an eye out when configuring a new PC for an intern on Monday 💻 . @valeryozenne, I'd like to ask just to be sure.; Did you install the libraries needed for SOFA Core (as shown [here](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)):; ```; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev; ```; There might be something off with`libglew-dev` in special since CMake is looking for it in a CUDA samples folder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561:160,Modifiability,config,configuring,160,"Hello! ; Thanks for reporting the issue; I've not seen such error during my SOFA compilations and I'm not sure it is CUDA related...; I'll keep an eye out when configuring a new PC for an intern on Monday 💻 . @valeryozenne, I'd like to ask just to be sure.; Did you install the libraries needed for SOFA Core (as shown [here](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)):; ```; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev; ```; There might be something off with`libglew-dev` in special since CMake is looking for it in a CUDA samples folder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786803927:31,Deployability,install,installing,31,"Hello, . This is the first I'm installing sofa so I might I forget something. But the libraries below have been installed. ; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev . Don't hesitate to tell if need precision on my paltform, driver, etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786803927
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786803927:112,Deployability,install,installed,112,"Hello, . This is the first I'm installing sofa so I might I forget something. But the libraries below have been installed. ; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev . Don't hesitate to tell if need precision on my paltform, driver, etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786803927
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786803927:134,Deployability,install,install,134,"Hello, . This is the first I'm installing sofa so I might I forget something. But the libraries below have been installed. ; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev . Don't hesitate to tell if need precision on my paltform, driver, etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786803927
https://github.com/sofa-framework/sofa/issues/1864#issuecomment-797386120:275,Modifiability,config,config,275,"Hello @valeryozenne , did you fix your problem yet ?. ```; /home/vozenne/NVIDIA_CUDA-11.2_Samples/common/inc/GL/glew.h:12318:51: note: '__glewVertexAttribIPointer' declared here; GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTERPROC __glewVertexAttribIPointer;; ```. Seems like your config is using glew.h from the samples of CUDA, which is maybe not appropriate/standard. Would it be possible to switch with the one from your distrib (provided by libglew-dev) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-797386120
https://github.com/sofa-framework/sofa/pull/1866#issuecomment-786887971:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1866#issuecomment-786887971
https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775:47,Safety,avoid,avoid,47,Hello @maddin200 . Thanks for your PR. The fix avoid a crash with 7 char input string (that are invallid input for color code). ; It would be an improvement in usability if instead of silently ignoring these 7 char long strings something was reported as invalid to the user by setting the fail bits.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775
https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775:160,Usability,usab,usability,160,Hello @maddin200 . Thanks for your PR. The fix avoid a crash with 7 char input string (that are invallid input for color code). ; It would be an improvement in usability if instead of silently ignoring these 7 char long strings something was reported as invalid to the user by setting the fail bits.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775
https://github.com/sofa-framework/sofa/pull/1868#issuecomment-787490073:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-787490073
https://github.com/sofa-framework/sofa/pull/1868#issuecomment-787490073:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-787490073
https://github.com/sofa-framework/sofa/pull/1870#issuecomment-788263657:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1870#issuecomment-788263657
https://github.com/sofa-framework/sofa/pull/1870#issuecomment-788263657:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1870#issuecomment-788263657
https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:1304,Modifiability,refactor,refactoring,1304,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261
https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:967,Usability,clear,clearest,967,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261
https://github.com/sofa-framework/sofa/pull/1872#issuecomment-794559810:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1872#issuecomment-794559810
https://github.com/sofa-framework/sofa/pull/1873#issuecomment-788157985:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1873#issuecomment-788157985
https://github.com/sofa-framework/sofa/pull/1873#issuecomment-873964570:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1873#issuecomment-873964570
https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787923412:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787923412
https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787941292:70,Integrability,depend,dependencies,70,This sounds nice and mandatory...I'm looking how did the inversion of dependencies. EDIT: ok i saw,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787941292
https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963:106,Integrability,message,messages,106,"I propagated SofaPython dep changes in more plugins.; I also added a few quick-cleans, see my nice commit messages to get the idea :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963
https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963:44,Modifiability,plugin,plugins,44,"I propagated SofaPython dep changes in more plugins.; I also added a few quick-cleans, see my nice commit messages to get the idea :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-790689292:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-790689292
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-790689292:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-790689292
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-806812849:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-806812849
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-806812849:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-806812849
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810923695:35,Integrability,synchroniz,synchronized,35,There is PR in SofaPython3 to keep synchronized with this PR. ; https://github.com/sofa-framework/SofaPython3/pull/133,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810923695
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810926930:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810926930
https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810926930:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810926930
https://github.com/sofa-framework/sofa/pull/1879#issuecomment-788731272:32,Testability,test,tests,32,Make sense. [ci-build][with-all-tests]; (to be sure),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1879#issuecomment-788731272
https://github.com/sofa-framework/sofa/pull/1881#issuecomment-789030042:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1881#issuecomment-789030042
https://github.com/sofa-framework/sofa/pull/1881#issuecomment-789115644:27,Testability,test,tests,27,The fix worked. Regression tests are back on CI :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1881#issuecomment-789115644
https://github.com/sofa-framework/sofa/pull/1883#issuecomment-789239755:20,Testability,test,tests,20,[ci-build][with-all-tests]; Good night and work well CI :crescent_moon:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1883#issuecomment-789239755
https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164:278,Deployability,update,updated,278,A list of tasks to do:; 1. remove SofaTest use in Sofa*_test (first in the most important modules SofaBase* and then SofaCommon and ...); 2. dispatch the existing tests in the SofaTest. I suppose 1) will involve to add/modify the new Sofa.Testing API.; This post will surely be updated heavily soon....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164
https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164:163,Testability,test,tests,163,A list of tasks to do:; 1. remove SofaTest use in Sofa*_test (first in the most important modules SofaBase* and then SofaCommon and ...); 2. dispatch the existing tests in the SofaTest. I suppose 1) will involve to add/modify the new Sofa.Testing API.; This post will surely be updated heavily soon....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164
https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164:239,Testability,Test,Testing,239,A list of tasks to do:; 1. remove SofaTest use in Sofa*_test (first in the most important modules SofaBase* and then SofaCommon and ...); 2. dispatch the existing tests in the SofaTest. I suppose 1) will involve to add/modify the new Sofa.Testing API.; This post will surely be updated heavily soon....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164
https://github.com/sofa-framework/sofa/pull/1886#issuecomment-790585464:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1886#issuecomment-790585464
https://github.com/sofa-framework/sofa/pull/1887#issuecomment-789788928:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1887#issuecomment-789788928
https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996:24,Usability,feedback,feedback,24,"@guparan thanks for the feedback, I will change all the #ifdef XXX_HAVE_SOFA_GL then",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996
https://github.com/sofa-framework/sofa/pull/1888#issuecomment-791786519:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-791786519
https://github.com/sofa-framework/sofa/pull/1891#issuecomment-790873391:117,Availability,down,download,117,Ok it's fixed now. Windows users must update the `lib` directory in SOFA sources with https://www.sofa-framework.org/download/WinDepPack/latest/ :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1891#issuecomment-790873391
https://github.com/sofa-framework/sofa/pull/1891#issuecomment-790873391:38,Deployability,update,update,38,Ok it's fixed now. Windows users must update the `lib` directory in SOFA sources with https://www.sofa-framework.org/download/WinDepPack/latest/ :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1891#issuecomment-790873391
https://github.com/sofa-framework/sofa/pull/1893#issuecomment-791768898:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893#issuecomment-791768898
https://github.com/sofa-framework/sofa/pull/1893#issuecomment-799436428:130,Modifiability,refactor,refactoring,130,"Hi Fred,. If possible I think SVector should stay where it is because we want to deprecate it anyway. . About SVector deprecation/refactoring. ; To me this class only exists to implement a different parser [a, b, c] instead of a b c. It is a mistake to have a different vector class just to customize the parser. The good news is that adding a parser that understand the two syntax is possible and quite easy to do se we can just use helper:vector everywhere.; But this should be in its own PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893#issuecomment-799436428
https://github.com/sofa-framework/sofa/pull/1895#issuecomment-791606171:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1895#issuecomment-791606171
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-791784303:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-791784303
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-801480396:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-801480396
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669:143,Deployability,update,update,143,The inheritance to DataEngine brings Components (inherits from BaseObject) within a component.; Change inheritance for DDGNode to exploit only update mechanisms.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669:4,Modifiability,inherit,inheritance,4,The inheritance to DataEngine brings Components (inherits from BaseObject) within a component.; Change inheritance for DDGNode to exploit only update mechanisms.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669:49,Modifiability,inherit,inherits,49,The inheritance to DataEngine brings Components (inherits from BaseObject) within a component.; Change inheritance for DDGNode to exploit only update mechanisms.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669:103,Modifiability,inherit,inheritance,103,The inheritance to DataEngine brings Components (inherits from BaseObject) within a component.; Change inheritance for DDGNode to exploit only update mechanisms.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-806073563:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-806073563
https://github.com/sofa-framework/sofa/pull/1898#issuecomment-807081692:24,Deployability,update,updated,24,PR description and code updated with respect to the review!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-807081692
https://github.com/sofa-framework/sofa/pull/1899#issuecomment-793688900:50,Testability,test,tests,50,"Wait for CI, then ready :+1:; [ci-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1899#issuecomment-793688900
https://github.com/sofa-framework/sofa/pull/1902#issuecomment-794637886:23,Testability,test,tests,23,[ci]-build][with-scene-tests][with-regressions],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1902#issuecomment-794637886
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:199,Deployability,integrat,integrator,199,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1116,Energy Efficiency,efficient,efficiently,1116,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:199,Integrability,integrat,integrator,199,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1265,Modifiability,refactor,refactor,1265,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:618,Performance,optimiz,optimizedForDiagonalMatrix,618,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1339,Safety,detect,detect,1339,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:252,Usability,simpl,simply,252,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:920,Usability,simpl,simply,920,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:207,Deployability,integrat,integrator,207,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1142,Energy Efficiency,efficient,efficiently,1142,"tion should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of task",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1855,Energy Efficiency,adapt,adapted,1855,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:207,Integrability,integrat,integrator,207,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1302,Modifiability,refactor,refactor,1302,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1855,Modifiability,adapt,adapted,1855,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:632,Performance,optimiz,optimizedForDiagonalMatrix,632,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1383,Safety,detect,detect,1383,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:260,Usability,simpl,simply,260,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:940,Usability,simpl,simply,940,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-802776407:288,Modifiability,plugin,plugins,288,> `sofa::component::mass::RigidMass` in Compliant must also implement `isDiagonal`. Any clue what it should return? @jnbrunet. Looks like it is not diagonal because of the [rotational part](https://github.com/sofa-framework/sofa/blob/8d3fcd247583af0ba1fe3da7b113c6bf5a7f7006/applications/plugins/Compliant/misc/RigidMass.h#L267).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-802776407
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-803993966:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-803993966
https://github.com/sofa-framework/sofa/pull/1909#issuecomment-795105690:5,Testability,test,tests,5,More tests and less SofaTest. Thanks @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1909#issuecomment-795105690
https://github.com/sofa-framework/sofa/pull/1909#issuecomment-796295258:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1909#issuecomment-796295258
https://github.com/sofa-framework/sofa/pull/1909#issuecomment-800685670:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1909#issuecomment-800685670
https://github.com/sofa-framework/sofa/pull/1912#issuecomment-796837935:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1912#issuecomment-796837935
https://github.com/sofa-framework/sofa/pull/1912#issuecomment-806039747:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1912#issuecomment-806039747
https://github.com/sofa-framework/sofa/pull/1913#issuecomment-796881062:96,Testability,test,test,96,and did you try with out-of-tree compilation with SofaPython3 for example ? (as the CI does not test this mode for the moment),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1913#issuecomment-796881062
https://github.com/sofa-framework/sofa/issues/1916#issuecomment-800096466:86,Deployability,install,installed,86,Thanks @fredroy. Uninstalling qt6 solved the problem. Will SOFA be compatible with an installed version of qt6 in the future?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916#issuecomment-800096466
https://github.com/sofa-framework/sofa/pull/1917#issuecomment-805827013:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1917#issuecomment-805827013
https://github.com/sofa-framework/sofa/pull/1918#issuecomment-799500705:77,Testability,test,tests,77,One of the mac on the CI does not have numpy for python3 (thats why the unit tests are failing) but otherwise seems good for me!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1918#issuecomment-799500705
https://github.com/sofa-framework/sofa/pull/1919#issuecomment-799599513:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1919#issuecomment-799599513
https://github.com/sofa-framework/sofa/pull/1919#issuecomment-800110543:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1919#issuecomment-800110543
https://github.com/sofa-framework/sofa/pull/1919#issuecomment-800918824:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1919#issuecomment-800918824
https://github.com/sofa-framework/sofa/pull/1920#issuecomment-799785756:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1920#issuecomment-799785756
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-803984406:124,Integrability,depend,depends,124,"@jnbrunet How implicit solvers could take advantage of a diagonal mass matrix? There is already the function `addMDx` which depends on how the mass is stored. For example, it multiply dx by a single value in UniformMass, instead of multiplying by a matrix. What more can we do in implicit solvers?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-803984406
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:1020,Availability,down,down,1020,"ere the different steps of the solving process for a dynamic solver. Hopefully this could be useful at some point. I have described this further in the documentation of Caribou's backward Euler solver [here](https://caribou.jnbrunet.com/classSofaCaribou_1_1ode_1_1BackwardEulerODESolver.html). The last two equations are the one that will be fully assembled, given any solver other than the SOFA's [un-preconditioned] conjugate gradient (this one doesn't assemble any matrices). We can simplify them for the case of only one Newton iteration, which is the same as the SOFA's EulerImplicit component:. ```; [(1+h r_m)M + hB + h(h+r_k)K] da = [r_mM + B + r_k K] v + [F - T]; (1) (2) (3); ```; where `h = dt`, `F` is the internal force vector computed by the elastic forcefields, and `T` is the external force vector computed by pressure fields, gravitational fields, collisions, etc. Here is what happens during the solve:. (1) A = [(1+h r_m)M + hB + h(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves ca",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:1918,Availability,down,down,1918,"(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per ti",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2368,Availability,down,down,2368,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2200,Integrability,depend,dependent,2200,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2570,Integrability,depend,dependent,2570,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2782,Performance,optimiz,optimize,2782,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:518,Usability,simpl,simplify,518,"Hey @alxbilger,. I'll describe here the different steps of the solving process for a dynamic solver. Hopefully this could be useful at some point. I have described this further in the documentation of Caribou's backward Euler solver [here](https://caribou.jnbrunet.com/classSofaCaribou_1_1ode_1_1BackwardEulerODESolver.html). The last two equations are the one that will be fully assembled, given any solver other than the SOFA's [un-preconditioned] conjugate gradient (this one doesn't assemble any matrices). We can simplify them for the case of only one Newton iteration, which is the same as the SOFA's EulerImplicit component:. ```; [(1+h r_m)M + hB + h(h+r_k)K] da = [r_mM + B + r_k K] v + [F - T]; (1) (2) (3); ```; where `h = dt`, `F` is the internal force vector computed by the elastic forcefields, and `T` is the external force vector computed by pressure fields, gravitational fields, collisions, etc. Here is what happens during the solve:. (1) A = [(1+h r_m)M + hB + h(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:3026,Usability,clear,clear,3026,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:3054,Usability,intuit,intuitive,3054,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-806641515:120,Performance,optimiz,optimized,120,"After a discussion with @jnbrunet, we have decided to close this issue as we think the current implementation cannot be optimized further.; However, we think it is useful to know if the diagonal mass is diagonal in case the system matrix is built (it's not the case in Sofa).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-806641515
https://github.com/sofa-framework/sofa/issues/1924#issuecomment-851566891:397,Availability,error,error,397,"FWIW at Anatoscope we've been using exceptions for quite a while now, and we generally `std::throw_with_nested` to provide additional context as exceptions bubble up (this is handy when pulling on long engine/data chains) to help debugging scene issues. One of the main issues is to get proper exception translation across c++/python boundaries (both ways) while retaining as much of the original error as possible. IMHO the ""expected"" approach is currently lacking on ergonomics (unlike say, haskell or rust's equivalents) and will probably put some more pressure on compile times if used widely. On the other hand it does solve some of the pain points with exceptions (types/speed). I recall there was some discussion in the C++ committee a few years back in order to have some kind of lightweight exception mechanism (see e.g. https://www.youtube.com/watch?v=os7cqJ5qlzo) but this is still mostly future work as far as I can tell. Anyway, my two cents :). HTH,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1924#issuecomment-851566891
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-800540365:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-800540365
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801058602:22,Energy Efficiency,schedul,scheduler,22,"@fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801058602
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801058602:55,Energy Efficiency,schedul,schedulers,55,"@fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801058602
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801058602:98,Energy Efficiency,schedul,scheduler,98,"@fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801058602
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:24,Energy Efficiency,schedul,scheduler,24,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:57,Energy Efficiency,schedul,schedulers,57,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:100,Energy Efficiency,schedul,scheduler,100,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:243,Energy Efficiency,schedul,scheduler,243,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:355,Energy Efficiency,schedul,scheduler,355,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:434,Energy Efficiency,schedul,scheduler,434,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837:382,Performance,queue,queued,382,"> @fspadoni Is the task scheduler designed to have local schedulers? For example, can I have a task scheduler specific to a component? Is it restricted to have only one instance per derived type?. There is only one global instance of the task scheduler class and this is shared between all components. ; Any components can create and submit tasks to task scheduler. ; The tasks are queued and process by the worker threads.; The task scheduler manages the worker threads (only one per cpu core by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-801783837
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:108,Integrability,interface,interface,108,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:95,Modifiability,refactor,refactor,95,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:164,Testability,test,test,164,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:242,Testability,test,tests,242,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-816516219:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-816516219
https://github.com/sofa-framework/sofa/pull/1927#issuecomment-816570146:30,Testability,test,tests,30,I removed completely the unit tests. I'll add them later in another pull request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-816570146
https://github.com/sofa-framework/sofa/pull/1930#issuecomment-801143581:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1930#issuecomment-801143581
https://github.com/sofa-framework/sofa/pull/1930#issuecomment-811784978:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1930#issuecomment-811784978
https://github.com/sofa-framework/sofa/pull/1932#issuecomment-801229466:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1932#issuecomment-801229466
https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081:24,Modifiability,inherit,inherit,24,"As those tests does not inherit SofaTest anymore, I think this issue is kind of fixed.; Feel free to re-open if it is not actually the case",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081
https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081:9,Testability,test,tests,9,"As those tests does not inherit SofaTest anymore, I think this issue is kind of fixed.; Feel free to re-open if it is not actually the case",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:573,Modifiability,plugin,plugins,573,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:335,Usability,guid,guideline,335,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279:198,Usability,guid,guidelines,198,"Actually this is not really true, the problem is that the other things with a 'd_' are NOT data 🤪, they are Link and thus should be prefixed with 'l_' . ; So this class is not following the correct guidelines 😬 (and members not having 'm_' etc...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671:70,Deployability,update,update,70,ok... I think we should do an afternoon of brainless coding sprint to update all those components with the good guidelines... ; so this one is ready to go I guess. ; LGTM !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671:112,Usability,guid,guidelines,112,ok... I think we should do an afternoon of brainless coding sprint to update all those components with the good guidelines... ; so this one is ready to go I guess. ; LGTM !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671
https://github.com/sofa-framework/sofa/pull/1941#issuecomment-805989855:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-805989855
https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493:58,Usability,clear,clearer,58,Great @guparan keeping one macro will make things so much clearer!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493
https://github.com/sofa-framework/sofa/issues/1943#issuecomment-803979219:214,Availability,error,error-in-first-launch-of-sofa-after-installation,214,Hi @JavadZallaghi ; You are here on the GitHub issues. GitHub and its issues are made for developers. . I see that you already have an open topic on the [forum](https://www.sofa-framework.org/community/forum/topic/error-in-first-launch-of-sofa-after-installation/). We will provide a reply there as soon as possible. Best wishes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1943#issuecomment-803979219
https://github.com/sofa-framework/sofa/issues/1943#issuecomment-803979219:250,Deployability,install,installation,250,Hi @JavadZallaghi ; You are here on the GitHub issues. GitHub and its issues are made for developers. . I see that you already have an open topic on the [forum](https://www.sofa-framework.org/community/forum/topic/error-in-first-launch-of-sofa-after-installation/). We will provide a reply there as soon as possible. Best wishes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1943#issuecomment-803979219
https://github.com/sofa-framework/sofa/pull/1946#issuecomment-806462020:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1946#issuecomment-806462020
https://github.com/sofa-framework/sofa/pull/1947#issuecomment-807471620:90,Security,access,accessing,90,technically yes as I remove some methods... But I doubt someone was using that instead of accessing the Data directly.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1947#issuecomment-807471620
https://github.com/sofa-framework/sofa/pull/1949#issuecomment-809382816:97,Deployability,release,release,97,"Wait for CI: https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/CI_CONFIG=windows10_vs-2017,CI_TYPE=release/1274/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1949#issuecomment-809382816
https://github.com/sofa-framework/sofa/pull/1950#issuecomment-816485790:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1950#issuecomment-816485790
https://github.com/sofa-framework/sofa/pull/1950#issuecomment-819372822:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1950#issuecomment-819372822
https://github.com/sofa-framework/sofa/pull/1951#issuecomment-808360382:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1951#issuecomment-808360382
https://github.com/sofa-framework/sofa/pull/1952#issuecomment-808360249:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1952#issuecomment-808360249
https://github.com/sofa-framework/sofa/pull/1955#issuecomment-808359704:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1955#issuecomment-808359704
https://github.com/sofa-framework/sofa/pull/1955#issuecomment-810905390:264,Availability,error,error,264,"> Why not, for the sake of clarity. +1; > Just note that this `real` thing is how the algorithm was written in the first place.; > See https://github.com/erich666/GraphicsGems/blob/master/gemsv/ch7-2/pcube.h. I understand, but this definition leads to compilation error when compiling with unity builds. As I said, it's because the symbol ""real"" is used as a symbol for a class template somewhere else. ; An alternative would be to undef real after an include of this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1955#issuecomment-810905390
https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941:9,Usability,simpl,simple,9,Nice and simple :ok_hand:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941
https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808359533:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808359533
https://github.com/sofa-framework/sofa/pull/1957#issuecomment-808358811:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1957#issuecomment-808358811
https://github.com/sofa-framework/sofa/pull/1958#issuecomment-808391903:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1958#issuecomment-808391903
https://github.com/sofa-framework/sofa/pull/1959#issuecomment-809129392:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1959#issuecomment-809129392
https://github.com/sofa-framework/sofa/pull/1960#issuecomment-809128697:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1960#issuecomment-809128697
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142:6,Integrability,depend,depends-on,6,**[ci-depends-on]** detected during [build #54](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/54/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142:123,Integrability,depend,dependencies,123,**[ci-depends-on]** detected during [build #54](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/54/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142:20,Safety,detect,detected,20,**[ci-depends-on]** detected during [build #54](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/54/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387:287,Deployability,update,updateDoc,287,"**[ci-depends-on]** detected during [build #59](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/59/). . To unlock the merge button, you must; - **Edit SofaPython3/ExternalProjectConfig.cmake.in** with; GIT_REPOSITORY https://github.com/guparan/SofaPython3; GIT_TAG origin/updateDoc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387:6,Integrability,depend,depends-on,6,"**[ci-depends-on]** detected during [build #59](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/59/). . To unlock the merge button, you must; - **Edit SofaPython3/ExternalProjectConfig.cmake.in** with; GIT_REPOSITORY https://github.com/guparan/SofaPython3; GIT_TAG origin/updateDoc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387:20,Safety,detect,detected,20,"**[ci-depends-on]** detected during [build #59](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/59/). . To unlock the merge button, you must; - **Edit SofaPython3/ExternalProjectConfig.cmake.in** with; GIT_REPOSITORY https://github.com/guparan/SofaPython3; GIT_TAG origin/updateDoc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422:6,Integrability,depend,depends-on,6,**[ci-depends-on]** detected during [build #62](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/62/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422:123,Integrability,depend,dependencies,123,**[ci-depends-on]** detected during [build #62](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/62/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422:20,Safety,detect,detected,20,**[ci-depends-on]** detected during [build #62](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/62/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422
https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845737797:77,Availability,error,error,77,> ; > ; > What's up with the CI? Build failed on centos and ubuntu?. A weird error that happens sometimes... I relaunched and it's OK now.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845737797
https://github.com/sofa-framework/sofa/pull/1963#issuecomment-810821098:97,Performance,race condition,race condition,97,I used this approach in my attempt to parallelize two tasks. It did not exhibit any crash due to race condition compared to the previous implementation of the visitor.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1963#issuecomment-810821098
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:555,Availability,error,error,555,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:233,Deployability,release,release,233,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:256,Deployability,release,release,256,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:283,Deployability,release,release,283,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:312,Deployability,release,release,312,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:424,Performance,perform,performances,424,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:0,Testability,Test,Testing,0,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404
https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811788333:43,Safety,detect,detected,43,"I was wondering how such a mistake was not detected before. Actually, `AddFramePerformer` is not compiled. Do you use it @maddin200 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811788333
https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973:54,Usability,simpl,simply,54,"Indeed @alxbilger , not compiled for 6 years. I would simply remove it.; You fixes are always welcome @maddin200 :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973
https://github.com/sofa-framework/sofa/issues/1968#issuecomment-814727721:4,Deployability,update,update,4,Any update @maddin200 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1968#issuecomment-814727721
https://github.com/sofa-framework/sofa/pull/1970#issuecomment-811974858:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1970#issuecomment-811974858
https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786:89,Usability,clear,clear,89,"This issue will be closed as SparseGrid is working as intended (even if it is not really clear); Excerpt [SparseGridTopology.h](https://github.com/sofa-framework/sofa/blob/c05ff12d4540a7b0f62052583f318090bfe91c31/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/SparseGridTopology.h#L44) :; ```; A sparse grid topology. Like a sparse FFD building from the bounding box of the object. Starting from a RegularGrid, only valid cells containing matter (ie intersecting the original surface mesh or totally inside the object) are considered.; * Valid cells are tagged by a Type BOUNDARY or INSIDE; ```; Closing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786
https://github.com/sofa-framework/sofa/issues/1975#issuecomment-816556748:300,Deployability,update,update,300,"In my opinion, all *GridTopology should be removed, and replaced with an engine computing a grid and then set into a Topology.; In this case, the bug comes from the facts that the ""position"" field (a Data called seqPoints in the code) is used both as input and output. So I strongly suspect that the update mechanism is overwritting the values. If you remove the oglmodel (and add the facets...), it works. ```xml; <MeshObjLoader name=""loader1"" filename=""mesh/cylinder-1.obj"" translation=""0 2 0""/>; <SparseGridTopology name=""grid1"" n=""4 2 4"" src=""@loader1"" drawHexahedra=""1"" />; ; <MeshObjLoader name=""loader2"" filename=""mesh/cylinder-1.obj"" translation=""0 0 0""/>; <SparseGridTopology name=""grid2"" n=""4 2 4"" src=""@loader2"" drawHexahedra=""1"" />; ``` ; <img src=""https://user-images.githubusercontent.com/11028016/114160763-90614480-9927-11eb-9ba8-4961a83a5fac.png"" width=""300"" >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1975#issuecomment-816556748
https://github.com/sofa-framework/sofa/pull/1976#issuecomment-812429239:88,Integrability,depend,dependency,88,I think this PR also add a huge speedup in term of compilation time and fix the include dependency graph. Many thanks Erik.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1976#issuecomment-812429239
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-814746750:43,Testability,test,tests,43,The code is compiling fine on the CI but **tests are failing** this resize was maybe propagating an info .. @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-814746750
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-815097407:95,Deployability,update,update,95,My guess is this PR is really a kick in the 💩 ; I came up to this single line fix because Data update were looping between engine using dofs as input and forcefield and mapping....; In the list of failing test could you pick one that you know is supposed to work and I'll check what changed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-815097407
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-815097407:205,Testability,test,test,205,My guess is this PR is really a kick in the 💩 ; I came up to this single line fix because Data update were looping between engine using dofs as input and forcefield and mapping....; In the list of failing test could you pick one that you know is supposed to work and I'll check what changed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-815097407
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682:235,Deployability,release,release,235,"It looks like the intialization of the MO when nothing is given in input is a problem .. not sure. I see [this test](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1977/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/testReport/UnitTests/SofaDeformable_test_RestStiffSpringsForceField_test/defaultBehaviorVec3/)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682:111,Testability,test,test,111,"It looks like the intialization of the MO when nothing is given in input is a problem .. not sure. I see [this test](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1977/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/testReport/UnitTests/SofaDeformable_test_RestStiffSpringsForceField_test/defaultBehaviorVec3/)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682:245,Testability,test,testReport,245,"It looks like the intialization of the MO when nothing is given in input is a problem .. not sure. I see [this test](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1977/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/testReport/UnitTests/SofaDeformable_test_RestStiffSpringsForceField_test/defaultBehaviorVec3/)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-883443180:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-883443180
https://github.com/sofa-framework/sofa/pull/1977#issuecomment-884558820:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-884558820
https://github.com/sofa-framework/sofa/pull/1979#issuecomment-821121450:38,Testability,test,tests,38,Back for review ! [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1979#issuecomment-821121450
https://github.com/sofa-framework/sofa/pull/1980#issuecomment-814756029:164,Availability,error,error,164,"```text; /builds/workspace/sofa-framework/PR-1980/ubuntu_gcc-7_options_release/src/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/TopologyData.inl:91:57: error: 'class sofa::component::topology::TopologyData<unsigned int, sofa::type::vector<double, sofa::type::CPUMemoryManager<double> > >' has no member named 'm_topology'; this->m_topologyHandler->registerTopology(this->m_topology);; ~~~~~~^~~~~~~~~~; /builds/workspace/sofa-framework/PR-1980/ubuntu_gcc-7_options_release/src/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/TopologyData.inl:92:21: error: 'class sofa::component::topology::TopologyData<unsigned int, sofa::type::vector<double, sofa::type::CPUMemoryManager<double> > >' has no member named 'm_topology'; else if (!this->m_topology); ~~~~~~^~~~~~~~~~ ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1980#issuecomment-814756029
https://github.com/sofa-framework/sofa/pull/1980#issuecomment-814756029:570,Availability,error,error,570,"```text; /builds/workspace/sofa-framework/PR-1980/ubuntu_gcc-7_options_release/src/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/TopologyData.inl:91:57: error: 'class sofa::component::topology::TopologyData<unsigned int, sofa::type::vector<double, sofa::type::CPUMemoryManager<double> > >' has no member named 'm_topology'; this->m_topologyHandler->registerTopology(this->m_topology);; ~~~~~~^~~~~~~~~~; /builds/workspace/sofa-framework/PR-1980/ubuntu_gcc-7_options_release/src/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/TopologyData.inl:92:21: error: 'class sofa::component::topology::TopologyData<unsigned int, sofa::type::vector<double, sofa::type::CPUMemoryManager<double> > >' has no member named 'm_topology'; else if (!this->m_topology); ~~~~~~^~~~~~~~~~ ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1980#issuecomment-814756029
https://github.com/sofa-framework/sofa/pull/1980#issuecomment-818281682:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1980#issuecomment-818281682
https://github.com/sofa-framework/sofa/pull/1985#issuecomment-818614566:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1985#issuecomment-818614566
https://github.com/sofa-framework/sofa/pull/1985#issuecomment-822252876:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1985#issuecomment-822252876
https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815555624:300,Safety,safe,safe,300,"I am curious to know more about those two functions. In appearance, they do nothing. Can you explain how they work?; Also, an alternative to `bool` + call to `init()` could be to use `std::call_once` (https://en.cppreference.com/w/cpp/thread/call_once). The main advantage I see is that it is thread-safe (probably not necessary here), but nothing more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815555624
https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876:367,Integrability,message,messageDispatcher,367,"> ; > ; > I am curious to know more about those two functions. In appearance, they do nothing. Can you explain how they work?. (Assumptions) ; In my opinion, the init() was done to force the compiler to need the library at linktime, thus forcing it to load it at runtime, thus initializing some static stuff (you can see that in the init file of SofaHelper, with the messageDispatcher thingy).; For the most libs in SofaFramework, it should not be necessary as it will always been loaded as everybody needs those I suppose.; But as for the cleanup(), it ***seems*** (emphasis 🧐) it is related with the order of destructions of things. But I am not really sure.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876
https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876:252,Performance,load,load,252,"> ; > ; > I am curious to know more about those two functions. In appearance, they do nothing. Can you explain how they work?. (Assumptions) ; In my opinion, the init() was done to force the compiler to need the library at linktime, thus forcing it to load it at runtime, thus initializing some static stuff (you can see that in the init file of SofaHelper, with the messageDispatcher thingy).; For the most libs in SofaFramework, it should not be necessary as it will always been loaded as everybody needs those I suppose.; But as for the cleanup(), it ***seems*** (emphasis 🧐) it is related with the order of destructions of things. But I am not really sure.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876
https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876:481,Performance,load,loaded,481,"> ; > ; > I am curious to know more about those two functions. In appearance, they do nothing. Can you explain how they work?. (Assumptions) ; In my opinion, the init() was done to force the compiler to need the library at linktime, thus forcing it to load it at runtime, thus initializing some static stuff (you can see that in the init file of SofaHelper, with the messageDispatcher thingy).; For the most libs in SofaFramework, it should not be necessary as it will always been loaded as everybody needs those I suppose.; But as for the cleanup(), it ***seems*** (emphasis 🧐) it is related with the order of destructions of things. But I am not really sure.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876
https://github.com/sofa-framework/sofa/pull/1990#issuecomment-822253071:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1990#issuecomment-822253071
https://github.com/sofa-framework/sofa/pull/1992#issuecomment-821250047:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-821250047
https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302:345,Deployability,release,release,345,"Tests (2) I think are failing. We could check in other PRs if the tests failing for them as well; - constraint.FrictionContact_VelocityConstraints.scn; - examples/Components/constraint.InextensiblePendulum.scn. (see [CentOS here](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1992/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302
https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302:0,Testability,Test,Tests,0,"Tests (2) I think are failing. We could check in other PRs if the tests failing for them as well; - constraint.FrictionContact_VelocityConstraints.scn; - examples/Components/constraint.InextensiblePendulum.scn. (see [CentOS here](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1992/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302
https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302:66,Testability,test,tests,66,"Tests (2) I think are failing. We could check in other PRs if the tests failing for them as well; - constraint.FrictionContact_VelocityConstraints.scn; - examples/Components/constraint.InextensiblePendulum.scn. (see [CentOS here](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1992/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302
https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302:356,Testability,test,testReport,356,"Tests (2) I think are failing. We could check in other PRs if the tests failing for them as well; - constraint.FrictionContact_VelocityConstraints.scn; - examples/Components/constraint.InextensiblePendulum.scn. (see [CentOS here](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1992/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302
https://github.com/sofa-framework/sofa/pull/1992#issuecomment-829384704:4,Testability,test,tests,4,"The tests are happy, so OK for me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-829384704
https://github.com/sofa-framework/sofa/pull/1993#issuecomment-816482283:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1993#issuecomment-816482283
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816058401:68,Deployability,release,released,68,Have you checked @alxbilger that it is well unused in InSimo ISSOFA released by @fjourdes ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816058401
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:150,Modifiability,config,config,150,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:244,Modifiability,plugin,plugin,244,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:351,Usability,usab,usable,351,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:160,Modifiability,config,config,160,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:266,Modifiability,plugin,plugin,266,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:373,Usability,usab,usable,373,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816455035:70,Deployability,release,released,70,"> Have you checked @alxbilger that it is well unused in InSimo ISSOFA released by @fjourdes ?. I just checked, and the file does not exist on the repository.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816455035
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:170,Modifiability,config,config,170,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:292,Modifiability,plugin,plugin,292,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:588,Modifiability,plugin,plugin,588,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:399,Usability,usab,usable,399,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-818443752:66,Modifiability,plugin,plugin,66,"I see two options:; - We remove it and @fspadoni copies it in his plugin; - We keep it (or move it in the multithreadplugin). In this case, we need to have a reason to keep it, such as an example of an implementation of such a visitor. @fspadoni Would you like to explain how it works? I may have some interests to implement some myself.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-818443752
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886496855:216,Modifiability,inherit,inherits,216,"It has been some time now that this PR is stalled.; As far as I know, there is still no implementation of VisitorAsync, so IMO it should be deleted.; (and it is not really complicated to replicate if needed, it just inherits Visitor and adds a ""Status"" member)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886496855
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886501908:222,Modifiability,inherit,inherits,222,"> It has been some time now that this PR is stalled.; > As far as I know, there is still no implementation of VisitorAsync, so IMO it should be deleted.; > (and it is not really complicated to replicate if needed, it just inherits Visitor and adds a ""Status"" member). I agree. Manipulation of a `status` is understood. Setting to ""to review"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886501908
https://github.com/sofa-framework/sofa/pull/1995#issuecomment-883482218:476,Integrability,depend,dependency,476,"@damienmarchal I came accross the problem of RotationMatrix being in Sofa.Core, whereas all the other *Matrix class were contained into SofaBaseLinearSolver (with a nice include from Sofa.Core to SofaBaseLinearSolver 😗); Plus the fact that IMO, instead of all the *Matrix being in SofaBaseLinearSolver, I would put all of them into SofaFramework actually. Reasons are that some stuff being not LinearSolver still need SparseMatrix for example, and need a SofaBaseLinearSolver dependency just for it. ; My interrogation would be where exactly in SofaFramework, as BaseMatrix (and BaseVector) being into Sofa.Defaulttype, which is a bit weird. Maybe in Sofa.Type ? or alongside LinearSolver.h in Sofa.Core ?; Could be of interest of @alxbilger as well.; Otherwise we can move RotationMatrix into SofaBaseLinearSolver indeed, to solve the crappy soft dependency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-883482218
https://github.com/sofa-framework/sofa/pull/1995#issuecomment-883482218:848,Integrability,depend,dependency,848,"@damienmarchal I came accross the problem of RotationMatrix being in Sofa.Core, whereas all the other *Matrix class were contained into SofaBaseLinearSolver (with a nice include from Sofa.Core to SofaBaseLinearSolver 😗); Plus the fact that IMO, instead of all the *Matrix being in SofaBaseLinearSolver, I would put all of them into SofaFramework actually. Reasons are that some stuff being not LinearSolver still need SparseMatrix for example, and need a SofaBaseLinearSolver dependency just for it. ; My interrogation would be where exactly in SofaFramework, as BaseMatrix (and BaseVector) being into Sofa.Defaulttype, which is a bit weird. Maybe in Sofa.Type ? or alongside LinearSolver.h in Sofa.Core ?; Could be of interest of @alxbilger as well.; Otherwise we can move RotationMatrix into SofaBaseLinearSolver indeed, to solve the crappy soft dependency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-883482218
https://github.com/sofa-framework/sofa/pull/1995#issuecomment-886712665:199,Modifiability,refactor,refactoring,199,"@fredroy So Dediced to follow the small step strategy... just move RotationMatrix in SofaBaseLinearSolver for the moment.; For the moment I suggest to keep everything in SofaBaseLinearSolver... as a refactoring of this part would requieres to:; - unify the namespaces to match the modules names; - and if needed to move all the matrices in their proper module (Sofa.Matrix, Sofa.Type).; - and imply a change in a lot of #include everwhere of our code base. . In addition, after this PR is supposed to be the cleaning or other part of SofaBaseLinearSolver (see #2238)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-886712665
https://github.com/sofa-framework/sofa/pull/1995#issuecomment-887612182:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-887612182
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-819843360:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-819843360
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525:53,Performance,cache,cache,53,More precise results for each optimisation:; ```; no cache + double: 5000 iterations done in 199.849 s ( 25.0188 FPS).; no cache + 3x3 : 5000 iterations done in 170.294 s ( 29.3609 FPS).; cache + double : 5000 iterations done in 108.942 s ( 45.8959 FPS).; cache + 3x3 : 5000 iterations done in 79.4698 s ( 62.917 FPS).; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525:123,Performance,cache,cache,123,More precise results for each optimisation:; ```; no cache + double: 5000 iterations done in 199.849 s ( 25.0188 FPS).; no cache + 3x3 : 5000 iterations done in 170.294 s ( 29.3609 FPS).; cache + double : 5000 iterations done in 108.942 s ( 45.8959 FPS).; cache + 3x3 : 5000 iterations done in 79.4698 s ( 62.917 FPS).; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525:188,Performance,cache,cache,188,More precise results for each optimisation:; ```; no cache + double: 5000 iterations done in 199.849 s ( 25.0188 FPS).; no cache + 3x3 : 5000 iterations done in 170.294 s ( 29.3609 FPS).; cache + double : 5000 iterations done in 108.942 s ( 45.8959 FPS).; cache + 3x3 : 5000 iterations done in 79.4698 s ( 62.917 FPS).; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525:256,Performance,cache,cache,256,More precise results for each optimisation:; ```; no cache + double: 5000 iterations done in 199.849 s ( 25.0188 FPS).; no cache + 3x3 : 5000 iterations done in 170.294 s ( 29.3609 FPS).; cache + double : 5000 iterations done in 108.942 s ( 45.8959 FPS).; cache + 3x3 : 5000 iterations done in 79.4698 s ( 62.917 FPS).; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827404525
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827541222:43,Testability,test,test,43,"Thanks a lot @fredroy . Can you share your test scene?. Also, what happen if the default 3x3 block sparse matrix is used with something else than 3D DOFs? For example, with rigids?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827541222
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-857807779:110,Performance,optimiz,optimization,110,We still did not test with Rigid or Vec2/6.; In my opinion we should be conservative and just let the caching optimization (and let the default template as it is for the moment); What do you think ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-857807779
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-857807779:17,Testability,test,test,17,We still did not test with Rigid or Vec2/6.; In my opinion we should be conservative and just let the caching optimization (and let the default template as it is for the moment); What do you think ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-857807779
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-866818563:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-866818563
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-868719470:279,Testability,log,logic,279,"> what's your opinion @jnbrunet ?. Isn't a warning when the scalar template is used a bit intense? I would put a warning if we actually checked that all mechanical objects are of 3d types, and the specified/default template is a scalar. But here, we output a warning without any logic other than the default scalar template was used. Maybe at least remove the warning if the user manually specified that he needed the scalar template?. **EDIT** Sorry, last time I checked the PR, the check was done on the template used, hence the warning was emitted when the scalar template was used. Now it seems to be emitted when the user doesn't manually specify which template he/she wants.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-868719470
https://github.com/sofa-framework/sofa/pull/1996#issuecomment-871276859:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-871276859
https://github.com/sofa-framework/sofa/pull/1999#issuecomment-818720010:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1999#issuecomment-818720010
https://github.com/sofa-framework/sofa/pull/2002#issuecomment-819281288:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2002#issuecomment-819281288
https://github.com/sofa-framework/sofa/pull/2002#issuecomment-819554232:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2002#issuecomment-819554232
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820394921:69,Integrability,depend,depends,69,You should not put a branch name in GIT_TAG.; Now SOFA master branch depends on SofaPython3. We don't want that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820394921
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820398880:54,Deployability,update,update,54,"Yeah but if you don't do it, than we need to manually update the commit number each time SofaPython3 upgrades. They should follow each others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820398880
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820398880:101,Deployability,upgrade,upgrades,101,"Yeah but if you don't do it, than we need to manually update the commit number each time SofaPython3 upgrades. They should follow each others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820398880
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820434947:247,Integrability,depend,depend,247,"> What is the problem with manually updating the pointer?. We will forget to do it, I'm sure of it. > In my opinion it is much less a pain than having ALL pull-request going red after a SofaPython3 merge. How could that happen? No SOFA components depend on it, and SP3 has its own CI on github.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820434947
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820438695:101,Deployability,update,update,101,Because we build SofaPython3 on SOFA CI. ; It's the starting point of all my work on ExternalProject update workflow that we have been discussing for 3 weeks. ; We want to ease the pain of handling ExternalProject pointers while still building those external project on SOFA CI.; See https://github.com/sofa-framework/sofa/pull/1961,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820438695
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820454841:227,Deployability,update,update,227,"Yes I know, and I'm not questioning your work nor the 3 weeks of discussions. But, if you are going to automatically merge the related PR in SP3 to its master branch, than why hard code the commit number? You can automatically update it on the CI, but not actually commit it. Once it passes, no need to change the ""origin/master"" since it contains your automatically merged SP3 PR. If you don't do it, then upgrades in SP3 (bug fixes, new features) that do not have a related PR in SOFA won't be taken into account unless we go do a PR in SOFA to update this pointer. I can guarantee you that nobody will think of doing it. Which means that fetching SP3 within SOFA has great chance to be pointing to an old version. In fact, the reason I asked this to Damien is exactly because of this, SOFA fetched me an outdated version of SP3, which didn't contain the latest bug fix in SP3.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820454841
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820454841:407,Deployability,upgrade,upgrades,407,"Yes I know, and I'm not questioning your work nor the 3 weeks of discussions. But, if you are going to automatically merge the related PR in SP3 to its master branch, than why hard code the commit number? You can automatically update it on the CI, but not actually commit it. Once it passes, no need to change the ""origin/master"" since it contains your automatically merged SP3 PR. If you don't do it, then upgrades in SP3 (bug fixes, new features) that do not have a related PR in SOFA won't be taken into account unless we go do a PR in SOFA to update this pointer. I can guarantee you that nobody will think of doing it. Which means that fetching SP3 within SOFA has great chance to be pointing to an old version. In fact, the reason I asked this to Damien is exactly because of this, SOFA fetched me an outdated version of SP3, which didn't contain the latest bug fix in SP3.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820454841
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820454841:547,Deployability,update,update,547,"Yes I know, and I'm not questioning your work nor the 3 weeks of discussions. But, if you are going to automatically merge the related PR in SP3 to its master branch, than why hard code the commit number? You can automatically update it on the CI, but not actually commit it. Once it passes, no need to change the ""origin/master"" since it contains your automatically merged SP3 PR. If you don't do it, then upgrades in SP3 (bug fixes, new features) that do not have a related PR in SOFA won't be taken into account unless we go do a PR in SOFA to update this pointer. I can guarantee you that nobody will think of doing it. Which means that fetching SP3 within SOFA has great chance to be pointing to an old version. In fact, the reason I asked this to Damien is exactly because of this, SOFA fetched me an outdated version of SP3, which didn't contain the latest bug fix in SP3.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820454841
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821081219:830,Deployability,update,updated,830,"I'm always having a hard time designing this type of workflow...; I agree with you that it's way easier to have a branch than a commit in GIT_TAG.; What will happen though is that SOFA CI could be failing because of changes in SP3/master. . For instance, this will happen:; ~~1. Bob opens a SOFA PR that breaks SP3~~; ~~-> the SOFA PR fails on SOFA CI~~; ~~2. Bob opens a SP3 PR to propose a fix to this future change in SOFA that will break SP3~~; ~~-> the SP3 PR fails on SP3 CI (because it fixes something that is not broken yet)~~; ~~3. Thanks to my work on ExternalProject, SOFA CI is able to test the SOFA PR with a custom version for SP3 (the version of the SP3 PR)~~; ~~-> the SOFA PR succeeds on SOFA CI~~; ~~4. Both PRs are merged (in any order)~~; ~~5. **All the other SOFA PRs are now failing on SOFA CI** and must be updated with SOFA/master~~. EDIT: corrected version below",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821081219
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821081219:598,Testability,test,test,598,"I'm always having a hard time designing this type of workflow...; I agree with you that it's way easier to have a branch than a commit in GIT_TAG.; What will happen though is that SOFA CI could be failing because of changes in SP3/master. . For instance, this will happen:; ~~1. Bob opens a SOFA PR that breaks SP3~~; ~~-> the SOFA PR fails on SOFA CI~~; ~~2. Bob opens a SP3 PR to propose a fix to this future change in SOFA that will break SP3~~; ~~-> the SP3 PR fails on SP3 CI (because it fixes something that is not broken yet)~~; ~~3. Thanks to my work on ExternalProject, SOFA CI is able to test the SOFA PR with a custom version for SP3 (the version of the SP3 PR)~~; ~~-> the SOFA PR succeeds on SOFA CI~~; ~~4. Both PRs are merged (in any order)~~; ~~5. **All the other SOFA PRs are now failing on SOFA CI** and must be updated with SOFA/master~~. EDIT: corrected version below",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821081219
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676:283,Testability,test,tests,283,"Yeah I see your issue now, thanks !. I think it could be resolved by changing (improving?) a little bit our current CI strategy. Correct me if I'm wrong, but right now the CI does the following for a PR # XXX into the branch Master:. 1. Checkout PR#XXX branch; 2. Build SOFA; 3. Run tests. I think a better approach should be:. 1. Checkout origin/master; 2. **Merge** PR #XXX branch; 3. Build SOFA; 4. Run tests. This might also prevent some weird issues that we had were the CI passes, we merge, and then the CI start breaking everywhere: The CI never actually tested the merged PR. I think this would fix your issue 5. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676:406,Testability,test,tests,406,"Yeah I see your issue now, thanks !. I think it could be resolved by changing (improving?) a little bit our current CI strategy. Correct me if I'm wrong, but right now the CI does the following for a PR # XXX into the branch Master:. 1. Checkout PR#XXX branch; 2. Build SOFA; 3. Run tests. I think a better approach should be:. 1. Checkout origin/master; 2. **Merge** PR #XXX branch; 3. Build SOFA; 4. Run tests. This might also prevent some weird issues that we had were the CI passes, we merge, and then the CI start breaking everywhere: The CI never actually tested the merged PR. I think this would fix your issue 5. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676:562,Testability,test,tested,562,"Yeah I see your issue now, thanks !. I think it could be resolved by changing (improving?) a little bit our current CI strategy. Correct me if I'm wrong, but right now the CI does the following for a PR # XXX into the branch Master:. 1. Checkout PR#XXX branch; 2. Build SOFA; 3. Run tests. I think a better approach should be:. 1. Checkout origin/master; 2. **Merge** PR #XXX branch; 3. Build SOFA; 4. Run tests. This might also prevent some weird issues that we had were the CI passes, we merge, and then the CI start breaking everywhere: The CI never actually tested the merged PR. I think this would fix your issue 5. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821193144:466,Testability,test,test,466,"Actually SOFA CI is already building a merge for PRs so I was wrong with my use case before. :sweat_smile: . Here is a corrected version of what could happen:; 1. Bob opens a SOFA PR that breaks SP3; -> the SOFA PR fails on SOFA CI; 2. Bob opens a SP3 PR to propose a fix to this future change in SOFA that will break SP3; -> the SP3 PR fails on SP3 CI (because it fixes something that is not broken yet); 3. Thanks to my work on ExternalProject, SOFA CI is able to test the SOFA PR with a custom version for SP3 (the version of the SP3 PR); -> the SOFA PR succeeds on SOFA CI; 4. SP3 PR is merged first (to ensure that SOFA/master always succeeds on SOFA CI); 5. **All the other SOFA PRs are now failing on SOFA CI** and must wait for Bob's SOFA PR to be merged; 6. SOFA PR is merged; 7. All the other SOFA PRs are fixed. The problematic point is the duration of step 5. ; How to make sure it is short? Is it a good idea to ask our devs to quickly merge 2 PRs from 2 projects? What about when it will be more complicated with 2, 3 or more external projects needing to be fixed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821193144
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821232724:817,Deployability,update,update,817,"Hey @guparan ,. I would merge both at the same time (automatically), the trigger being the SOFA merge:. 4. ~~SP3 PR is merged first (to ensure that SOFA/master always succeeds on SOFA CI)~~ ; SOFA PR is manually merged ; 5. SP3 PR is merged automatically (we can setup a workflow for this, or if you have something ready on the CI); 6. All the other SOFA PRs should be fine. Just to emphasis the problem with the alternative (hard-coded commit number instead of a branch):; 1. PRs in SP3 can be merged in the master branch before the correction SP3 PR is merged , which means that SOFA will point to an older version of SP3, example:; a. Bob opens a SOFA PR that breaks SP3; b. Bob opens a SP3 PR with the correction; c. Paul comes in an open a SP3 PR; d. Paul's PR is accepted and merged; e. Paul opens a SOFA PR to update the commit number; f. Paul's PR get accepted and merged; g. Bob's PR get accepted and merged; f. SOFA commit number is now pointing to Bob's SP3 branch number, which misses Paul's commit; 2. How do you deal with squash/rebase merges in SP3? Will your script use the merged commit number? Or the latest commit number of the SP3 PR's branch?; 3. How do you deal with release branches? Will we need to manually edit the commit number for each new commit in release branches?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821232724
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821232724:1189,Deployability,release,release,1189,"Hey @guparan ,. I would merge both at the same time (automatically), the trigger being the SOFA merge:. 4. ~~SP3 PR is merged first (to ensure that SOFA/master always succeeds on SOFA CI)~~ ; SOFA PR is manually merged ; 5. SP3 PR is merged automatically (we can setup a workflow for this, or if you have something ready on the CI); 6. All the other SOFA PRs should be fine. Just to emphasis the problem with the alternative (hard-coded commit number instead of a branch):; 1. PRs in SP3 can be merged in the master branch before the correction SP3 PR is merged , which means that SOFA will point to an older version of SP3, example:; a. Bob opens a SOFA PR that breaks SP3; b. Bob opens a SP3 PR with the correction; c. Paul comes in an open a SP3 PR; d. Paul's PR is accepted and merged; e. Paul opens a SOFA PR to update the commit number; f. Paul's PR get accepted and merged; g. Bob's PR get accepted and merged; f. SOFA commit number is now pointing to Bob's SP3 branch number, which misses Paul's commit; 2. How do you deal with squash/rebase merges in SP3? Will your script use the merged commit number? Or the latest commit number of the SP3 PR's branch?; 3. How do you deal with release branches? Will we need to manually edit the commit number for each new commit in release branches?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821232724
https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821232724:1278,Deployability,release,release,1278,"Hey @guparan ,. I would merge both at the same time (automatically), the trigger being the SOFA merge:. 4. ~~SP3 PR is merged first (to ensure that SOFA/master always succeeds on SOFA CI)~~ ; SOFA PR is manually merged ; 5. SP3 PR is merged automatically (we can setup a workflow for this, or if you have something ready on the CI); 6. All the other SOFA PRs should be fine. Just to emphasis the problem with the alternative (hard-coded commit number instead of a branch):; 1. PRs in SP3 can be merged in the master branch before the correction SP3 PR is merged , which means that SOFA will point to an older version of SP3, example:; a. Bob opens a SOFA PR that breaks SP3; b. Bob opens a SP3 PR with the correction; c. Paul comes in an open a SP3 PR; d. Paul's PR is accepted and merged; e. Paul opens a SOFA PR to update the commit number; f. Paul's PR get accepted and merged; g. Bob's PR get accepted and merged; f. SOFA commit number is now pointing to Bob's SP3 branch number, which misses Paul's commit; 2. How do you deal with squash/rebase merges in SP3? Will your script use the merged commit number? Or the latest commit number of the SP3 PR's branch?; 3. How do you deal with release branches? Will we need to manually edit the commit number for each new commit in release branches?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821232724
https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805:173,Deployability,pipeline,pipeline,173,I think that this task is connected to several topics:. - connection of SOFA with other libraries (other modeling / visualization / collision tools); - adapt the simulation pipeline and have more control on it (ASSIST..) ; - hot restart of the simulation ; - helping the debug (which is not due to C++ problem but wrong parametrization / init of the simulation),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805
https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805:152,Energy Efficiency,adapt,adapt,152,I think that this task is connected to several topics:. - connection of SOFA with other libraries (other modeling / visualization / collision tools); - adapt the simulation pipeline and have more control on it (ASSIST..) ; - hot restart of the simulation ; - helping the debug (which is not due to C++ problem but wrong parametrization / init of the simulation),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805
https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805:152,Modifiability,adapt,adapt,152,I think that this task is connected to several topics:. - connection of SOFA with other libraries (other modeling / visualization / collision tools); - adapt the simulation pipeline and have more control on it (ASSIST..) ; - hot restart of the simulation ; - helping the debug (which is not due to C++ problem but wrong parametrization / init of the simulation),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805
https://github.com/sofa-framework/sofa/pull/2006#issuecomment-819479147:30,Availability,failure,failure,30,Weird in the CI there is also failure on BoundingBox.cpp (that I fixed in previous pR),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2006#issuecomment-819479147
https://github.com/sofa-framework/sofa/pull/2010#issuecomment-820967656:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2010#issuecomment-820967656
https://github.com/sofa-framework/sofa/pull/2012#issuecomment-822280727:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2012#issuecomment-822280727
https://github.com/sofa-framework/sofa/pull/2013#issuecomment-820759337:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-820759337
https://github.com/sofa-framework/sofa/pull/2013#issuecomment-826008753:97,Deployability,update,updateTopologyHandlerGraph,97,Not for myself:; registerTopologicalData() add handler to the full list of handler which launch; updateTopologyHandlerGraph; updateDataEngineGraph; and add the handler between topology Data and output of handler. So register is needed after linkToTriangleDataArray methods.; Need to change all that mechanism.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-826008753
https://github.com/sofa-framework/sofa/pull/2013#issuecomment-826008753:125,Deployability,update,updateDataEngineGraph,125,Not for myself:; registerTopologicalData() add handler to the full list of handler which launch; updateTopologyHandlerGraph; updateDataEngineGraph; and add the handler between topology Data and output of handler. So register is needed after linkToTriangleDataArray methods.; Need to change all that mechanism.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-826008753
https://github.com/sofa-framework/sofa/pull/2013#issuecomment-841260799:32,Deployability,integrat,integrated,32,Changes done in this PR will be integrated in PR #2086,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-841260799
https://github.com/sofa-framework/sofa/pull/2013#issuecomment-841260799:32,Integrability,integrat,integrated,32,Changes done in this PR will be integrated in PR #2086,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-841260799
https://github.com/sofa-framework/sofa/pull/2015#issuecomment-821044558:12,Availability,error,error,12,Compilation error @fredroy :. ``` bash; MeshMatrixMass.inl:30:10: fatal error: SofaBaseMechanics/AddMToMatrixFunctor.h: No such file or directory #include <SofaBaseMechanics/AddMToMatrixFunctor.h>; ```. Have you compiled it before :stuck_out_tongue_winking_eye:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2015#issuecomment-821044558
https://github.com/sofa-framework/sofa/pull/2015#issuecomment-821044558:72,Availability,error,error,72,Compilation error @fredroy :. ``` bash; MeshMatrixMass.inl:30:10: fatal error: SofaBaseMechanics/AddMToMatrixFunctor.h: No such file or directory #include <SofaBaseMechanics/AddMToMatrixFunctor.h>; ```. Have you compiled it before :stuck_out_tongue_winking_eye:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2015#issuecomment-821044558
https://github.com/sofa-framework/sofa/pull/2015#issuecomment-822275725:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2015#issuecomment-822275725
https://github.com/sofa-framework/sofa/pull/2017#issuecomment-821018437:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-821018437
https://github.com/sofa-framework/sofa/pull/2017#issuecomment-822276662:39,Testability,test,tests,39,could you put the names of the falling tests in the description for the records.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-822276662
https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756:68,Modifiability,plugin,plugins,68,The failing scenes due to the changes in #1927 are:; - applications/plugins/MultiThreading/examples.livers.scn; - applications/plugins/MultiThreading/examples.liversMeanPositions.scn; - applications/plugins/image/examples.loadimage_mt.scn. They are all multithreaded.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756
https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756:127,Modifiability,plugin,plugins,127,The failing scenes due to the changes in #1927 are:; - applications/plugins/MultiThreading/examples.livers.scn; - applications/plugins/MultiThreading/examples.liversMeanPositions.scn; - applications/plugins/image/examples.loadimage_mt.scn. They are all multithreaded.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756
https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756:199,Modifiability,plugin,plugins,199,The failing scenes due to the changes in #1927 are:; - applications/plugins/MultiThreading/examples.livers.scn; - applications/plugins/MultiThreading/examples.liversMeanPositions.scn; - applications/plugins/image/examples.loadimage_mt.scn. They are all multithreaded.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756
https://github.com/sofa-framework/sofa/issues/2019#issuecomment-821249927:100,Availability,error,error,100,"I am curious about this file, as nobody seems to include it (thus that' s why we did not notice any error); Where do you use it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2019#issuecomment-821249927
https://github.com/sofa-framework/sofa/issues/2019#issuecomment-821262631:430,Deployability,update,update,430,"QTrackbarWidget is also a custom class that looks like this; ```(C++); template<int C>; class QTrackBarWidget : public QWidget {; // Q_OBJECT //Cannot declare a Q_OBJECT as the object is template; public:; typedef Data<TTrackBar<C> > MyData;. QTrackBarWidget(sofa::gui::qt::DataWidget * parent,const MyData & /*data*/) : QWidget(parent); ```. If I'm not mistaken, the result is an image Data in SOFA associated with a trackbar to update some parameter (eg. filter parameter)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2019#issuecomment-821262631
https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:43,Deployability,update,updated,43,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243
https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:67,Modifiability,config,config,67,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243
https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:190,Usability,Guid,Guidelines,190,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243
https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:253,Usability,GUID,GUIDELINES,253,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243
https://github.com/sofa-framework/sofa/issues/2023#issuecomment-1499798319:5,Modifiability,plugin,plugin,5,"This plugin has been left unused for a long time now, closing the issue.; Feel free to re-open if need be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2023#issuecomment-1499798319
https://github.com/sofa-framework/sofa/pull/2025#issuecomment-822554847:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2025#issuecomment-822554847
https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823621536:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823621536
https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998:222,Modifiability,plugin,plugins,222,@epernod this PR fixes ParticleSink alright but two other tests fail _because_ of the new msg_error() in [ParticleSink.inl](https://github.com/sofa-framework/sofa/blob/aeea55fbd91e165ee323e3f4fcecb2e430135328/applications/plugins/SofaSphFluid/src/SofaSphFluid/ParticleSink.inl#L82) 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998
https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998:58,Testability,test,tests,58,@epernod this PR fixes ParticleSink alright but two other tests fail _because_ of the new msg_error() in [ParticleSink.inl](https://github.com/sofa-framework/sofa/blob/aeea55fbd91e165ee323e3f4fcecb2e430135328/applications/plugins/SofaSphFluid/src/SofaSphFluid/ParticleSink.inl#L82) 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998
https://github.com/sofa-framework/sofa/pull/2026#issuecomment-824780558:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-824780558
https://github.com/sofa-framework/sofa/issues/2028#issuecomment-833487148:172,Deployability,update,update,172,"Hello, I tried on a MBA M1, macOS 11.3.1 and ; ```shell ; brew list --versions qt5; qt@5 5.15.2; ```; and the 3D viewport is displaying the expected scene.; Maybe the 11.3 update fixed few things about OpenGL ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2028#issuecomment-833487148
https://github.com/sofa-framework/sofa/issues/2028#issuecomment-834200565:83,Deployability,update,updated,83,"I am closing the issue for now @bcarrez . If you still encounter the issue with an updated macOS, feel free to re-open.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2028#issuecomment-834200565
https://github.com/sofa-framework/sofa/pull/2030#issuecomment-824622469:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2030#issuecomment-824622469
https://github.com/sofa-framework/sofa/pull/2030#issuecomment-825192122:70,Deployability,update,update,70,"by the way @alxbilger it would be great if you feel it's necessary to update the associated pages ([DirectSAP](https://www.sofa-framework.org/community/doc/components/collisions/detection-sweep-and-prune/), IncrSAP, BruteForce)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2030#issuecomment-825192122
https://github.com/sofa-framework/sofa/pull/2030#issuecomment-825192122:178,Safety,detect,detection-sweep-and-prune,178,"by the way @alxbilger it would be great if you feel it's necessary to update the associated pages ([DirectSAP](https://www.sofa-framework.org/community/doc/components/collisions/detection-sweep-and-prune/), IncrSAP, BruteForce)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2030#issuecomment-825192122
https://github.com/sofa-framework/sofa/pull/2036#issuecomment-824405588:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2036#issuecomment-824405588
https://github.com/sofa-framework/sofa/pull/2036#issuecomment-827497071:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2036#issuecomment-827497071
https://github.com/sofa-framework/sofa/pull/2038#issuecomment-825486946:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2038#issuecomment-825486946
https://github.com/sofa-framework/sofa/pull/2040#issuecomment-825401145:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2040#issuecomment-825401145
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-825730623:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-825730623
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2067,Availability,ERROR,ERROR,2067,"ded '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtrac",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2690,Availability,ERROR,ERROR,2690," /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File '",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5143,Availability,ERROR,ERROR,5143,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5603,Availability,error,errors,5603,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5712,Availability,Failure,Failure,5712,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3691,Integrability,Message,Message,3691,"): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_C",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:763,Modifiability,plugin,plugins,763,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:915,Modifiability,plugin,plugins,915,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1072,Modifiability,plugin,plugins,1072,"ndings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1231,Modifiability,plugin,plugins,1231,"1/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1388,Modifiability,plugin,plugins,1388,"ializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219):",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1396,Modifiability,Flexible,Flexible,1396,"ializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219):",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1543,Modifiability,plugin,plugins,1543,"r for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1736,Modifiability,Plugin,PluginManager,1736,"path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_opti",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1758,Modifiability,plugin,plugin,1758,"path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_opti",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2925,Modifiability,inherit,inherits,2925,"ython version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:493,Performance,load,loader,493,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1751,Performance,Load,Loaded,1751,"path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_opti",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2994,Performance,load,loaded,2994,FO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3087,Performance,load,loaded,3087,ile skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit te,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3162,Performance,load,loaded,3162,_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Globa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3240,Performance,load,loaded,3240,named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INF,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3315,Performance,load,loaded,3315,"_bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 20",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3393,Performance,load,loaded,3393,"rnal>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] S",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3471,Performance,load,loaded,3471,"<frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3548,Performance,load,loaded,3548,"/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3629,Performance,load,loaded,3629,"/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3703,Performance,load,loaded,3703,"ctor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParent",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3774,Performance,load,loaded,3774,"g-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3852,Performance,load,loaded,3852,"ound. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; -----------------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3928,Performance,load,loaded,3928," TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3999,Performance,load,loaded,3999,"unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4077,Performance,load,loaded,4077,"loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:40,Testability,Test,Tests,40,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:47,Testability,test,tests,47,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:102,Testability,test,tests,102,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:122,Testability,Test,Tests,122,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:243,Testability,Test,Tests,243,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:273,Testability,test,tests,273,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:293,Testability,Test,Tests,293,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2850,Testability,test,test,2850,"aPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2939,Testability,Test,TestCase,2939,"ython version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3014,Testability,test,tests,3014,FO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3106,Testability,test,tests,3106,ile skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit te,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3182,Testability,test,tests,3182,_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Globa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3259,Testability,test,tests,3259,named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INF,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3335,Testability,test,tests,3335,"_bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 20",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3413,Testability,test,tests,3413,"rnal>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] S",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3490,Testability,test,tests,3490,"<frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3567,Testability,test,tests,3567,"/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3648,Testability,test,tests,3648,"/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3722,Testability,test,tests,3722,"ctor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParent",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3794,Testability,test,tests,3794,"g-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3871,Testability,test,tests,3871,"ound. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; -----------------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3947,Testability,test,tests,3947," TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4018,Testability,test,tests,4018,"unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4096,Testability,test,tests,4096,"loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4129,Testability,test,tests,4129,"nTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =========================================================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4142,Testability,test,test,4142,"nTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =========================================================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4175,Testability,test,test,4175," unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4218,Testability,test,tests,4218," 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); --------------------------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4615,Testability,test,test,4615,"loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . -----------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4888,Testability,test,test,4888,"or] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5182,Testability,Test,Test,5182,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5579,Testability,test,test,5579,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831186824:103,Testability,test,tests,103,"I don't really think it is related to this PR, it has been quite a long time now that some SofaPython3 tests are failing, especially on macOS.; It does not happen on Ubuntu though apparently.; And it seems there is no unit tests of SofaPython3 on Windows ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831186824
https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831186824:223,Testability,test,tests,223,"I don't really think it is related to this PR, it has been quite a long time now that some SofaPython3 tests are failing, especially on macOS.; It does not happen on Ubuntu though apparently.; And it seems there is no unit tests of SofaPython3 on Windows ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831186824
https://github.com/sofa-framework/sofa/pull/2042#issuecomment-831078438:139,Testability,test,tested,139,Thanks for the answer @epernod ; Others opinion? @hugtalbot @fredroy @alxbilger @damienmarchal . :arrow_right: To keep the non-CUDA scenes tested by CI: click on the :+1: below; :arrow_right: To ignore all the scenes: click on the :-1: below,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2042#issuecomment-831078438
https://github.com/sofa-framework/sofa/pull/2042#issuecomment-832534185:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2042#issuecomment-832534185
https://github.com/sofa-framework/sofa/pull/2042#issuecomment-842934671:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2042#issuecomment-842934671
https://github.com/sofa-framework/sofa/pull/2043#issuecomment-826561209:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2043#issuecomment-826561209
https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828295244:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828295244
https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940:131,Modifiability,plugin,plugins,131,Nobody (in the sofa code base) was including this deprecated file (which is a not bad news by itself).; But I encountered some old plugins (implementing new Qt Widgets) including this file (thats why I could detect this problem),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940
https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940:208,Safety,detect,detect,208,Nobody (in the sofa code base) was including this deprecated file (which is a not bad news by itself).; But I encountered some old plugins (implementing new Qt Widgets) including this file (thats why I could detect this problem),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940
https://github.com/sofa-framework/sofa/pull/2047#issuecomment-828300546:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2047#issuecomment-828300546
https://github.com/sofa-framework/sofa/pull/2047#issuecomment-829324334:69,Testability,test,tests,69,"I am not sure of the consequence to change the maps, but if :; - the tests (yours + current scene tests) behave exactly the same,; - it is easy to revert in case we find drawbacks later on. I am ok with that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2047#issuecomment-829324334
https://github.com/sofa-framework/sofa/pull/2047#issuecomment-829324334:98,Testability,test,tests,98,"I am not sure of the consequence to change the maps, but if :; - the tests (yours + current scene tests) behave exactly the same,; - it is easy to revert in case we find drawbacks later on. I am ok with that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2047#issuecomment-829324334
https://github.com/sofa-framework/sofa/issues/2048#issuecomment-854618528:20,Deployability,update,update,20,"Yes, closing.; I'll update again the doc after my future changes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2048#issuecomment-854618528
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1225487343:67,Modifiability,rewrite,rewrite,67,"further to https://github.com/sofa-framework/BeamAdapter/pull/50; ""rewrite the thread pool is needed"" @alxbilger",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1225487343
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318424915:25,Modifiability,refactor,refactored,25,The thread pool is being refactored. Here are 3 pending PR:; - #3480 ; - #3482 ; - #3491,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318424915
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:431,Modifiability,plugin,plugin,431,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:620,Modifiability,plugin,plugin,620,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:10,Usability,UX,UX,10,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828404081:142,Testability,test,test,142,Setting back to WIP after a quick review; 1. absolute and relative residual are inverted in the convergence checks; 2. Missing the divergence test when the residual is growing; 3. I will add unit tests for relative norms,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828404081
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828404081:196,Testability,test,tests,196,Setting back to WIP after a quick review; 1. absolute and relative residual are inverted in the convergence checks; 2. Missing the divergence test when the residual is growing; 3. I will add unit tests for relative norms,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828404081
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828471644:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828471644
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-833286035:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-833286035
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263:111,Usability,clear,clear,111,"Seems OK, could you just rebase/merge with master to remove the failed CUDA/whatever scenes? Just to be in the clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-845754767:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-845754767
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-845754855:6,Integrability,depend,depends-on,6,"**[ci-depends-on]** detected during [build #10](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/10/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-845754855
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-845754855:20,Safety,detect,detected,20,"**[ci-depends-on]** detected during [build #10](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/10/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-845754855
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846028265:6,Integrability,depend,depends-on,6,"**[ci-depends-on]** detected during [build #11](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/11/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846028265
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846028265:20,Safety,detect,detected,20,"**[ci-depends-on]** detected during [build #11](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/11/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846028265
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846036890:6,Integrability,depend,depends-on,6,"**[ci-depends-on]** detected during [build #12](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/12/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846036890
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846036890:20,Safety,detect,detected,20,"**[ci-depends-on]** detected during [build #12](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/12/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846036890
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846056178:6,Integrability,depend,depends-on,6,"**[ci-depends-on]** detected during [build #13](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/13/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846056178
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846056178:20,Safety,detect,detected,20,"**[ci-depends-on]** detected during [build #13](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/13/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-846056178
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848018942:6,Integrability,depend,depends-on,6,"**[ci-depends-on]** detected during [build #14](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/14/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848018942
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848018942:20,Safety,detect,detected,20,"**[ci-depends-on]** detected during [build #14](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/14/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/147**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56f8258ff0b6d1f19d24f2231eb3868d7b10fa31_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848018942
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963:6,Integrability,depend,depends-on,6,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963:123,Integrability,depend,dependencies,123,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963:20,Safety,detect,detected,20,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963
https://github.com/sofa-framework/sofa/issues/2051#issuecomment-838085226:126,Security,access,access,126,"1. TopologyContainer accumulate different type of element TriangleContainer has also edge and point, etc..; 2. Yes this is to access method from the scene. But the idea will be to move all the methods as static in the package geometry; 3. yes, you are right but this is just an illustration",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2051#issuecomment-838085226
https://github.com/sofa-framework/sofa/pull/2053#issuecomment-829840602:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2053#issuecomment-829840602
https://github.com/sofa-framework/sofa/pull/2058#issuecomment-832497691:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2058#issuecomment-832497691
https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913:5,Availability,failure,failures,5,Test failures are still here. Looks like CMAKE_INSTALL_DEFAULT_COMPONENT_NAME is not responsible for the failures then.; I keep this PR open to investigate...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913
https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913:105,Availability,failure,failures,105,Test failures are still here. Looks like CMAKE_INSTALL_DEFAULT_COMPONENT_NAME is not responsible for the failures then.; I keep this PR open to investigate...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913
https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913:0,Testability,Test,Test,0,Test failures are still here. Looks like CMAKE_INSTALL_DEFAULT_COMPONENT_NAME is not responsible for the failures then.; I keep this PR open to investigate...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913
https://github.com/sofa-framework/sofa/pull/2059#issuecomment-834234430:0,Availability,Failure,Failures,0,Failures were related to SofaPython3 directly. Fixed by https://github.com/sofa-framework/SofaPython3/pull/142,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2059#issuecomment-834234430
https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908068228:685,Deployability,update,updates,685,"Hey @alxbilger . Taking another look at this issue, and I realized that :; - contacts are created as SUB-nodes and connected to the associated object though a mapping; - then (if `response='default'` meaning Penality approach is chosen for the ContactResponse), a PenalityContactForceField is added in the root node with a BarycentricPenalityContact which distributes the spring forces on the SUB-node MechanicalObject. As stiffness matrices (implicit force contributions) are not propagated through mappings (yet), only the addForce is used and the need of a AddKToMatrix never arose. I tried an implementation shortly but I would need to test it which is yet not possible. Hope this updates this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908068228
https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908068228:640,Testability,test,test,640,"Hey @alxbilger . Taking another look at this issue, and I realized that :; - contacts are created as SUB-nodes and connected to the associated object though a mapping; - then (if `response='default'` meaning Penality approach is chosen for the ContactResponse), a PenalityContactForceField is added in the root node with a BarycentricPenalityContact which distributes the spring forces on the SUB-node MechanicalObject. As stiffness matrices (implicit force contributions) are not propagated through mappings (yet), only the addForce is used and the need of a AddKToMatrix never arose. I tried an implementation shortly but I would need to test it which is yet not possible. Hope this updates this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908068228
https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908090195:36,Testability,test,tested,36,"Ok, good to know! Thanks for having tested that. To summarize:. 1. PenalityContactForceField needs to implement `addKToMatrix`; 2. Matrices need to be mapped so contacts can be correctly created when the collision model is mapped",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908090195
https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343:329,Availability,down,down,329,"Another thought about this issue:; If penality forces are integrated implicitly (`addKToMatrix` is implemented and matrices are mapped), the structure of the linear system can change between 2 time steps. In that case, the matrix will need a new symbolic factorization each time it changes. This is very costly, and it will slow down the simulation a lot. It is the same problem occurring after a topological change.; Some solutions (such as https://dl.acm.org/doi/abs/10.1145/3478513.3480505) exist, but require a lot of work (and a dedicated solver).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343
https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343:58,Deployability,integrat,integrated,58,"Another thought about this issue:; If penality forces are integrated implicitly (`addKToMatrix` is implemented and matrices are mapped), the structure of the linear system can change between 2 time steps. In that case, the matrix will need a new symbolic factorization each time it changes. This is very costly, and it will slow down the simulation a lot. It is the same problem occurring after a topological change.; Some solutions (such as https://dl.acm.org/doi/abs/10.1145/3478513.3480505) exist, but require a lot of work (and a dedicated solver).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343
https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343:58,Integrability,integrat,integrated,58,"Another thought about this issue:; If penality forces are integrated implicitly (`addKToMatrix` is implemented and matrices are mapped), the structure of the linear system can change between 2 time steps. In that case, the matrix will need a new symbolic factorization each time it changes. This is very costly, and it will slow down the simulation a lot. It is the same problem occurring after a topological change.; Some solutions (such as https://dl.acm.org/doi/abs/10.1145/3478513.3480505) exist, but require a lot of work (and a dedicated solver).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342:144,Modifiability,plugin,plugins,144,Very nice work @fredroy :clap: :clap: :clap:. I have 2 side questions:; - shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; - is it planned to host the repository in sofa-framework organization ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342:171,Testability,log,logical,171,Very nice work @fredroy :clap: :clap: :clap:. I have 2 side questions:; - shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; - is it planned to host the repository in sofa-framework organization ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:151,Modifiability,plugin,plugins,151,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:382,Modifiability,plugin,plugin,382,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:547,Modifiability,sandbox,sandbox,547,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:178,Testability,log,logical,178,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:547,Testability,sandbox,sandbox,547,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590
https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:575,Testability,test,tested,575,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590
https://github.com/sofa-framework/sofa/pull/2065#issuecomment-833605919:35,Modifiability,plugin,plugins,35,"I just saw that only `applications/plugins/CGALPlugin/src/CGALPlugin/CuboidMesh.inl` needs OpenGL (calling directly gl*() functions).; I guess it was easier for you to include directly Sofa.GL but in my mind, it would be better to remove all the direct calls to OpenGL and use the drawtool functions (from `sofa/helper/visual/DrawTool.h`), especially it seems it is only to render points and tetrahedra.; Thus you wont need Sofa.GL (and be able to compile CGALPlugin without OpenGL)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-833605919
https://github.com/sofa-framework/sofa/pull/2065#issuecomment-834176965:57,Modifiability,refactor,refactor,57,I completely agree @fredroy ; There seems to be a lot to refactor and clean in the CGALPlugin and maybe it deserves a big PR on its own.; I'll modernize our calls to the draw functions on this component and let you know when I'm done,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-834176965
https://github.com/sofa-framework/sofa/issues/2066#issuecomment-834141984:297,Energy Efficiency,consumption,consumption,297,"Not really related to your issue itself (GUI) but are you sure that `DefaultCollisionGroupManager ` is working well? last time I tried, if you let the simulation running, you can see in `MechanicalObjects` keeping allocating vectors (without deleting them)... leading to a big slowdown and memory consumption.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2066#issuecomment-834141984
https://github.com/sofa-framework/sofa/pull/2067#issuecomment-834185766:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2067#issuecomment-834185766
https://github.com/sofa-framework/sofa/pull/2073#issuecomment-834545838:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2073#issuecomment-834545838
https://github.com/sofa-framework/sofa/issues/2074#issuecomment-842071573:332,Integrability,depend,depends,332,"My take on this:. The CG solver should stay what it is: a linear solver. It should be up to the one using it (ODE solver) to set up the equations, both in LHS/RHS assembly, and application of _mechanical_ projections such as fixed constraints. The only projection a linear solver should make itself, in my opinion, is one that only depends on the shape of the system matrix itself, such as numerical ordering projections (AMD, metis, ...). Anything else made from ""contextual"" decisions (for example, mechanical constraints) should not be made by a linear solver.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2074#issuecomment-842071573
https://github.com/sofa-framework/sofa/issues/2075#issuecomment-837963417:103,Deployability,update,update,103,"Hello!; It seems your issue has just been fixed in the latest merged PR (#2065).; So you should either update your master branch (if you are following the master), or cherry-pick the change if not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2075#issuecomment-837963417
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-842967989:154,Testability,test,test,154,"> [Related to #2089]; > this does not fix the multiple creation of vectors at every timestep in the mechanical objects. Ok, thank you for having done the test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-842967989
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-843916439:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-843916439
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:30,Integrability,message,messages,30,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:185,Integrability,message,messages,185,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:39,Usability,clear,clearer,39,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:215,Usability,clear,clearer,215,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/issues/2078#issuecomment-841470077:491,Modifiability,flexible,flexible-fem-body,491,"If you are using a Lagrange-multiplier-based resolution, you can use the [BilateralInteractionConstraint](https://github.com/sofa-framework/sofa/blob/master/examples/Components/constraint/BilateralInteractionConstraint.scn).; If not, you can use a projective attachement using [AttachConstraint](https://github.com/sofa-framework/sofa/blob/master/examples/Components/constraint/AttachConstraint.scn). A [post here](https://www.sofa-framework.org/community/forum/topic/attach-a-rigid-cube-to-flexible-fem-body/#post-17447) is discussing the difference between both.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2078#issuecomment-841470077
https://github.com/sofa-framework/sofa/pull/2081#issuecomment-841070276:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2081#issuecomment-841070276
https://github.com/sofa-framework/sofa/pull/2082#issuecomment-842102047:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2082#issuecomment-842102047
https://github.com/sofa-framework/sofa/pull/2082#issuecomment-843932646:109,Modifiability,Config,Config,109,https://github.com/sofa-framework/sofa/blob/2e94336d0568aa90583633344137974e3e2172c7/SofaKernel/modules/Sofa.Config/src/sofa/config.h.in#L126. List of deprecated macros,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2082#issuecomment-843932646
https://github.com/sofa-framework/sofa/pull/2082#issuecomment-843932646:125,Modifiability,config,config,125,https://github.com/sofa-framework/sofa/blob/2e94336d0568aa90583633344137974e3e2172c7/SofaKernel/modules/Sofa.Config/src/sofa/config.h.in#L126. List of deprecated macros,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2082#issuecomment-843932646
https://github.com/sofa-framework/sofa/pull/2082#issuecomment-846292371:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2082#issuecomment-846292371
https://github.com/sofa-framework/sofa/pull/2084#issuecomment-841486947:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2084#issuecomment-841486947
https://github.com/sofa-framework/sofa/pull/2084#issuecomment-841858462:38,Testability,test,tests,38,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2084#issuecomment-841858462
https://github.com/sofa-framework/sofa/pull/2085#issuecomment-842102890:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2085#issuecomment-842102890
https://github.com/sofa-framework/sofa/pull/2086#issuecomment-846316988:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2086#issuecomment-846316988
https://github.com/sofa-framework/sofa/pull/2087#issuecomment-849097448:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2087#issuecomment-849097448
https://github.com/sofa-framework/sofa/pull/2087#issuecomment-855956825:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2087#issuecomment-855956825
