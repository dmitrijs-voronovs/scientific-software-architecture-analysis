id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16157,Safety,detect,detections,16157,"olean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:18381,Safety,detect,detections,18381,"tList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of another hierarchy.; In practice, this means copying the root and TMA grid of the second hierarchy. Parameters:; hierarchy - . getObjectsForROI; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls,; ROI roi); Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. ; This relies on centroids for detections, and a 'covers' rule for others. Parameters:; cls - class of PathObjects (e.g. PathDetectionObject), or null to accept all; roi - ; Returns:. getObjectsForRegion; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filterin",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:8280,Security,hash,hashCode,8280,"e 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. boolean; removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, without firing a remove event. void; removePathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). void; resolveHierarchy(). Attempt to resolve the parent-child relationships between all objects within the hierarchy. void; setHierarchy(PathObjectHierarchy hierarchy). Set the contents of this hierarchy to be the same as that of another hierarchy. void; setTMAGrid(TMAGrid tmaGrid). Set the tma grid for this hierarchy. String; toString();  ; void; updateObject(PathObject pathObject,; boolean isChanging). Update an object that is already in the hierarchy (e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HIERARCHY_COMPARATOR; public static final Comparator<PathObject> HIERARCHY_COMPARATOR; Comparator to use when looking for a parent annotation in the hierarchy.; The logic is:; ; Sort by area (smallest first); Sort by hierarchy level (deepest first); Sort by DefaultPathObjectComparator. In practice, one expects an object to be placed inside the smallest containing annotation - ; identical areas are likely to be rare, unless obtained by duplication. Constructor Details. PathObjectHierarchy; public PathObjectHierarchy(); Default constructor, creates an empty hierarchy. Method Details. isEmpty; public boolean isEmpty(); Check if the hierarchy is empty (i.e. no objects apart from the root object, no feature maps). Returns:. addListener; public void addListener(PathObjectHierarchyListener listener); Add a hierarchy change listener. Parameters:; listener - ; Since:; v0.4.0; replaced addPathObjectListener(PathObjectHierarchyListener).",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:8507,Testability,log,logic,8507,"tHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). void; resolveHierarchy(). Attempt to resolve the parent-child relationships between all objects within the hierarchy. void; setHierarchy(PathObjectHierarchy hierarchy). Set the contents of this hierarchy to be the same as that of another hierarchy. void; setTMAGrid(TMAGrid tmaGrid). Set the tma grid for this hierarchy. String; toString();  ; void; updateObject(PathObject pathObject,; boolean isChanging). Update an object that is already in the hierarchy (e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HIERARCHY_COMPARATOR; public static final Comparator<PathObject> HIERARCHY_COMPARATOR; Comparator to use when looking for a parent annotation in the hierarchy.; The logic is:; ; Sort by area (smallest first); Sort by hierarchy level (deepest first); Sort by DefaultPathObjectComparator. In practice, one expects an object to be placed inside the smallest containing annotation - ; identical areas are likely to be rare, unless obtained by duplication. Constructor Details. PathObjectHierarchy; public PathObjectHierarchy(); Default constructor, creates an empty hierarchy. Method Details. isEmpty; public boolean isEmpty(); Check if the hierarchy is empty (i.e. no objects apart from the root object, no feature maps). Returns:. addListener; public void addListener(PathObjectHierarchyListener listener); Add a hierarchy change listener. Parameters:; listener - ; Since:; v0.4.0; replaced addPathObjectListener(PathObjectHierarchyListener). addPathObjectListener; @Deprecated; public void addPathObjectListener(PathObjectHierarchyListener listener); Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). Legacy method to add a hierarchy ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:11244,Testability,log,logic,11244,"ange listener; use removeListener(PathObjectHierarchyListener) instead. Parameters:; listener - . getRootObject; public PathObject getRootObject(); Get the root object. All other objects in the hierarchy are descendants of the root. Returns:. getTMAGrid; public TMAGrid getTMAGrid(); Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. Returns:. getSelectionModel; public PathObjectSelectionModel getSelectionModel(); Get the selection model, which handles the selection status of objects. Returns:. setTMAGrid; public void setTMAGrid(TMAGrid tmaGrid); Set the tma grid for this hierarchy.; If identical to the current TMA grid, nothing will happen.; Otherwise, if null then any existing TMA grid will be removed. Parameters:; tmaGrid - . insertPathObject; public boolean insertPathObject(PathObject pathObject,; boolean fireChangeEvents); Insert an object into the hierarchy. This differs from addObject(PathObject, boolean) in that it will seek to ; place the object in an appropriate location relative to existing objects, using the logic of HIERARCHY_COMPARATOR. Parameters:; pathObject - the object to add; fireChangeEvents - if true, an event will be added after adding the object. Choose false if a single event should be added after making multiple changes.; Returns:; true if the hierarchy changed as a result of this call, false otherwise. insertPathObjects; public boolean insertPathObjects(Collection<? extends PathObject> pathObjects); Insert a collection of objects into the hierarchy, firing a change event on completion.; This differs from addObjects(Collection) in that it will seek to ; place the object in an appropriate location relative to existing objects, using the logic of HIERARCHY_COMPARATOR. Parameters:; pathObjects - the objects to add; Returns:; true if the hierarchy changed as a result of this call, false otherwise. resolveHierarchy; public void resolveHierarchy(); Attempt to resolve the parent-child relationships between all objects w",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:11897,Testability,log,logic,11897,", nothing will happen.; Otherwise, if null then any existing TMA grid will be removed. Parameters:; tmaGrid - . insertPathObject; public boolean insertPathObject(PathObject pathObject,; boolean fireChangeEvents); Insert an object into the hierarchy. This differs from addObject(PathObject, boolean) in that it will seek to ; place the object in an appropriate location relative to existing objects, using the logic of HIERARCHY_COMPARATOR. Parameters:; pathObject - the object to add; fireChangeEvents - if true, an event will be added after adding the object. Choose false if a single event should be added after making multiple changes.; Returns:; true if the hierarchy changed as a result of this call, false otherwise. insertPathObjects; public boolean insertPathObjects(Collection<? extends PathObject> pathObjects); Insert a collection of objects into the hierarchy, firing a change event on completion.; This differs from addObjects(Collection) in that it will seek to ; place the object in an appropriate location relative to existing objects, using the logic of HIERARCHY_COMPARATOR. Parameters:; pathObjects - the objects to add; Returns:; true if the hierarchy changed as a result of this call, false otherwise. resolveHierarchy; public void resolveHierarchy(); Attempt to resolve the parent-child relationships between all objects within the hierarchy. removeObject; public boolean removeObject(PathObject pathObject,; boolean keepChildren); Remove a single object from the hierarchy, firing a remove event. Parameters:; pathObject - the object to remove; keepChildren - if true, retain all children and descendants of the object being removed; if false, remove these also; Returns:. removeObjectWithoutUpdate; public boolean removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren); Remove a single object from the hierarchy, without firing a remove event. Parameters:; pathObject - the object to remove; keepChildren - if true, retain all children and descendants of the o",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:18855,Testability,test,test,18855,"r of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of another hierarchy.; In practice, this means copying the root and TMA grid of the second hierarchy. Parameters:; hierarchy - . getObjectsForROI; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls,; ROI roi); Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. ; This relies on centroids for detections, and a 'covers' rule for others. Parameters:; cls - class of PathObjects (e.g. PathDetectionObject), or null to accept all; roi - ; Returns:. getObjectsForRegion; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Objec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3348,Usability,clear,clearAll,3348,"te). Add path object as descendant of the requested parent. boolean; addObjects(Collection<? extends PathObject> pathObjects). Add multiple objects to the hierarchy. boolean; addPathObject(PathObject pathObject). Deprecated.; since v0.4.0; use addObject(PathObject) instead (for naming consistency). boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fir",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:15550,Usability,clear,clearAll,15550,"acy method to path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:. addObjectBelowParent; public boolean addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Add path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:; Since:; v0.4.0 (replaces addPathObjectBelowParent(PathObject, PathObject, boolean). addObjects; public boolean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:15572,Usability,clear,clearAll,15572,"acy method to path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:. addObjectBelowParent; public boolean addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Add path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:; Since:; v0.4.0 (replaces addPathObjectBelowParent(PathObject, PathObject, boolean). addObjects; public boolean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/TMAGrid.html:471,Integrability,interface,interface,471,". TMAGrid (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy; Interface TMAGrid. All Superinterfaces:; Serializable. All Known Implementing Classes:; DefaultTMAGrid. public interface TMAGrid; extends Serializable; Interface defining a (rectangular) TMA grid. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; int; getGridHeight(). Number of cores along the vertical axis of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. Method Details. nCores; int nCores(); Total number of cores in the TMA grid. Returns:. getGridWidth; int getGridWidth(); Number of cores along the horizontal axis of the grid. Returns:. getGridHeight; int getGridHeight(); Number of cores along the vertical axis of the grid. Returns:. getTMACore; TMACoreObject getTMACore(String coreName); Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Parameters:; coreName - ; Returns:. getTMACore; TMACoreObject getTMACore(int row,; int col); Get the TMACoreObject for a specified grid location. Parameters:; row - ; col - ; Returns:. getTMACoreList; List<TMACoreObject> getTMACoreList(); Get an unmodifiable list of all TMA core objects. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/TMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/TMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/TMAGrid.html:490,Modifiability,extend,extends,490,". TMAGrid (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy; Interface TMAGrid. All Superinterfaces:; Serializable. All Known Implementing Classes:; DefaultTMAGrid. public interface TMAGrid; extends Serializable; Interface defining a (rectangular) TMA grid. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; int; getGridHeight(). Number of cores along the vertical axis of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. Method Details. nCores; int nCores(); Total number of cores in the TMA grid. Returns:. getGridWidth; int getGridWidth(); Number of cores along the horizontal axis of the grid. Returns:. getGridHeight; int getGridHeight(); Number of cores along the vertical axis of the grid. Returns:. getTMACore; TMACoreObject getTMACore(String coreName); Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Parameters:; coreName - ; Returns:. getTMACore; TMACoreObject getTMACore(int row,; int col); Get the TMACoreObject for a specified grid location. Parameters:; row - ; col - ; Returns:. getTMACoreList; List<TMACoreObject> getTMACoreList(); Get an unmodifiable list of all TMA core objects. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/TMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/TMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1083,Availability,toler,tolerance,1083," disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.utils; Class ObjectMerger. java.lang.Object; qupath.lib.objects.utils.ObjectMerger. public class ObjectMerger; extends Object; Helper class for merging objects using different criteria.; ; This is designed to be used for post-processing a segmentation, to help resolve tile boundaries. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1283,Availability,toler,tolerance,1283," ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.utils; Class ObjectMerger. java.lang.Object; qupath.lib.objects.utils.ObjectMerger. public class ObjectMerger; extends Object; Helper class for merging objects using different criteria.; ; This is designed to be used for post-processing a segmentation, to help resolve tile boundaries. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made abo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:2669,Availability,toler,tolerance,2669," Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made about the mutability or ordering of the returned list. Parameters:; pathObjects - the input objects for which merges should be calculated; Returns:; a list of objects, with the same number or fewer than the input. createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold); Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance.; ; Objects will be merged if they a common boundary and have the same classification.; A small overlap tolerance is used to compensate for sub-pixel misalignment of tiles.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; for merging; Returns:; an object merger that uses a shared boundary criterion; See Also:. createSharedTileBoundaryMerger(double, double). createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance); Create an object merger that uses a shared boundary IoU criterion and overlap tolerance.; ; Objects will be merged if they ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:2783,Availability,toler,tolerance,2783," Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made about the mutability or ordering of the returned list. Parameters:; pathObjects - the input objects for which merges should be calculated; Returns:; a list of objects, with the same number or fewer than the input. createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold); Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance.; ; Objects will be merged if they a common boundary and have the same classification.; A small overlap tolerance is used to compensate for sub-pixel misalignment of tiles.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; for merging; Returns:; an object merger that uses a shared boundary criterion; See Also:. createSharedTileBoundaryMerger(double, double). createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance); Create an object merger that uses a shared boundary IoU criterion and overlap tolerance.; ; Objects will be merged if they share a common boundary and have the same classification.; A small overlap tolerance can be used to compensate for slight misalignment of tiles.; ; After identifying a common boundary line between ROIs, the ROI boundaries are intersected w",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:3524,Availability,toler,tolerance,3524,"ith the same number or fewer than the input. createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold); Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance.; ; Objects will be merged if they a common boundary and have the same classification.; A small overlap tolerance is used to compensate for sub-pixel misalignment of tiles.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; for merging; Returns:; an object merger that uses a shared boundary criterion; See Also:. createSharedTileBoundaryMerger(double, double). createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance); Create an object merger that uses a shared boundary IoU criterion and overlap tolerance.; ; Objects will be merged if they share a common boundary and have the same classification.; A small overlap tolerance can be used to compensate for slight misalignment of tiles.; ; After identifying a common boundary line between ROIs, the ROI boundaries are intersected with the line,; and the two intersections are subsequently intersected with each other to determine the shared intersection.; The length of the shared intersection is then used to compute the intersection over union.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; * for merging; overlapTolerance - amount of overlap allowed between objects, in pixe",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:3644,Availability,toler,tolerance,3644,"tolerance.; ; Objects will be merged if they a common boundary and have the same classification.; A small overlap tolerance is used to compensate for sub-pixel misalignment of tiles.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; for merging; Returns:; an object merger that uses a shared boundary criterion; See Also:. createSharedTileBoundaryMerger(double, double). createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance); Create an object merger that uses a shared boundary IoU criterion and overlap tolerance.; ; Objects will be merged if they share a common boundary and have the same classification.; A small overlap tolerance can be used to compensate for slight misalignment of tiles.; ; After identifying a common boundary line between ROIs, the ROI boundaries are intersected with the line,; and the two intersections are subsequently intersected with each other to determine the shared intersection.; The length of the shared intersection is then used to compute the intersection over union.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; * for merging; overlapTolerance - amount of overlap allowed between objects, in pixels. If zero, the boundary must be; shared exactly. A typical value is 0.125, which allows for a small, sub-pixel overlap.; Returns:; an object merger that uses a shared boundary criterion and overlap tolerance. createSharedClassificationMerger; public sta",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:4615,Availability,toler,tolerance,4615,"mon boundary and have the same classification.; A small overlap tolerance can be used to compensate for slight misalignment of tiles.; ; After identifying a common boundary line between ROIs, the ROI boundaries are intersected with the line,; and the two intersections are subsequently intersected with each other to determine the shared intersection.; The length of the shared intersection is then used to compute the intersection over union.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; * for merging; overlapTolerance - amount of overlap allowed between objects, in pixels. If zero, the boundary must be; shared exactly. A typical value is 0.125, which allows for a small, sub-pixel overlap.; Returns:; an object merger that uses a shared boundary criterion and overlap tolerance. createSharedClassificationMerger; public static ObjectMerger createSharedClassificationMerger(); Create an object merger that can merge together any objects with similar ROIs (e.g. points, areas), the same; classification, and are on the same image plane.; ; The ROIs to not need to be touching; the resulting merged objects can have discontinuous ROIs. Returns:; an object merger that can merge together any objects with similar ROIs and the same classification. createTouchingMerger; public static ObjectMerger createTouchingMerger(); Create an object merger that can merge together any objects with similar ROIs (e.g. points, areas) that also; touch one another.; ; Objects must also have the same classification and be on the same image plane to be mergeable.; ; Note that this is a strict criterion following the Java Topology Suite definition of touching, which requires; that the boundaries of the geometries intersect, but the interiors do not int",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:5939,Availability,toler,tolerance,5939,"rictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; * for merging; overlapTolerance - amount of overlap allowed between objects, in pixels. If zero, the boundary must be; shared exactly. A typical value is 0.125, which allows for a small, sub-pixel overlap.; Returns:; an object merger that uses a shared boundary criterion and overlap tolerance. createSharedClassificationMerger; public static ObjectMerger createSharedClassificationMerger(); Create an object merger that can merge together any objects with similar ROIs (e.g. points, areas), the same; classification, and are on the same image plane.; ; The ROIs to not need to be touching; the resulting merged objects can have discontinuous ROIs. Returns:; an object merger that can merge together any objects with similar ROIs and the same classification. createTouchingMerger; public static ObjectMerger createTouchingMerger(); Create an object merger that can merge together any objects with similar ROIs (e.g. points, areas) that also; touch one another.; ; Objects must also have the same classification and be on the same image plane to be mergeable.; ; Note that this is a strict criterion following the Java Topology Suite definition of touching, which requires; that the boundaries of the geometries intersect, but the interiors do not intersect.; ; This strictness can cause unexpected results due to floating point precision issues, unless it is certain that; the ROIs are perfectly aligned (e.g they are generated using integer coordinates on a pixel grid).; ; If this is not the case, createSharedTileBoundaryMerger(double, double) is usually preferable, since it; can include a small overlap tolerance. Returns:; an object merger that can merge together any objects with similar ROIs and the same classification; See Also:. createSharedTileBoundaryMerger(double, double). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:465,Modifiability,extend,extends,465,". ObjectMerger (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.utils; Class ObjectMerger. java.lang.Object; qupath.lib.objects.utils.ObjectMerger. public class ObjectMerger; extends Object; Helper class for merging objects using different criteria.; ; This is designed to be used for post-processing a segmentation, to help resolve tile boundaries. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned u",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1460,Modifiability,extend,extends,1460,"Merger; extends Object; Helper class for merging objects using different criteria.; ; This is designed to be used for post-processing a segmentation, to help resolve tile boundaries. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made about the mutability or ordering of the returned list. Parameters:; pathObjects - the input objects for which merges should be calculated; Returns:; a list of objects, with the same number or fewer than the input",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1578,Modifiability,inherit,inherited,1578,"sing a segmentation, to help resolve tile boundaries. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made about the mutability or ordering of the returned list. Parameters:; pathObjects - the input objects for which merges should be calculated; Returns:; a list of objects, with the same number or fewer than the input. createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold); Crea",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1775,Modifiability,extend,extends,1775,"ClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made about the mutability or ordering of the returned list. Parameters:; pathObjects - the input objects for which merges should be calculated; Returns:; a list of objects, with the same number or fewer than the input. createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold); Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance.; ; Objects will be merged if they a common boundary and have the same classification.; A small overlap tolerance is used to ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1652,Security,hash,hashCode,1652,"thod Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made about the mutability or ordering of the returned list. Parameters:; pathObjects - the input objects for which merges should be calculated; Returns:; a list of objects, with the same number or fewer than the input. createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold); Create an object merger that uses a shared boundary IoU criterion and defaul",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html:501,Modifiability,extend,extends,501,. Tiler.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.utils; Class Tiler.Builder. java.lang.Object; qupath.lib.objects.utils.Tiler.Builder. Enclosing class:; Tiler. public static class Tiler.Builder; extends Object. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Tiler.Builder; alignBottomCenter(). Start tiles at the bottom center of the ROI bounding box. Tiler.Builder; alignBottomLeft(). Match tiles to the bottom left of the ROI bounding box. Tiler.Builder; alignBottomRight(). Match tiles to the bottom right of the ROI bounding box. Tiler.Builder; alignCenter(). Center tiles within the ROI bounding box. Tiler.Builder; alignCenterLeft(). Match tiles to the center left of the ROI bounding box. Tiler.Builder; alignCenterRight(). Match tiles to the center left of the ROI bounding box. Tiler.Builder; alignment(Tiler.TileAlignment alignment). Set the tile alignment. Tiler.Builder; alignTopCenter(). Start tiles at the top center of the ROI bounding box. Tiler.Builder; alignTopLeft(). Start tiles at the top left of the ROI bounding box. Tiler.Builder; alignTopRight(). Match tiles to the top right of the ROI bounding box. Tiler; build(). Build a tiler object with the current settings. Tiler.Builder; cropTiles(boolean cropToParent). Set whether the tiler is set to crop the output to the input parent. Tiler.Builder; filterByCentroid(boolean filterByCentroid). Set if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. Tiler.Builder; tileHeight(int tileHeight). Change the height of output tiles. Tiler.Builder; tileWidth(int tileWidth). Change the width of output tiles. Methods inherited ,MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html:1991,Modifiability,inherit,inherited,1991," Match tiles to the center left of the ROI bounding box. Tiler.Builder; alignCenterRight(). Match tiles to the center left of the ROI bounding box. Tiler.Builder; alignment(Tiler.TileAlignment alignment). Set the tile alignment. Tiler.Builder; alignTopCenter(). Start tiles at the top center of the ROI bounding box. Tiler.Builder; alignTopLeft(). Start tiles at the top left of the ROI bounding box. Tiler.Builder; alignTopRight(). Match tiles to the top right of the ROI bounding box. Tiler; build(). Build a tiler object with the current settings. Tiler.Builder; cropTiles(boolean cropToParent). Set whether the tiler is set to crop the output to the input parent. Tiler.Builder; filterByCentroid(boolean filterByCentroid). Set if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. Tiler.Builder; tileHeight(int tileHeight). Change the height of output tiles. Tiler.Builder; tileWidth(int tileWidth). Change the width of output tiles. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. tileHeight; public Tiler.Builder tileHeight(int tileHeight); Change the height of output tiles. Parameters:; tileHeight - the new height in pixels; Returns:; this builder. tileWidth; public Tiler.Builder tileWidth(int tileWidth); Change the width of output tiles. Parameters:; tileWidth - the new width in pixels; Returns:; this builder. cropTiles; public Tiler.Builder cropTiles(boolean cropToParent); Set whether the tiler is set to crop the output to the input parent.; Using this option can result in smaller and non-rectangular tiles. Parameters:; cropToParent - the new setting; Returns:; this builder. alignment; public Tiler.Builder alignment(Tiler.TileAlignment alignment); Set the tile alignment. Parameters:; alignment - the new setting; Returns:; this builder. alignTopLeft; public Tiler.Builder alignTopLeft(); Start tiles at the top left of the ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html:2065,Security,hash,hashCode,2065,"alignCenterRight(). Match tiles to the center left of the ROI bounding box. Tiler.Builder; alignment(Tiler.TileAlignment alignment). Set the tile alignment. Tiler.Builder; alignTopCenter(). Start tiles at the top center of the ROI bounding box. Tiler.Builder; alignTopLeft(). Start tiles at the top left of the ROI bounding box. Tiler.Builder; alignTopRight(). Match tiles to the top right of the ROI bounding box. Tiler; build(). Build a tiler object with the current settings. Tiler.Builder; cropTiles(boolean cropToParent). Set whether the tiler is set to crop the output to the input parent. Tiler.Builder; filterByCentroid(boolean filterByCentroid). Set if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. Tiler.Builder; tileHeight(int tileHeight). Change the height of output tiles. Tiler.Builder; tileWidth(int tileWidth). Change the width of output tiles. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. tileHeight; public Tiler.Builder tileHeight(int tileHeight); Change the height of output tiles. Parameters:; tileHeight - the new height in pixels; Returns:; this builder. tileWidth; public Tiler.Builder tileWidth(int tileWidth); Change the width of output tiles. Parameters:; tileWidth - the new width in pixels; Returns:; this builder. cropTiles; public Tiler.Builder cropTiles(boolean cropToParent); Set whether the tiler is set to crop the output to the input parent.; Using this option can result in smaller and non-rectangular tiles. Parameters:; cropToParent - the new setting; Returns:; this builder. alignment; public Tiler.Builder alignment(Tiler.TileAlignment alignment); Set the tile alignment. Parameters:; alignment - the new setting; Returns:; this builder. alignTopLeft; public Tiler.Builder alignTopLeft(); Start tiles at the top left of the ROI bounding box. Returns:; this builder. alignTopCenter; public Tiler.Buil",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.html:437,Modifiability,extend,extends,437,". Tiler (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.utils; Class Tiler. java.lang.Object; qupath.lib.objects.utils.Tiler. public class Tiler; extends Object; A class used to split ROI or Geometry objects into rectangular tiles.; This is useful for breaking up large images into manageable pieces.; ; The Tiler is immutable and threadsafe. Since:; v0.5.0. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Tiler.Builder;  ; static enum ; Tiler.TileAlignment. Enum representing the possible alignments for tiles. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.Builder; builder(int tileSize). Create a new builder to generate square tiles. static Tiler.Builder; builder(int tileWidth,; int tileHeight). Create a new builder to generate rectangular tiles. static Tiler.Builder; builder(Tiler tiler). Create a new builder initialized with the settings from an existing Tiler. List<PathObject>; createAnnotations(ROI parent). Create a list of PathAnnotationObject tiles from the input. List<Geometry>; createGeometries(Geometry parent). Create a list of Geometry tiles from the input. List<PathObject>; createObjects(ROI parent,; Function<ROI,PathObject> creator). Create a list of PathObject tiles from the input. List<ROI>; createROIs(ROI parent). Create a list of ROI tiles from the input. List<PathObject>; createTiles(ROI parent). Create a list of PathTileObject tiles from the input. Tiler.TileAlignment; getAlignment(). Get the tiling alignment. boolean; getCropToParent(). Check if the tiler is set to crop the output to the input parent. boolean; getFilterByCentroid(). Check if t",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.html:2211,Modifiability,inherit,inherited,2211,"e a new builder initialized with the settings from an existing Tiler. List<PathObject>; createAnnotations(ROI parent). Create a list of PathAnnotationObject tiles from the input. List<Geometry>; createGeometries(Geometry parent). Create a list of Geometry tiles from the input. List<PathObject>; createObjects(ROI parent,; Function<ROI,PathObject> creator). Create a list of PathObject tiles from the input. List<ROI>; createROIs(ROI parent). Create a list of ROI tiles from the input. List<PathObject>; createTiles(ROI parent). Create a list of PathTileObject tiles from the input. Tiler.TileAlignment; getAlignment(). Get the tiling alignment. boolean; getCropToParent(). Check if the tiler is set to crop the output to the input parent. boolean; getFilterByCentroid(). Check if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. int; getTileHeight(). Get the height of output tiles. int; getTileWidth(). Get the width of output tiles. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getTileWidth; public int getTileWidth(); Get the width of output tiles. Returns:; the width in pixels. getTileHeight; public int getTileHeight(); Get the height of output tiles. Returns:; the height in pixels. getCropToParent; public boolean getCropToParent(); Check if the tiler is set to crop the output to the input parent. Returns:; whether the tiler is set to crop output to the parent object. getAlignment; public Tiler.TileAlignment getAlignment(); Get the tiling alignment. Returns:; The current setting. getFilterByCentroid; public boolean getFilterByCentroid(); Check if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. Returns:; The current setting. createGeometries; public List<Geometry> createGeometries(Geometry parent); Create a list of Geometry tiles from the input. These may; not all be rectangu",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.html:2285,Security,hash,hashCode,2285,"st<PathObject>; createAnnotations(ROI parent). Create a list of PathAnnotationObject tiles from the input. List<Geometry>; createGeometries(Geometry parent). Create a list of Geometry tiles from the input. List<PathObject>; createObjects(ROI parent,; Function<ROI,PathObject> creator). Create a list of PathObject tiles from the input. List<ROI>; createROIs(ROI parent). Create a list of ROI tiles from the input. List<PathObject>; createTiles(ROI parent). Create a list of PathTileObject tiles from the input. Tiler.TileAlignment; getAlignment(). Get the tiling alignment. boolean; getCropToParent(). Check if the tiler is set to crop the output to the input parent. boolean; getFilterByCentroid(). Check if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. int; getTileHeight(). Get the height of output tiles. int; getTileWidth(). Get the width of output tiles. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getTileWidth; public int getTileWidth(); Get the width of output tiles. Returns:; the width in pixels. getTileHeight; public int getTileHeight(); Get the height of output tiles. Returns:; the height in pixels. getCropToParent; public boolean getCropToParent(); Check if the tiler is set to crop the output to the input parent. Returns:; whether the tiler is set to crop output to the parent object. getAlignment; public Tiler.TileAlignment getAlignment(); Get the tiling alignment. Returns:; The current setting. getFilterByCentroid; public boolean getFilterByCentroid(); Check if the tiler will filter the output based on whether the centroid; of tiles lies within the parent. Returns:; The current setting. createGeometries; public List<Geometry> createGeometries(Geometry parent); Create a list of Geometry tiles from the input. These may; not all be rectangular based on the settings used. Parameters:; parent - the object that wi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:1054,Integrability,interface,interfaces,1054,"your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.utils; Enum Class Tiler.TileAlignment. java.lang.Object; java.lang.Enum<Tiler.TileAlignment>; qupath.lib.objects.utils.Tiler.TileAlignment. All Implemented Interfaces:; Serializable, Comparable<Tiler.TileAlignment>, Constable. Enclosing class:; Tiler. public static enum Tiler.TileAlignment; extends Enum<Tiler.TileAlignment>; Enum representing the possible alignments for tiles.; A tile alignment of TOP_LEFT indicates that tiling should begin at the top left bounding box,; and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Tiler.TileAlignment TOP_LEFT. TOP_CENTER; public static final Tile",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:685,Modifiability,extend,extends,685,". Tiler.TileAlignment (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.utils; Enum Class Tiler.TileAlignment. java.lang.Object; java.lang.Enum<Tiler.TileAlignment>; qupath.lib.objects.utils.Tiler.TileAlignment. All Implemented Interfaces:; Serializable, Comparable<Tiler.TileAlignment>, Constable. Enclosing class:; Tiler. public static enum Tiler.TileAlignment; extends Enum<Tiler.TileAlignment>; Enum representing the possible alignments for tiles.; A tile alignment of TOP_LEFT indicates that tiling should begin at the top left bounding box,; and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:1065,Modifiability,inherit,inherited,1065,"your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.utils; Enum Class Tiler.TileAlignment. java.lang.Object; java.lang.Enum<Tiler.TileAlignment>; qupath.lib.objects.utils.Tiler.TileAlignment. All Implemented Interfaces:; Serializable, Comparable<Tiler.TileAlignment>, Constable. Enclosing class:; Tiler. public static enum Tiler.TileAlignment; extends Enum<Tiler.TileAlignment>; Enum representing the possible alignments for tiles.; A tile alignment of TOP_LEFT indicates that tiling should begin at the top left bounding box,; and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Tiler.TileAlignment TOP_LEFT. TOP_CENTER; public static final Tile",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:1118,Modifiability,extend,extends,1118,"ge; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.utils; Enum Class Tiler.TileAlignment. java.lang.Object; java.lang.Enum<Tiler.TileAlignment>; qupath.lib.objects.utils.Tiler.TileAlignment. All Implemented Interfaces:; Serializable, Comparable<Tiler.TileAlignment>, Constable. Enclosing class:; Tiler. public static enum Tiler.TileAlignment; extends Enum<Tiler.TileAlignment>; Enum representing the possible alignments for tiles.; A tile alignment of TOP_LEFT indicates that tiling should begin at the top left bounding box,; and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Tiler.TileAlignment TOP_LEFT. TOP_CENTER; public static final Tiler.TileAlignment TOP_CENTER. TOP_RIGHT; public static fin",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:1697,Modifiability,inherit,inherited,1697,"ileAlignment>; Enum representing the possible alignments for tiles.; A tile alignment of TOP_LEFT indicates that tiling should begin at the top left bounding box,; and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Tiler.TileAlignment TOP_LEFT. TOP_CENTER; public static final Tiler.TileAlignment TOP_CENTER. TOP_RIGHT; public static final Tiler.TileAlignment TOP_RIGHT. CENTER_LEFT; public static final Tiler.TileAlignment CENTER_LEFT. CENTER; public static final Tiler.TileAlignment CENTER. CENTER_RIGHT; public static final Tiler.TileAlignment CENTER_RIGHT. BOTTOM_LEFT; public static final Tiler.TileAlignment BOTTOM_LEFT. BOTTOM_CENTER; public static final Tiler.TileAlignment BOTTOM_CENTER. BOTTOM_RIGHT; public static final Tiler.TileAlignment BOTTOM_RIGHT. Method Details. values; public static Tiler.TileAlignment[] values(); Returns an array containing the constants of this enum class, in; the order they are de",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:1860,Modifiability,inherit,inherited,1860," and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Tiler.TileAlignment TOP_LEFT. TOP_CENTER; public static final Tiler.TileAlignment TOP_CENTER. TOP_RIGHT; public static final Tiler.TileAlignment TOP_RIGHT. CENTER_LEFT; public static final Tiler.TileAlignment CENTER_LEFT. CENTER; public static final Tiler.TileAlignment CENTER. CENTER_RIGHT; public static final Tiler.TileAlignment CENTER_RIGHT. BOTTOM_LEFT; public static final Tiler.TileAlignment BOTTOM_LEFT. BOTTOM_CENTER; public static final Tiler.TileAlignment BOTTOM_CENTER. BOTTOM_RIGHT; public static final Tiler.TileAlignment BOTTOM_RIGHT. Method Details. values; public static Tiler.TileAlignment[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static Tiler.TileAlignment valueOf(String n",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html:1808,Security,hash,hashCode,1808,"t of TOP_LEFT indicates that tiling should begin at the top left bounding box,; and if cropping is required then this will occur at the right and bottom.; An alignment of CENTER indicates that tiles may be cropped on all sides. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; BOTTOM_CENTER;  ; BOTTOM_LEFT;  ; BOTTOM_RIGHT;  ; CENTER;  ; CENTER_LEFT;  ; CENTER_RIGHT;  ; TOP_CENTER;  ; TOP_LEFT;  ; TOP_RIGHT;  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Tiler.TileAlignment; valueOf(String name). Returns the enum constant of this class with the specified name. static Tiler.TileAlignment[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TOP_LEFT; public static final Tiler.TileAlignment TOP_LEFT. TOP_CENTER; public static final Tiler.TileAlignment TOP_CENTER. TOP_RIGHT; public static final Tiler.TileAlignment TOP_RIGHT. CENTER_LEFT; public static final Tiler.TileAlignment CENTER_LEFT. CENTER; public static final Tiler.TileAlignment CENTER. CENTER_RIGHT; public static final Tiler.TileAlignment CENTER_RIGHT. BOTTOM_LEFT; public static final Tiler.TileAlignment BOTTOM_LEFT. BOTTOM_CENTER; public static final Tiler.TileAlignment BOTTOM_CENTER. BOTTOM_RIGHT; public static final Tiler.TileAlignment BOTTOM_RIGHT. Method Details. values; public static Tiler.TileAlignment[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/Tiler.TileAlignment.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/package-summary.html:932,Deployability,update,updated,932,". qupath.lib.objects.hierarchy.events (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.objects.hierarchy.events. package qupath.lib.objects.hierarchy.events. Events triggered when the hierarchy changes, such as objects being added, removed or reclassified. Related Packages. Package; Description; qupath.lib.objects.hierarchy. Classes to represent the object hierarchy. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; PathObjectHierarchyEvent. An event class for passing on information about modifications to a PathObjectHierarchy. PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. PathObjectHierarchyListener. A listener for modifications to a PathObjectHierarchy (i.e. PathObjectSelectionListener. A listener to selection changes within a PathObjectSelectionModel. PathObjectSelectionModel. Model for handling selection of single and multiple PathObjects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:999,Deployability,update,updated,999,". PathObjectHierarchyEvent.HierarchyEventType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Enum Class PathObjectHierarchyEvent.HierarchyEventType. java.lang.Object; java.lang.Enum<PathObjectHierarchyEvent.HierarchyEventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum cl",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:1045,Integrability,interface,interfaces,1045,".5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Enum Class PathObjectHierarchyEvent.HierarchyEventType. java.lang.Object; java.lang.Enum<PathObjectHierarchyEvent.HierarchyEventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:870,Modifiability,extend,extends,870,". PathObjectHierarchyEvent.HierarchyEventType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Enum Class PathObjectHierarchyEvent.HierarchyEventType. java.lang.Object; java.lang.Enum<PathObjectHierarchyEvent.HierarchyEventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum cl",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:1056,Modifiability,inherit,inherited,1056,".5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Enum Class PathObjectHierarchyEvent.HierarchyEventType. java.lang.Object; java.lang.Enum<PathObjectHierarchyEvent.HierarchyEventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:1109,Modifiability,extend,extends,1109,"navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Enum Class PathObjectHierarchyEvent.HierarchyEventType. java.lang.Object; java.lang.Enum<PathObjectHierarchyEvent.HierarchyEventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeCo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:2047,Modifiability,inherit,inherited,2047," inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ADDED; public static final PathObjectHierarchyEvent.HierarchyEventType ADDED; An object has been added. REMOVED; public static final PathObjectHierarchyEvent.HierarchyEventType REMOVED; An object has been removed. OTHER_STRUCTURE_CHANGE; public static final PathObjectHierarchyEvent.HierarchyEventType OTHER_STRUCTURE_CHANGE; A more complex structural change was made than simply either adding or removing objects. CHANGE_CLASSIFICATION; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_CLASSIFICATION; A change was made to one or more object classifications. CHANGE_MEASUREMENTS; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_MEASUREMENTS; A change was made to one or more object measureme",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:2210,Modifiability,inherit,inherited,2210,"n added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ADDED; public static final PathObjectHierarchyEvent.HierarchyEventType ADDED; An object has been added. REMOVED; public static final PathObjectHierarchyEvent.HierarchyEventType REMOVED; An object has been removed. OTHER_STRUCTURE_CHANGE; public static final PathObjectHierarchyEvent.HierarchyEventType OTHER_STRUCTURE_CHANGE; A more complex structural change was made than simply either adding or removing objects. CHANGE_CLASSIFICATION; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_CLASSIFICATION; A change was made to one or more object classifications. CHANGE_MEASUREMENTS; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_MEASUREMENTS; A change was made to one or more object measurements. CHANGE_OTHER; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_OTHER; A change was made to one or more objects that is more complex than",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:2158,Security,hash,hashCode,2158,"t Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ADDED; public static final PathObjectHierarchyEvent.HierarchyEventType ADDED; An object has been added. REMOVED; public static final PathObjectHierarchyEvent.HierarchyEventType REMOVED; An object has been removed. OTHER_STRUCTURE_CHANGE; public static final PathObjectHierarchyEvent.HierarchyEventType OTHER_STRUCTURE_CHANGE; A more complex structural change was made than simply either adding or removing objects. CHANGE_CLASSIFICATION; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_CLASSIFICATION; A change was made to one or more object classifications. CHANGE_MEASUREMENTS; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_MEASUREMENTS; A change was made to one or more object measurements. CHANGE_OTHER; public static final PathObjectHierarchyEvent.HierarchyEventType C",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:1563,Usability,simpl,simply,1563,"ventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ADDED; public static final PathObjectHierarchyEvent.HierarchyEventType ADDED; An object has been added. REMOVED; public static final PathObjectHierarchyEvent.HierarchyEventType REMOVED; An object has been removed. OTHER_STRUCTURE_CHANGE; pub",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:2692,Usability,simpl,simply,2692,"dsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ADDED; public static final PathObjectHierarchyEvent.HierarchyEventType ADDED; An object has been added. REMOVED; public static final PathObjectHierarchyEvent.HierarchyEventType REMOVED; An object has been removed. OTHER_STRUCTURE_CHANGE; public static final PathObjectHierarchyEvent.HierarchyEventType OTHER_STRUCTURE_CHANGE; A more complex structural change was made than simply either adding or removing objects. CHANGE_CLASSIFICATION; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_CLASSIFICATION; A change was made to one or more object classifications. CHANGE_MEASUREMENTS; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_MEASUREMENTS; A change was made to one or more object measurements. CHANGE_OTHER; public static final PathObjectHierarchyEvent.HierarchyEventType CHANGE_OTHER; A change was made to one or more objects that is more complex than the other changes allow for. Method Details. values; public static PathObjectHierarchyEvent.HierarchyEventType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static PathObjectHierarchyEvent.HierarchyEventType valueOf(String name); Returns the enum constant of this class with ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:869,Deployability,update,updated,869,". PathObjectHierarchyEvent (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Class PathObjectHierarchyEvent. java.lang.Object; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent. public class PathObjectHierarchyEvent; extends Object; An event class for passing on information about modifications to a PathObjectHierarchy. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent; createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded). Create a hierarchy event indicated objects were added. static PathObjectHierarchyEvent; createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectRemoved). Create a hierarchy event indicating objects were removed. static PathObjectHierarchyEvent; createObjectsChangedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObjectHierarchyEvent.HierarchyEventType type,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Create a hierarchy event indicating objects have changed in a way consistent with the specified event type. static PathObjectHierarchyEvent; createStructureChangeEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject). Create a hierarchy event indicating that the hierarchy structure has been changed. List<PathObject>; getC",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:535,Modifiability,extend,extends,535,". PathObjectHierarchyEvent (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Class PathObjectHierarchyEvent. java.lang.Object; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent. public class PathObjectHierarchyEvent; extends Object; An event class for passing on information about modifications to a PathObjectHierarchy. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent; createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded). Create a hierarchy event indicated objects were added. static PathObjectHierarchyEvent; createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectRemoved). Create a hierarchy event indicating objects were removed. static PathObjectHierarchyEvent; createObjectsChangedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObjectHierarchyEvent.HierarchyEventType type,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Create a hierarchy event indicating objects have changed in a way consistent with the specified event type. static PathObjectHierarchyEvent; createStructureChangeEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject). Create a hierarchy event indicating that the hierarchy structure has been changed. List<PathObject>; getC",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:1599,Modifiability,extend,extends,1599,"ations to a PathObjectHierarchy. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent; createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded). Create a hierarchy event indicated objects were added. static PathObjectHierarchyEvent; createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectRemoved). Create a hierarchy event indicating objects were removed. static PathObjectHierarchyEvent; createObjectsChangedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObjectHierarchyEvent.HierarchyEventType type,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Create a hierarchy event indicating objects have changed in a way consistent with the specified event type. static PathObjectHierarchyEvent; createStructureChangeEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject). Create a hierarchy event indicating that the hierarchy structure has been changed. List<PathObject>; getChangedObjects(). The objects that were affected by whichever changes were made. PathObjectHierarchyEvent.HierarchyEventType; getEventType(). Get the hierarchy event type. PathObjectHierarchy; getHierarchy(). The hierarchy to which this event refers. Object; getSource(). Get the source that triggered the event. PathObject; getStructureChangeBase(). If this is a structure change event, return the base object, i.e. boolean; isAddedOrRemovedEvent(). Returns true if objects have been added or removed from the hierarchy. boolean; isChanging(). Returns true if changes are still being made, so more events w",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:2975,Modifiability,inherit,inherited,2975,"<PathObject>; getChangedObjects(). The objects that were affected by whichever changes were made. PathObjectHierarchyEvent.HierarchyEventType; getEventType(). Get the hierarchy event type. PathObjectHierarchy; getHierarchy(). The hierarchy to which this event refers. Object; getSource(). Get the source that triggered the event. PathObject; getStructureChangeBase(). If this is a structure change event, return the base object, i.e. boolean; isAddedOrRemovedEvent(). Returns true if objects have been added or removed from the hierarchy. boolean; isChanging(). Returns true if changes are still being made, so more events will be fired. boolean; isObjectClassificationEvent(). Returns true if the event indicates that object classifications have changed. boolean; isObjectMeasurementEvent(). Returns true if the event indicates that object measurements have changed. boolean; isStructureChangeEvent(). Returns true if the hierarchy structure has changed, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createStructureChangeEvent; public static PathObjectHierarchyEvent createStructureChangeEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject); Create a hierarchy event indicating that the hierarchy structure has been changed. Parameters:; source - ; hierarchy - ; parentObject - ; Returns:. createObjectAddedEvent; public static PathObjectHierarchyEvent createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded); Create a hierarchy event indicated objects were added. Parameters:; source - ; hierarchy - ; parentObject - ; pathObjectAdded - ; Returns:. createObjectRemovedEvent; public static PathObjectHierarchyEvent createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject pare",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:4375,Modifiability,extend,extends,4375," Parameters:; source - ; hierarchy - ; parentObject - ; Returns:. createObjectAddedEvent; public static PathObjectHierarchyEvent createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded); Create a hierarchy event indicated objects were added. Parameters:; source - ; hierarchy - ; parentObject - ; pathObjectAdded - ; Returns:. createObjectRemovedEvent; public static PathObjectHierarchyEvent createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectRemoved); Create a hierarchy event indicating objects were removed. Parameters:; source - ; hierarchy - ; parentObject - ; pathObjectRemoved - ; Returns:. createObjectsChangedEvent; public static PathObjectHierarchyEvent createObjectsChangedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObjectHierarchyEvent.HierarchyEventType type,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Create a hierarchy event indicating objects have changed in a way consistent with the specified event type. Parameters:; source - ; hierarchy - ; type - ; pathObjects - ; isChanging - ; Returns:. isChanging; public boolean isChanging(); Returns true if changes are still being made, so more events will be fired.; This enables listeners to postpone expensive operations that could be called often until ; this flag is false. Returns:. getHierarchy; public PathObjectHierarchy getHierarchy(); The hierarchy to which this event refers. Returns:. getChangedObjects; public List<PathObject> getChangedObjects(); The objects that were affected by whichever changes were made. Returns:. getEventType; public PathObjectHierarchyEvent.HierarchyEventType getEventType(); Get the hierarchy event type. Returns:. getSource; public Object getSource(); Get the source that triggered the event. Returns:. isStructureChangeEvent; public boolean isStructureChangeEvent(); Returns true if the hierarchy structure has changed",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:3049,Security,hash,hashCode,3049,"y whichever changes were made. PathObjectHierarchyEvent.HierarchyEventType; getEventType(). Get the hierarchy event type. PathObjectHierarchy; getHierarchy(). The hierarchy to which this event refers. Object; getSource(). Get the source that triggered the event. PathObject; getStructureChangeBase(). If this is a structure change event, return the base object, i.e. boolean; isAddedOrRemovedEvent(). Returns true if objects have been added or removed from the hierarchy. boolean; isChanging(). Returns true if changes are still being made, so more events will be fired. boolean; isObjectClassificationEvent(). Returns true if the event indicates that object classifications have changed. boolean; isObjectMeasurementEvent(). Returns true if the event indicates that object measurements have changed. boolean; isStructureChangeEvent(). Returns true if the hierarchy structure has changed, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createStructureChangeEvent; public static PathObjectHierarchyEvent createStructureChangeEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject); Create a hierarchy event indicating that the hierarchy structure has been changed. Parameters:; source - ; hierarchy - ; parentObject - ; Returns:. createObjectAddedEvent; public static PathObjectHierarchyEvent createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded); Create a hierarchy event indicated objects were added. Parameters:; source - ; hierarchy - ; parentObject - ; pathObjectAdded - ; Returns:. createObjectRemovedEvent; public static PathObjectHierarchyEvent createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectRemoved); Create a hierarchy event ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html:691,Integrability,interface,interface,691,". PathObjectHierarchyListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Interface PathObjectHierarchyListener. All Superinterfaces:; EventListener. All Known Implementing Classes:; AnnotationPane, ImageData, PathObjectGridView, PathObjectHierarchyView, QuPathViewer, QuPathViewerPlus, SelectedMeasurementTableView, UndoRedoManager. Functional Interface:; This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference. @FunctionalInterface; public interface PathObjectHierarchyListener; extends EventListener; A listener for modifications to a PathObjectHierarchy (i.e. objects added, removed, classified etc.). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. Method Details. hierarchyChanged; void hierarchyChanged(PathObjectHierarchyEvent event); Notify listeners of a change in the hierarchy or its objects. Parameters:; event - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html:826,Integrability,interface,interface,826,". PathObjectHierarchyListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Interface PathObjectHierarchyListener. All Superinterfaces:; EventListener. All Known Implementing Classes:; AnnotationPane, ImageData, PathObjectGridView, PathObjectHierarchyView, QuPathViewer, QuPathViewerPlus, SelectedMeasurementTableView, UndoRedoManager. Functional Interface:; This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference. @FunctionalInterface; public interface PathObjectHierarchyListener; extends EventListener; A listener for modifications to a PathObjectHierarchy (i.e. objects added, removed, classified etc.). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. Method Details. hierarchyChanged; void hierarchyChanged(PathObjectHierarchyEvent event); Notify listeners of a change in the hierarchy or its objects. Parameters:; event - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html:865,Modifiability,extend,extends,865,". PathObjectHierarchyListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Interface PathObjectHierarchyListener. All Superinterfaces:; EventListener. All Known Implementing Classes:; AnnotationPane, ImageData, PathObjectGridView, PathObjectHierarchyView, QuPathViewer, QuPathViewerPlus, SelectedMeasurementTableView, UndoRedoManager. Functional Interface:; This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference. @FunctionalInterface; public interface PathObjectHierarchyListener; extends EventListener; A listener for modifications to a PathObjectHierarchy (i.e. objects added, removed, classified etc.). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. Method Details. hierarchyChanged; void hierarchyChanged(PathObjectHierarchyEvent event); Notify listeners of a change in the hierarchy or its objects. Parameters:; event - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionListener.html:606,Integrability,interface,interface,606,". PathObjectSelectionListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Interface PathObjectSelectionListener. All Superinterfaces:; EventListener. All Known Implementing Classes:; AnnotationPane, PathObjectHierarchyView, QuPathViewer, QuPathViewerPlus, SelectedMeasurementTableView. public interface PathObjectSelectionListener; extends EventListener; A listener to selection changes within a PathObjectSelectionModel. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Method Details. selectedPathObjectChanged; void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); Fired when the selected objects have changed. Parameters:; pathObjectSelected - the primary selected object; previousObject - the previous primary selected object; allSelected - all currently selected objects (including the primary). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionListener.html:645,Modifiability,extend,extends,645,". PathObjectSelectionListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Interface PathObjectSelectionListener. All Superinterfaces:; EventListener. All Known Implementing Classes:; AnnotationPane, PathObjectHierarchyView, QuPathViewer, QuPathViewerPlus, SelectedMeasurementTableView. public interface PathObjectSelectionListener; extends EventListener; A listener to selection changes within a PathObjectSelectionModel. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Method Details. selectedPathObjectChanged; void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); Fired when the selected objects have changed. Parameters:; pathObjectSelected - the primary selected object; previousObject - the previous primary selected object; allSelected - all currently selected objects (including the primary). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:1519,Availability,avail,available,1519," PathObjectSelectionModel; extends Object; Model for handling selection of single and multiple PathObjects. Author:; Pete Bankhead; See Also:. PathObjectHierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectSelectionModel();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addPathObjectSelectionListener(PathObjectSelectionListener listener). Add listener for selection changes. void; clearSelection(). Clear selection so that no objects are selected. void; deselectObject(PathObject pathObject). Ensure that the specified object is removed from the selection. void; deselectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are deselected. PathObject; getSelectedObject(). Get the current primary selected object. Set<PathObject>; getSelectedObjects(). Get an unmodifiable set containing all the currently-selected objects. ROI; getSelectedROI(). Get the ROI of the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:4988,Availability,avail,available,4988,"ns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObject; public void deselectObject(PathObject pathObject); Ensure that the specified object is removed from the selection. Parameters:; pathObject - . deselectObjects; public void deselectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are deselected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . selectObjects; public void selectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are selected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . setSelectedObject; public void setSelectedObject(PathObject pathObject); Set the specified object to be selected, deselecting all others. Parameters:; pathObject - . getSelectedObject; public PathObject getSelectedObject(); Get the current primary selected object. Returns:. isSelected; public boolean isSelected(PathObject pathObject); Query whether a specific object is selected. Parameters:; pathObject - ; Returns:. getSelectedROI; public ROI getSelectedROI(); Get the ROI of the selected object, if available, or null. Returns:. clearSelection; public void clearSelection(); Clear selection so that no objects are selected. addPathObjectSelectionListener; public void addPathObjectSelectionListener(PathObjectSelectionListener listener); Add listener for selection changes. Parameters:; listener - . removePathObjectSelectionListener; public void removePathObjectSelectionListener(PathObjectSelectionListener listener); Remove listener for selection changes. Parameters:; listener - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:535,Modifiability,extend,extends,535,". PathObjectSelectionModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Class PathObjectSelectionModel. java.lang.Object; qupath.lib.objects.hierarchy.events.PathObjectSelectionModel. public class PathObjectSelectionModel; extends Object; Model for handling selection of single and multiple PathObjects. Author:; Pete Bankhead; See Also:. PathObjectHierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectSelectionModel();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addPathObjectSelectionListener(PathObjectSelectionListener listener). Add listener for selection changes. void; clearSelection(). Clear selection so that no objects are selected. void; deselectObject(PathObject pathObject). Ensure that the specified object is removed from the selection. void; deselectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are deselected. PathObject; getSelectedObject(). Get the current primary selected object. Set<PathObject>; getSelectedObjects(). Get an unmodifiable set containing all the currently-selected objects. ROI; getSelectedROI(). Get the ROI of the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be s",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:1194,Modifiability,extend,extends,1194," Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Class PathObjectSelectionModel. java.lang.Object; qupath.lib.objects.hierarchy.events.PathObjectSelectionModel. public class PathObjectSelectionModel; extends Object; Model for handling selection of single and multiple PathObjects. Author:; Pete Bankhead; See Also:. PathObjectHierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectSelectionModel();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addPathObjectSelectionListener(PathObjectSelectionListener listener). Add listener for selection changes. void; clearSelection(). Clear selection so that no objects are selected. void; deselectObject(PathObject pathObject). Ensure that the specified object is removed from the selection. void; deselectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are deselected. PathObject; getSelectedObject(). Get the current primary selected object. Set<PathObject>; getSelectedObjects(). Get an unmodifiable set containing all the currently-selected objects. ROI; getSelectedROI(). Get the ROI of the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining th",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:1844,Modifiability,extend,extends,1844," Method; Description; void; addPathObjectSelectionListener(PathObjectSelectionListener listener). Add listener for selection changes. void; clearSelection(). Clear selection so that no objects are selected. void; deselectObject(PathObject pathObject). Ensure that the specified object is removed from the selection. void; deselectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are deselected. PathObject; getSelectedObject(). Get the current primary selected object. Set<PathObject>; getSelectedObjects(). Get an unmodifiable set containing all the currently-selected objects. ROI; getSelectedROI(). Get the ROI of the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? exten",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:2262,Modifiability,extend,extends,2262,"hObject; getSelectedObject(). Get the current primary selected object. Set<PathObject>; getSelectedObjects(). Get an unmodifiable set containing all the currently-selected objects. ROI; getSelectedROI(). Get the ROI of the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject); Specify a collection of objects to be selected, and which among them should be the primary.; ; Any previous selection is reset. Parameters:; pathObjects - ; primarySelectedObject - . getSelectedObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:2546,Modifiability,inherit,inherited,2546,"cted(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject); Specify a collection of objects to be selected, and which among them should be the primary.; ; Any previous selection is reset. Parameters:; pathObjects - ; primarySelectedObject - . getSelectedObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(); Returns true if no objects are selected. Returns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:2839,Modifiability,extend,extends,2839,"he specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject); Specify a collection of objects to be selected, and which among them should be the primary.; ; Any previous selection is reset. Parameters:; pathObjects - ; primarySelectedObject - . getSelectedObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(); Returns true if no objects are selected. Returns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:4092,Modifiability,extend,extends,4092,"dObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(); Returns true if no objects are selected. Returns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObject; public void deselectObject(PathObject pathObject); Ensure that the specified object is removed from the selection. Parameters:; pathObject - . deselectObjects; public void deselectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are deselected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . selectObjects; public void selectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are selected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . setSelectedObject; public void setSelectedObject(PathObject pathObject); Set the specified object to be selected, deselecting all others. Parameters:; pathObject - . getSelectedObject; public PathObject getSelectedObject(); Get the current primary selected object. Returns:. isSelected; public boolean isSelected(PathObject pathObject); Query whether a specific object is selected. Parameters:; pathObject - ; Returns:. getSelectedROI; public ROI getSelectedROI(); Get the ROI of the selected object, if available, or null. Returns:. clearSelection; public void clearSelection(); Clear selection so that no objects are",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:4316,Modifiability,extend,extends,4316,"ns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObject; public void deselectObject(PathObject pathObject); Ensure that the specified object is removed from the selection. Parameters:; pathObject - . deselectObjects; public void deselectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are deselected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . selectObjects; public void selectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are selected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . setSelectedObject; public void setSelectedObject(PathObject pathObject); Set the specified object to be selected, deselecting all others. Parameters:; pathObject - . getSelectedObject; public PathObject getSelectedObject(); Get the current primary selected object. Returns:. isSelected; public boolean isSelected(PathObject pathObject); Query whether a specific object is selected. Parameters:; pathObject - ; Returns:. getSelectedROI; public ROI getSelectedROI(); Get the ROI of the selected object, if available, or null. Returns:. clearSelection; public void clearSelection(); Clear selection so that no objects are selected. addPathObjectSelectionListener; public void addPathObjectSelectionListener(PathObjectSelectionListener listener); Add listener for selection changes. Parameters:; listener - . removePathObjectSelectionListener; pub",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:2502,Security,access,accessible,2502,"f the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject); Specify a collection of objects to be selected, and which among them should be the primary.; ; Any previous selection is reset. Parameters:; pathObjects - ; primarySelectedObject - . getSelectedObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(); Returns true if no objects are selected. Returns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:2620,Security,hash,hashCode,2620,". boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be selected, deselecting all others. void; setSelectedObject(PathObject pathObject,; boolean addToSelection). Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. void; setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject). Specify a collection of objects to be selected, and which among them should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject); Specify a collection of objects to be selected, and which among them should be the primary.; ; Any previous selection is reset. Parameters:; pathObjects - ; primarySelectedObject - . getSelectedObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(); Returns true if no objects are selected. Returns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary sele",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:3433,Security,access,accessible,3433," should be the primary. boolean; singleSelection(). Returns true if only one object has been selected, accessible by getSelectedObject();. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectSelectionModel; public PathObjectSelectionModel(). Method Details. setSelectedObjects; public void setSelectedObjects(Collection<? extends PathObject> pathObjects,; PathObject primarySelectedObject); Specify a collection of objects to be selected, and which among them should be the primary.; ; Any previous selection is reset. Parameters:; pathObjects - ; primarySelectedObject - . getSelectedObjects; public Set<PathObject> getSelectedObjects(); Get an unmodifiable set containing all the currently-selected objects. Returns:. noSelection; public boolean noSelection(); Returns true if no objects are selected. Returns:. singleSelection; public boolean singleSelection(); Returns true if only one object has been selected, accessible by getSelectedObject();. Returns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObject; public void deselectObject(PathObject pathObject); Ensure that the specified object is removed from the selection. Parameters:; pathObject - . deselectObjects; public void deselectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are deselected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . selectObjects; public void selectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are selected.; ; The",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:983,Usability,clear,clearSelection,983,". PathObjectSelectionModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Class PathObjectSelectionModel. java.lang.Object; qupath.lib.objects.hierarchy.events.PathObjectSelectionModel. public class PathObjectSelectionModel; extends Object; Model for handling selection of single and multiple PathObjects. Author:; Pete Bankhead; See Also:. PathObjectHierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectSelectionModel();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addPathObjectSelectionListener(PathObjectSelectionListener listener). Add listener for selection changes. void; clearSelection(). Clear selection so that no objects are selected. void; deselectObject(PathObject pathObject). Ensure that the specified object is removed from the selection. void; deselectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are deselected. PathObject; getSelectedObject(). Get the current primary selected object. Set<PathObject>; getSelectedObjects(). Get an unmodifiable set containing all the currently-selected objects. ROI; getSelectedROI(). Get the ROI of the selected object, if available, or null. boolean; isSelected(PathObject pathObject). Query whether a specific object is selected. boolean; noSelection(). Returns true if no objects are selected. void; removePathObjectSelectionListener(PathObjectSelectionListener listener). Remove listener for selection changes. void; selectObjects(Collection<? extends PathObject> pathObjects). Ensure the specified objects are selected. void; setSelectedObject(PathObject pathObject). Set the specified object to be s",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:5018,Usability,clear,clearSelection,5018,"ns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObject; public void deselectObject(PathObject pathObject); Ensure that the specified object is removed from the selection. Parameters:; pathObject - . deselectObjects; public void deselectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are deselected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . selectObjects; public void selectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are selected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . setSelectedObject; public void setSelectedObject(PathObject pathObject); Set the specified object to be selected, deselecting all others. Parameters:; pathObject - . getSelectedObject; public PathObject getSelectedObject(); Get the current primary selected object. Returns:. isSelected; public boolean isSelected(PathObject pathObject); Query whether a specific object is selected. Parameters:; pathObject - ; Returns:. getSelectedROI; public ROI getSelectedROI(); Get the ROI of the selected object, if available, or null. Returns:. clearSelection; public void clearSelection(); Clear selection so that no objects are selected. addPathObjectSelectionListener; public void addPathObjectSelectionListener(PathObjectSelectionListener listener); Add listener for selection changes. Parameters:; listener - . removePathObjectSelectionListener; public void removePathObjectSelectionListener(PathObjectSelectionListener listener); Remove listener for selection changes. Parameters:; listener - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html:5046,Usability,clear,clearSelection,5046,"ns:. setSelectedObject; public void setSelectedObject(PathObject pathObject,; boolean addToSelection); Select the specified object to be the primary selected object, optionally retaining the ; existing selected objects. Parameters:; pathObject - ; addToSelection - add to the existing selection, rather than allowing only the specified object to be selected; See Also:. setSelectedObject(PathObject). deselectObject; public void deselectObject(PathObject pathObject); Ensure that the specified object is removed from the selection. Parameters:; pathObject - . deselectObjects; public void deselectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are deselected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . selectObjects; public void selectObjects(Collection<? extends PathObject> pathObjects); Ensure the specified objects are selected.; ; The selection state of other objects will not be modified. Parameters:; pathObjects - . setSelectedObject; public void setSelectedObject(PathObject pathObject); Set the specified object to be selected, deselecting all others. Parameters:; pathObject - . getSelectedObject; public PathObject getSelectedObject(); Get the current primary selected object. Returns:. isSelected; public boolean isSelected(PathObject pathObject); Query whether a specific object is selected. Parameters:; pathObject - ; Returns:. getSelectedROI; public ROI getSelectedROI(); Get the ROI of the selected object, if available, or null. Returns:. clearSelection; public void clearSelection(); Clear selection so that no objects are selected. addPathObjectSelectionListener; public void addPathObjectSelectionListener(PathObjectSelectionListener listener); Add listener for selection changes. Parameters:; listener - . removePathObjectSelectionListener; public void removePathObjectSelectionListener(PathObjectSelectionListener listener); Remove listener for selection changes. Parameters:; listener - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2676,Integrability,interface,interface,2676,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operati",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2961,Integrability,interface,interface,2961,"er. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3335,Integrability,interface,interface,3335,"t, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParamete",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3593,Integrability,interface,interface,3593,"shCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData)",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3837,Integrability,interface,interface,3837,"ortedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:4346,Integrability,interface,interface,4346,"; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:4828,Integrability,depend,depending,4828,"e: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:356,Modifiability,plugin,plugins,356,". DilateAnnotationPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class DilateAnnotationPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.DilateAnnotationPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class DilateAnnotationPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:435,Modifiability,plugin,plugins,435,". DilateAnnotationPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class DilateAnnotationPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.DilateAnnotationPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class DilateAnnotationPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:473,Modifiability,plugin,plugins,473,". DilateAnnotationPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class DilateAnnotationPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.DilateAnnotationPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class DilateAnnotationPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:522,Modifiability,plugin,plugins,522,". DilateAnnotationPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class DilateAnnotationPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.DilateAnnotationPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class DilateAnnotationPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:699,Modifiability,extend,extends,699,". DilateAnnotationPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class DilateAnnotationPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.DilateAnnotationPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class DilateAnnotationPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:1593,Modifiability,plugin,plugin,1593,"l Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class DilateAnnotationPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getCla",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:1758,Modifiability,plugin,plugin,1758," annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:1801,Modifiability,extend,extends,1801,"hor:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:1966,Modifiability,extend,extends,1966,"annotation expansion. Constructor Summary; Constructors. Constructor; Description; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteract",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2076,Modifiability,plugin,plugin,2076,"ription; DilateAnnotationPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin cou",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2207,Modifiability,inherit,inherited,2207,"RunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, Pat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2239,Modifiability,plugin,plugins,2239,"imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2362,Modifiability,inherit,inherited,2362,"t; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name o",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2394,Modifiability,plugin,plugins,2394,"ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2522,Modifiability,inherit,inherited,2522,"ctly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescrip",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2661,Modifiability,inherit,inherited,2661,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operati",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2697,Modifiability,plugin,plugins,2697,"the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2881,Modifiability,extend,extends,2881,"er. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3048,Modifiability,plugin,plugin,3048,"er. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3378,Modifiability,plugin,plugin,3378,"t, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParamete",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3647,Modifiability,plugin,plugin,3647,"shCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData)",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:4538,Modifiability,extend,extends,4538,"in; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTask",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:4852,Modifiability,plugin,plugin,4852,"e: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2190,Performance,perform,perform,2190,"hod; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:5757,Performance,perform,perform,5757," should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:3943,Safety,detect,detected,3943,"; Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to crea",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:4807,Safety,detect,detection,4807,"String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This wil",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:2596,Security,hash,hashCode,2596,"purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DilateAnnotationPlugin; public DilateAnnotationPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html:5942,Usability,simpl,simply,5942," should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:1008,Integrability,interface,interfaces,1008,"Plugin.LineCap (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins.objects; Enum Class DilateAnnotationPlugin.LineCap. java.lang.Object; java.lang.Enum<DilateAnnotationPlugin.LineCap>; qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. All Implemented Interfaces:; Serializable, Comparable<DilateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAnnotationPlugin.Lin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:396,Modifiability,plugin,plugins,396,". DilateAnnotationPlugin.LineCap (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins.objects; Enum Class DilateAnnotationPlugin.LineCap. java.lang.Object; java.lang.Enum<DilateAnnotationPlugin.LineCap>; qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. All Implemented Interfaces:; Serializable, Comparable<DilateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:533,Modifiability,plugin,plugins,533,". DilateAnnotationPlugin.LineCap (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins.objects; Enum Class DilateAnnotationPlugin.LineCap. java.lang.Object; java.lang.Enum<DilateAnnotationPlugin.LineCap>; qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. All Implemented Interfaces:; Serializable, Comparable<DilateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:775,Modifiability,extend,extends,775,". DilateAnnotationPlugin.LineCap (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins.objects; Enum Class DilateAnnotationPlugin.LineCap. java.lang.Object; java.lang.Enum<DilateAnnotationPlugin.LineCap>; qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. All Implemented Interfaces:; Serializable, Comparable<DilateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:1019,Modifiability,inherit,inherited,1019,"Plugin.LineCap (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins.objects; Enum Class DilateAnnotationPlugin.LineCap. java.lang.Object; java.lang.Enum<DilateAnnotationPlugin.LineCap>; qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. All Implemented Interfaces:; Serializable, Comparable<DilateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAnnotationPlugin.Lin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:1072,Modifiability,extend,extends,1072,"your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins.objects; Enum Class DilateAnnotationPlugin.LineCap. java.lang.Object; java.lang.Enum<DilateAnnotationPlugin.LineCap>; qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. All Implemented Interfaces:; Serializable, Comparable<DilateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAnnotationPlugin.LineCap FLAT; Flat cap. SQUARE; public static final DilateA",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:1629,Modifiability,inherit,inherited,1629,"lateAnnotationPlugin.LineCap>, Constable. Enclosing class:; DilateAnnotationPlugin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAnnotationPlugin.LineCap FLAT; Flat cap. SQUARE; public static final DilateAnnotationPlugin.LineCap SQUARE; Square cap. Method Details. values; public static DilateAnnotationPlugin.LineCap[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static DilateAnnotationPlugin.LineCap valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:1782,Modifiability,inherit,inherited,1782,"lateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAnnotationPlugin.LineCap FLAT; Flat cap. SQUARE; public static final DilateAnnotationPlugin.LineCap SQUARE; Square cap. Method Details. values; public static DilateAnnotationPlugin.LineCap[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static DilateAnnotationPlugin.LineCap valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the spec",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html:1740,Security,hash,hashCode,1740,"gin<T>. public static enum DilateAnnotationPlugin.LineCap; extends Enum<DilateAnnotationPlugin.LineCap>; Line cap to use for annotation expansion.; This can be important when expanding line or polyline annotations to ; determine how the ends are handled. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLAT. Flat cap. ROUND. Round cap. SQUARE. Square cap. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static DilateAnnotationPlugin.LineCap; valueOf(String name). Returns the enum constant of this class with the specified name. static DilateAnnotationPlugin.LineCap[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROUND; public static final DilateAnnotationPlugin.LineCap ROUND; Round cap. FLAT; public static final DilateAnnotationPlugin.LineCap FLAT; Flat cap. SQUARE; public static final DilateAnnotationPlugin.LineCap SQUARE; Square cap. Method Details. values; public static DilateAnnotationPlugin.LineCap[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static DilateAnnotationPlugin.LineCap valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/DilateAnnotationPlugin.LineCap.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2542,Integrability,interface,interface,2542,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & o",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2833,Integrability,interface,interface,2833,"llection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:3207,Integrability,interface,interface,3207,"seArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; ima",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:3465,Integrability,interface,interface,3465,", notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:3709,Integrability,interface,interface,3709,"ortedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice,",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:4079,Integrability,interface,interface,4079," list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:4561,Integrability,depend,depending,4561,"ded, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:359,Modifiability,plugin,plugins,359,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:441,Modifiability,plugin,plugins,441,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:479,Modifiability,plugin,plugins,479,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:528,Modifiability,plugin,plugins,528,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:711,Modifiability,extend,extends,711,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:875,Modifiability,inherit,inherited,875,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:907,Modifiability,plugin,plugins,907,". FillAnnotationHolesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FillAnnotationHolesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:1459,Modifiability,plugin,plugin,1459,"Plugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getCla",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:1624,Modifiability,plugin,plugin,1624,"s:; PathInteractivePlugin<T>, PathPlugin<T>. public class FillAnnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnno",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:1667,Modifiability,extend,extends,1667,"nnotationHolesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method D",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:1832,Modifiability,extend,extends,1832,"d. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathIn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:1942,Modifiability,plugin,plugin,1942,"nteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FillAnnotationHolesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plug",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2073,Modifiability,inherit,inherited,2073,"hodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are require",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2105,Modifiability,plugin,plugins,2105,"ier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class sh",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2228,Modifiability,inherit,inherited,2228,"able> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2260,Modifiability,plugin,plugins,2260,"ed parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for dis",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2388,Modifiability,inherit,inherited,2388,"List. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getD",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2527,Modifiability,inherit,inherited,2527,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & o",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2563,Modifiability,plugin,plugins,2563,"the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no descripti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2753,Modifiability,extend,extends,2753,"llection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2920,Modifiability,plugin,plugin,2920,"llection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:3250,Modifiability,plugin,plugin,3250,"seArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; ima",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:3519,Modifiability,plugin,plugin,3519,", notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:4271,Modifiability,extend,extends,4271," menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTask",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:4585,Modifiability,plugin,plugin,4585,"ded, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2056,Performance,perform,perform,2056,"thod Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotati",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:5490,Performance,perform,perform,5490,"rList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:3815,Safety,detect,detected,3815,"; Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:4540,Safety,detect,detection,4540,"n of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This wil",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:2462,Security,hash,hashCode,2462,"purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. FillAnnotationHolesPlugin; public FillAnnotationHolesPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from inte",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html:5675,Usability,simpl,simply,5675,"rList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FillAnnotationHolesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5404,Deployability,update,update,5404,"idden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2906,Integrability,interface,interface,2906,"bject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root o",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3164,Integrability,interface,interface,3164,"plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden inste",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3408,Integrability,interface,interface,3408,"eters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description cop",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3940,Integrability,depend,depending,3940,"or display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is ne",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:4409,Integrability,interface,interface,4409,"tion copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5033,Integrability,interface,interface,5033,"method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObj",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5306,Integrability,interface,interface,5306,"idden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5536,Integrability,interface,interface,5536,"idden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:364,Modifiability,plugin,plugins,364,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:451,Modifiability,plugin,plugins,451,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:489,Modifiability,plugin,plugins,489,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:538,Modifiability,plugin,plugins,538,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:731,Modifiability,extend,extends,731,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:1016,Modifiability,inherit,inherited,1016,"Plugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:1048,Modifiability,plugin,plugins,1048,"aScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<C",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:1686,Modifiability,plugin,plugin,1686,"ublic class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hash",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:1851,Modifiability,plugin,plugin,1851,"urrently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. ge",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:1894,Modifiability,extend,extends,1894," detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interfa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2059,Modifiability,extend,extends,2059,"ugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box tit",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2169,Modifiability,plugin,plugin,2169," FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2277,Modifiability,plugin,plugin,2277," Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is prov",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2293,Modifiability,inherit,inherited,2293,"id; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2325,Modifiability,plugin,plugins,2325,"ata<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsD",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2448,Modifiability,inherit,inherited,2448,"eterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2480,Modifiability,plugin,plugins,2480,"erList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results,",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2607,Modifiability,inherit,inherited,2607,"task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPare",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2949,Modifiability,plugin,plugin,2949,"bject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root o",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3218,Modifiability,plugin,plugin,3218,"plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden inste",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3650,Modifiability,extend,extends,3650,", wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3964,Modifiability,plugin,plugin,3964,"or display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is ne",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:4329,Modifiability,extend,extends,4329,"tion copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:4496,Modifiability,plugin,plugin,4496,"tion copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5337,Modifiability,plugin,plugin,5337,"idden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5386,Modifiability,plugin,plugin,5386,"idden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:795,Safety,detect,detections,795,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:834,Safety,detect,detections,834,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:914,Safety,detect,detections,914,". FindConvexHullDetectionsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class FindConvexHullDetectionsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class FindConvexHullDetectionsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to identify/remove detections from the convex hull of all detections.; ; Currently works only for TMA cores.; ; Purpose is to remove edge detections, where the tissue quality tends to be lower. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; FindConvexHullDetectionsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, base",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3514,Safety,detect,detected,3514,"dWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin cou",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:3919,Safety,detect,detection,3919,"tion copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:2681,Security,hash,hashCode,2681,"lugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FindConvexHullDetectionsPlugin; public FindConvexHullDetectionsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(I",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:700,Integrability,interface,interfaces,700,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:334,Modifiability,plugin,plugins,334,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:370,Modifiability,plugin,plugins,370,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:481,Modifiability,plugin,plugins,481,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:547,Modifiability,plugin,plugins,547,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:670,Modifiability,plugin,plugins,670,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:1205,Safety,detect,detections,1205,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:1244,Safety,detect,detections,1244,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:1479,Safety,detect,detection,1479,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html:722,Testability,log,logging,722,". qupath.lib.plugins.objects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.objects. package qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesClassesEnum Classes. Class; Description; DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. FillAnnotationHolesPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. FindConvexHullDetectionsPlugin<T>. Plugin to identify/remove detections from the convex hull of all detections. RefineAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. ShapeFeaturesPlugin<T>. Add shape measurements. SmoothFeaturesPlugin<T>. Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function. SplitAnnotationsPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. TileClassificationsToAnnotationsPlugin<T>. Plugin to merge classified tiles into annotation objects. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:227,Modifiability,plugin,plugins,227,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:326,Modifiability,plugin,plugins,326,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:375,Modifiability,plugin,plugins,375,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:410,Modifiability,plugin,plugins,410,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:470,Modifiability,plugin,plugins,470,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:516,Modifiability,plugin,plugins,516,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:563,Modifiability,plugin,plugins,563,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:633,Modifiability,plugin,plugins,633,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:687,Modifiability,plugin,plugins,687,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:744,Modifiability,plugin,plugins,744,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:806,Modifiability,plugin,plugins,806,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:861,Modifiability,plugin,plugins,861,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:912,Modifiability,plugin,plugins,912,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:964,Modifiability,plugin,plugins,964,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html:1166,Modifiability,plugin,plugins,1166,". qupath.lib.plugins.objects Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.objects. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. qupath.lib.plugins.objects.DilateAnnotationPlugin<T>; qupath.lib.plugins.objects.FillAnnotationHolesPlugin<T>; qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2516,Integrability,interface,interface,2516,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & opera",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2803,Integrability,interface,interface,2803,". Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:3177,Integrability,interface,interface,3177," parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParamete",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:3435,Integrability,interface,interface,3435,"Code, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData)",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:3679,Integrability,interface,interface,3679,"ortedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:4188,Integrability,interface,interface,4188,"; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:4670,Integrability,depend,depending,4670,"e: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:357,Modifiability,plugin,plugins,357,". RefineAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class RefineAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:437,Modifiability,plugin,plugins,437,". RefineAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class RefineAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:475,Modifiability,plugin,plugins,475,". RefineAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class RefineAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:524,Modifiability,plugin,plugins,524,". RefineAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class RefineAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:703,Modifiability,extend,extends,703,". RefineAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class RefineAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:1433,Modifiability,plugin,plugin,1433,"h.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.RefineAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getCla",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:1598,Modifiability,plugin,plugin,1598,"mplemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:1641,Modifiability,extend,extends,1641,". public class RefineAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Detai",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:1806,Modifiability,extend,extends,1806,"hor:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathIntera",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:1916,Modifiability,plugin,plugin,1916,"iption; RefineAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2047,Modifiability,inherit,inherited,2047,"RunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2079,Modifiability,plugin,plugins,2079,"imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2202,Modifiability,inherit,inherited,2202,"t; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2234,Modifiability,plugin,plugins,2234,"ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2362,Modifiability,inherit,inherited,2362,"ctly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2501,Modifiability,inherit,inherited,2501,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & opera",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2537,Modifiability,plugin,plugins,2537,"the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2723,Modifiability,extend,extends,2723,". Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2890,Modifiability,plugin,plugin,2890,". Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:3220,Modifiability,plugin,plugin,3220," parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParamete",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:3489,Modifiability,plugin,plugin,3489,"Code, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData)",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:4380,Modifiability,extend,extends,4380,"in; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTask",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:4694,Modifiability,plugin,plugin,4694,"e: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2030,Performance,perform,perform,2030,"hod; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:5599,Performance,perform,perform,5599," should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:3785,Safety,detect,detected,3785,"; Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to crea",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:4649,Safety,detect,detection,4649,"String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This wil",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:2436,Security,hash,hashCode,2436,"purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. RefineAnnotationsPlugin; public RefineAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html:5784,Usability,simpl,simply,5784," should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/RefineAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2356,Integrability,interface,interface,2356,"ription of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2567,Integrability,interface,interface,2567,"tion<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that anal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2825,Integrability,interface,interface,2825,"nt objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:3069,Integrability,interface,interface,3069,"ib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Sp",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:3409,Integrability,interface,interface,3409,"ugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any informat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:4481,Integrability,interface,interface,4481,"tClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:4963,Integrability,depend,depending,4963,"tClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:353,Modifiability,plugin,plugins,353,". ShapeFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class ShapeFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParamet",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:429,Modifiability,plugin,plugins,429,". ShapeFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class ShapeFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParamet",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:467,Modifiability,plugin,plugins,467,". ShapeFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class ShapeFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParamet",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:516,Modifiability,plugin,plugins,516,". ShapeFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class ShapeFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParamet",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:687,Modifiability,extend,extends,687,". ShapeFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class ShapeFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParamet",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1367,Modifiability,plugin,plugin,1367,"cts; Class ShapeFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1532,Modifiability,plugin,plugin,1532,".ShapeFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1575,Modifiability,extend,extends,1575,"d Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class ShapeFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Add shape measurements. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1740,Modifiability,extend,extends,1740,"Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1850,Modifiability,plugin,plugin,1850,"; ShapeFeaturesPlugin(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interfa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1877,Modifiability,inherit,inherited,1877,"All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:1909,Modifiability,plugin,plugins,1909,"Concrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; I",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2032,Modifiability,inherit,inherited,2032,"arentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2064,Modifiability,plugin,plugins,2064,"> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2202,Modifiability,inherit,inherited,2202,"eturn a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to displa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2341,Modifiability,inherit,inherited,2341,"ription of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2377,Modifiability,plugin,plugins,2377,"se & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2610,Modifiability,plugin,plugin,2610,"tion<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that anal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2879,Modifiability,plugin,plugin,2879,"nt objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:3329,Modifiability,extend,extends,3329,"ugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any informat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:3496,Modifiability,plugin,plugin,3496,"ugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any informat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:4673,Modifiability,extend,extends,4673,"tClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:4987,Modifiability,plugin,plugin,4987,"tClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:3175,Safety,detect,detected,3175,"ierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; task",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:4942,Safety,detect,detection,4942,"tClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html:2276,Security,hash,hashCode,2276,"to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. ShapeFeaturesPlugin; public ShapeFeaturesPlugin(); Constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/ShapeFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2926,Integrability,interface,interface,2926,"of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathOb",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3147,Integrability,interface,interface,3147,"cts,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that anal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3405,Integrability,interface,interface,3405,"ighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3649,Integrability,interface,interface,3649,".AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Sp",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3989,Integrability,interface,interface,3989,"lugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:5546,Integrability,interface,interface,5546,"eTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Parameters:; pathObjects - ; measurements - ; fwhmPixels - ; fwhmString - ; withinClass - ; useLegacyNames - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:6018,Integrability,depend,depending,6018,"eTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Parameters:; pathObjects - ; measurements - ; fwhmPixels - ; fwhmString - ; withinClass - ; useLegacyNames - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:354,Modifiability,plugin,plugins,354,". SmoothFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SmoothFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:431,Modifiability,plugin,plugins,431,". SmoothFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SmoothFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:469,Modifiability,plugin,plugins,469,". SmoothFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SmoothFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:518,Modifiability,plugin,plugins,518,". SmoothFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SmoothFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:691,Modifiability,extend,extends,691,". SmoothFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SmoothFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:1599,Modifiability,plugin,plugin,1599,"d Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Meth",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:1764,Modifiability,plugin,plugin,1764,"nts for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:1962,Modifiability,extend,extends,1962,". Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Co",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2072,Modifiability,plugin,plugin,2072,"resPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); De",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2447,Modifiability,inherit,inherited,2447,"t ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2479,Modifiability,plugin,plugins,2479,"any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & opera",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2602,Modifiability,inherit,inherited,2602,"pose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2634,Modifiability,plugin,plugins,2634,"etLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2772,Modifiability,inherit,inherited,2772,"ay. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2911,Modifiability,inherit,inherited,2911,"of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathOb",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2947,Modifiability,plugin,plugins,2947,"on<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObj",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3190,Modifiability,plugin,plugin,3190,"cts,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that anal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3459,Modifiability,plugin,plugin,3459,"ighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3909,Modifiability,extend,extends,3909,"lugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:4076,Modifiability,plugin,plugin,4076,"lugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:6042,Modifiability,plugin,plugin,6042,"eTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Parameters:; pathObjects - ; measurements - ; fwhmPixels - ; fwhmString - ; withinClass - ; useLegacyNames - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:771,Safety,detect,detection,771,". SmoothFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SmoothFeaturesPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SmoothFeaturesPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SmoothFeaturesPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to supplement the measurements for detection objects with the weighted sum of measurements ; from nearby objects, using weights derived from a 2D Gaussian function.; ; This effectively adds in some contextual information. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SmoothFeaturesPlugin(). Default constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:3755,Safety,detect,detected,3755,"date, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; task",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:5997,Safety,detect,detection,5997,"eTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . smoothMeasurements; public static void smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames); Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Parameters:; pathObjects - ; measurements - ; fwhmPixels - ; fwhmString - ; withinClass - ; useLegacyNames - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html:2846,Security,hash,hashCode,2846,"eData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. static void; smoothMeasurements(List<PathObject> pathObjects,; List<String> measurements,; double fwhmPixels,; String fwhmString,; boolean withinClass,; boolean useLegacyNames). Using the centroids of the ROIs within PathObjects, 'smooth' measurements by summing up the corresponding measurements of; nearby objects, weighted by centroid distance. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SmoothFeaturesPlugin; public SmoothFeaturesPlugin(); Default constructor. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SmoothFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2527,Integrability,interface,interface,2527,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operati",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2812,Integrability,interface,interface,2812,"er. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:3186,Integrability,interface,interface,3186,"t, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; ima",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:3444,Integrability,interface,interface,3444,"shCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:3688,Integrability,interface,interface,3688,"ortedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice,",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:4058,Integrability,interface,interface,4058," list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:4540,Integrability,depend,depending,4540,"ded, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:356,Modifiability,plugin,plugins,356,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:435,Modifiability,plugin,plugins,435,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:473,Modifiability,plugin,plugins,473,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:522,Modifiability,plugin,plugins,522,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:699,Modifiability,extend,extends,699,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:863,Modifiability,inherit,inherited,863,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:895,Modifiability,plugin,plugins,895,". SplitAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class SplitAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:1444,Modifiability,plugin,plugin,1444,".AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.objects.SplitAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getCla",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:1609,Modifiability,plugin,plugin,1609,"erfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:1652,Modifiability,extend,extends,1652," SplitAnnotationsPlugin<T>; extends AbstractInteractivePlugin<T>; Plugin to create new annotations by expanding the size of existing annotations. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:1817,Modifiability,extend,extends,1817,"head. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteract",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:1927,Modifiability,plugin,plugin,1927,"ctInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SplitAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin cou",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2058,Modifiability,inherit,inherited,2058,"hodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, Pat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2090,Modifiability,plugin,plugins,2090,"ier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2213,Modifiability,inherit,inherited,2213,"able> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name o",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2245,Modifiability,plugin,plugins,2245,"ed parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2373,Modifiability,inherit,inherited,2373,"List. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescrip",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2512,Modifiability,inherit,inherited,2512,"hort one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operati",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2548,Modifiability,plugin,plugins,2548,"the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2732,Modifiability,extend,extends,2732,"er. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2899,Modifiability,plugin,plugin,2899,"er. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:3229,Modifiability,plugin,plugin,3229,"t, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; ima",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:3498,Modifiability,plugin,plugin,3498,"shCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:4250,Modifiability,extend,extends,4250," menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTask",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:4564,Modifiability,plugin,plugin,4564,"ded, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2041,Performance,perform,perform,2041,"thod Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). Returns an empty ParameterList. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:5469,Performance,perform,perform,5469,"rList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:3794,Safety,detect,detected,3794,"; Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:4519,Safety,detect,detection,4519,"n of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This wil",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:2447,Security,hash,hashCode,2447,"purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SplitAnnotationsPlugin; public SplitAnnotationsPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html:5654,Usability,simpl,simply,5654,"rList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Returns an empty ParameterList. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Description copied from class: AbstractPlugin; Get a collection of tasks to perform.; ; This will be called from AbstractPlugin.runPlugin(TaskRunner, ImageData, String) after a call to AbstractPlugin.parseArgument(ImageData, String). The default implementation simply calls AbstractPlugin.getParentObjects(ImageData), then AbstractPlugin.addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Overrides:; getTasks in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/SplitAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2493,Integrability,interface,interface,2493,"ription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<?",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2729,Integrability,interface,interface,2729,"ection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that anal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2987,Integrability,interface,interface,2987,"n could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3231,Integrability,interface,interface,3231,"; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3571,Integrability,interface,interface,3571,"tor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDef",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3927,Integrability,interface,interface,3927,"escription copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:4810,Integrability,interface,interface,4810," description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<T> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:372,Modifiability,plugin,plugins,372,". TileClassificationsToAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class TileClassificationsToAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:467,Modifiability,plugin,plugins,467,". TileClassificationsToAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class TileClassificationsToAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:505,Modifiability,plugin,plugins,505,". TileClassificationsToAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class TileClassificationsToAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:554,Modifiability,plugin,plugins,554,". TileClassificationsToAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class TileClassificationsToAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:601,Modifiability,plugin,plugins,601,". TileClassificationsToAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class TileClassificationsToAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:810,Modifiability,extend,extends,810,". TileClassificationsToAnnotationsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.objects; Class TileClassificationsToAnnotationsPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:1531,Modifiability,plugin,plugin,1531,"ivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlug",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:1696,Modifiability,plugin,plugin,1696,"nted Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TileClassificationsToAnnotationsPlugin<T>; extends AbstractDetectionPlugin<T>; Plugin to merge classified tiles into annotation objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String g",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:1877,Modifiability,extend,extends,1877,"objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog bo",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:1987,Modifiability,plugin,plugin,1987,"uctor; Description; TileClassificationsToAnnotationsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Descri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2014,Modifiability,inherit,inherited,2014,"ugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief de",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2046,Modifiability,plugin,plugins,2046,"All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2169,Modifiability,inherit,inherited,2169,"T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String g",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2201,Modifiability,plugin,plugins,2201,"arentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription()",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2339,Modifiability,inherit,inherited,2339,"> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2478,Modifiability,inherit,inherited,2478,"ription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<?",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2514,Modifiability,plugin,plugins,2514,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSup",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2772,Modifiability,plugin,plugin,2772,"ection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that anal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3041,Modifiability,plugin,plugin,3041,"n could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3491,Modifiability,extend,extends,3491,"tor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDef",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3658,Modifiability,plugin,plugin,3658,"tor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDef",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:3337,Safety,detect,detected,3337,". Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html:2413,Security,hash,hashCode,2413,"information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TileClassificationsToAnnotationsPlugin; public TileClassificationsToAnnotationsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/TileClassificationsToAnnotationsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3227,Availability,avail,available,3227,"Code, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last val",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:2408,Integrability,interface,interface,2408," if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(Boolean value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(Boolean value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:2632,Integrability,interface,interface,2632," value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(Boolean value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boole",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:2874,Integrability,interface,interface,2874,"tStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(Boolean value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3033,Integrability,interface,interface,3033," the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3201,Integrability,depend,depending,3201,"Code, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last val",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3359,Integrability,interface,interface,3359," String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3468,Integrability,interface,interface,3468," classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3569,Integrability,interface,interface,3569,"boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). g",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3678,Integrability,interface,interface,3678," be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3806,Integrability,interface,interface,3806,"cate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3901,Integrability,interface,interface,3901,"e a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specif",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:3991,Integrability,interface,interface,3991," hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toS",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4152,Integrability,interface,interface,4152,"r list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Paramete",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4252,Integrability,interface,interface,4252,"settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4355,Integrability,interface,interface,4355,"interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copie",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4481,Integrability,interface,interface,4481,"eter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4633,Integrability,interface,interface,4633,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4737,Integrability,interface,interface,4737,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4845,Integrability,interface,interface,4845,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:4939,Integrability,interface,interface,4939,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:5137,Integrability,interface,interface,5137,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:5267,Integrability,interface,interface,5267,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:5367,Integrability,interface,interface,5367,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:5506,Integrability,interface,interface,5506,". Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Boolean getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Boolean getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Boolean getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(Boolean value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:350,Modifiability,plugin,plugins,350,". BooleanParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class BooleanParameter. java.lang.Object; qupath.lib.plugins.parameters.BooleanParameter. All Implemented Interfaces:; Serializable, Parameter<Boolean>. public class BooleanParameter; extends Object; Parameter that can take on true of false value - or null.; ; May be displayed as a checkbox. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Boolean; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Boolean>; duplicate(). Create a new Parameter with the same text and value. Boolean; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Boolean; getValue(). Get the current set value (may be null). Boolean; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(Boolean value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. bool",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:423,Modifiability,plugin,plugins,423,". BooleanParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class BooleanParameter. java.lang.Object; qupath.lib.plugins.parameters.BooleanParameter. All Implemented Interfaces:; Serializable, Parameter<Boolean>. public class BooleanParameter; extends Object; Parameter that can take on true of false value - or null.; ; May be displayed as a checkbox. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Boolean; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Boolean>; duplicate(). Create a new Parameter with the same text and value. Boolean; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Boolean; getValue(). Get the current set value (may be null). Boolean; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(Boolean value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. bool",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:554,Modifiability,extend,extends,554,". BooleanParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class BooleanParameter. java.lang.Object; qupath.lib.plugins.parameters.BooleanParameter. All Implemented Interfaces:; Serializable, Parameter<Boolean>. public class BooleanParameter; extends Object; Parameter that can take on true of false value - or null.; ; May be displayed as a checkbox. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Boolean; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Boolean>; duplicate(). Create a new Parameter with the same text and value. Boolean; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Boolean; getValue(). Get the current set value (may be null). Boolean; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(Boolean value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. bool",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:2107,Modifiability,inherit,inherited,2107,"t(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Boolean; getValue(). Get the current set value (may be null). Boolean; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(Boolean value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(Boolean value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; Thi",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html:2181,Security,hash,hashCode,2181,"layed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Boolean; getValue(). Get the current set value (may be null). Boolean; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(Boolean value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(Boolean value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Boolean lastValue. Method Details. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. isValidInput; public boolean isValidInput(Boolean value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. duplicate; public Parameter<Boolean> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameter",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/BooleanParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:666,Availability,down,down,666,". ChoiceParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ChoiceParameter<S>. java.lang.Object; qupath.lib.plugins.parameters.ChoiceParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. public class ChoiceParameter<S>; extends Object; Parameter that supports a list of choices.; ; May be displayed as a drop-down list. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected List<S>; choices;  ; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. List<S>; getChoices(). Get a list of available choices. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:1067,Availability,avail,available,1067,"wser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ChoiceParameter<S>. java.lang.Object; qupath.lib.plugins.parameters.ChoiceParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. public class ChoiceParameter<S>; extends Object; Parameter that supports a list of choices.; ; May be displayed as a drop-down list. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected List<S>; choices;  ; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. List<S>; getChoices(). Get a list of available choices. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only work for string choices... boolean; setValue(S value). Set the Param",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:2409,Availability,avail,available,2409,"e (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only work for string choices... boolean; setValue(S value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. choices; protected List<S> choices. lastValue; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. usin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3350,Availability,avail,available,3350,"Value; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:2514,Integrability,interface,interface,2514,"xt(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only work for string choices... boolean; setValue(S value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. choices; protected List<S> choices. lastValue; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:2997,Integrability,interface,interface,2997,"y work for string choices... boolean; setValue(S value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. choices; protected List<S> choices. lastValue; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3156,Integrability,interface,interface,3156,".lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. choices; protected List<S> choices. lastValue; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.s",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3324,Integrability,depend,depending,3324,"Value; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3482,Integrability,interface,interface,3482,"escription copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3591,Integrability,interface,interface,3591,". Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3692,Integrability,interface,interface,3692,"tValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public S",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3795,Integrability,interface,interface,3795,".. for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:3923,Integrability,interface,interface,3923,"urns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); De",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4012,Integrability,interface,interface,4012,"er; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Spec",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4102,Integrability,interface,interface,4102,"dden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; publi",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4263,Integrability,interface,interface,4263,"f a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4363,Integrability,interface,interface,4363," or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpTe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4460,Integrability,interface,interface,4460,"; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from in",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4586,Integrability,interface,interface,4586,"m interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4738,Integrability,interface,interface,4738,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4842,Integrability,interface,interface,4842,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:4944,Integrability,interface,interface,4944,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:5038,Integrability,interface,interface,5038,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:5236,Integrability,interface,interface,5236,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:5366,Integrability,interface,interface,5366,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:5466,Integrability,interface,interface,5466,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:5605,Integrability,interface,interface,5605,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:349,Modifiability,plugin,plugins,349,". ChoiceParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ChoiceParameter<S>. java.lang.Object; qupath.lib.plugins.parameters.ChoiceParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. public class ChoiceParameter<S>; extends Object; Parameter that supports a list of choices.; ; May be displayed as a drop-down list. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected List<S>; choices;  ; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. List<S>; getChoices(). Get a list of available choices. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:424,Modifiability,plugin,plugins,424,". ChoiceParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ChoiceParameter<S>. java.lang.Object; qupath.lib.plugins.parameters.ChoiceParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. public class ChoiceParameter<S>; extends Object; Parameter that supports a list of choices.; ; May be displayed as a drop-down list. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected List<S>; choices;  ; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. List<S>; getChoices(). Get a list of available choices. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:577,Modifiability,extend,extends,577,". ChoiceParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ChoiceParameter<S>. java.lang.Object; qupath.lib.plugins.parameters.ChoiceParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. public class ChoiceParameter<S>; extends Object; Parameter that supports a list of choices.; ; May be displayed as a drop-down list. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected List<S>; choices;  ; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. List<S>; getChoices(). Get a list of available choices. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:2132,Modifiability,inherit,inherited,2132,"e Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only work for string choices... boolean; setValue(S value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. choices; protected List<S> choices. lastValue; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Descripti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:2206,Security,hash,hashCode,2206,"a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only work for string choices... boolean; setValue(S value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. choices; protected List<S> choices. lastValue; protected S lastValue. Method Details. getChoices; public List<S> getChoices(); Get a list of available choices. Returns:. isValidInput; public boolean isValidInput(S value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); This will only work for string choices... for other types it will always return false; and fail to set the lastValue. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<S> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should n",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:3943,Availability,avail,available,3943,"setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:2795,Integrability,interface,interface,2795,"lasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Double lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Double lastValue. Method Details. setValue; public boolean setValue(Double lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be display",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:3590,Integrability,interface,interface,3590,"ls. lastValue; protected Double lastValue. Method Details. setValue; public boolean setValue(Double lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue();",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:3749,Integrability,interface,interface,3749,"k using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:3917,Integrability,depend,depending,3917,"setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4075,Integrability,interface,interface,4075," necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Param",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4184,Integrability,interface,interface,4184,"lue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4285,Integrability,interface,interface,4285,"opied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4393,Integrability,interface,interface,4393,"is as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4521,Integrability,interface,interface,4521,"licate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4615,Integrability,interface,interface,4615,"ate a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description cop",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4705,Integrability,interface,interface,4705,"an hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as oppose",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4866,Integrability,interface,interface,4866,"ter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Para",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:4966,Integrability,interface,interface,4966,"t settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5068,Integrability,interface,interface,5068," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5194,Integrability,interface,interface,5194," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5346,Integrability,interface,interface,5346," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5450,Integrability,interface,interface,5450," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5625,Integrability,interface,interface,5625," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5755,Integrability,interface,interface,5755," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5855,Integrability,interface,interface,5855," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:5994,Integrability,interface,interface,5994," known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Double getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:349,Modifiability,plugin,plugins,349,". DoubleParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class DoubleParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Double>; qupath.lib.plugins.parameters.DoubleParameter. All Implemented Interfaces:; Serializable, Parameter<Double>. public class DoubleParameter; extends NumericParameter<Double>; Parameter to represent a floating point numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Double; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Double>; duplicate(). Create a new Parameter with the same text and value. Double; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Double; getValue(). Get the current set value (may be null). Double; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:421,Modifiability,plugin,plugins,421,". DoubleParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class DoubleParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Double>; qupath.lib.plugins.parameters.DoubleParameter. All Implemented Interfaces:; Serializable, Parameter<Double>. public class DoubleParameter; extends NumericParameter<Double>; Parameter to represent a floating point numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Double; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Double>; duplicate(). Create a new Parameter with the same text and value. Double; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Double; getValue(). Get the current set value (may be null). Double; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:477,Modifiability,plugin,plugins,477,". DoubleParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class DoubleParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Double>; qupath.lib.plugins.parameters.DoubleParameter. All Implemented Interfaces:; Serializable, Parameter<Double>. public class DoubleParameter; extends NumericParameter<Double>; Parameter to represent a floating point numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Double; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Double>; duplicate(). Create a new Parameter with the same text and value. Double; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Double; getValue(). Get the current set value (may be null). Double; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:605,Modifiability,extend,extends,605,". DoubleParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class DoubleParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Double>; qupath.lib.plugins.parameters.DoubleParameter. All Implemented Interfaces:; Serializable, Parameter<Double>. public class DoubleParameter; extends NumericParameter<Double>; Parameter to represent a floating point numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Double; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Double>; duplicate(). Create a new Parameter with the same text and value. Double; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Double; getValue(). Get the current set value (may be null). Double; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:2231,Modifiability,inherit,inherited,2231,"String; getPrompt(). Get some prompt text that may be displayed to a user. Double; getValue(). Get the current set value (may be null). Double; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Double lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Double lastValue. Method Details. setValue; public boolean setValue(Double lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:2263,Modifiability,plugin,plugins,2263,"me prompt text that may be displayed to a user. Double; getValue(). Get the current set value (may be null). Double; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Double lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Double lastValue. Method Details. setValue; public boolean setValue(Double lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:2458,Modifiability,inherit,inherited,2458,"n set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Double lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Double lastValue. Method Details. setValue; public boolean setValue(Double lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class Numeric",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:2532,Security,hash,hashCode,2532,"a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Double lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Double lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Double lastValue. Method Details. setValue; public boolean setValue(Double lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Double>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3450,Availability,avail,available,3450,". Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:2846,Integrability,interface,interface,2846,"(so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. isTitle; protected boolean isTitle. lastValue; protected String lastValue. Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValu",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3097,Integrability,interface,interface,3097,"; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. isTitle; protected boolean isTitle. lastValue; protected String lastValue. Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue();",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3256,Integrability,interface,interface,3256,"lize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. isTitle; protected boolean isTitle. lastValue; protected String lastValue. Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3424,Integrability,depend,depending,3424,". Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3582,Integrability,interface,interface,3582,"lic boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Param",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3691,Integrability,interface,interface,3691,"e value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3792,Integrability,interface,interface,3792,"ale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:3900,Integrability,interface,interface,3900,"ng classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4028,Integrability,interface,interface,4028,"licate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(St",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4122,Integrability,interface,interface,4122,"ate a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4212,Integrability,interface,interface,4212,"an hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4373,Integrability,interface,interface,4373,"ter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to nu",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4473,Integrability,interface,interface,4473,"t settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public Stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4575,Integrability,interface,interface,4575,"n interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parame",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4701,Integrability,interface,interface,4701," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4853,Integrability,interface,interface,4853," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:4957,Integrability,interface,interface,4957," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:5064,Integrability,interface,interface,5064," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:5158,Integrability,interface,interface,5158," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:5282,Integrability,interface,interface,5282," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:5412,Integrability,interface,interface,5412," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:5512,Integrability,interface,interface,5512," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:5651,Integrability,interface,interface,5651," from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:348,Modifiability,plugin,plugins,348,". EmptyParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class EmptyParameter. java.lang.Object; qupath.lib.plugins.parameters.EmptyParameter. All Implemented Interfaces:; Serializable, Parameter<String>. public class EmptyParameter; extends Object; Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; isTitle;  ; protected String; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<String>; duplicate(). Create a new Parameter with the same text and value. String; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isTitle(). Returns true if the parameter should be considered a title. boolean; isValidInput(String value). Always returns false. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; St",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:419,Modifiability,plugin,plugins,419,". EmptyParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class EmptyParameter. java.lang.Object; qupath.lib.plugins.parameters.EmptyParameter. All Implemented Interfaces:; Serializable, Parameter<String>. public class EmptyParameter; extends Object; Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; isTitle;  ; protected String; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<String>; duplicate(). Create a new Parameter with the same text and value. String; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isTitle(). Returns true if the parameter should be considered a title. boolean; isValidInput(String value). Always returns false. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; St",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:545,Modifiability,extend,extends,545,". EmptyParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class EmptyParameter. java.lang.Object; qupath.lib.plugins.parameters.EmptyParameter. All Implemented Interfaces:; Serializable, Parameter<String>. public class EmptyParameter; extends Object; Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; isTitle;  ; protected String; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<String>; duplicate(). Create a new Parameter with the same text and value. String; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isTitle(). Returns true if the parameter should be considered a title. boolean; isValidInput(String value). Always returns false. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; St",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:2199,Modifiability,inherit,inherited,2199,"g of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isTitle(). Returns true if the parameter should be considered a title. boolean; isValidInput(String value). Always returns false. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. isTitle; protected boolean isTitle. lastValue; protected String lastValue. Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void set",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html:2273,Security,hash,hashCode,2273,"some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isTitle(). Returns true if the parameter should be considered a title. boolean; isValidInput(String value). Always returns false. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. isTitle; protected boolean isTitle. lastValue; protected String lastValue. Method Details. isTitle; public boolean isTitle(); Returns true if the parameter should be considered a title. It may therefore be displayed differently. Returns:. isValidInput; public boolean isValidInput(String value); Always returns false. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. toString; public String toString(). duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Paramete",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/EmptyParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:3942,Availability,avail,available,3942,"alueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last val",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:2789,Integrability,interface,interface,2789,"s should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Integer lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Integer lastValue. Method Details. setValue; public boolean setValue(Integer lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be di",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:3589,Integrability,interface,interface,3589,"stValue; protected Integer lastValue. Method Details. setValue; public boolean setValue(Integer lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:3748,Integrability,interface,interface,3748,"ng clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:3916,Integrability,depend,depending,3916,"alueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last val",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4074,Integrability,interface,interface,4074,"cessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4183,Integrability,interface,interface,4183,"e - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4284,Integrability,interface,interface,4284,"ied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). g",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4393,Integrability,interface,interface,4393," as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4521,Integrability,interface,interface,4521,"cate; public Parameter<Integer> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString()",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4616,Integrability,interface,interface,4616,"e a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4706,Integrability,interface,interface,4706," hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as oppos",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4867,Integrability,interface,interface,4867,"r list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Par",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:4967,Integrability,interface,interface,4967,"settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5070,Integrability,interface,interface,5070,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5196,Integrability,interface,interface,5196,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5348,Integrability,interface,interface,5348,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5452,Integrability,interface,interface,5452,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5627,Integrability,interface,interface,5627,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5757,Integrability,interface,interface,5757,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5857,Integrability,interface,interface,5857,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:5996,Integrability,interface,interface,5996,"own in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Integer getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Integer getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public Integer getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:346,Modifiability,plugin,plugins,346,". IntParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class IntParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Integer>; qupath.lib.plugins.parameters.IntParameter. All Implemented Interfaces:; Serializable, Parameter<Integer>. public class IntParameter; extends NumericParameter<Integer>; Parameter to represent an integer numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Integer; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Integer>; duplicate(). Create a new Parameter with the same text and value. Integer; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Integer; getValue(). Get the current set value (may be null). Integer; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:415,Modifiability,plugin,plugins,415,". IntParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class IntParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Integer>; qupath.lib.plugins.parameters.IntParameter. All Implemented Interfaces:; Serializable, Parameter<Integer>. public class IntParameter; extends NumericParameter<Integer>; Parameter to represent an integer numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Integer; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Integer>; duplicate(). Create a new Parameter with the same text and value. Integer; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Integer; getValue(). Get the current set value (may be null). Integer; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:472,Modifiability,plugin,plugins,472,". IntParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class IntParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Integer>; qupath.lib.plugins.parameters.IntParameter. All Implemented Interfaces:; Serializable, Parameter<Integer>. public class IntParameter; extends NumericParameter<Integer>; Parameter to represent an integer numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Integer; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Integer>; duplicate(). Create a new Parameter with the same text and value. Integer; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Integer; getValue(). Get the current set value (may be null). Integer; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:595,Modifiability,extend,extends,595,". IntParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class IntParameter. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<Integer>; qupath.lib.plugins.parameters.IntParameter. All Implemented Interfaces:; Serializable, Parameter<Integer>. public class IntParameter; extends NumericParameter<Integer>; Parameter to represent an integer numeric value.; ; May be bounded. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected Integer; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<Integer>; duplicate(). Create a new Parameter with the same text and value. Integer; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. Integer; getValue(). Get the current set value (may be null). Integer; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:2223,Modifiability,inherit,inherited,2223,"ng; getPrompt(). Get some prompt text that may be displayed to a user. Integer; getValue(). Get the current set value (may be null). Integer; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Integer lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Integer lastValue. Method Details. setValue; public boolean setValue(Integer lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public bo",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:2255,Modifiability,plugin,plugins,2255,"rompt text that may be displayed to a user. Integer; getValue(). Get the current set value (may be null). Integer; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Integer lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Integer lastValue. Method Details. setValue; public boolean setValue(Integer lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:2450,Modifiability,inherit,inherited,2450,"set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Integer lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Integer lastValue. Method Details. setValue; public boolean setValue(Integer lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class Nu",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html:2524,Security,hash,hashCode,2524,"meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. void; resetValue(). Set last value to null (so default can be used). boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setValue(Integer lastValue). Set the last value; this will apply a range check using clipping. boolean; setValueWithBoundsCheck(Integer lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class qupath.lib.plugins.parameters.NumericParameter; getLowerBound, getUnit, getUpperBound, hasLowerAndUpperBounds, hasLowerBound, hasUpperBound, isUnbounded, isValidInput, setRange, setStringLastValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected Integer lastValue. Method Details. setValue; public boolean setValue(Integer lastValue); Set the last value; this will apply a range check using clipping. Specified by:; setValue in interface Parameter<Integer>; Parameters:; lastValue - ; Returns:. setValueWithBoundsCheck; public boolean setValueWithBoundsCheck(Integer lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Integer>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Integer>; Parameters:; val - ; Returns:. duplicate; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/IntParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:1436,Availability,avail,available,1436,"ber>. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. Direct Known Subclasses:; DoubleParameter, IntParameter. public abstract class NumericParameter<S extends Number>; extends Object; Abstract parameter to represent a numeric value. Author:; Pete Bankhead; See Also:. DoubleParameter; IntParameter; Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. double; getLowerBound(). Retrieve the lower bound. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getUnit(). Get the unit to display for this parameter (may be null if no unit is available). double; getUpperBound(). Retrieve the upper bound. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; hasLowerAndUpperBounds(). Returns true if this parameter has both lower and upper bounds constraining valid values. boolean; hasLowerBound(). Returns true if the parameter has a valid lower bound. boolean; hasUpperBound(). Returns true if the parameter has a valid upper bound. boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isUnbounded(). Returns true if this neither a lower nor an upper bound constraining valid values. boolean; isValidInput(S value). Numbers are considered valid if they are not NaN. void; resetValue(). Set last value to null (so default can be used). abstract boolean; setDoubleLastValue(do",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:4700,Availability,avail,available,4700,"lues. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might not appear; to make a difference. If shown through a ParameterPanel (in QuPath's JavaFX GUI) it is better to; set limits via the panel rather than directly using this method. Parameters:; minValue - ; maxValue - . hasLowerBound; public boolean hasLowerBound(); Returns true if the parameter has a valid lower bound. Returns:. hasUpperBound; public boolean hasUpperBound(); Returns true if the parameter has a valid upper bound. Returns:. getUnit; public String getUnit(); Get the unit to display for this parameter (may be null if no unit is available). Returns:. setValueWithBoundsCheck; public abstract boolean setValueWithBoundsCheck(S lastValue); Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copi",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:5855,Availability,avail,available,5855,"the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:3226,Integrability,interface,interface,3226,"n; isValidInput(S value). Numbers are considered valid if they are not NaN. void; resetValue(). Set last value to null (so default can be used). abstract boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. void; setRange(double minValue,; double maxValue). Set the upper and lower bounds. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. abstract boolean; setValueWithBoundsCheck(S lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might not appear; to make a difference. If shown through a ParameterPan",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:4079,Integrability,depend,depending,4079,"uals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might not appear; to make a difference. If shown through a ParameterPanel (in QuPath's JavaFX GUI) it is better to; set limits via the panel rather than directly using this method. Parameters:; minValue - ; maxValue - . hasLowerBound; public boolean hasLowerBound(); Returns true if the parameter has a valid lower bound. Returns:. hasUpperBound; public boolean hasUpperBound(); Returns true if the parameter has a valid upper bound. Returns:. getUnit; public String getUnit(); Get the unit to display for this parameter (may be null if no unit is available). Returns:. setValueWithBoundsCheck; public abstract boolean setValueWithBoundsCheck(S lastValue); Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:5445,Integrability,interface,interface,5445," parameter has a valid lower bound. Returns:. hasUpperBound; public boolean hasUpperBound(); Returns true if the parameter has a valid upper bound. Returns:. getUnit; public String getUnit(); Get the unit to display for this parameter (may be null if no unit is available). Returns:. setValueWithBoundsCheck; public abstract boolean setValueWithBoundsCheck(S lastValue); Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:5661,Integrability,interface,interface,5661," parameter (may be null if no unit is available). Returns:. setValueWithBoundsCheck; public abstract boolean setValueWithBoundsCheck(S lastValue); Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.s",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:5829,Integrability,depend,depending,5829,"the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:5987,Integrability,interface,interface,5987,"DoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6096,Integrability,interface,interface,6096," this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6197,Integrability,interface,interface,6197,"); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public S",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6300,Integrability,interface,interface,6300," valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6428,Integrability,interface,interface,6428,"ption copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); De",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6517,Integrability,interface,interface,6517,"ay need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Spec",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6607,Integrability,interface,interface,6607,"dden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; publi",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6768,Integrability,interface,interface,6768,"f a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6868,Integrability,interface,interface,6868," or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpTe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:6965,Integrability,interface,interface,6965,"; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from in",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7091,Integrability,interface,interface,7091,"m interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7243,Integrability,interface,interface,7243,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7347,Integrability,interface,interface,7347,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7449,Integrability,interface,interface,7449,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7543,Integrability,interface,interface,7543,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7741,Integrability,interface,interface,7741,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7871,Integrability,interface,interface,7871,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:7971,Integrability,interface,interface,7971,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:8110,Integrability,interface,interface,8110,"is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public S getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(S value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:350,Modifiability,plugin,plugins,350,". NumericParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class NumericParameter<S extends Number>. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. Direct Known Subclasses:; DoubleParameter, IntParameter. public abstract class NumericParameter<S extends Number>; extends Object; Abstract parameter to represent a numeric value. Author:; Pete Bankhead; See Also:. DoubleParameter; IntParameter; Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. double; getLowerBound(). Retrieve the lower bound. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getUnit(). Get the unit to display for this parameter (may be null if no unit is available). double; getUpperBound(). Retrieve the upper bound. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; hasLowerAndUpperBounds(). Returns true if this parameter has both lower and upper bounds constraining valid values. boolean; hasLowerBound(). Returns true if the parameter has a valid lower bound. boolean; hasUpperBound(). Returns true if the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:395,Modifiability,extend,extends,395,". NumericParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class NumericParameter<S extends Number>. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. Direct Known Subclasses:; DoubleParameter, IntParameter. public abstract class NumericParameter<S extends Number>; extends Object; Abstract parameter to represent a numeric value. Author:; Pete Bankhead; See Also:. DoubleParameter; IntParameter; Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. double; getLowerBound(). Retrieve the lower bound. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getUnit(). Get the unit to display for this parameter (may be null if no unit is available). double; getUpperBound(). Retrieve the upper bound. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; hasLowerAndUpperBounds(). Returns true if this parameter has both lower and upper bounds constraining valid values. boolean; hasLowerBound(). Returns true if the parameter has a valid lower bound. boolean; hasUpperBound(). Returns true if the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:441,Modifiability,plugin,plugins,441,". NumericParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class NumericParameter<S extends Number>. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. Direct Known Subclasses:; DoubleParameter, IntParameter. public abstract class NumericParameter<S extends Number>; extends Object; Abstract parameter to represent a numeric value. Author:; Pete Bankhead; See Also:. DoubleParameter; IntParameter; Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. double; getLowerBound(). Retrieve the lower bound. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getUnit(). Get the unit to display for this parameter (may be null if no unit is available). double; getUpperBound(). Retrieve the upper bound. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; hasLowerAndUpperBounds(). Returns true if this parameter has both lower and upper bounds constraining valid values. boolean; hasLowerBound(). Returns true if the parameter has a valid lower bound. boolean; hasUpperBound(). Returns true if the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:660,Modifiability,extend,extends,660,". NumericParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class NumericParameter<S extends Number>. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. Direct Known Subclasses:; DoubleParameter, IntParameter. public abstract class NumericParameter<S extends Number>; extends Object; Abstract parameter to represent a numeric value. Author:; Pete Bankhead; See Also:. DoubleParameter; IntParameter; Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. double; getLowerBound(). Retrieve the lower bound. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getUnit(). Get the unit to display for this parameter (may be null if no unit is available). double; getUpperBound(). Retrieve the upper bound. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; hasLowerAndUpperBounds(). Returns true if this parameter has both lower and upper bounds constraining valid values. boolean; hasLowerBound(). Returns true if the parameter has a valid lower bound. boolean; hasUpperBound(). Returns true if the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:677,Modifiability,extend,extends,677,". NumericParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class NumericParameter<S extends Number>. java.lang.Object; qupath.lib.plugins.parameters.NumericParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. Direct Known Subclasses:; DoubleParameter, IntParameter. public abstract class NumericParameter<S extends Number>; extends Object; Abstract parameter to represent a numeric value. Author:; Pete Bankhead; See Also:. DoubleParameter; IntParameter; Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. double; getLowerBound(). Retrieve the lower bound. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getUnit(). Get the unit to display for this parameter (may be null if no unit is available). double; getUpperBound(). Retrieve the upper bound. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; hasLowerAndUpperBounds(). Returns true if this parameter has both lower and upper bounds constraining valid values. boolean; hasLowerBound(). Returns true if the parameter has a valid lower bound. boolean; hasUpperBound(). Returns true if the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:3082,Modifiability,inherit,inherited,3082,"for the parameter. boolean; isUnbounded(). Returns true if this neither a lower nor an upper bound constraining valid values. boolean; isValidInput(S value). Numbers are considered valid if they are not NaN. void; resetValue(). Set last value to null (so default can be used). abstract boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. void; setRange(double minValue,; double maxValue). Set the upper and lower bounds. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. abstract boolean; setValueWithBoundsCheck(S lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:3211,Modifiability,inherit,inherited,3211,"n; isValidInput(S value). Numbers are considered valid if they are not NaN. void; resetValue(). Set last value to null (so default can be used). abstract boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. void; setRange(double minValue,; double maxValue). Set the upper and lower bounds. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. abstract boolean; setValueWithBoundsCheck(S lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might not appear; to make a difference. If shown through a ParameterPan",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:3247,Modifiability,plugin,plugins,3247,"bers are considered valid if they are not NaN. void; resetValue(). Set last value to null (so default can be used). abstract boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. void; setRange(double minValue,; double maxValue). Set the upper and lower bounds. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. abstract boolean; setValueWithBoundsCheck(S lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might not appear; to make a difference. If shown through a ParameterPanel (in QuPath's JavaFX GUI) ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:3326,Modifiability,extend,extends,3326," value to null (so default can be used). abstract boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. void; setRange(double minValue,; double maxValue). Set the upper and lower bounds. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. abstract boolean; setValueWithBoundsCheck(S lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might not appear; to make a difference. If shown through a ParameterPanel (in QuPath's JavaFX GUI) it is better to; set limits via the panel rather than directly using this me",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:3156,Security,hash,hashCode,3156,"ther a lower nor an upper bound constraining valid values. boolean; isValidInput(S value). Numbers are considered valid if they are not NaN. void; resetValue(). Set last value to null (so default can be used). abstract boolean; setDoubleLastValue(double val). A class for setting the numeric value as a double (subclasses should convert this as needed). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. void; setRange(double minValue,; double maxValue). Set the upper and lower bounds. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. abstract boolean; setValueWithBoundsCheck(S lastValue). Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.parameters.Parameter; duplicate. Field Details. lastValue; protected S extends Number lastValue. Method Details. hasLowerAndUpperBounds; public boolean hasLowerAndUpperBounds(); Returns true if this parameter has both lower and upper bounds constraining valid values. Returns:. isUnbounded; public boolean isUnbounded(); Returns true if this neither a lower nor an upper bound constraining valid values. Returns:. getLowerBound; public double getLowerBound(); Retrieve the lower bound. May be Double.NEGATIVE_INFINITY if the parameter has no lower bound. Returns:. getUpperBound; public double getUpperBound(); Retrieve the upper bound. May be Double.POSITIVE_INFINITY if the parameter has no upper bound. Returns:. setRange; public void setRange(double minValue,; double maxValue); Set the upper and lower bounds.; ; Note: depending on how the parameter is displayed (or if it is displayed) this might ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:706,Integrability,interface,interfaces,706,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:337,Modifiability,plugin,plugins,337,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:376,Modifiability,plugin,plugins,376,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:539,Modifiability,plugin,plugins,539,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:605,Modifiability,plugin,plugins,605,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:676,Modifiability,plugin,plugins,676,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:1296,Modifiability,extend,extends,1296,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html:728,Testability,log,logging,728,". qupath.lib.plugins.parameters (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.parameters. package qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClasses. Class; Description; BooleanParameter. Parameter that can take on true of false value - or null. ChoiceParameter<S>. Parameter that supports a list of choices. DoubleParameter. Parameter to represent a floating point numeric value. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. IntParameter. Parameter to represent an integer numeric value. NumericParameter<S extends Number>. Abstract parameter to represent a numeric value. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. StringParameter. Parameter to represent a String value. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:13,Modifiability,plugin,plugins,13,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:230,Modifiability,plugin,plugins,230,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:332,Modifiability,plugin,plugins,332,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:380,Modifiability,plugin,plugins,380,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:430,Modifiability,plugin,plugins,430,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:476,Modifiability,plugin,plugins,476,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:527,Modifiability,plugin,plugins,527,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:574,Modifiability,plugin,plugins,574,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:618,Modifiability,plugin,plugins,618,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:697,Modifiability,plugin,plugins,697,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:765,Modifiability,plugin,plugins,765,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:820,Modifiability,plugin,plugins,820,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html:889,Modifiability,plugin,plugins,889,. qupath.lib.plugins.parameters Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.parameters. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.parameters.BooleanParameter; qupath.lib.plugins.parameters.ChoiceParameter<S>; qupath.lib.plugins.parameters.EmptyParameter; qupath.lib.plugins.parameters.NumericParameter<S>. qupath.lib.plugins.parameters.DoubleParameter; qupath.lib.plugins.parameters.IntParameter. qupath.lib.plugins.parameters.ParameterList (implements java.io.Serializable); qupath.lib.plugins.parameters.StringParameter. Interface Hierarchy. qupath.lib.plugins.parameters.ParameterChangeListener; qupath.lib.plugins.parameters.Parameterizable; java.io.Serializable. qupath.lib.plugins.parameters.Parameter<S>. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html:3296,Availability,avail,available,3296,"implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. Method Details. getDefaultValue; S getDefaultValue(); Get a default value to use if the Parameter has not been otherwise set. Returns:. setValue; boolean setValue(S value); Set the Parameter to have a specified value. Parameters:; value - ; Returns:. setStringLastValue; boolean setStringLastValue(Locale locale,; String value); Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. resetValue; void resetValue(); Set last value to null (so default can be used). getValue; S getValue(); Get the current set value (may be null). Returns:; See Also:. setValue(S); getValueOrDefault(). getValueOrDefault; S getValueOrDefault(); Get the current set value, or any default if no value has been set. Returns:; See Also:. setValue(S); getValue(). getPrompt; String getPrompt(); Get some prompt text that may be displayed to a user. Returns:. isValidInput; boolean isValidInput(S value); Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setHidden; void setHidden(boolean hidden); Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Parameters:; hidden - . isHidden; boolean isHidden(); Test is the 'hidden' flag is set for the parameter. Returns:. duplicate; Parameter<S> duplicate(); Create a new Parameter with the same text and value. Returns:. hasHelpText; boolean hasHelpText(); Query whether getHelpText() returns a meaningful String (as opposed to null). Returns:. getHelpText; String getHelpText(); Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html:604,Integrability,interface,interface,604,". Parameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface Parameter<S>. Type Parameters:; S - . All Superinterfaces:; Serializable. All Known Implementing Classes:; BooleanParameter, ChoiceParameter, DoubleParameter, EmptyParameter, IntParameter, NumericParameter, StringParameter. public interface Parameter<S>; extends Serializable; Interface defining algorithm parameters, which need to be displayed to users somehow. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. Method Deta",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html:3270,Integrability,depend,depending,3270,"implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. Method Details. getDefaultValue; S getDefaultValue(); Get a default value to use if the Parameter has not been otherwise set. Returns:. setValue; boolean setValue(S value); Set the Parameter to have a specified value. Parameters:; value - ; Returns:. setStringLastValue; boolean setStringLastValue(Locale locale,; String value); Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. resetValue; void resetValue(); Set last value to null (so default can be used). getValue; S getValue(); Get the current set value (may be null). Returns:; See Also:. setValue(S); getValueOrDefault(). getValueOrDefault; S getValueOrDefault(); Get the current set value, or any default if no value has been set. Returns:; See Also:. setValue(S); getValue(). getPrompt; String getPrompt(); Get some prompt text that may be displayed to a user. Returns:. isValidInput; boolean isValidInput(S value); Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setHidden; void setHidden(boolean hidden); Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Parameters:; hidden - . isHidden; boolean isHidden(); Test is the 'hidden' flag is set for the parameter. Returns:. duplicate; Parameter<S> duplicate(); Create a new Parameter with the same text and value. Returns:. hasHelpText; boolean hasHelpText(); Query whether getHelpText() returns a meaningful String (as opposed to null). Returns:. getHelpText; String getHelpText(); Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html:343,Modifiability,plugin,plugins,343,". Parameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface Parameter<S>. Type Parameters:; S - . All Superinterfaces:; Serializable. All Known Implementing Classes:; BooleanParameter, ChoiceParameter, DoubleParameter, EmptyParameter, IntParameter, NumericParameter, StringParameter. public interface Parameter<S>; extends Serializable; Interface defining algorithm parameters, which need to be displayed to users somehow. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. Method Deta",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html:628,Modifiability,extend,extends,628,". Parameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface Parameter<S>. Type Parameters:; S - . All Superinterfaces:; Serializable. All Known Implementing Classes:; BooleanParameter, ChoiceParameter, DoubleParameter, EmptyParameter, IntParameter, NumericParameter, StringParameter. public interface Parameter<S>; extends Serializable; Interface defining algorithm parameters, which need to be displayed to users somehow. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(S value). Set the Parameter to have a specified value. Method Deta",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterChangeListener.html:470,Integrability,interface,interface,470,". ParameterChangeListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface ParameterChangeListener. All Known Implementing Classes:; HistogramDisplay. public interface ParameterChangeListener; Interface for objects that need to be notified when parameters have their values changed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; parameterChanged(ParameterList parameterList,; String key,; boolean isAdjusting). Notify listener that a parameter value has changed. Method Details. parameterChanged; void parameterChanged(ParameterList parameterList,; String key,; boolean isAdjusting); Notify listener that a parameter value has changed. Parameters:; parameterList - list containing the parameter; key - key to identify the parameter; isAdjusting - if the parameter is in the process of being changed. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterChangeListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterChangeListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterChangeListener.html:357,Modifiability,plugin,plugins,357,". ParameterChangeListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface ParameterChangeListener. All Known Implementing Classes:; HistogramDisplay. public interface ParameterChangeListener; Interface for objects that need to be notified when parameters have their values changed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; parameterChanged(ParameterList parameterList,; String key,; boolean isAdjusting). Notify listener that a parameter value has changed. Method Details. parameterChanged; void parameterChanged(ParameterList parameterList,; String key,; boolean isAdjusting); Notify listener that a parameter value has changed. Parameters:; parameterList - list containing the parameter; key - key to identify the parameter; isAdjusting - if the parameter is in the process of being changed. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterChangeListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterChangeListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameterizable.html:403,Integrability,interface,interface,403,. Parameterizable (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface Parameterizable. public interface Parameterizable; Interface for indicating that the implementing class takes adjustable parameters. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ParameterList; getParameterList(). Get the parameter list associated with the class. Method Details. getParameterList; ParameterList getParameterList(); Get the parameter list associated with the class. Returns:. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameterizable.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameterizable.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameterizable.html:349,Modifiability,plugin,plugins,349,. Parameterizable (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Interface Parameterizable. public interface Parameterizable; Interface for indicating that the implementing class takes adjustable parameters. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ParameterList; getParameterList(). Get the parameter list associated with the class. Method Details. getParameterList; ParameterList getParameterList(); Get the parameter list associated with the class. Returns:. ,MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/Parameterizable.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/Parameterizable.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:5051,Deployability,update,updateParameterList,5051,"ey). Get a integer parameter value (or its default) for the specified key. Map<String,Object>; getKeyValueParameters(boolean includeHidden). Returns a map of keys and their corresponding parameter values. static String; getParameterListJSON(Map<String,?> map,; String delimiter). Deprecated.; use convertToJson(Map) instead. static String; getParameterListJSON(ParameterList params,; String delimiter). Deprecated.; use convertToJson(ParameterList) instead. Map<String,Parameter<?>>; getParameters(). Returns a map of keys and their corresponding parameters. String; getStringParameterValue(String key). Get a String parameter value (or its default) for the specified key. boolean; removeEmptyParameters(). Remove all empty parameters from this list. Parameter<?>; removeParameter(String key). Remove a parameter from this list. void; setHiddenParameters(boolean hidden,; String... keys). Set the 'hidden' flag for parameters with the specified keys. static void; updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale). Update a ParameterList with the values specified in a map. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ParameterList; public ParameterList(). Method Details. setHiddenParameters; public void setHiddenParameters(boolean hidden,; String... keys); Set the 'hidden' flag for parameters with the specified keys.; This can be used to notify any consumer that certain parameters are not required, ; or otherwise should not be presented to the user. Parameters:; hidden - ; keys - . duplicate; public ParameterList duplicate(); Create a deep copy of this parameter list. Returns:. addDoubleParameter; public ParameterList addDoubleParameter(String key,; String prompt,; double defaultValue); Add a double parameter to this list. Parameters:; key - ; prompt - ; defaultValue - ; Returns:. addDoubleParameter; public ParameterList addDoublePar",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:11710,Deployability,update,updateParameterList,11710,"ed key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no integer parameter exists for the specified key. getStringParameterValue; public String getStringParameterValue(String key); Get a String parameter value (or its default) for the specified key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no String parameter exists for the specified key. getChoiceParameterValue; public Object getChoiceParameterValue(String key); Get a choice parameter value (or its default) for the specified key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no choice parameter exists for the specified key. removeParameter; public Parameter<?> removeParameter(String key); Remove a parameter from this list. Parameters:; key - ; Returns:. removeEmptyParameters; public boolean removeEmptyParameters(); Remove all empty parameters from this list. Returns:. updateParameterList; public static void updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale); Update a ParameterList with the values specified in a map. Parameters:; params - ; mapNew - ; locale - The Locale to use for any parsing required. equalParameters; public static boolean equalParameters(ParameterList params1,; ParameterList params2); Check whether two parameter lists contain the same parameters with the same values (or defaults, if no values are set).; ; Note: 'hidden' status is ignored for parameters. Parameters:; params1 - ; params2 - ; Returns:; true if the two lists contain the same parameters, and return the same results for getValueOrDefault() for all matching parameters. getParameterListJSON; @Deprecated; public static String getParameterListJSON(ParameterList params,; String delimiter); Deprecated.; use convertToJson(ParameterList) instead. Get a JSON representation of a ParameterList's contents.; ; Note that the current Locale will not be applied to format numbers, and a decimal point will always be used. Parameters:; params -",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:11750,Deployability,update,updateParameterList,11750,"ed key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no integer parameter exists for the specified key. getStringParameterValue; public String getStringParameterValue(String key); Get a String parameter value (or its default) for the specified key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no String parameter exists for the specified key. getChoiceParameterValue; public Object getChoiceParameterValue(String key); Get a choice parameter value (or its default) for the specified key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no choice parameter exists for the specified key. removeParameter; public Parameter<?> removeParameter(String key); Remove a parameter from this list. Parameters:; key - ; Returns:. removeEmptyParameters; public boolean removeEmptyParameters(); Remove all empty parameters from this list. Returns:. updateParameterList; public static void updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale); Update a ParameterList with the values specified in a map. Parameters:; params - ; mapNew - ; locale - The Locale to use for any parsing required. equalParameters; public static boolean equalParameters(ParameterList params1,; ParameterList params2); Check whether two parameter lists contain the same parameters with the same values (or defaults, if no values are set).; ; Note: 'hidden' status is ignored for parameters. Parameters:; params1 - ; params2 - ; Returns:; true if the two lists contain the same parameters, and return the same results for getValueOrDefault() for all matching parameters. getParameterListJSON; @Deprecated; public static String getParameterListJSON(ParameterList params,; String delimiter); Deprecated.; use convertToJson(ParameterList) instead. Get a JSON representation of a ParameterList's contents.; ; Note that the current Locale will not be applied to format numbers, and a decimal point will always be used. Parameters:; params -",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:347,Modifiability,plugin,plugins,347,". ParameterList (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ParameterList. java.lang.Object; qupath.lib.plugins.parameters.ParameterList. All Implemented Interfaces:; Serializable. public class ParameterList; extends Object; implements Serializable; A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs.; ; Each Parameter requires a key to be associated with it.; ; The order or parameters is maintained. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; ParameterList();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; ParameterList; addBooleanParameter(String key,; String prompt,; boolean defaultValue). Add a boolean parameter. ParameterList; addBooleanParameter(String key,; String prompt,; boolean defaultValue,; String helpText). Add a boolean parameter, with help text. <S> ParameterList; addChoiceParameter(String key,; String prompt,; S defaultValue,; List<S> choices). Add a choice parameter, with an list of choices. <S> ParameterList; addChoiceParameter(String key,; String prompt,; S defaultValue,; List<S> choices,; String helpText). Add a choice parameter, with an list of choices and help text. ParameterList; addDoubleParameter(String key,; String prompt,; double defaultValue). Add a double parameter to this list. ParameterList; addDoubleParameter(String key,; String prompt,; double defaultValue,; String unit,; double lowerBound,; double upperBound,; String helpText). Add a bounded double parameter to this list. ParameterList; addDoubleParameter(String key,; String p",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:417,Modifiability,plugin,plugins,417,". ParameterList (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ParameterList. java.lang.Object; qupath.lib.plugins.parameters.ParameterList. All Implemented Interfaces:; Serializable. public class ParameterList; extends Object; implements Serializable; A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs.; ; Each Parameter requires a key to be associated with it.; ; The order or parameters is maintained. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; ParameterList();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; ParameterList; addBooleanParameter(String key,; String prompt,; boolean defaultValue). Add a boolean parameter. ParameterList; addBooleanParameter(String key,; String prompt,; boolean defaultValue,; String helpText). Add a boolean parameter, with help text. <S> ParameterList; addChoiceParameter(String key,; String prompt,; S defaultValue,; List<S> choices). Add a choice parameter, with an list of choices. <S> ParameterList; addChoiceParameter(String key,; String prompt,; S defaultValue,; List<S> choices,; String helpText). Add a choice parameter, with an list of choices and help text. ParameterList; addDoubleParameter(String key,; String prompt,; double defaultValue). Add a double parameter to this list. ParameterList; addDoubleParameter(String key,; String prompt,; double defaultValue,; String unit,; double lowerBound,; double upperBound,; String helpText). Add a bounded double parameter to this list. ParameterList; addDoubleParameter(String key,; String p",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:522,Modifiability,extend,extends,522,". ParameterList (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ParameterList. java.lang.Object; qupath.lib.plugins.parameters.ParameterList. All Implemented Interfaces:; Serializable. public class ParameterList; extends Object; implements Serializable; A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs.; ; Each Parameter requires a key to be associated with it.; ; The order or parameters is maintained. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; ParameterList();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; ParameterList; addBooleanParameter(String key,; String prompt,; boolean defaultValue). Add a boolean parameter. ParameterList; addBooleanParameter(String key,; String prompt,; boolean defaultValue,; String helpText). Add a boolean parameter, with help text. <S> ParameterList; addChoiceParameter(String key,; String prompt,; S defaultValue,; List<S> choices). Add a choice parameter, with an list of choices. <S> ParameterList; addChoiceParameter(String key,; String prompt,; S defaultValue,; List<S> choices,; String helpText). Add a choice parameter, with an list of choices and help text. ParameterList; addDoubleParameter(String key,; String prompt,; double defaultValue). Add a double parameter to this list. ParameterList; addDoubleParameter(String key,; String prompt,; double defaultValue,; String unit,; double lowerBound,; double upperBound,; String helpText). Add a bounded double parameter to this list. ParameterList; addDoubleParameter(String key,; String p",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:5205,Modifiability,inherit,inherited,5205,"ncludeHidden). Returns a map of keys and their corresponding parameter values. static String; getParameterListJSON(Map<String,?> map,; String delimiter). Deprecated.; use convertToJson(Map) instead. static String; getParameterListJSON(ParameterList params,; String delimiter). Deprecated.; use convertToJson(ParameterList) instead. Map<String,Parameter<?>>; getParameters(). Returns a map of keys and their corresponding parameters. String; getStringParameterValue(String key). Get a String parameter value (or its default) for the specified key. boolean; removeEmptyParameters(). Remove all empty parameters from this list. Parameter<?>; removeParameter(String key). Remove a parameter from this list. void; setHiddenParameters(boolean hidden,; String... keys). Set the 'hidden' flag for parameters with the specified keys. static void; updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale). Update a ParameterList with the values specified in a map. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ParameterList; public ParameterList(). Method Details. setHiddenParameters; public void setHiddenParameters(boolean hidden,; String... keys); Set the 'hidden' flag for parameters with the specified keys.; This can be used to notify any consumer that certain parameters are not required, ; or otherwise should not be presented to the user. Parameters:; hidden - ; keys - . duplicate; public ParameterList duplicate(); Create a deep copy of this parameter list. Returns:. addDoubleParameter; public ParameterList addDoubleParameter(String key,; String prompt,; double defaultValue); Add a double parameter to this list. Parameters:; key - ; prompt - ; defaultValue - ; Returns:. addDoubleParameter; public ParameterList addDoubleParameter(String key,; String prompt,; double defaultValue,; String unit,; String helpText); Add a double parameter to this list, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:5279,Security,hash,hashCode,5279,"alues. static String; getParameterListJSON(Map<String,?> map,; String delimiter). Deprecated.; use convertToJson(Map) instead. static String; getParameterListJSON(ParameterList params,; String delimiter). Deprecated.; use convertToJson(ParameterList) instead. Map<String,Parameter<?>>; getParameters(). Returns a map of keys and their corresponding parameters. String; getStringParameterValue(String key). Get a String parameter value (or its default) for the specified key. boolean; removeEmptyParameters(). Remove all empty parameters from this list. Parameter<?>; removeParameter(String key). Remove a parameter from this list. void; setHiddenParameters(boolean hidden,; String... keys). Set the 'hidden' flag for parameters with the specified keys. static void; updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale). Update a ParameterList with the values specified in a map. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ParameterList; public ParameterList(). Method Details. setHiddenParameters; public void setHiddenParameters(boolean hidden,; String... keys); Set the 'hidden' flag for parameters with the specified keys.; This can be used to notify any consumer that certain parameters are not required, ; or otherwise should not be presented to the user. Parameters:; hidden - ; keys - . duplicate; public ParameterList duplicate(); Create a deep copy of this parameter list. Returns:. addDoubleParameter; public ParameterList addDoubleParameter(String key,; String prompt,; double defaultValue); Add a double parameter to this list. Parameters:; key - ; prompt - ; defaultValue - ; Returns:. addDoubleParameter; public ParameterList addDoubleParameter(String key,; String prompt,; double defaultValue,; String unit,; String helpText); Add a double parameter to this list, optionally including a unit and help text. Parameters:; key - ; prompt -",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3158,Availability,avail,available,3158,"ashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:2313,Integrability,interface,interface,2313,"et value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(String value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:2590,Integrability,interface,interface,2590,"f a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:2805,Integrability,interface,interface,2805," setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue();",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:2964,Integrability,interface,interface,2964,"Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. P",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3132,Integrability,depend,depending,3132,"ashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3290,Integrability,interface,interface,3290,"n copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Param",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3399,Integrability,interface,interface,3399,"ers:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3500,Integrability,interface,interface,3500,"ublic boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3608,Integrability,interface,interface,3608,"ast value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3736,Integrability,interface,interface,3736,"licate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(St",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3830,Integrability,interface,interface,3830,"ate a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:3920,Integrability,interface,interface,3920,"an hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toStr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4081,Integrability,interface,interface,4081,"ter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4181,Integrability,interface,interface,4181,"t settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4283,Integrability,interface,interface,4283,"n interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4409,Integrability,interface,interface,4409,"rameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4561,Integrability,interface,interface,4561,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4665,Integrability,interface,interface,4665,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4772,Integrability,interface,interface,4772,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:4866,Integrability,interface,interface,4866,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:5064,Integrability,interface,interface,5064,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:5194,Integrability,interface,interface,5194,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:5294,Integrability,interface,interface,5294,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:5433,Integrability,interface,interface,5433,"eter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public String getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public String getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (so default can be used). Specified by:; resetValue in interface Parameter<S>. getValueOrDefault; public String getValueOrDefault(); Description copied from interface: Parameter; Get the current set value, or any default if no value has been set. Specified by:; getValueOrDefault in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValue(). getPrompt; public String getPrompt(); Description copied from interface: Parameter; Get some prompt text that may be displayed to a user. Specified by:; getPrompt in interface Parameter<S>; Returns:. setValue; public boolean setValue(String value); Description copied from interface: Parameter; Set the Parameter to have a specified value. Specified by:; setValue in interface Parameter<S>; Parameters:; value - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hasHelpText; public boolean hasHelpText(); Description copied from interface: Parameter; Query whether getHelpText() returns a meaningful String (as opposed to null). Specified by:; hasHelpText in interface Parameter<S>; Returns:. getHelpText; public String getHelpText(); Description copied from interface: Parameter; Get a description of the meaning of the Parameter; may be displayed e.g. as a tooltip. Specified by:; getHelpText in interface Parameter<S>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:349,Modifiability,plugin,plugins,349,". StringParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class StringParameter. java.lang.Object; qupath.lib.plugins.parameters.StringParameter. All Implemented Interfaces:; Serializable, Parameter<String>. public class StringParameter; extends Object; Parameter to represent a String value. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected String; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<String>; duplicate(). Create a new Parameter with the same text and value. String; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(String value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specifie",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:421,Modifiability,plugin,plugins,421,". StringParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class StringParameter. java.lang.Object; qupath.lib.plugins.parameters.StringParameter. All Implemented Interfaces:; Serializable, Parameter<String>. public class StringParameter; extends Object; Parameter to represent a String value. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected String; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<String>; duplicate(). Create a new Parameter with the same text and value. String; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(String value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specifie",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:549,Modifiability,extend,extends,549,". StringParameter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class StringParameter. java.lang.Object; qupath.lib.plugins.parameters.StringParameter. All Implemented Interfaces:; Serializable, Parameter<String>. public class StringParameter; extends Object; Parameter to represent a String value. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected String; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<String>; duplicate(). Create a new Parameter with the same text and value. String; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(String value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specifie",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:2041,Modifiability,inherit,inherited,2041,"pText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(String value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html:2115,Security,hash,hashCode,2115,"displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. String; getValue(). Get the current set value (may be null). String; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(String value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). Set last value using a string; implementing classes may need to parse this. boolean; setValue(String value). Set the Parameter to have a specified value. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. lastValue; protected String lastValue. Method Details. isValidInput; public boolean isValidInput(String value); Description copied from interface: Parameter; Query if a specified value would be valid for this parameter. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. duplicate; public Parameter<String> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters t",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/StringParameter.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2302,Integrability,interface,interface,2302,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2388,Integrability,interface,interface,2388,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2503,Integrability,interface,interface,2503,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2610,Integrability,interface,interface,2610,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2780,Integrability,interface,interface,2780,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2908,Integrability,interface,interface,2908,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:363,Modifiability,plugin,plugins,363,". DefaultScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class DefaultScriptableWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class DefaultScriptableWorkflowStep; extends Object; implements ScriptableWorkflowStep; A scriptable workflow step where the script is provided directly as an argument. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; DefaultScriptableWorkflowStep(String name,; String script). Create a workflow step using a provided script string that will be called as-is. DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script). Constructor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:447,Modifiability,plugin,plugins,447,". DefaultScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class DefaultScriptableWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class DefaultScriptableWorkflowStep; extends Object; implements ScriptableWorkflowStep; A scriptable workflow step where the script is provided directly as an argument. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; DefaultScriptableWorkflowStep(String name,; String script). Create a workflow step using a provided script string that will be called as-is. DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script). Constructor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:620,Modifiability,extend,extends,620,". DefaultScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class DefaultScriptableWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class DefaultScriptableWorkflowStep; extends Object; implements ScriptableWorkflowStep; A scriptable workflow step where the script is provided directly as an argument. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; DefaultScriptableWorkflowStep(String name,; String script). Create a workflow step using a provided script string that will be called as-is. DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script). Constructor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:1553,Modifiability,inherit,inherited,1553," WorkflowStep. public class DefaultScriptableWorkflowStep; extends Object; implements ScriptableWorkflowStep; A scriptable workflow step where the script is provided directly as an argument. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; DefaultScriptableWorkflowStep(String name,; String script). Create a workflow step using a provided script string that will be called as-is. DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script). Constructor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:1507,Security,hash,hashCode,1507,"; Serializable, ScriptableWorkflowStep, WorkflowStep. public class DefaultScriptableWorkflowStep; extends Object; implements ScriptableWorkflowStep; A scriptable workflow step where the script is provided directly as an argument. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; DefaultScriptableWorkflowStep(String name,; String script). Create a workflow step using a provided script string that will be called as-is. DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script). Constructor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowS",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2952,Security,hash,hashCode,2952,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2973,Security,hash,hashCode,2973,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html:2997,Security,hash,hashCode,2997,"ctor that takes a parameter map for display. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Constructor Details. DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; Map<String,?> parameterMap,; String script); Constructor that takes a parameter map for display.; ; The parameter map isn't embedded in the script by default - this script that is passed should be complete. Parameters:; name - ; parameterMap - ; script - . DefaultScriptableWorkflowStep; public DefaultScriptableWorkflowStep(String name,; String script); Create a workflow step using a provided script string that will be called as-is. Parameters:; name - ; script - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/DefaultScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1238,Energy Efficiency,adapt,adapted,1238,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:402,Integrability,interface,interfaces,402,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1546,Integrability,interface,interface,1546,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:335,Modifiability,plugin,plugins,335,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:372,Modifiability,plugin,plugins,372,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:539,Modifiability,plugin,plugins,539,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:605,Modifiability,plugin,plugins,605,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:676,Modifiability,plugin,plugins,676,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1238,Modifiability,adapt,adapted,1238,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1293,Modifiability,plugin,plugin,1293,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1148,Performance,perform,perform,1148,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1275,Safety,avoid,avoid,1275,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:424,Testability,log,logging,424,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1562,Testability,log,loggable,1562,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:228,Modifiability,plugin,plugins,228,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:328,Modifiability,plugin,plugins,328,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:398,Modifiability,plugin,plugins,398,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:451,Modifiability,plugin,plugins,451,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:522,Modifiability,plugin,plugins,522,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:575,Modifiability,plugin,plugins,575,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:664,Modifiability,plugin,plugins,664,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:717,Modifiability,plugin,plugins,717,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:834,Modifiability,plugin,plugins,834,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:876,Modifiability,plugin,plugins,876,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html:928,Modifiability,plugin,plugins,928,". qupath.lib.plugins.workflow Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins.workflow. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.workflow.DefaultScriptableWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep (implements qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.SimplePluginWorkflowStep (implements java.io.Externalizable, qupath.lib.plugins.workflow.ScriptableWorkflowStep); qupath.lib.plugins.workflow.Workflow (implements java.io.Externalizable). Interface Hierarchy. java.io.Serializable. qupath.lib.plugins.workflow.WorkflowStep. qupath.lib.plugins.workflow.ScriptableWorkflowStep. qupath.lib.plugins.workflow.WorkflowListener. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:2130,Integrability,interface,interface,2130,". Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:2216,Integrability,interface,interface,2216,". Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:2331,Integrability,interface,interface,2331,". Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:2438,Integrability,interface,interface,2438,". Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:2608,Integrability,interface,interface,2608,". Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:2736,Integrability,interface,interface,2736,". Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:364,Modifiability,plugin,plugins,364,". RunSavedClassifierWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class RunSavedClassifierWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class RunSavedClassifierWorkflowStep; extends Object; implements ScriptableWorkflowStep; WorkflowStep for running a saved PathObjectClassifier. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:449,Modifiability,plugin,plugins,449,". RunSavedClassifierWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class RunSavedClassifierWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class RunSavedClassifierWorkflowStep; extends Object; implements ScriptableWorkflowStep; WorkflowStep for running a saved PathObjectClassifier. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:624,Modifiability,extend,extends,624,". RunSavedClassifierWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class RunSavedClassifierWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class RunSavedClassifierWorkflowStep; extends Object; implements ScriptableWorkflowStep; WorkflowStep for running a saved PathObjectClassifier. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:1424,Modifiability,inherit,inherited,1424,"ject; qupath.lib.plugins.workflow.RunSavedClassifierWorkflowStep. All Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class RunSavedClassifierWorkflowStep; extends Object; implements ScriptableWorkflowStep; WorkflowStep for running a saved PathObjectClassifier. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html:1498,Security,hash,hashCode,1498,"ll Implemented Interfaces:; Serializable, ScriptableWorkflowStep, WorkflowStep. public class RunSavedClassifierWorkflowStep; extends Object; implements ScriptableWorkflowStep; WorkflowStep for running a saved PathObjectClassifier. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; RunSavedClassifierWorkflowStep(String classifierPath). Constructor, taking the path to the serialized classifier. RunSavedClassifierWorkflowStep(String name,; String classifierPath). Create a workflow step to run a classifier. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getScript(). Get one or more script lines that may be used to apply the step. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String name,; String classifierPath); Create a workflow step to run a classifier. Parameters:; name - step name for display, to identify the purpose of the step (not the classifier); classifierPath - path to the serialized classifier. RunSavedClassifierWorkflowStep; public RunSavedClassifierWorkflowStep(String classifierPath); Constructor, taking the path to the serialized classifier. Parameters:; classifierPath - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toSt",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/RunSavedClassifierWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:587,Integrability,interface,interface,587,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:967,Integrability,interface,interface,967,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:356,Modifiability,plugin,plugins,356,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:621,Modifiability,extend,extends,621,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:952,Modifiability,inherit,inherited,952,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:988,Modifiability,plugin,plugins,988,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html:715,Performance,perform,perform,715,". ScriptableWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface ScriptableWorkflowStep. All Superinterfaces:; Serializable, WorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface ScriptableWorkflowStep; extends WorkflowStep; A WorkflowStep that can also return some Javascript that, if run, would perform the step. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getScript(). Get one or more script lines that may be used to apply the step. Methods inherited from interface qupath.lib.plugins.workflow.WorkflowStep; getName, getParameterMap. Method Details. getScript; String getScript(); Get one or more script lines that may be used to apply the step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/ScriptableWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:729,Energy Efficiency,adapt,adapted,729,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2993,Integrability,interface,interface,2993,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundExc",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3079,Integrability,interface,interface,3079,"t, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; Cl",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3291,Integrability,interface,interface,3291,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3398,Integrability,interface,interface,3398,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3568,Integrability,interface,interface,3568,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3696,Integrability,interface,interface,3696,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3852,Integrability,interface,interface,3852,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:4032,Integrability,interface,interface,4032,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:358,Modifiability,plugin,plugins,358,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:437,Modifiability,plugin,plugins,437,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:616,Modifiability,extend,extends,616,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:729,Modifiability,adapt,adapted,729,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:784,Modifiability,plugin,plugin,784,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1093,Modifiability,extend,extends,1093,"navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Con",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1116,Modifiability,plugin,pluginClass,1116,"navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Con",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1188,Modifiability,plugin,plugin,1188,"Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1243,Modifiability,extend,extends,1243,"eld | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1266,Modifiability,plugin,pluginClass,1266,"eld | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1381,Modifiability,plugin,plugin,1381,"Step. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1758,Modifiability,plugin,plugin,1758,"lizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a p",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:1970,Modifiability,inherit,inherited,1970,"lowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Descriptio",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2384,Modifiability,extend,extends,2384," optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2407,Modifiability,plugin,pluginClass,2407," optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2479,Modifiability,plugin,plugin,2479," optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2509,Modifiability,plugin,pluginClass,2509,"hodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2613,Modifiability,extend,extends,2613,"quired for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2636,Modifiability,plugin,pluginClass,2636,"quired for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2751,Modifiability,plugin,plugin,2751,"quired for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2862,Modifiability,plugin,pluginClass,2862,"bjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; T",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:3186,Modifiability,plugin,plugin,3186,"etails. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow step. Specified by:; getName in interface WorkflowStep; Returns:. getPluginClass; public String getPluginClass(); Get the full name of the plugin class. Returns:. getParameterMap; public Map<String,?> getParameterMap(); Description copied from interface: WorkflowStep; Get a map of parameters required for this step. Specified by:; getParameterMap in interface WorkflowStep; Returns:. toString; public String toString(). Overrides:; toString in class Object. getScript; public String getScript(); Description copied from interface: ScriptableWorkflowStep; Get one or more script lines that may be used to apply the step. Specified by:; getScript in interface ScriptableWorkflowStep; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:766,Safety,avoid,avoid,766,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:2044,Security,hash,hashCode,2044," SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. SimplePluginWorkflowStep; public SimplePluginWorkflowStep(); Default public constructor, required for Externalizable.; Shouldn't be used directly! Doing so would give an ineffective script... SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg); Constructor for a workflow step that calls a plugin. Parameters:; name - ; pluginClass - ; arg - . SimplePluginWorkflowStep; public SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter); Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Parameters:; name - ; pluginClass - ; arg - ; scriptBefore - ; scriptAfter - . Method Details. getName; public String getName(); Description copied from interface: WorkflowStep; Get the name of the workflow",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1693,Availability,avail,available,1693,"used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructo",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2932,Availability,avail,available,2932,"put in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); T",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1137,Deployability,update,update,1137,"lass; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collect",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1265,Deployability,update,update,1265,"sted | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWor",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1420,Deployability,update,update,1420,"All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size().",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2039,Deployability,update,update,2039,"void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2181,Deployability,update,update,2181,"flowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps t",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3058,Deployability,update,update,3058,"ve a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3224,Deployability,update,update,3224,"teps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3466,Deployability,update,update,3466,"of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3649,Deployability,update,update,3649," notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:4085,Deployability,update,update,4085,"wStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps. Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:4737,Integrability,interface,interface,4737,"wStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps. Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:4917,Integrability,interface,interface,4917,"wStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps. Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:342,Modifiability,plugin,plugins,342,". Workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep s",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:405,Modifiability,plugin,plugins,405,". Workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep s",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:514,Modifiability,extend,extends,514,". Workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep s",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2523,Modifiability,inherit,inherited,2523,"nt workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; st",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2597,Security,hash,hashCode,2597,"owStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> ste",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1383,Usability,clear,clear,1383,"ng.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the mos",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:4029,Usability,clear,clear,4029,"wStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps. Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:4048,Usability,clear,clear,4048,"wStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps. Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html:779,Deployability,update,updated,779,". WorkflowListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowListener. All Known Implementing Classes:; ImageData, WorkflowCommandLogView. public interface WorkflowListener; Interface for listening to changes in Workflows, e.g. adding/removing steps. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Method Details. workflowUpdated; void workflowUpdated(Workflow workflow); Called whenever a Workflow has been updated in some way, such as a new step added. Parameters:; workflow - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html:936,Deployability,update,updated,936,". WorkflowListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowListener. All Known Implementing Classes:; ImageData, WorkflowCommandLogView. public interface WorkflowListener; Interface for listening to changes in Workflows, e.g. adding/removing steps. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Method Details. workflowUpdated; void workflowUpdated(Workflow workflow); Called whenever a Workflow has been updated in some way, such as a new step added. Parameters:; workflow - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html:471,Integrability,interface,interface,471,". WorkflowListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowListener. All Known Implementing Classes:; ImageData, WorkflowCommandLogView. public interface WorkflowListener; Interface for listening to changes in Workflows, e.g. adding/removing steps. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Method Details. workflowUpdated; void workflowUpdated(Workflow workflow); Called whenever a Workflow has been updated in some way, such as a new step added. Parameters:; workflow - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html:350,Modifiability,plugin,plugins,350,". WorkflowListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowListener. All Known Implementing Classes:; ImageData, WorkflowCommandLogView. public interface WorkflowListener; Interface for listening to changes in Workflows, e.g. adding/removing steps. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Method Details. workflowUpdated; void workflowUpdated(Workflow workflow); Called whenever a Workflow has been updated in some way, such as a new step added. Parameters:; workflow - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html:603,Integrability,interface,interface,603,". WorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowStep. All Superinterfaces:; Serializable. All Known Subinterfaces:; ScriptableWorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface WorkflowStep; extends Serializable; Basic interface for a loggable workflow step.; ; Not as useful as a ScriptableWorkflowStep (which should be used where possible),; but here just in case. Author:; Pete Bankhead; See Also:. ScriptableWorkflowStep. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. Method Details. getName; String getName(); Get the name of the workflow step. Returns:. getParameterMap; Map<String,?> getParameterMap(); Get a map of parameters required for this step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html:655,Integrability,interface,interface,655,". WorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowStep. All Superinterfaces:; Serializable. All Known Subinterfaces:; ScriptableWorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface WorkflowStep; extends Serializable; Basic interface for a loggable workflow step.; ; Not as useful as a ScriptableWorkflowStep (which should be used where possible),; but here just in case. Author:; Pete Bankhead; See Also:. ScriptableWorkflowStep. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. Method Details. getName; String getName(); Get the name of the workflow step. Returns:. getParameterMap; Map<String,?> getParameterMap(); Get a map of parameters required for this step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html:346,Modifiability,plugin,plugins,346,". WorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowStep. All Superinterfaces:; Serializable. All Known Subinterfaces:; ScriptableWorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface WorkflowStep; extends Serializable; Basic interface for a loggable workflow step.; ; Not as useful as a ScriptableWorkflowStep (which should be used where possible),; but here just in case. Author:; Pete Bankhead; See Also:. ScriptableWorkflowStep. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. Method Details. getName; String getName(); Get the name of the workflow step. Returns:. getParameterMap; Map<String,?> getParameterMap(); Get a map of parameters required for this step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html:627,Modifiability,extend,extends,627,". WorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowStep. All Superinterfaces:; Serializable. All Known Subinterfaces:; ScriptableWorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface WorkflowStep; extends Serializable; Basic interface for a loggable workflow step.; ; Not as useful as a ScriptableWorkflowStep (which should be used where possible),; but here just in case. Author:; Pete Bankhead; See Also:. ScriptableWorkflowStep. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. Method Details. getName; String getName(); Get the name of the workflow step. Returns:. getParameterMap; Map<String,?> getParameterMap(); Get a map of parameters required for this step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html:671,Testability,log,loggable,671,". WorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowStep. All Superinterfaces:; Serializable. All Known Subinterfaces:; ScriptableWorkflowStep. All Known Implementing Classes:; DefaultScriptableWorkflowStep, RunSavedClassifierWorkflowStep, SimplePluginWorkflowStep. public interface WorkflowStep; extends Serializable; Basic interface for a loggable workflow step.; ; Not as useful as a ScriptableWorkflowStep (which should be used where possible),; but here just in case. Author:; Pete Bankhead; See Also:. ScriptableWorkflowStep. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. Method Details. getName; String getName(); Get the name of the workflow step. Returns:. getParameterMap; Map<String,?> getParameterMap(); Get a map of parameters required for this step. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowStep.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html:17,Integrability,interface,interfaces,17,". qupath.lib.roi.interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi.interfaces. package qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs).; ; In the past, there were multiple interfaces to define ROIs of different types.; This has now been simplified with more methods added to ROI itself instead. Related Packages. Package; Description; qupath.lib.roi. Classes that define regions of interest (ROIs). All Classes and InterfacesInterfacesEnum Classes. Class; Description; ROI. Base interface for defining regions of interest (ROIs) within QuPath. ROI.RoiType. Enum representing the major different types of ROI. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html:337,Integrability,interface,interfaces,337,". qupath.lib.roi.interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi.interfaces. package qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs).; ; In the past, there were multiple interfaces to define ROIs of different types.; This has now been simplified with more methods added to ROI itself instead. Related Packages. Package; Description; qupath.lib.roi. Classes that define regions of interest (ROIs). All Classes and InterfacesInterfacesEnum Classes. Class; Description; ROI. Base interface for defining regions of interest (ROIs) within QuPath. ROI.RoiType. Enum representing the major different types of ROI. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html:372,Integrability,interface,interfaces,372,". qupath.lib.roi.interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi.interfaces. package qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs).; ; In the past, there were multiple interfaces to define ROIs of different types.; This has now been simplified with more methods added to ROI itself instead. Related Packages. Package; Description; qupath.lib.roi. Classes that define regions of interest (ROIs). All Classes and InterfacesInterfacesEnum Classes. Class; Description; ROI. Base interface for defining regions of interest (ROIs) within QuPath. ROI.RoiType. Enum representing the major different types of ROI. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html:470,Integrability,interface,interfaces,470,". qupath.lib.roi.interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi.interfaces. package qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs).; ; In the past, there were multiple interfaces to define ROIs of different types.; This has now been simplified with more methods added to ROI itself instead. Related Packages. Package; Description; qupath.lib.roi. Classes that define regions of interest (ROIs). All Classes and InterfacesInterfacesEnum Classes. Class; Description; ROI. Base interface for defining regions of interest (ROIs) within QuPath. ROI.RoiType. Enum representing the major different types of ROI. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html:777,Integrability,interface,interface,777,". qupath.lib.roi.interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi.interfaces. package qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs).; ; In the past, there were multiple interfaces to define ROIs of different types.; This has now been simplified with more methods added to ROI itself instead. Related Packages. Package; Description; qupath.lib.roi. Classes that define regions of interest (ROIs). All Classes and InterfacesInterfacesEnum Classes. Class; Description; ROI. Base interface for defining regions of interest (ROIs) within QuPath. ROI.RoiType. Enum representing the major different types of ROI. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html:535,Usability,simpl,simplified,535,". qupath.lib.roi.interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi.interfaces. package qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs).; ; In the past, there were multiple interfaces to define ROIs of different types.; This has now been simplified with more methods added to ROI itself instead. Related Packages. Package; Description; qupath.lib.roi. Classes that define regions of interest (ROIs). All Classes and InterfacesInterfacesEnum Classes. Class; Description; ROI. Base interface for defining regions of interest (ROIs) within QuPath. ROI.RoiType. Enum representing the major different types of ROI. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html:17,Integrability,interface,interfaces,17,". qupath.lib.roi.interfaces Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.roi.interfaces. Package Hierarchies:. All Packages. Interface Hierarchy. qupath.lib.roi.interfaces.ROI. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.roi.interfaces.ROI.RoiType. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html:230,Integrability,interface,interfaces,230,". qupath.lib.roi.interfaces Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.roi.interfaces. Package Hierarchies:. All Packages. Interface Hierarchy. qupath.lib.roi.interfaces.ROI. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.roi.interfaces.ROI.RoiType. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html:314,Integrability,interface,interfaces,314,". qupath.lib.roi.interfaces Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.roi.interfaces. Package Hierarchies:. All Packages. Interface Hierarchy. qupath.lib.roi.interfaces.ROI. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.roi.interfaces.ROI.RoiType. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html:493,Integrability,interface,interfaces,493,". qupath.lib.roi.interfaces Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.roi.interfaces. Package Hierarchies:. All Packages. Interface Hierarchy. qupath.lib.roi.interfaces.ROI. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.roi.interfaces.ROI.RoiType. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:1680,Availability,avail,available,1680,"of pixels ; from the top left of the full-resolution image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static enum ; ROI.RoiType. Enum representing the major different types of ROI. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Get a ROI representing the convex hull of this ROI. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Get the number of points, as would be returned by getAllPoints(). String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. S",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:3844,Availability,avail,available,3844," hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). Returns true if the ROI bounds have zero width and height. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. default ROI; scale(double scaleX,; double scaleY). Create a scaled version of this ROI. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Method Details. getRoiName; String getRoiName(); Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Returns:. getC; int getC(); Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Returns:. getT; int getT(); Get time point index.; ; Default is 0 if the image it relates to is not a time series. Returns:. getZ; int getZ(); Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Returns:. getImagePlane; ImagePlane getImagePlane(); Get the ImagePlane, which contains the values for c, z and t in a single object. Returns:. getCentroidX; double getCentroidX(); Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; double getCentroidY(); Returns the y coordinate for the ROI centroid. Returns:. getBoundsX; double getBoundsX(); Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; double getBoundsY(); Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; double getBoundsWidth(); Returns the width of the ROI bounding box. Returns:. getBoundsHeight; doub",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:3518,Deployability,update,updatePlane,3518," sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). Returns true if the ROI bounds have zero width and height. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. default ROI; scale(double scaleX,; double scaleY). Create a scaled version of this ROI. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Method Details. getRoiName; String getRoiName(); Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Returns:. getC; int getC(); Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Returns:. getT; int getT(); Get time point index.; ; Default is 0 if the image it relates to is not a time series. Returns:. getZ; int getZ(); Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Returns:. getImagePlane; ImagePlane getImagePlane(); Get the ImagePlane, which contains the values for c, z and t in a single object. Returns:. getCentroidX; double getCentroidX(); Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; double getCentroidY(); Returns the y coordinate for the ROI centroid. Returns:. getBoundsX; double getBoundsX(); Returns the x",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:8902,Deployability,update,updatePlane,8902,"ble). scale; default ROI scale(double scaleX,; double scaleY); Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. The scaling uses 0,0 as the origin. Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; Returns:; See Also:. scale(double, double, double, double). getArea; double getArea(); Get the area of this ROI. For lines and points this returns 0. Returns:; See Also:. getScaledArea(double, double). getScaledArea; double getScaledArea(double pixelWidth,; double pixelHeight); Get scaled area of the ROI, for use with calibrated pixel sizes. Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. getArea(). getLength; double getLength(); Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Returns:; See Also:. getScaledLength(double, double). getScaledLength; double getScaledLength(double pixelWidth,; double pixelHeight); Get the scaled length, for use with calibrated pixel sizes. Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. getLength(). getConvexHull; ROI getConvexHull(); Get a ROI representing the convex hull of this ROI.; This should be the smallest convex shape that contains all the ROI points. Returns:. getSolidity; double getSolidity(); Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Returns:. contains; boolean contains(double x,; double y); Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where isArea() returns true. ; All other ROIs (points, lines) return false. Parameters:; x - ; y - ; Returns:. updatePlane; ROI updatePlane(ImagePlane plane); Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Parameters:; plane - the new plane to use; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:8919,Deployability,update,updatePlane,8919,"ble). scale; default ROI scale(double scaleX,; double scaleY); Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. The scaling uses 0,0 as the origin. Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; Returns:; See Also:. scale(double, double, double, double). getArea; double getArea(); Get the area of this ROI. For lines and points this returns 0. Returns:; See Also:. getScaledArea(double, double). getScaledArea; double getScaledArea(double pixelWidth,; double pixelHeight); Get scaled area of the ROI, for use with calibrated pixel sizes. Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. getArea(). getLength; double getLength(); Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Returns:; See Also:. getScaledLength(double, double). getScaledLength; double getScaledLength(double pixelWidth,; double pixelHeight); Get the scaled length, for use with calibrated pixel sizes. Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. getLength(). getConvexHull; ROI getConvexHull(); Get a ROI representing the convex hull of this ROI.; This should be the smallest convex shape that contains all the ROI points. Returns:. getSolidity; double getSolidity(); Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Returns:. contains; boolean contains(double x,; double y); Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where isArea() returns true. ; All other ROIs (points, lines) return false. Parameters:; x - ; y - ; Returns:. updatePlane; ROI updatePlane(ImagePlane plane); Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Parameters:; plane - the new plane to use; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:341,Integrability,interface,interfaces,341,". ROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Interface ROI. All Known Implementing Classes:; AreaROI, EllipseROI, GeometryROI, LineROI, PointsROI, PolygonROI, PolylineROI, RectangleROI. public interface ROI; Base interface for defining regions of interest (ROIs) within QuPath.; ; In general, anything that returns a coordinate should be defined in terms of pixels ; from the top left of the full-resolution image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static enum ; ROI.RoiType. Enum representing the major different types of ROI. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Get a ROI representing the convex hull of this ROI. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:501,Integrability,interface,interface,501,". ROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Interface ROI. All Known Implementing Classes:; AreaROI, EllipseROI, GeometryROI, LineROI, PointsROI, PolygonROI, PolylineROI, RectangleROI. public interface ROI; Base interface for defining regions of interest (ROIs) within QuPath.; ; In general, anything that returns a coordinate should be defined in terms of pixels ; from the top left of the full-resolution image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static enum ; ROI.RoiType. Enum representing the major different types of ROI. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Get a ROI representing the convex hull of this ROI. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:521,Integrability,interface,interface,521,". ROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Interface ROI. All Known Implementing Classes:; AreaROI, EllipseROI, GeometryROI, LineROI, PointsROI, PolygonROI, PolylineROI, RectangleROI. public interface ROI; Base interface for defining regions of interest (ROIs) within QuPath.; ; In general, anything that returns a coordinate should be defined in terms of pixels ; from the top left of the full-resolution image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static enum ; ROI.RoiType. Enum representing the major different types of ROI. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Get a ROI representing the convex hull of this ROI. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:381,Integrability,interface,interfaces,381,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:479,Integrability,interface,interfaces,479,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:592,Integrability,interface,interface,592,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:757,Integrability,interface,interfaces,757,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:641,Modifiability,extend,extends,641,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:768,Modifiability,inherit,inherited,768,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:821,Modifiability,extend,extends,821,". ROI.RoiType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.roi.interfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:1376,Modifiability,inherit,inherited,1376,"erfaces; Enum Class ROI.RoiType. java.lang.Object; java.lang.Enum<ROI.RoiType>; qupath.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ROI.RoiType valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace c",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:1539,Modifiability,inherit,inherited,1539,"omparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ROI.RoiType valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the specified name; Throws:; I",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html:1487,Security,hash,hashCode,1487,"th.lib.roi.interfaces.ROI.RoiType. All Implemented Interfaces:; Serializable, Comparable<ROI.RoiType>, Constable. Enclosing interface:; ROI. public static enum ROI.RoiType; extends Enum<ROI.RoiType>; Enum representing the major different types of ROI. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; AREA. ROI represents a closed area (possibly with holes). LINE. ROI represents a line or polyline. POINT. ROI represents points. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ROI.RoiType; valueOf(String name). Returns the enum constant of this class with the specified name. static ROI.RoiType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. AREA; public static final ROI.RoiType AREA; ROI represents a closed area (possibly with holes). LINE; public static final ROI.RoiType LINE; ROI represents a line or polyline. POINT; public static final ROI.RoiType POINT; ROI represents points. Method Details. values; public static ROI.RoiType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ROI.RoiType valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.RoiType.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html:468,Integrability,interface,interface,468,". AutoCompletions.Completion (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Interface AutoCompletions.Completion. Enclosing class:; AutoCompletions. public static interface AutoCompletions.Completion; A single completion.; Instances must be able to determine whether they can provide a valid autocompletion, ; given an input string and a caret position - and, if so, also supply the completion text to insert. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; String; getCompletionText(). Get the text that should be inserted for the full completion. String; getDisplayText(). Get the text that should be displayed for this completion. String; getInsertion(String text,; int pos,; String lastToken). Get the string to insert, given the provided text and position. default AutoCompletions.CompletionTokenizer; getTokenizer(). Get the tokenizer needed to extract the relevant bit of the text to determine the validity and/or ; insertion for the completion. boolean; isCompatible(String text,; int pos,; String lastToken). Test if this completion is compatible with the provided text. Method Details. getCompletionText; String getCompletionText(); Get the text that should be inserted for the full completion. Returns:. getDisplayText; String getDisplayText(); Get the text that should be displayed for this completion.; This which may include additional information that isn't part of the completion itself; (e.g. method parameters, return type). Returns:. getInsertion; String getInsertion(String text,; int pos,; String lastToken); Get the string to insert, given the provided text and position.; This involves stripping off any o",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html:2260,Performance,perform,performance,2260,"idity and/or ; insertion for the completion. boolean; isCompatible(String text,; int pos,; String lastToken). Test if this completion is compatible with the provided text. Method Details. getCompletionText; String getCompletionText(); Get the text that should be inserted for the full completion. Returns:. getDisplayText; String getDisplayText(); Get the text that should be displayed for this completion.; This which may include additional information that isn't part of the completion itself; (e.g. method parameters, return type). Returns:. getInsertion; String getInsertion(String text,; int pos,; String lastToken); Get the string to insert, given the provided text and position.; This involves stripping off any overlapping part of the completion, ; so that it can be inserted at pos. Parameters:; text - the full text; pos - the current caret position; lastToken - the final token, as output by getTokenizer().; If null, the token will be calculated - but it can improve performance to precompute ; tokens whenever multiple completions use the same way of determining tokens.; Returns:; the text to insert. isCompatible; boolean isCompatible(String text,; int pos,; String lastToken); Test if this completion is compatible with the provided text. Parameters:; text - the full text; pos - the current caret position; lastToken - the final token, as output by getTokenizer().; If null, the token will be calculated - but it can improve performance to precompute ; tokens whenever multiple completions use the same way of determining tokens.; Returns:. getTokenizer; default AutoCompletions.CompletionTokenizer getTokenizer(); Get the tokenizer needed to extract the relevant bit of the text to determine the validity and/or ; insertion for the completion.; ; Important! This exists for efficiency, so that if many completions use the same tokenizer, ; the (possibly long) text does not need to be re-tokenized each time.; It is therefore important to return a shared instance, rather than a new ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html:2723,Performance,perform,performance,2723,"t. Method Details. getCompletionText; String getCompletionText(); Get the text that should be inserted for the full completion. Returns:. getDisplayText; String getDisplayText(); Get the text that should be displayed for this completion.; This which may include additional information that isn't part of the completion itself; (e.g. method parameters, return type). Returns:. getInsertion; String getInsertion(String text,; int pos,; String lastToken); Get the string to insert, given the provided text and position.; This involves stripping off any overlapping part of the completion, ; so that it can be inserted at pos. Parameters:; text - the full text; pos - the current caret position; lastToken - the final token, as output by getTokenizer().; If null, the token will be calculated - but it can improve performance to precompute ; tokens whenever multiple completions use the same way of determining tokens.; Returns:; the text to insert. isCompatible; boolean isCompatible(String text,; int pos,; String lastToken); Test if this completion is compatible with the provided text. Parameters:; text - the full text; pos - the current caret position; lastToken - the final token, as output by getTokenizer().; If null, the token will be calculated - but it can improve performance to precompute ; tokens whenever multiple completions use the same way of determining tokens.; Returns:. getTokenizer; default AutoCompletions.CompletionTokenizer getTokenizer(); Get the tokenizer needed to extract the relevant bit of the text to determine the validity and/or ; insertion for the completion.; ; Important! This exists for efficiency, so that if many completions use the same tokenizer, ; the (possibly long) text does not need to be re-tokenized each time.; It is therefore important to return a shared instance, rather than a new object for each completion. Returns:; the completion tokenizer, which must not be null; See Also:. AutoCompletions.SUBSTRING_TOKENIZER; AutoCompletions.JAVA_TOKENIZER. ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.Completion.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.CompletionTokenizer.html:486,Integrability,interface,interface,486,". AutoCompletions.CompletionTokenizer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Interface AutoCompletions.CompletionTokenizer. Enclosing class:; AutoCompletions. public static interface AutoCompletions.CompletionTokenizer; Functional interface to extract a token from a string needed to determine ; a completion.; For example, given the string var pathObject = PathObjects.crea ; the token would be ""PathObjects.crea"". Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getToken(String text,; int pos). Get the token needed for the completion. Method Details. getToken; String getToken(String text,; int pos); Get the token needed for the completion. Parameters:; text - ; pos - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.CompletionTokenizer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.CompletionTokenizer.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.CompletionTokenizer.html:544,Integrability,interface,interface,544,". AutoCompletions.CompletionTokenizer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Interface AutoCompletions.CompletionTokenizer. Enclosing class:; AutoCompletions. public static interface AutoCompletions.CompletionTokenizer; Functional interface to extract a token from a string needed to determine ; a completion.; For example, given the string var pathObject = PathObjects.crea ; the token would be ""PathObjects.crea"". Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getToken(String text,; int pos). Get the token needed for the completion. Method Details. getToken; String getToken(String text,; int pos); Get the token needed for the completion. Parameters:; text - ; pos - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.CompletionTokenizer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.CompletionTokenizer.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:673,Integrability,interface,interface,673,". AutoCompletions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Class AutoCompletions. java.lang.Object; qupath.lib.scripting.languages.AutoCompletions. public class AutoCompletions; extends Object; Class to deal with script auto-completions. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; AutoCompletions.Completion. A single completion. static interface ; AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. Field Summary; Fields. Modifier and Type; Field; Description; static final AutoCompletions.CompletionTokenizer; JAVA_TOKENIZER. A completion tokenizer that extracts a token used to determine Java completions. static final AutoCompletions.CompletionTokenizer; SUBSTRING_TOKENIZER. A completion tokenizer that simply takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion tex",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:741,Integrability,interface,interface,741,". AutoCompletions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Class AutoCompletions. java.lang.Object; qupath.lib.scripting.languages.AutoCompletions. public class AutoCompletions; extends Object; Class to deal with script auto-completions. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; AutoCompletions.Completion. A single completion. static interface ; AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. Field Summary; Fields. Modifier and Type; Field; Description; static final AutoCompletions.CompletionTokenizer; JAVA_TOKENIZER. A completion tokenizer that extracts a token used to determine Java completions. static final AutoCompletions.CompletionTokenizer; SUBSTRING_TOKENIZER. A completion tokenizer that simply takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion tex",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:801,Integrability,interface,interface,801,". AutoCompletions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Class AutoCompletions. java.lang.Object; qupath.lib.scripting.languages.AutoCompletions. public class AutoCompletions; extends Object; Class to deal with script auto-completions. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; AutoCompletions.Completion. A single completion. static interface ; AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. Field Summary; Fields. Modifier and Type; Field; Description; static final AutoCompletions.CompletionTokenizer; JAVA_TOKENIZER. A completion tokenizer that extracts a token used to determine Java completions. static final AutoCompletions.CompletionTokenizer; SUBSTRING_TOKENIZER. A completion tokenizer that simply takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion tex",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:489,Modifiability,extend,extends,489,". AutoCompletions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Class AutoCompletions. java.lang.Object; qupath.lib.scripting.languages.AutoCompletions. public class AutoCompletions; extends Object; Class to deal with script auto-completions. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; AutoCompletions.Completion. A single completion. static interface ; AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. Field Summary; Fields. Modifier and Type; Field; Description; static final AutoCompletions.CompletionTokenizer; JAVA_TOKENIZER. A completion tokenizer that extracts a token used to determine Java completions. static final AutoCompletions.CompletionTokenizer; SUBSTRING_TOKENIZER. A completion tokenizer that simply takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion tex",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:2115,Modifiability,inherit,inherited,2115,"etionTokenizer; SUBSTRING_TOKENIZER. A completion tokenizer that simply takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion text. static Comparator<AutoCompletions.Completion>; getComparator(). Get a comparator to order completions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. SUBSTRING_TOKENIZER; public static final AutoCompletions.CompletionTokenizer SUBSTRING_TOKENIZER; A completion tokenizer that simply takes the first part of the text up to the caret position. JAVA_TOKENIZER; public static final AutoCompletions.CompletionTokenizer JAVA_TOKENIZER; A completion tokenizer that extracts a token used to determine Java completions. Constructor Details. AutoCompletions; public AutoCompletions(). Method Details. getComparator; public static Comparator<AutoCompletions.Completion> getComparator(); Get a comparator to order completions. Returns:. createJavaCompletion; public static AutoCompletions.Completion createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText); Create a new completion with fixed display and completion text. Parameters:; declaringClass - the declaring class; choose null for st",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:2189,Security,hash,hashCode,2189,"takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion text. static Comparator<AutoCompletions.Completion>; getComparator(). Get a comparator to order completions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. SUBSTRING_TOKENIZER; public static final AutoCompletions.CompletionTokenizer SUBSTRING_TOKENIZER; A completion tokenizer that simply takes the first part of the text up to the caret position. JAVA_TOKENIZER; public static final AutoCompletions.CompletionTokenizer JAVA_TOKENIZER; A completion tokenizer that extracts a token used to determine Java completions. Constructor Details. AutoCompletions; public AutoCompletions(). Method Details. getComparator; public static Comparator<AutoCompletions.Completion> getComparator(); Get a comparator to order completions. Returns:. createJavaCompletion; public static AutoCompletions.Completion createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText); Create a new completion with fixed display and completion text. Parameters:; declaringClass - the declaring class; choose null for static imports; displayText - the text to display; completionText - the te",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:1188,Usability,simpl,simply,1188,":. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Class AutoCompletions. java.lang.Object; qupath.lib.scripting.languages.AutoCompletions. public class AutoCompletions; extends Object; Class to deal with script auto-completions. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; AutoCompletions.Completion. A single completion. static interface ; AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. Field Summary; Fields. Modifier and Type; Field; Description; static final AutoCompletions.CompletionTokenizer; JAVA_TOKENIZER. A completion tokenizer that extracts a token used to determine Java completions. static final AutoCompletions.CompletionTokenizer; SUBSTRING_TOKENIZER. A completion tokenizer that simply takes the first part of the text up to the caret position. Constructor Summary; Constructors. Constructor; Description; AutoCompletions();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion text. static Comparator<AutoCompletions.Completion>; getComparator(). Get a comparator to order completions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify,",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html:2387,Usability,simpl,simply,2387,"e Methods. Modifier and Type; Method; Description; static AutoCompletions.Completion; createJavaCompletion(Class<?> cls). Create a new completion for a class. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Field field). Create a new completion for a field. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; Method method). Create a new completion for a method. static AutoCompletions.Completion; createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText). Create a new completion with fixed display and completion text. static Comparator<AutoCompletions.Completion>; getComparator(). Get a comparator to order completions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. SUBSTRING_TOKENIZER; public static final AutoCompletions.CompletionTokenizer SUBSTRING_TOKENIZER; A completion tokenizer that simply takes the first part of the text up to the caret position. JAVA_TOKENIZER; public static final AutoCompletions.CompletionTokenizer JAVA_TOKENIZER; A completion tokenizer that extracts a token used to determine Java completions. Constructor Details. AutoCompletions; public AutoCompletions(). Method Details. getComparator; public static Comparator<AutoCompletions.Completion> getComparator(); Get a comparator to order completions. Returns:. createJavaCompletion; public static AutoCompletions.Completion createJavaCompletion(Class<?> declaringClass,; String displayText,; String completionText); Create a new completion with fixed display and completion text. Parameters:; declaringClass - the declaring class; choose null for static imports; displayText - the text to display; completionText - the text to use in the completion; Returns:. createJavaCompletion; public static AutoCompletions.Completion createJavaCompletion(Class<?> cls); Create a new completion for a class. Parameters:; c",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/AutoCompletions.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ExecutableLanguage.html:540,Integrability,interface,interface,540,". ExecutableLanguage (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Interface ExecutableLanguage. All Known Subinterfaces:; HtmlRenderer. All Known Implementing Classes:; DefaultScriptLanguage, GroovyLanguage, MarkdownLanguage. public interface ExecutableLanguage; Functional interface for scripting languages that are runnable (e.g. Groovy, JavaScript). Since:; v0.4.0; Author:; Melvin Gelbard, Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Object; execute(ScriptParameters params). Execute the given script String. Method Details. execute; Object execute(ScriptParameters params); throws ScriptException; Execute the given script String. Parameters:; params - ; Returns:; Throws:; ScriptException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/ExecutableLanguage.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ExecutableLanguage.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ExecutableLanguage.html:581,Integrability,interface,interface,581,". ExecutableLanguage (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Interface ExecutableLanguage. All Known Subinterfaces:; HtmlRenderer. All Known Implementing Classes:; DefaultScriptLanguage, GroovyLanguage, MarkdownLanguage. public interface ExecutableLanguage; Functional interface for scripting languages that are runnable (e.g. Groovy, JavaScript). Since:; v0.4.0; Author:; Melvin Gelbard, Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Object; execute(ScriptParameters params). Execute the given script String. Method Details. execute; Object execute(ScriptParameters params); throws ScriptException; Execute the given script String. Parameters:; params - ; Returns:; Throws:; ScriptException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/ExecutableLanguage.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ExecutableLanguage.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/package-summary.html:797,Integrability,interface,interface,797,. qupath.lib.scripting.languages (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.scripting.languages. package qupath.lib.scripting.languages. Base classes for defining scripting languages that QuPath can support. Related Packages. Package; Description; qupath.lib.scripting. Defines helper class for running scripts. All Classes and InterfacesInterfacesClasses. Class; Description; AutoCompletions. Class to deal with script auto-completions. AutoCompletions.Completion. A single completion. AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. ExecutableLanguage. Functional interface for scripting languages that are runnable (e.g. ScriptAutoCompletor. Interface for classes that implement auto-completion (e.g. ScriptLanguage. Abstract class to represent languages supported by the script editor. ,MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/package-summary.html:907,Integrability,interface,interface,907,. qupath.lib.scripting.languages (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.scripting.languages. package qupath.lib.scripting.languages. Base classes for defining scripting languages that QuPath can support. Related Packages. Package; Description; qupath.lib.scripting. Defines helper class for running scripts. All Classes and InterfacesInterfacesClasses. Class; Description; AutoCompletions. Class to deal with script auto-completions. AutoCompletions.Completion. A single completion. AutoCompletions.CompletionTokenizer. Functional interface to extract a token from a string needed to determine ; a completion. ExecutableLanguage. Functional interface for scripting languages that are runnable (e.g. ScriptAutoCompletor. Interface for classes that implement auto-completion (e.g. ScriptLanguage. Abstract class to represent languages supported by the script editor. ,MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptAutoCompletor.html:509,Integrability,interface,interface,509,". ScriptAutoCompletor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Interface ScriptAutoCompletor. All Known Implementing Classes:; DefaultAutoCompletor, GroovyAutoCompletor, PythonAutoCompletor. public interface ScriptAutoCompletor; Interface for classes that implement auto-completion (e.g. styling classes). Since:; v0.4.0; Author:; Melvin Gelbard, Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; List<AutoCompletions.Completion>; getCompletions(String text,; int pos). Get a list of possible auto-completions for the given text ; with the caret at the specified position. Method Details. getCompletions; List<AutoCompletions.Completion> getCompletions(String text,; int pos); Get a list of possible auto-completions for the given text ; with the caret at the specified position. Parameters:; text - the full text; pos - the current caret position; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/ScriptAutoCompletor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptAutoCompletor.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html:650,Modifiability,extend,extends,650,". ScriptLanguage (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting.languages; Class ScriptLanguage. java.lang.Object; qupath.lib.scripting.languages.ScriptLanguage. Direct Known Subclasses:; CssLanguage, DefaultScriptLanguage, JsonLanguage, MarkdownLanguage, PlainLanguage, PropertiesLanguage, XmlLanguage, YamlLanguage. public abstract class ScriptLanguage; extends Object; Abstract class to represent languages supported by the script editor. Since:; v0.4.0; Author:; Melvin Gelbard, Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; ScriptLanguage(String name,; String ext). Default constructor for a ScriptLanguage. protected ; ScriptLanguage(String name,; Collection<String> exts). Default constructor for a ScriptLanguage. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ScriptAutoCompletor; getAutoCompletor(). Get the ScriptAutoCompletor object that takes care of this language's auto-completion. Set<String>; getExtensions(). Get an unmodifiable set containing the possible extensions for this language. String; getName(). Get the name of this language. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ScriptLanguage; protected ScriptLanguage(String name,; Collection<String> exts); Default constructor for a ScriptLanguage. Parameters:; name - the language name; exts - all supported file extensions for this language, in the form .ext (lowercase). ScriptLanguage; protected ScriptLanguage(String name,; String ext); Default constructor for a ScriptLanguage. Parameters:; na",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html:1486,Modifiability,inherit,inherited,1486," DefaultScriptLanguage, JsonLanguage, MarkdownLanguage, PlainLanguage, PropertiesLanguage, XmlLanguage, YamlLanguage. public abstract class ScriptLanguage; extends Object; Abstract class to represent languages supported by the script editor. Since:; v0.4.0; Author:; Melvin Gelbard, Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; ScriptLanguage(String name,; String ext). Default constructor for a ScriptLanguage. protected ; ScriptLanguage(String name,; Collection<String> exts). Default constructor for a ScriptLanguage. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ScriptAutoCompletor; getAutoCompletor(). Get the ScriptAutoCompletor object that takes care of this language's auto-completion. Set<String>; getExtensions(). Get an unmodifiable set containing the possible extensions for this language. String; getName(). Get the name of this language. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ScriptLanguage; protected ScriptLanguage(String name,; Collection<String> exts); Default constructor for a ScriptLanguage. Parameters:; name - the language name; exts - all supported file extensions for this language, in the form .ext (lowercase). ScriptLanguage; protected ScriptLanguage(String name,; String ext); Default constructor for a ScriptLanguage. Parameters:; name - the language name; ext - the file extensions for this language, in the form .ext (lowercase). Method Details. getName; public String getName(); Get the name of this language. Returns:; name. getExtensions; public Set<String> getExtensions(); Get an unmodifiable set containing the possible extensions for this language. Returns:; extension array. getAutoCompletor; public ScriptAutoCompletor getAutoCompletor(); Get the ScriptAutoCompletor object that takes care of this language's auto-co",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html
https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html:1560,Security,hash,hashCode,1560,"ge, PropertiesLanguage, XmlLanguage, YamlLanguage. public abstract class ScriptLanguage; extends Object; Abstract class to represent languages supported by the script editor. Since:; v0.4.0; Author:; Melvin Gelbard, Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; ScriptLanguage(String name,; String ext). Default constructor for a ScriptLanguage. protected ; ScriptLanguage(String name,; Collection<String> exts). Default constructor for a ScriptLanguage. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ScriptAutoCompletor; getAutoCompletor(). Get the ScriptAutoCompletor object that takes care of this language's auto-completion. Set<String>; getExtensions(). Get an unmodifiable set containing the possible extensions for this language. String; getName(). Get the name of this language. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ScriptLanguage; protected ScriptLanguage(String name,; Collection<String> exts); Default constructor for a ScriptLanguage. Parameters:; name - the language name; exts - all supported file extensions for this language, in the form .ext (lowercase). ScriptLanguage; protected ScriptLanguage(String name,; String ext); Default constructor for a ScriptLanguage. Parameters:; name - the language name; ext - the file extensions for this language, in the form .ext (lowercase). Method Details. getName; public String getName(); Get the name of this language. Returns:; name. getExtensions; public Set<String> getExtensions(); Get an unmodifiable set containing the possible extensions for this language. Returns:; extension array. getAutoCompletor; public ScriptAutoCompletor getAutoCompletor(); Get the ScriptAutoCompletor object that takes care of this language's auto-completion. ; ; Can return null if the script editor should not handl",MatchSource.WIKI,javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/languages/ScriptLanguage.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:676,Deployability,pipeline,pipeline,676,". AbstractDnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the pre",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1581,Deployability,patch,patches,1581,"xtends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from cla",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2285,Deployability,patch,patches,2285,"Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. g",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2486,Deployability,patch,patch,2486,"ist<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Ret",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3620,Deployability,patch,patches,3620,"als, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4080,Deployability,patch,patch,4080," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4530,Deployability,patch,patches,4530," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1202,Integrability,interface,interface,1202,". Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<S",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2737,Integrability,interface,interface,2737,"that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3944,Integrability,interface,interface,3944," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4360,Integrability,interface,interface,4360," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4795,Integrability,interface,interface,4795," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:600,Modifiability,extend,extends,600,". AbstractDnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the pre",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1187,Modifiability,inherit,inherited,1187,". Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<S",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1513,Modifiability,extend,extends,1513,"rfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image p",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2583,Modifiability,inherit,inherited,2583," a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience me",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2722,Modifiability,inherit,inherited,2722,"that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4462,Modifiability,extend,extends,4462," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:900,Safety,predict,predict,900,". AbstractDnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the pre",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1803,Safety,predict,prediction,1803,"priate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Con",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1998,Safety,predict,prediction,1998," 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more O",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2113,Safety,predict,prediction,2113,"dictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(Str",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2150,Safety,predict,prediction,2150,"dictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(Str",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2211,Safety,predict,predict,2211,"h.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2423,Safety,predict,predict,2423,"rete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the predic",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3019,Safety,predict,prediction,3019,"ts into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Par",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3247,Safety,predict,prediction,3247,"nput. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this o",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3423,Safety,predict,prediction,3423,"t. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batch",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3460,Safety,predict,prediction,3460,"t. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batch",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3514,Safety,predict,predict,3514,"als, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3546,Safety,predict,predict,3546,"als, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3933,Safety,predict,predict,3933," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3997,Safety,predict,predict,3997," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4017,Safety,predict,predict,4017," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4349,Safety,predict,predict,4349," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4729,Safety,predict,predict,4729," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2657,Security,hash,hashCode,2657,"d Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFuncti",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:656,Usability,learn,learning,656,". AbstractDnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the pre",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html:453,Integrability,interface,interface,453,". BlobFunction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface BlobFunction<T>. Type Parameters:; T - preferred tensor format for the framework. public interface BlobFunction<T>; Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. Author:; Pete Bankhead; See Also:. PredictionFunction; DnnModel. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; List<Mat>; fromBlob(T blob). Convert a blob (generally the result of a prediction) to a list of mats. T; toBlob(Mat... mats). Convert one or more mats to a blob. Method Details. toBlob; T toBlob(Mat... mats); Convert one or more mats to a blob. ; This is intended primarily for cases where each input mat corresponds to an image, ; and the length of the input array corresponds to the batch size. Parameters:; mats - ; Returns:. fromBlob; List<Mat> fromBlob(T blob); Convert a blob (generally the result of a prediction) to a list of mats.; The length of the output list corresponds to the batch size.; ; Note that while this is typically used for blobs that are images, implementing classes ; should sensibly handle cases where the number of dimensions indicates a different kind of ; output. Parameters:; blob - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/BlobFunction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html:798,Safety,predict,prediction,798,". BlobFunction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface BlobFunction<T>. Type Parameters:; T - preferred tensor format for the framework. public interface BlobFunction<T>; Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. Author:; Pete Bankhead; See Also:. PredictionFunction; DnnModel. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; List<Mat>; fromBlob(T blob). Convert a blob (generally the result of a prediction) to a list of mats. T; toBlob(Mat... mats). Convert one or more mats to a blob. Method Details. toBlob; T toBlob(Mat... mats); Convert one or more mats to a blob. ; This is intended primarily for cases where each input mat corresponds to an image, ; and the length of the input array corresponds to the batch size. Parameters:; mats - ; Returns:. fromBlob; List<Mat> fromBlob(T blob); Convert a blob (generally the result of a prediction) to a list of mats.; The length of the output list corresponds to the batch size.; ; Note that while this is typically used for blobs that are images, implementing classes ; should sensibly handle cases where the number of dimensions indicates a different kind of ; output. Parameters:; blob - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/BlobFunction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html:1236,Safety,predict,prediction,1236,". BlobFunction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface BlobFunction<T>. Type Parameters:; T - preferred tensor format for the framework. public interface BlobFunction<T>; Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. Author:; Pete Bankhead; See Also:. PredictionFunction; DnnModel. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; List<Mat>; fromBlob(T blob). Convert a blob (generally the result of a prediction) to a list of mats. T; toBlob(Mat... mats). Convert one or more mats to a blob. Method Details. toBlob; T toBlob(Mat... mats); Convert one or more mats to a blob. ; This is intended primarily for cases where each input mat corresponds to an image, ; and the length of the input array corresponds to the batch size. Parameters:; mats - ; Returns:. fromBlob; List<Mat> fromBlob(T blob); Convert a blob (generally the result of a prediction) to a list of mats.; The length of the output list corresponds to the batch size.; ; Note that while this is typically used for blobs that are images, implementing classes ; should sensibly handle cases where the number of dimensions indicates a different kind of ; output. Parameters:; blob - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/BlobFunction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html:541,Usability,learn,learning,541,". BlobFunction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface BlobFunction<T>. Type Parameters:; T - preferred tensor format for the framework. public interface BlobFunction<T>; Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. Author:; Pete Bankhead; See Also:. PredictionFunction; DnnModel. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; List<Mat>; fromBlob(T blob). Convert a blob (generally the result of a prediction) to a list of mats. T; toBlob(Mat... mats). Convert one or more mats to a blob. Method Details. toBlob; T toBlob(Mat... mats); Convert one or more mats to a blob. ; This is intended primarily for cases where each input mat corresponds to an image, ; and the length of the input array corresponds to the batch size. Parameters:; mats - ; Returns:. fromBlob; List<Mat> fromBlob(T blob); Convert a blob (generally the result of a prediction) to a list of mats.; The length of the output list corresponds to the batch size.; ; Note that while this is typically used for blobs that are images, implementing classes ; should sensibly handle cases where the number of dimensions indicates a different kind of ; output. Parameters:; blob - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/BlobFunction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/BlobFunction.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:581,Deployability,pipeline,pipeline,581,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:476,Integrability,interface,interface,476,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:527,Integrability,interface,interface,527,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:3522,Integrability,interface,interface,3522,"ield; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs.; Each input is expected to have a single output. Parameters:; mats - ; Returns:. close; default void close(); throws Exception; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:496,Modifiability,extend,extends,496,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:1877,Modifiability,extend,extends,1877,"mon scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction funct",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:3110,Modifiability,extend,extends,3110,"ield; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs.; Each input is expected to have a single output. Parameters:; mats - ; Returns:. close; default void close(); throws Exception; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:825,Safety,predict,predict,825,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:1079,Safety,predict,predict,1079,"  ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:1276,Safety,predict,prediction,1276,"tr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:2083,Safety,predict,predict,2083,"t); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:2179,Safety,predict,predict,2179," simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:2774,Safety,predict,predict,2774,"ield; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs.; Each input is expected to have a single output. Parameters:; mats - ; Returns:. close; default void close(); throws Exception; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:2799,Safety,predict,predict,2799,"ield; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs.; Each input is expected to have a single output. Parameters:; mats - ; Returns:. close; default void close(); throws Exception; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:2915,Safety,predict,predict,2915,"ield; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs.; Each input is expected to have a single output. Parameters:; mats - ; Returns:. close; default void close(); throws Exception; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:2936,Safety,predict,predict,2936,"ield; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat mat). Prediction function that takes a single input and gives a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default input layer name. This should be used when the input layer name is known or ; unimportant (e.g. the common case of a single input). See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default output layer name. This should be used when the output layer name is known or ; unimportant (e.g. the common case of a single output). See Also:. Constant Field Values. Method Details. predict; Map<String,Mat> predict(Map<String,Mat> blobs); Prediction function that can take multiple inputs. Parameters:; blobs - ; Returns:. predict; default Mat predict(Mat mat); Prediction function that takes a single input and gives a single output. Parameters:; mat - ; Returns:. batchPredict; default List<Mat> batchPredict(List<? extends Mat> mats); Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs.; Each input is expected to have a single output. Parameters:; mats - ; Returns:. close; default void close(); throws Exception; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:561,Usability,learn,learning,561,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:1181,Usability,simpl,simplified,1181,"d. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default void; close(). Close this model if it will not be needed again. Map<String,Mat>; predict(Map<String,Mat> blobs). Prediction function that can take multiple inputs. default Mat; predict(Mat ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelBuilder.html:447,Integrability,interface,interface,447,". DnnModelBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModelBuilder. All Known Implementing Classes:; OpenCVDnnModelBuilder. public interface DnnModelBuilder; Builder to create a DnnModel from DnnModelParams.; This exists to allow different implementations to be added via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; DnnModel; buildModel(DnnModelParams params). Build a DnnModel if possible, or return null otherwise. Method Details. buildModel; DnnModel buildModel(DnnModelParams params); Build a DnnModel if possible, or return null otherwise.; This should return null quickly whenever it is known that the model cannot be built. Parameters:; params - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelBuilder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:3465,Availability,avail,available,3465,"ublic DnnModelParams.Builder files(File... files); Specify the URIs as files. These will be appended to any existing URIs. Parameters:; files - ; Returns:. paths; public DnnModelParams.Builder paths(Path... paths); Specify the URIs as path objects. These will be appended to any existing URIs. Parameters:; paths - ; Returns:. URIs; public DnnModelParams.Builder URIs(URI... uris); Specify the URIs. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. URIs; public DnnModelParams.Builder URIs(Collection<URI> uris); Specify the URIs as a collection. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. lazyInitialize; public DnnModelParams.Builder lazyInitialize(boolean lazyInitialize); Optionally request lazy initialization. Parameters:; lazyInitialize - ; Returns:. framework; public DnnModelParams.Builder framework(String framework); Specify the deep learning framework that can use the model.; ; It is recommended to use one of the default names available as static variables; in DnnModelParams.; However, an extension might use some other unique identifier to ensure that it is ; used in preference to some other implementation. Parameters:; framework - ; Returns:. layout; public DnnModelParams.Builder layout(String layout); Specify a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Parameters:; layout - ; Returns:. inputShape; public DnnModelParams.Builder inputShape(long... shape); Specify the shape for a single input, with the default input name. Parameters:; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; long... shape); Specify the shape as a long array for a single input with a specified name. Parameters:; name - ; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; DnnShape shape); Specify the shape for a single input with a specified name. Parameters:; name",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:532,Modifiability,extend,extends,532,". DnnModelParams.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams.Builder. java.lang.Object; qupath.opencv.dnn.DnnModelParams.Builder. Enclosing class:; DnnModelParams. public static class DnnModelParams.Builder; extends Object; Builder for DnnModelParams. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; DnnModelParams; build(). Build the params. DnnModelParams.Builder; files(File... files). Specify the URIs as files. DnnModelParams.Builder; framework(String framework). Specify the deep learning framework that can use the model. DnnModelParams.Builder; input(String name,; long... shape). Specify the shape as a long array for a single input with a specified name. DnnModelParams.Builder; input(String name,; DnnShape shape). Specify the shape for a single input with a specified name. DnnModelParams.Builder; inputs(Map<String,DnnShape> inputs). Specify the shapes for one or more inputs. DnnModelParams.Builder; inputShape(long... shape). Specify the shape for a single input, with the default input name. DnnModelParams.Builder; layout(String layout). Specify a string representing the axes layout that the model expects as input. DnnModelParams.Builder; lazyInitialize(boolean lazyInitialize). Optionally request lazy initialization. DnnModelParams.Builder; output(String name,; long... shape). Specify the shape as a long array for a single named output. DnnModelParams.Builder; output(String name,; DnnShape shape). Specify the shape for a single named output. DnnModelParams.Builder; outputs(Map<String,DnnShape> outputs). Specify the shapes for one or more outputs. DnnModelParams.Builder; outputShape(long... shape)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:2307,Modifiability,inherit,inherited,2307,"). Specify the shape for a single input, with the default input name. DnnModelParams.Builder; layout(String layout). Specify a string representing the axes layout that the model expects as input. DnnModelParams.Builder; lazyInitialize(boolean lazyInitialize). Optionally request lazy initialization. DnnModelParams.Builder; output(String name,; long... shape). Specify the shape as a long array for a single named output. DnnModelParams.Builder; output(String name,; DnnShape shape). Specify the shape for a single named output. DnnModelParams.Builder; outputs(Map<String,DnnShape> outputs). Specify the shapes for one or more outputs. DnnModelParams.Builder; outputShape(long... shape). Specify the shape for a single output, with the default output name. DnnModelParams.Builder; paths(Path... paths). Specify the URIs as path objects. DnnModelParams.Builder; URIs(URI... uris). Specify the URIs. DnnModelParams.Builder; URIs(Collection<URI> uris). Specify the URIs as a collection. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. files; public DnnModelParams.Builder files(File... files); Specify the URIs as files. These will be appended to any existing URIs. Parameters:; files - ; Returns:. paths; public DnnModelParams.Builder paths(Path... paths); Specify the URIs as path objects. These will be appended to any existing URIs. Parameters:; paths - ; Returns:. URIs; public DnnModelParams.Builder URIs(URI... uris); Specify the URIs. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. URIs; public DnnModelParams.Builder URIs(Collection<URI> uris); Specify the URIs as a collection. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. lazyInitialize; public DnnModelParams.Builder lazyInitialize(boolean lazyInitialize); Optionally request lazy initialization. Parameters:; lazyInitialize - ; Returns:. framework; public DnnModelParams.B",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:3485,Modifiability,variab,variables,3485,"ublic DnnModelParams.Builder files(File... files); Specify the URIs as files. These will be appended to any existing URIs. Parameters:; files - ; Returns:. paths; public DnnModelParams.Builder paths(Path... paths); Specify the URIs as path objects. These will be appended to any existing URIs. Parameters:; paths - ; Returns:. URIs; public DnnModelParams.Builder URIs(URI... uris); Specify the URIs. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. URIs; public DnnModelParams.Builder URIs(Collection<URI> uris); Specify the URIs as a collection. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. lazyInitialize; public DnnModelParams.Builder lazyInitialize(boolean lazyInitialize); Optionally request lazy initialization. Parameters:; lazyInitialize - ; Returns:. framework; public DnnModelParams.Builder framework(String framework); Specify the deep learning framework that can use the model.; ; It is recommended to use one of the default names available as static variables; in DnnModelParams.; However, an extension might use some other unique identifier to ensure that it is ; used in preference to some other implementation. Parameters:; framework - ; Returns:. layout; public DnnModelParams.Builder layout(String layout); Specify a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Parameters:; layout - ; Returns:. inputShape; public DnnModelParams.Builder inputShape(long... shape); Specify the shape for a single input, with the default input name. Parameters:; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; long... shape); Specify the shape as a long array for a single input with a specified name. Parameters:; name - ; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; DnnShape shape); Specify the shape for a single input with a specified name. Parameters:; name",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:2381,Security,hash,hashCode,2381,"nModelParams.Builder; layout(String layout). Specify a string representing the axes layout that the model expects as input. DnnModelParams.Builder; lazyInitialize(boolean lazyInitialize). Optionally request lazy initialization. DnnModelParams.Builder; output(String name,; long... shape). Specify the shape as a long array for a single named output. DnnModelParams.Builder; output(String name,; DnnShape shape). Specify the shape for a single named output. DnnModelParams.Builder; outputs(Map<String,DnnShape> outputs). Specify the shapes for one or more outputs. DnnModelParams.Builder; outputShape(long... shape). Specify the shape for a single output, with the default output name. DnnModelParams.Builder; paths(Path... paths). Specify the URIs as path objects. DnnModelParams.Builder; URIs(URI... uris). Specify the URIs. DnnModelParams.Builder; URIs(Collection<URI> uris). Specify the URIs as a collection. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. files; public DnnModelParams.Builder files(File... files); Specify the URIs as files. These will be appended to any existing URIs. Parameters:; files - ; Returns:. paths; public DnnModelParams.Builder paths(Path... paths); Specify the URIs as path objects. These will be appended to any existing URIs. Parameters:; paths - ; Returns:. URIs; public DnnModelParams.Builder URIs(URI... uris); Specify the URIs. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. URIs; public DnnModelParams.Builder URIs(Collection<URI> uris); Specify the URIs as a collection. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. lazyInitialize; public DnnModelParams.Builder lazyInitialize(boolean lazyInitialize); Optionally request lazy initialization. Parameters:; lazyInitialize - ; Returns:. framework; public DnnModelParams.Builder framework(String framework); Specify the deep learning framework ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:863,Usability,learn,learning,863,". DnnModelParams.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams.Builder. java.lang.Object; qupath.opencv.dnn.DnnModelParams.Builder. Enclosing class:; DnnModelParams. public static class DnnModelParams.Builder; extends Object; Builder for DnnModelParams. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; DnnModelParams; build(). Build the params. DnnModelParams.Builder; files(File... files). Specify the URIs as files. DnnModelParams.Builder; framework(String framework). Specify the deep learning framework that can use the model. DnnModelParams.Builder; input(String name,; long... shape). Specify the shape as a long array for a single input with a specified name. DnnModelParams.Builder; input(String name,; DnnShape shape). Specify the shape for a single input with a specified name. DnnModelParams.Builder; inputs(Map<String,DnnShape> inputs). Specify the shapes for one or more inputs. DnnModelParams.Builder; inputShape(long... shape). Specify the shape for a single input, with the default input name. DnnModelParams.Builder; layout(String layout). Specify a string representing the axes layout that the model expects as input. DnnModelParams.Builder; lazyInitialize(boolean lazyInitialize). Optionally request lazy initialization. DnnModelParams.Builder; output(String name,; long... shape). Specify the shape as a long array for a single named output. DnnModelParams.Builder; output(String name,; DnnShape shape). Specify the shape for a single named output. DnnModelParams.Builder; outputs(Map<String,DnnShape> outputs). Specify the shapes for one or more outputs. DnnModelParams.Builder; outputShape(long... shape)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:3369,Usability,learn,learning,3369,"nalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. files; public DnnModelParams.Builder files(File... files); Specify the URIs as files. These will be appended to any existing URIs. Parameters:; files - ; Returns:. paths; public DnnModelParams.Builder paths(Path... paths); Specify the URIs as path objects. These will be appended to any existing URIs. Parameters:; paths - ; Returns:. URIs; public DnnModelParams.Builder URIs(URI... uris); Specify the URIs. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. URIs; public DnnModelParams.Builder URIs(Collection<URI> uris); Specify the URIs as a collection. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. lazyInitialize; public DnnModelParams.Builder lazyInitialize(boolean lazyInitialize); Optionally request lazy initialization. Parameters:; lazyInitialize - ; Returns:. framework; public DnnModelParams.Builder framework(String framework); Specify the deep learning framework that can use the model.; ; It is recommended to use one of the default names available as static variables; in DnnModelParams.; However, an extension might use some other unique identifier to ensure that it is ; used in preference to some other implementation. Parameters:; framework - ; Returns:. layout; public DnnModelParams.Builder layout(String layout); Specify a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Parameters:; layout - ; Returns:. inputShape; public DnnModelParams.Builder inputShape(long... shape); Specify the shape for a single input, with the default input name. Parameters:; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; long... shape); Specify the shape as a long array for a single input with a specified name. Parameters:; name - ; shape - ; Returns:. input; public DnnModelParams.Builder input(String n",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:622,Availability,avail,available,622,". DnnModelParams (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams. java.lang.Object; qupath.opencv.dnn.DnnModelParams. public class DnnModelParams; extends Object; Parameters to build a DnnModel.; These are used via DnnModels.buildModel(DnnModelParams).; ; Many parameters are optional.; However as many as are available should be set, to maximize the chances ; of a DnnModelBuilder being available to build a model from the parameters.; ; Warning! The API for this class is unstable; it is likely to change in ; future releases. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnModelParams.Builder. Builder for DnnModelParams. Field Summary; Fields. Modifier and Type; Field; Description; static final String; FRAMEWORK_MXNET. Default name to identify MXNet. static final String; FRAMEWORK_ONNX_RUNTIME. Default name to identify ONNX Runtime. static final String; FRAMEWORK_OPENCV_DNN. Default name to identify OpenCV DNN. static final String; FRAMEWORK_PYTORCH. Default name to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<Str",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:700,Availability,avail,available,700,". DnnModelParams (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams. java.lang.Object; qupath.opencv.dnn.DnnModelParams. public class DnnModelParams; extends Object; Parameters to build a DnnModel.; These are used via DnnModels.buildModel(DnnModelParams).; ; Many parameters are optional.; However as many as are available should be set, to maximize the chances ; of a DnnModelBuilder being available to build a model from the parameters.; ; Warning! The API for this class is unstable; it is likely to change in ; future releases. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnModelParams.Builder. Builder for DnnModelParams. Field Summary; Fields. Modifier and Type; Field; Description; static final String; FRAMEWORK_MXNET. Default name to identify MXNet. static final String; FRAMEWORK_ONNX_RUNTIME. Default name to identify ONNX Runtime. static final String; FRAMEWORK_OPENCV_DNN. Default name to identify OpenCV DNN. static final String; FRAMEWORK_PYTORCH. Default name to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<Str",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:831,Deployability,release,releases,831,". DnnModelParams (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams. java.lang.Object; qupath.opencv.dnn.DnnModelParams. public class DnnModelParams; extends Object; Parameters to build a DnnModel.; These are used via DnnModels.buildModel(DnnModelParams).; ; Many parameters are optional.; However as many as are available should be set, to maximize the chances ; of a DnnModelBuilder being available to build a model from the parameters.; ; Warning! The API for this class is unstable; it is likely to change in ; future releases. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnModelParams.Builder. Builder for DnnModelParams. Field Summary; Fields. Modifier and Type; Field; Description; static final String; FRAMEWORK_MXNET. Default name to identify MXNet. static final String; FRAMEWORK_ONNX_RUNTIME. Default name to identify ONNX Runtime. static final String; FRAMEWORK_OPENCV_DNN. Default name to identify OpenCV DNN. static final String; FRAMEWORK_PYTORCH. Default name to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<Str",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:459,Modifiability,extend,extends,459,". DnnModelParams (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams. java.lang.Object; qupath.opencv.dnn.DnnModelParams. public class DnnModelParams; extends Object; Parameters to build a DnnModel.; These are used via DnnModels.buildModel(DnnModelParams).; ; Many parameters are optional.; However as many as are available should be set, to maximize the chances ; of a DnnModelBuilder being available to build a model from the parameters.; ; Warning! The API for this class is unstable; it is likely to change in ; future releases. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnModelParams.Builder. Builder for DnnModelParams. Field Summary; Fields. Modifier and Type; Field; Description; static final String; FRAMEWORK_MXNET. Default name to identify MXNet. static final String; FRAMEWORK_ONNX_RUNTIME. Default name to identify ONNX Runtime. static final String; FRAMEWORK_OPENCV_DNN. Default name to identify OpenCV DNN. static final String; FRAMEWORK_PYTORCH. Default name to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<Str",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:2407,Modifiability,inherit,inherited,2407," FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<String,DnnShape>; getInputs(). Get the requested inputs and their shapes. String; getLayout(). Get a string representing the axes layout that the model expects as input. Map<String,DnnShape>; getOutputs(). Get the expected outputs and their shapes. List<URI>; getURIs(). Get the URIs associated with the model (e.g. boolean; requestLazyInitialize(). Request that any model is loaded lazily on demand. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. FRAMEWORK_TENSORFLOW; public static final String FRAMEWORK_TENSORFLOW; Default name to identify TensorFlow. See Also:. Constant Field Values. FRAMEWORK_TF_LITE; public static final String FRAMEWORK_TF_LITE; Default name to identify TensorFlow Lite. See Also:. Constant Field Values. FRAMEWORK_ONNX_RUNTIME; public static final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant Field Values. Method Details. getFramework; ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:3672,Modifiability,config,config,3672," Constant Field Values. FRAMEWORK_TF_LITE; public static final String FRAMEWORK_TF_LITE; Default name to identify TensorFlow Lite. See Also:. Constant Field Values. FRAMEWORK_ONNX_RUNTIME; public static final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant Field Values. Method Details. getFramework; public String getFramework(); Get the name of the deep learning framework that may be used.; If null, consumers may try to infer this from any URIs. Returns:. getURIs; public List<URI> getURIs(); Get the URIs associated with the model (e.g. weights and/or config files). Returns:. getInputs; public Map<String,DnnShape> getInputs(); Get the requested inputs and their shapes. Returns:; the inputs, if known, or null otherwise. getOutputs; public Map<String,DnnShape> getOutputs(); Get the expected outputs and their shapes. Returns:; the outputs, if known, or null otherwise. getLayout; public String getLayout(); Get a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Returns:. requestLazyInitialize; public boolean requestLazyInitialize(); Request that any model is loaded lazily on demand.; ; This can be useful to avoid blocking at some inopportune point in the code, ; but means that any exceptions associated with model initialization will ; probably not be thrown until the model is used. Returns:. builder; public static DnnModelParams.Builder builder(DnnModelParams params); Create a new params builder, initialized with the values fr",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:2374,Performance,load,loaded,2374,"e to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<String,DnnShape>; getInputs(). Get the requested inputs and their shapes. String; getLayout(). Get a string representing the axes layout that the model expects as input. Map<String,DnnShape>; getOutputs(). Get the expected outputs and their shapes. List<URI>; getURIs(). Get the URIs associated with the model (e.g. boolean; requestLazyInitialize(). Request that any model is loaded lazily on demand. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. FRAMEWORK_TENSORFLOW; public static final String FRAMEWORK_TENSORFLOW; Default name to identify TensorFlow. See Also:. Constant Field Values. FRAMEWORK_TF_LITE; public static final String FRAMEWORK_TF_LITE; Default name to identify TensorFlow Lite. See Also:. Constant Field Values. FRAMEWORK_ONNX_RUNTIME; public static final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant F",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:4296,Performance,load,loaded,4296,"final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant Field Values. Method Details. getFramework; public String getFramework(); Get the name of the deep learning framework that may be used.; If null, consumers may try to infer this from any URIs. Returns:. getURIs; public List<URI> getURIs(); Get the URIs associated with the model (e.g. weights and/or config files). Returns:. getInputs; public Map<String,DnnShape> getInputs(); Get the requested inputs and their shapes. Returns:; the inputs, if known, or null otherwise. getOutputs; public Map<String,DnnShape> getOutputs(); Get the expected outputs and their shapes. Returns:; the outputs, if known, or null otherwise. getLayout; public String getLayout(); Get a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Returns:. requestLazyInitialize; public boolean requestLazyInitialize(); Request that any model is loaded lazily on demand.; ; This can be useful to avoid blocking at some inopportune point in the code, ; but means that any exceptions associated with model initialization will ; probably not be thrown until the model is used. Returns:. builder; public static DnnModelParams.Builder builder(DnnModelParams params); Create a new params builder, initialized with the values from existing ; params. Parameters:; params - ; Returns:; a new builder. builder; public static DnnModelParams.Builder builder(); Create a new params builder, with default values. Returns:; a new builder. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:4346,Safety,avoid,avoid,4346,"final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant Field Values. Method Details. getFramework; public String getFramework(); Get the name of the deep learning framework that may be used.; If null, consumers may try to infer this from any URIs. Returns:. getURIs; public List<URI> getURIs(); Get the URIs associated with the model (e.g. weights and/or config files). Returns:. getInputs; public Map<String,DnnShape> getInputs(); Get the requested inputs and their shapes. Returns:; the inputs, if known, or null otherwise. getOutputs; public Map<String,DnnShape> getOutputs(); Get the expected outputs and their shapes. Returns:; the outputs, if known, or null otherwise. getLayout; public String getLayout(); Get a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Returns:. requestLazyInitialize; public boolean requestLazyInitialize(); Request that any model is loaded lazily on demand.; ; This can be useful to avoid blocking at some inopportune point in the code, ; but means that any exceptions associated with model initialization will ; probably not be thrown until the model is used. Returns:. builder; public static DnnModelParams.Builder builder(DnnModelParams params); Create a new params builder, initialized with the values from existing ; params. Parameters:; params - ; Returns:; a new builder. builder; public static DnnModelParams.Builder builder(); Create a new params builder, with default values. Returns:; a new builder. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:2481,Security,hash,hashCode,2481," String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<String,DnnShape>; getInputs(). Get the requested inputs and their shapes. String; getLayout(). Get a string representing the axes layout that the model expects as input. Map<String,DnnShape>; getOutputs(). Get the expected outputs and their shapes. List<URI>; getURIs(). Get the URIs associated with the model (e.g. boolean; requestLazyInitialize(). Request that any model is loaded lazily on demand. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. FRAMEWORK_TENSORFLOW; public static final String FRAMEWORK_TENSORFLOW; Default name to identify TensorFlow. See Also:. Constant Field Values. FRAMEWORK_TF_LITE; public static final String FRAMEWORK_TF_LITE; Default name to identify TensorFlow Lite. See Also:. Constant Field Values. FRAMEWORK_ONNX_RUNTIME; public static final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant Field Values. Method Details. getFramework; public String getFramework(); Get the name of the deep learning framewor",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:1957,Usability,learn,learning,1957,"ic class ; DnnModelParams.Builder. Builder for DnnModelParams. Field Summary; Fields. Modifier and Type; Field; Description; static final String; FRAMEWORK_MXNET. Default name to identify MXNet. static final String; FRAMEWORK_ONNX_RUNTIME. Default name to identify ONNX Runtime. static final String; FRAMEWORK_OPENCV_DNN. Default name to identify OpenCV DNN. static final String; FRAMEWORK_PYTORCH. Default name to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<String,DnnShape>; getInputs(). Get the requested inputs and their shapes. String; getLayout(). Get a string representing the axes layout that the model expects as input. Map<String,DnnShape>; getOutputs(). Get the expected outputs and their shapes. List<URI>; getURIs(). Get the URIs associated with the model (e.g. boolean; requestLazyInitialize(). Request that any model is loaded lazily on demand. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. FRAMEWORK_TENSORFLOW; public static final String FRAMEWORK_TENSORFLOW; Default name to identify TensorFlow. See Also:. Constant Field Values. FRAMEWORK_TF_LITE; public static final String FRAMEWORK_TF_LITE; Default name to identify TensorFlow Lite. See Also:. Constant Field Values. FRAMEWORK_ONNX_RUNTIME; public static final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. C",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:3471,Usability,learn,learning,3471,"quals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. FRAMEWORK_TENSORFLOW; public static final String FRAMEWORK_TENSORFLOW; Default name to identify TensorFlow. See Also:. Constant Field Values. FRAMEWORK_TF_LITE; public static final String FRAMEWORK_TF_LITE; Default name to identify TensorFlow Lite. See Also:. Constant Field Values. FRAMEWORK_ONNX_RUNTIME; public static final String FRAMEWORK_ONNX_RUNTIME; Default name to identify ONNX Runtime. See Also:. Constant Field Values. FRAMEWORK_OPENCV_DNN; public static final String FRAMEWORK_OPENCV_DNN; Default name to identify OpenCV DNN. See Also:. Constant Field Values. FRAMEWORK_PYTORCH; public static final String FRAMEWORK_PYTORCH; Default name to identify PyTorch. See Also:. Constant Field Values. FRAMEWORK_MXNET; public static final String FRAMEWORK_MXNET; Default name to identify MXNet. See Also:. Constant Field Values. Method Details. getFramework; public String getFramework(); Get the name of the deep learning framework that may be used.; If null, consumers may try to infer this from any URIs. Returns:. getURIs; public List<URI> getURIs(); Get the URIs associated with the model (e.g. weights and/or config files). Returns:. getInputs; public Map<String,DnnShape> getInputs(); Get the requested inputs and their shapes. Returns:; the inputs, if known, or null otherwise. getOutputs; public Map<String,DnnShape> getOutputs(); Get the expected outputs and their shapes. Returns:; the outputs, if known, or null otherwise. getLayout; public String getLayout(); Get a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Returns:. requestLazyInitialize; public boolean requestLazyInitialize(); Request that any model is loaded lazily on demand.; ; This can be useful to avoid blocking at some inopportune point in the code, ; but means that any exceptions associated with model ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:1863,Availability,avail,available,1863,"DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:439,Modifiability,extend,extends,439,". DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built.",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:997,Modifiability,extend,extends,997,"DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:1148,Modifiability,inherit,inherited,1148,"DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:1382,Modifiability,extend,extends,1382,"DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:1908,Performance,load,loader,1908,"DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html:1222,Security,hash,hashCode,1222,"DnnModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModels. java.lang.Object; qupath.opencv.dnn.DnnModels. public class DnnModels; extends Object; Helper class for building new DnnModels.; ; This includes a ServiceLoader to support adding new implementations ; via extensions. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DnnModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModel; buildModel(DnnModelParams params). Build a DnnModel from the given parameters. static boolean; registerBuilder(DnnModelBuilder builder). Register a new DnnModelBuilder. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Register a new DnnModel class for JSON serialization/deserialization. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnModels; public DnnModels(). Method Details. registerDnnModel; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . registerBuilder; public static boolean registerBuilder(DnnModelBuilder builder); Register a new DnnModelBuilder. Parameters:; builder - ; Returns:. buildModel; public static DnnModel buildModel(DnnModelParams params); Build a DnnModel from the given parameters.; This queries all available DnnModelBuilders through a service loader. Parameters:; params - ; Returns:; a new DnnModel, or null if no model could be built. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModels.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2003,Availability,down,downsample,2003,"r; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2188,Availability,down,downsample,2188,"ixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the class",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3289,Availability,down,downsample,3289,". protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4695,Availability,down,downsample,4695,"ion<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Spec",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4871,Availability,down,downsample,4871," means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing featur",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4996,Availability,down,downsample,4996,"t typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the co",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5860,Availability,avail,available,5860," tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:726,Deployability,patch,patch-based,726,". DnnObjectClassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.DnnObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; doubl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2249,Deployability,update,updateURIs,2249,"ixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the class",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2647,Deployability,update,updateUris,2647,"tures, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3089,Deployability,patch,patch,3089,". protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3150,Deployability,patch,patch,3150,". protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6330,Deployability,update,updateURIs,6330,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6357,Deployability,update,updateURIs,6357,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6939,Deployability,update,updateURIs,6939,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:915,Integrability,interface,interface,915,". DnnObjectClassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.DnnObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; doubl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2601,Integrability,interface,interface,2601,"hObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public i",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2934,Integrability,wrap,wrapper,2934,". protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3410,Integrability,interface,interface,3410,"sifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Retur",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3520,Integrability,interface,interface,3520,", notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3754,Integrability,interface,interface,3754,"ublic DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsam",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4170,Integrability,interface,interface,4170," value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, ret",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4294,Integrability,depend,depending,4294," value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, ret",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5240,Integrability,interface,interface,5240,"ers:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singlet",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5695,Integrability,interface,interface,5695," tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6119,Integrability,interface,interface,6119,"er> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6256,Integrability,interface,interface,6256,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6440,Integrability,interface,interface,6440,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6953,Integrability,interface,interface,6953,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:625,Modifiability,extend,extends,625,". DnnObjectClassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.DnnObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; doubl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:900,Modifiability,inherit,inherited,900,". DnnObjectClassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.DnnObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; doubl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:1383,Modifiability,extend,extends,1383,"n; Class DnnObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.DnnObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.cla",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:1586,Modifiability,extend,extends,1586,"fier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toStrin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:1926,Modifiability,extend,extends,1926,"r; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2323,Modifiability,inherit,inherited,2323,"(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathCla",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2447,Modifiability,inherit,inherited,2447,"the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classific",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2586,Modifiability,inherit,inherited,2586,"hObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public i",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3667,Modifiability,extend,extends,3667,"ublic DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsam",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4794,Modifiability,extend,extends,4794," means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing featur",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5182,Modifiability,extend,extends,5182,"ers:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singlet",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3063,Safety,predict,predicted,3063,". protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3911,Safety,avoid,avoiding,3911,"ilter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunc",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2521,Security,hash,hashCode,2521,"Features(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interfac",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5795,Testability,test,test,5795," tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5826,Testability,test,test,5826," tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnShape.html:441,Modifiability,extend,extends,441,". DnnShape (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnShape. java.lang.Object; qupath.opencv.dnn.DnnShape. public final class DnnShape; extends Object; Helper class to represent input and output shapes associated with PredictionFunction.; ; In general, the shape is expected to be in the format NCHW.; ; NCHW is used by OpenCV https://docs.opencv.org/4.5.2/d6/d0f/group__dnn.html#ga29f34df9376379a603acd8df581ac8d7; and also by PyTorch; for TensorFlow some rearrangement may be needed.; ; Note: NDCHW support may be added in the future, but is not currently supported. Field Summary; Fields. Modifier and Type; Field; Description; static long; UNKNOWN_LENGTH. Constant to represent an unknown dimension length. static DnnShape; UNKNOWN_SHAPE. Constant to represent an unknown shape. static long; UNKNOWN_SIZE. Constant to represent an unknown size (i.e. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; final long; get(int i). Get the length of the specified dimension. final long[]; getShape(). Get a copy of the internal dimensions array. final boolean; isUnknown(). Returns true if the shape is unknown. final int; numDimensions(). The total number of dimensions, i.e. static DnnShape; of(long... shape). Create a new DnnShape with the specified dimension lengths. final long; size(). Total number of elements in a blob with this shape; This is the product of the lengths returned by getShape() or UNKNOWN_SHAPE. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. UNKNOWN_SHAPE; public static DnnShape UNKNOWN_S",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnShape.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnShape.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnShape.html:1818,Modifiability,inherit,inherited,1818," in the future, but is not currently supported. Field Summary; Fields. Modifier and Type; Field; Description; static long; UNKNOWN_LENGTH. Constant to represent an unknown dimension length. static DnnShape; UNKNOWN_SHAPE. Constant to represent an unknown shape. static long; UNKNOWN_SIZE. Constant to represent an unknown size (i.e. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; final long; get(int i). Get the length of the specified dimension. final long[]; getShape(). Get a copy of the internal dimensions array. final boolean; isUnknown(). Returns true if the shape is unknown. final int; numDimensions(). The total number of dimensions, i.e. static DnnShape; of(long... shape). Create a new DnnShape with the specified dimension lengths. final long; size(). Total number of elements in a blob with this shape; This is the product of the lengths returned by getShape() or UNKNOWN_SHAPE. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. UNKNOWN_SHAPE; public static DnnShape UNKNOWN_SHAPE; Constant to represent an unknown shape. UNKNOWN_LENGTH; public static long UNKNOWN_LENGTH; Constant to represent an unknown dimension length. UNKNOWN_SIZE; public static long UNKNOWN_SIZE; Constant to represent an unknown size (i.e. number of elements within a blob, mat or tensor). Method Details. getShape; public final long[] getShape(); Get a copy of the internal dimensions array. Returns:. get; public final long get(int i); Get the length of the specified dimension. Parameters:; i - ; Returns:. of; public static DnnShape of(long... shape); Create a new DnnShape with the specified dimension lengths. Parameters:; shape - ; Returns:. numDimensions; public final int numDimensions(); The total number of dimensions, i.e. the length of the array returned by getShape(). Returns:. isUnknown; public final boolean is",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnShape.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnShape.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnShape.html:1892,Security,hash,hashCode,1892,"ds. Modifier and Type; Field; Description; static long; UNKNOWN_LENGTH. Constant to represent an unknown dimension length. static DnnShape; UNKNOWN_SHAPE. Constant to represent an unknown shape. static long; UNKNOWN_SIZE. Constant to represent an unknown size (i.e. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; final long; get(int i). Get the length of the specified dimension. final long[]; getShape(). Get a copy of the internal dimensions array. final boolean; isUnknown(). Returns true if the shape is unknown. final int; numDimensions(). The total number of dimensions, i.e. static DnnShape; of(long... shape). Create a new DnnShape with the specified dimension lengths. final long; size(). Total number of elements in a blob with this shape; This is the product of the lengths returned by getShape() or UNKNOWN_SHAPE. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. UNKNOWN_SHAPE; public static DnnShape UNKNOWN_SHAPE; Constant to represent an unknown shape. UNKNOWN_LENGTH; public static long UNKNOWN_LENGTH; Constant to represent an unknown dimension length. UNKNOWN_SIZE; public static long UNKNOWN_SIZE; Constant to represent an unknown size (i.e. number of elements within a blob, mat or tensor). Method Details. getShape; public final long[] getShape(); Get a copy of the internal dimensions array. Returns:. get; public final long get(int i); Get the length of the specified dimension. Parameters:; i - ; Returns:. of; public static DnnShape of(long... shape); Create a new DnnShape with the specified dimension lengths. Parameters:; shape - ; Returns:. numDimensions; public final int numDimensions(); The total number of dimensions, i.e. the length of the array returned by getShape(). Returns:. isUnknown; public final boolean isUnknown(); Returns true if the shape is unknown. Returns:. size; pu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnShape.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnShape.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html:1180,Integrability,depend,depend,1180,". DnnTools.DNNLayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnTools.DNNLayer. java.lang.Object; qupath.opencv.dnn.DnnTools.DNNLayer. Enclosing class:; DnnTools. public static class DnnTools.DNNLayer; extends Object; Helper class to summarize a DNN layer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getID(). Layer ID. List<DnnShape>; getInputShapes(). Layer input shape. String; getName(). Layer name. List<DnnShape>; getOutputShapes(). Layer output shape. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getName; public String getName(); Layer name. Returns:. getID; public int getID(); Layer ID. Returns:. getInputShapes; public List<DnnShape> getInputShapes(); Layer input shape. This may depend on the input shape provided when summarizing the model. Returns:. getOutputShapes; public List<DnnShape> getOutputShapes(); Layer output shape. This may depend on the input shape provided when summarizing the model. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html:1340,Integrability,depend,depend,1340,". DnnTools.DNNLayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnTools.DNNLayer. java.lang.Object; qupath.opencv.dnn.DnnTools.DNNLayer. Enclosing class:; DnnTools. public static class DnnTools.DNNLayer; extends Object; Helper class to summarize a DNN layer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getID(). Layer ID. List<DnnShape>; getInputShapes(). Layer input shape. String; getName(). Layer name. List<DnnShape>; getOutputShapes(). Layer output shape. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getName; public String getName(); Layer name. Returns:. getID; public int getID(); Layer ID. Returns:. getInputShapes; public List<DnnShape> getInputShapes(); Layer input shape. This may depend on the input shape provided when summarizing the model. Returns:. getOutputShapes; public List<DnnShape> getOutputShapes(); Layer output shape. This may depend on the input shape provided when summarizing the model. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html:506,Modifiability,extend,extends,506,". DnnTools.DNNLayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnTools.DNNLayer. java.lang.Object; qupath.opencv.dnn.DnnTools.DNNLayer. Enclosing class:; DnnTools. public static class DnnTools.DNNLayer; extends Object; Helper class to summarize a DNN layer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getID(). Layer ID. List<DnnShape>; getInputShapes(). Layer input shape. String; getName(). Layer name. List<DnnShape>; getOutputShapes(). Layer output shape. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getName; public String getName(); Layer name. Returns:. getID; public int getID(); Layer ID. Returns:. getInputShapes; public List<DnnShape> getInputShapes(); Layer input shape. This may depend on the input shape provided when summarizing the model. Returns:. getOutputShapes; public List<DnnShape> getOutputShapes(); Layer output shape. This may depend on the input shape provided when summarizing the model. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html:856,Modifiability,inherit,inherited,856,". DnnTools.DNNLayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnTools.DNNLayer. java.lang.Object; qupath.opencv.dnn.DnnTools.DNNLayer. Enclosing class:; DnnTools. public static class DnnTools.DNNLayer; extends Object; Helper class to summarize a DNN layer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getID(). Layer ID. List<DnnShape>; getInputShapes(). Layer input shape. String; getName(). Layer name. List<DnnShape>; getOutputShapes(). Layer output shape. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getName; public String getName(); Layer name. Returns:. getID; public int getID(); Layer ID. Returns:. getInputShapes; public List<DnnShape> getInputShapes(); Layer input shape. This may depend on the input shape provided when summarizing the model. Returns:. getOutputShapes; public List<DnnShape> getOutputShapes(); Layer output shape. This may depend on the input shape provided when summarizing the model. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html:930,Security,hash,hashCode,930,". DnnTools.DNNLayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnTools.DNNLayer. java.lang.Object; qupath.opencv.dnn.DnnTools.DNNLayer. Enclosing class:; DnnTools. public static class DnnTools.DNNLayer; extends Object; Helper class to summarize a DNN layer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getID(). Layer ID. List<DnnShape>; getInputShapes(). Layer input shape. String; getName(). Layer name. List<DnnShape>; getOutputShapes(). Layer output shape. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getName; public String getName(); Layer name. Returns:. getID; public int getID(); Layer ID. Returns:. getInputShapes; public List<DnnShape> getInputShapes(); Layer input shape. This may depend on the input shape provided when summarizing the model. Returns:. getOutputShapes; public List<DnnShape> getOutputShapes(); Layer output shape. This may depend on the input shape provided when summarizing the model. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.DNNLayer.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:1911,Availability,down,downsample,1911,"(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2206,Availability,down,downsample,2206,"lobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3238,Availability,avail,available,3238,"<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,;",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3713,Availability,down,downsample,3713,"Request request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimens",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3912,Availability,down,downsample,3912,"(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:4751,Availability,avail,available,4751," Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvaila",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:5792,Availability,avail,available,5792,"lable and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use it. Returns:; true if CUDA should be used, false otherwise. getOutputLayerNames; public static List<String> getOutputLayerNames(Net net); Get the names of all unconnected output layers. Parameters:; net - ; Returns:. getOutputLayers; public static Map<String,DnnShape> getOutputLayers(Net net,; DnnShape... inputShape); Get the names of all unconnected output layers. P",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:6270,Availability,avail,available,6270,"tion. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use it. Returns:; true if CUDA should be used, false otherwise. getOutputLayerNames; public static List<String> getOutputLayerNames(Net net); Get the names of all unconnected output layers. Parameters:; net - ; Returns:. getOutputLayers; public static Map<String,DnnShape> getOutputLayers(Net net,; DnnShape... inputShape); Get the names of all unconnected output layers. Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:7814,Availability,error,error,7814,". Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPa",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:7943,Availability,down,downsample,7943,"ws inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Othe",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8161,Availability,down,downsampled,8161,"rseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8349,Availability,down,downsample,8349,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8366,Availability,down,downsample,8366,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8703,Availability,down,downsample,8703,"eight - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to a",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8906,Availability,down,downsampled,8906,"rver<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - th",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9094,Availability,down,downsample,9094,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9111,Availability,down,downsample,9111,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9588,Availability,down,downsample,9588," int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgum",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9882,Availability,down,downsample,9882,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9909,Availability,down,downsample,9909,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10466,Availability,down,downsample,10466,"odel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list o",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11147,Availability,down,downsample,11147,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11174,Availability,down,downsample,11174,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:1762,Deployability,patch,patch,1762,"ols();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static Mat; blobFromImage(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Func",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2057,Deployability,patch,patch,2057," boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the n",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2327,Deployability,patch,patch,2327," size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int wid",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3765,Deployability,patch,patch,3765,"ection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3984,Deployability,patch,patch,3984,"utputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnMod",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8015,Deployability,patch,patch,8015,"ws inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Othe",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8095,Deployability,patch,patch,8095,"rseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8322,Deployability,patch,patch,8322,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8396,Deployability,patch,patch,8396,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8462,Deployability,patch,patch,8462,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8795,Deployability,patch,patch,8795,"eight - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to a",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8840,Deployability,patch,patch,8840,"rver<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - th",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9067,Deployability,patch,patch,9067,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9141,Deployability,patch,patch,9141,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9207,Deployability,patch,patch,9207,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9729,Deployability,patch,patch,9729," int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgum",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9875,Deployability,patch,patch,9875,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10308,Deployability,patch,patch,10308,"orderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; heig",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10659,Deployability,patch,patch,10659,"odel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list o",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10694,Deployability,patch,patch,10694,"ssify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10731,Deployability,patch,patch,10731,"ssify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10803,Deployability,patch,patch,10803,"plying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,;",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10942,Deployability,patch,patch,10942,"unction to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Pa",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11140,Deployability,patch,patch,11140,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11634,Deployability,patch,patch,11634,"y a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation m",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11690,Deployability,patch,patch,11690,"y a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation m",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11947,Deployability,patch,patch,11947,"box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:12074,Deployability,patch,patch,12074,"h; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> det",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:15806,Integrability,depend,depending,15806,"el model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - input image; scaleFactor - scale factor; size - input width and height; mean - mean values for subtraction; swapRB - swap red and blue of the mean values; crop - center crop after resizing if needed; Returns:; a blob with axis order NCHW. blobFromImages; public static Mat blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. Parameters:; mats - input images; scaleFactor - scale factor; size - input width and height; mean - mean values for subtraction; swapRB - swap red and blue of the mean values; crop - center crop after resizing if needed; Returns:; a blob with axis order NCHW. imagesFromBlob; public static List<Mat> imagesFromBlob(Mat blob); Extract images from an OpenCV blob. Parameters:; blob - ; Returns:; a list of of images, with length depending upon batch size. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:435,Modifiability,extend,extends,435,". DnnTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnTools. java.lang.Object; qupath.opencv.dnn.DnnTools. public class DnnTools; extends Object; Tools for working with OpenCV's DNN module. Since:; 0.3.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnTools.DNNLayer. Helper class to summarize a DNN layer. Constructor Summary; Constructors. Constructor; Description; DnnTools();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static Mat; blobFromImage(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictio",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:1530,Modifiability,config,configuring,1530,"ad. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnTools.DNNLayer. Helper class to summarize a DNN layer. Constructor Summary; Constructors. Constructor; Description; DnnTools();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static Mat; blobFromImage(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detect",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2953,Modifiability,layers,layers,2953,"int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,;",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3081,Modifiability,layers,layers,3081,"o classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDn",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3379,Modifiability,layers,layers,3379,"odel,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest requ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:4031,Modifiability,extend,extends,4031," unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDn",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:4784,Modifiability,inherit,inherited,4784,"xed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as a",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:5029,Modifiability,extend,extends,5029,"l>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable()",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:5404,Modifiability,config,configuring,5404,"egionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:6565,Modifiability,layers,layers,6565,"ead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use it. Returns:; true if CUDA should be used, false otherwise. getOutputLayerNames; public static List<String> getOutputLayerNames(Net net); Get the names of all unconnected output layers. Parameters:; net - ; Returns:. getOutputLayers; public static Map<String,DnnShape> getOutputLayers(Net net,; DnnShape... inputShape); Get the names of all unconnected output layers. Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:6747,Modifiability,layers,layers,6747," static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use it. Returns:; true if CUDA should be used, false otherwise. getOutputLayerNames; public static List<String> getOutputLayerNames(Net net); Get the names of all unconnected output layers. Parameters:; net - ; Returns:. getOutputLayers; public static Map<String,DnnShape> getOutputLayers(Net net,; DnnShape... inputShape); Get the names of all unconnected output layers. Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; heigh",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:6940,Modifiability,layers,layers,6940,"; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use it. Returns:; true if CUDA should be used, false otherwise. getOutputLayerNames; public static List<String> getOutputLayerNames(Net net); Get the names of all unconnected output layers. Parameters:; net - ; Returns:. getOutputLayers; public static Map<String,DnnShape> getOutputLayers(Net net,; DnnShape... inputShape); Get the names of all unconnected output layers. Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> serve",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:7832,Performance,load,loading,7832,". Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPa",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:1688,Safety,predict,predictionMeasurement,1688,"s.DNNLayer. Helper class to summarize a DNN layer. Constructor Summary; Constructors. Constructor; Description; DnnTools();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static Mat; blobFromImage(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(Detec",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:1992,Safety,predict,predictionMeasurement,1992,"(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2262,Safety,predict,predictionMeasurement,2262,"lobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2381,Safety,detect,detect,2381,"ing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and s",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2524,Safety,detect,detection,2524," static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static Lis",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2621,Safety,detect,detect,2621,"predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> s",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2790,Safety,detect,detection,2790,"ificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-paddi",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9644,Safety,predict,predictionMeasurement,9644," int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgum",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9793,Safety,predict,prediction,9793,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10039,Safety,predict,predictionMeasurement,10039,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10105,Safety,predict,prediction,10105,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10547,Safety,predict,predictionMeasurement,10547,"odel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list o",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11058,Safety,predict,prediction,11058,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11365,Safety,predict,predictionMeasurement,11365,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11431,Safety,predict,prediction,11431,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11873,Safety,predict,predictionMeasurement,11873,"box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:12011,Safety,predict,prediction,12011,"h; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> det",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:12157,Safety,predict,predictionMeasurement,12157,"h; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> det",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:12223,Safety,predict,prediction,12223,"h; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> det",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13102,Safety,detect,detect,13102,"ted as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classificati",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13141,Safety,detect,detect,13141,"ted as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classificati",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13330,Safety,detect,detection,13330,"ted as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classificati",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13427,Safety,detect,detection,13427," IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13498,Safety,detect,detection,13498," IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13648,Safety,detect,detection,13648,"tion results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImage",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13775,Safety,detect,detect,13775,"an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - i",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13814,Safety,detect,detect,13814,"an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - i",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:13957,Safety,detect,detection,13957,"an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - i",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:14054,Safety,detect,detection,14054,"geServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - input image; scaleFactor - scale factor; size - input width and height; mean - mean values for subtraction; swapRB - swap red and blue of the mean values; crop - center crop after resizing if needed; Returns:; a blob with axis order NCHW. blobFromImages; public static Mat b",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:14184,Safety,detect,detected,14184,"geServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); throws IOException; Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - input image; scaleFactor - scale factor; size - input width and height; mean - mean values for subtraction; swapRB - swap red and blue of the mean values; crop - center crop after resizing if needed; Returns:; a blob with axis order NCHW. blobFromImages; public static Mat b",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:14323,Safety,detect,detection,14323,"rectangles surrounding distinct structures. Parameters:; model - the detection model; server - the image; request - the region within which detection should be applied; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects; Throws:; IOException - if the image could not be read. detect; public static List<PathObject> detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator); Apply a detection model to generate rectangles surrounding distinct structures. Parameters:; model - the detection model; mat - the image; request - the region corresponding to the Mat; if provided, this is used to scale and translate detected regions; classifier - function to convert the classification label into a PathClass; creator - function to create an object (e.g. detection, annotation) from a ROI; Returns:; a list of created objects. blobFromImages; public static Mat blobFromImages(Mat... mats); Create an OpenCV blob from one or more mats. Parameters:; mats - ; Returns:. blobFromImage; public static Mat blobFromImage(Mat mat); Create an OpenCV blob from a single mat. Parameters:; mat - ; Returns:. blobFromImages; public static Mat blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. Parameters:; mat - input image; scaleFactor - scale factor; size - input width and height; mean - mean values for subtraction; swapRB - swap red and blue of the mean values; crop - center crop after resizing if needed; Returns:; a blob with axis order NCHW. blobFromImages; public static Mat blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop); Create an OpenCV blob from a batch of Mats with optional scaling, re",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:4858,Security,hash,hashCode,4858,"Server<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnModel; @Deprecated; public static <T extends DnnModel> void registerDnnModel(Class<T> subtype,; String name); Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. Register a new DnnModel class for JSON serialization/deserialization. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCu",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/DnnTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1088,Availability,avail,available,1088,"    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1162,Availability,avail,available,1162,"Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values,",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1238,Availability,avail,available,1238,"ary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:3602,Availability,avail,available,3602,"e, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder siz",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:3695,Availability,avail,available,3695," Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder size(int width,; int height); Input width and height. Parameters:; width - ; height - ; Returns:.",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:3795,Availability,avail,available,3795,"e appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder size(int width,; int height); Input width and height. Parameters:; width - ; height - ; Returns:. size; public OpenCVDnn.Builder size(Size size); Input width and height. Parameters:; size - ; Returns:. modelTy",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:507,Modifiability,extend,extends,507,". OpenCVDnn.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer output",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:887,Modifiability,config,config,887,". OpenCVDnn.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer output",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:922,Modifiability,config,config,922,". OpenCVDnn.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer output",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:968,Modifiability,config,config,968,". OpenCVDnn.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer output",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1000,Modifiability,config,config,1000,"Dnn.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenC",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1972,Modifiability,layers,layers,1972,"URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig -",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2538,Modifiability,inherit,inherited,2538,"uld be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVD",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2856,Modifiability,config,config,2856,"der; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2889,Modifiability,config,config,2889,"bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target,",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2924,Modifiability,config,config,2924,"bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target,",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2989,Modifiability,config,config,2989,"s. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda()",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:3022,Modifiability,config,config,3022,"ape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:3054,Modifiability,config,config,3054,"ape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request CUDA backend and target, if available, with 16-bit floating point. Returns:. target; public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:5358,Modifiability,layers,layers,5358,"public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder size(int width,; int height); Input width and height. Parameters:; width - ; height - ; Returns:. size; public OpenCVDnn.Builder size(Size size); Input width and height. Parameters:; size - ; Returns:. modelType; public OpenCVDnn.Builder modelType(OpenCVDnn.ModelType type); Set the model type, used by OpenCVDnn.buildModel(). Parameters:; type - ; Returns:. classification; public OpenCVDnn.Builder classification(); Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. Returns:. segmentation; public OpenCVDnn.Builder segmentation(); Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. Returns:. detection; public OpenCVDnn.Builder detection(); Set the model type to be OpenCVDnn.ModelType.DETECTION. Returns:. outputs; public OpenCVDnn.Builder outputs(String... layers); Set the layer outputs. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; layers - ; Returns:. outputs; public OpenCVDnn.Builder outputs(Map<String,DnnShape> outputs); Set the layer outputs and shapes. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; outputs - ; Returns:. build; public OpenCVDnn build(); Build a new OpenCVDnn. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:5513,Modifiability,layers,layers,5513,"public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder size(int width,; int height); Input width and height. Parameters:; width - ; height - ; Returns:. size; public OpenCVDnn.Builder size(Size size); Input width and height. Parameters:; size - ; Returns:. modelType; public OpenCVDnn.Builder modelType(OpenCVDnn.ModelType type); Set the model type, used by OpenCVDnn.buildModel(). Parameters:; type - ; Returns:. classification; public OpenCVDnn.Builder classification(); Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. Returns:. segmentation; public OpenCVDnn.Builder segmentation(); Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. Returns:. detection; public OpenCVDnn.Builder detection(); Set the model type to be OpenCVDnn.ModelType.DETECTION. Returns:. outputs; public OpenCVDnn.Builder outputs(String... layers); Set the layer outputs. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; layers - ; Returns:. outputs; public OpenCVDnn.Builder outputs(Map<String,DnnShape> outputs); Set the layer outputs and shapes. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; outputs - ; Returns:. build; public OpenCVDnn build(); Build a new OpenCVDnn. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1464,Performance,load,loader,1464,"ng class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2801,Performance,load,loader,2801,"ndly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Returns:. cpu; public OpenCVDnn.Builder cpu(); Request CPU backend and target, if available. Returns:. cuda16; public OpenCVDnn.Builder cuda16(); Request C",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:1296,Safety,detect,detection,1296,"eld | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn.Builder. java.lang.Object; qupath.opencv.dnn.OpenCVDnn.Builder. Enclosing class:; OpenCVDnn. public static class OpenCVDnn.Builder; extends Object; Helper class to build an OpenCVDnn. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OpenCVDnn.Builder; backend(int backend). Specify the backend, e.g. OpenCVDnn; build(). Build a new OpenCVDnn. OpenCVDnn.Builder; classification(). Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. OpenCVDnn.Builder; config(String pathConfig). Path to config file (if required). OpenCVDnn.Builder; config(URI pathConfig). Path to config file (if required). OpenCVDnn.Builder; cpu(). Request CPU backend and target, if available. OpenCVDnn.Builder; cuda(). Request CUDA backend and target, if available. OpenCVDnn.Builder; cuda16(). Request CUDA backend and target, if available, with 16-bit floating point. OpenCVDnn.Builder; detection(). Set the model type to be OpenCVDnn.ModelType.DETECTION. OpenCVDnn.Builder; framework(String name). Specify the framework (used to identify the appropriate loader for the model). OpenCVDnn.Builder; mean(Scalar mean). Mean values which should be subtracted from the image channels before input to the Net. OpenCVDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:5191,Safety,detect,detection,5191,"public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder size(int width,; int height); Input width and height. Parameters:; width - ; height - ; Returns:. size; public OpenCVDnn.Builder size(Size size); Input width and height. Parameters:; size - ; Returns:. modelType; public OpenCVDnn.Builder modelType(OpenCVDnn.ModelType type); Set the model type, used by OpenCVDnn.buildModel(). Parameters:; type - ; Returns:. classification; public OpenCVDnn.Builder classification(); Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. Returns:. segmentation; public OpenCVDnn.Builder segmentation(); Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. Returns:. detection; public OpenCVDnn.Builder detection(); Set the model type to be OpenCVDnn.ModelType.DETECTION. Returns:. outputs; public OpenCVDnn.Builder outputs(String... layers); Set the layer outputs. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; layers - ; Returns:. outputs; public OpenCVDnn.Builder outputs(Map<String,DnnShape> outputs); Set the layer outputs and shapes. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; outputs - ; Returns:. build; public OpenCVDnn build(); Build a new OpenCVDnn. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:5227,Safety,detect,detection,5227,"public OpenCVDnn.Builder target(int target); Specify the target, e.g. opencv_dnn.DNN_TARGET_CUDA. Parameters:; target - ; Returns:; See Also:. cuda(); opencl(). backend; public OpenCVDnn.Builder backend(int backend); Specify the backend, e.g. opencv_dnn.DNN_BACKEND_CUDA. Parameters:; backend - ; Returns:; See Also:. cuda(); opencl(). mean; public OpenCVDnn.Builder mean(Scalar mean); Mean values which should be subtracted from the image channels before input to the Net. Parameters:; mean - ; Returns:. scale; public OpenCVDnn.Builder scale(double scale); Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. Parameters:; scale - ; Returns:. size; public OpenCVDnn.Builder size(int width,; int height); Input width and height. Parameters:; width - ; height - ; Returns:. size; public OpenCVDnn.Builder size(Size size); Input width and height. Parameters:; size - ; Returns:. modelType; public OpenCVDnn.Builder modelType(OpenCVDnn.ModelType type); Set the model type, used by OpenCVDnn.buildModel(). Parameters:; type - ; Returns:. classification; public OpenCVDnn.Builder classification(); Set the model type to be OpenCVDnn.ModelType.CLASSIFICATION. Returns:. segmentation; public OpenCVDnn.Builder segmentation(); Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. Returns:. detection; public OpenCVDnn.Builder detection(); Set the model type to be OpenCVDnn.ModelType.DETECTION. Returns:. outputs; public OpenCVDnn.Builder outputs(String... layers); Set the layer outputs. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; layers - ; Returns:. outputs; public OpenCVDnn.Builder outputs(Map<String,DnnShape> outputs); Set the layer outputs and shapes. Usually this isn't necessary, but it provides a means to output features ; prior to any final classification. Parameters:; outputs - ; Returns:. build; public OpenCVDnn build(); Build a new OpenCVDnn. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html:2612,Security,hash,hashCode,2612,"VDnn.Builder; modelType(OpenCVDnn.ModelType type). Set the model type, used by OpenCVDnn.buildModel(). OpenCVDnn.Builder; name(String name). User-friendly name to use with this model. OpenCVDnn.Builder; opencl(). Specify OpenCL target. OpenCVDnn.Builder; opencl16(). Specify OpenCL target with 16-bit floating point. OpenCVDnn.Builder; outputs(String... layers). Set the layer outputs. OpenCVDnn.Builder; outputs(Map<String,DnnShape> outputs). Set the layer outputs and shapes. OpenCVDnn.Builder; scale(double scale). Scale values, by which channels should be multiplied (after mean subtraction) before input to the Net. OpenCVDnn.Builder; segmentation(). Set the model type to be OpenCVDnn.ModelType.SEGMENTATION. OpenCVDnn.Builder; size(int width,; int height). Input width and height. OpenCVDnn.Builder; size(Size size). Input width and height. OpenCVDnn.Builder; target(int target). Specify the target, e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. framework; public OpenCVDnn.Builder framework(String name); Specify the framework (used to identify the appropriate loader for the model). Parameters:; name - ; Returns:. config; public OpenCVDnn.Builder config(String pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. config; public OpenCVDnn.Builder config(URI pathConfig); Path to config file (if required). Parameters:; pathConfig - ; Returns:. name; public OpenCVDnn.Builder name(String name); User-friendly name to use with this model. Parameters:; name - ; Returns:. opencl; public OpenCVDnn.Builder opencl(); Specify OpenCL target. It probably won't help, but perhaps worth a try. Returns:. opencl16; public OpenCVDnn.Builder opencl16(); Specify OpenCL target with 16-bit floating point. ; It probably won't help, but perhaps worth a try. Returns:. cuda; public OpenCVDnn.Builder cuda(); Request CUDA backend and target, if available. Return",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.Builder.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:2244,Deployability,configurat,configuration,2244,"opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from cla",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3055,Deployability,update,updateURIs,3055,"unction that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType.",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3426,Deployability,update,updateUris,3426,"VDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5131,Deployability,configurat,configuration,5131,"so:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name is specified. Returns:. getScale; public Double getScale(); Get scale factors to be applied to preprocess input. Returns:; the scale value if specified, or null if default scaling should be used; See Also:. getMean(). getModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Returns:. getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use o",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5692,Deployability,update,updateURIs,5692," getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or onl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5719,Deployability,update,updateURIs,5719," getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or onl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:6301,Deployability,update,updateURIs,6301,"pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Returns:. getBlobFunction; public BlobFunction<Mat> getBlobFunction(String name); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Parameters:; name - ; Returns:. getPredictionFunction; public PredictionFunction<Mat> getPredictionFunction(); Description copied from class: AbstractDnnModel; Get the prediction function that c",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:1227,Integrability,interface,interface,1227,". Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<Mat>; qupath.opencv.dnn.OpenCVDnn. All Implemented Interfaces:; AutoCloseable, UriResource, DnnModel. public class OpenCVDnn; extends AbstractDnnModel<Mat>; implements UriResource; Wrapper for an OpenCV Net, including essential metadata about how it should be used.; ; The main purpose of this is to support serializing models to JSON... kind of. In truth currently the paths ; to the original model files are serialized, since (to my knowledge) there is no way to save and reload a Net directly. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVDnn.Builder. Helper class to build an OpenCVDnn. static enum ; OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get th",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3380,Integrability,interface,interface,3380,"hould be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-read",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5481,Integrability,interface,interface,5481,"etScale(); Get scale factors to be applied to preprocess input. Returns:; the scale value if specified, or null if default scaling should be used; See Also:. getMean(). getModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Returns:. getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5618,Integrability,interface,interface,5618,"etModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Returns:. getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5802,Integrability,interface,interface,5802," getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or onl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:6315,Integrability,interface,interface,6315,"pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Returns:. getBlobFunction; public BlobFunction<Mat> getBlobFunction(String name); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Parameters:; name - ; Returns:. getPredictionFunction; public PredictionFunction<Mat> getPredictionFunction(); Description copied from class: AbstractDnnModel; Get the prediction function that c",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:7574,Integrability,interface,interface,7574,".; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Returns:. getBlobFunction; public BlobFunction<Mat> getBlobFunction(String name); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Parameters:; name - ; Returns:. getPredictionFunction; public PredictionFunction<Mat> getPredictionFunction(); Description copied from class: AbstractDnnModel; Get the prediction function that can apply a prediction with one or more blobs as input. Specified by:; getPredictionFunction in class AbstractDnnModel<Mat>; Returns:. close; public void close(); throws Exception; Description copied from interface: DnnModel; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Specified by:; close in interface DnnModel; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:7762,Integrability,interface,interface,7762,".; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Returns:. getBlobFunction; public BlobFunction<Mat> getBlobFunction(String name); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Parameters:; name - ; Returns:. getPredictionFunction; public PredictionFunction<Mat> getPredictionFunction(); Description copied from class: AbstractDnnModel; Get the prediction function that can apply a prediction with one or more blobs as input. Specified by:; getPredictionFunction in class AbstractDnnModel<Mat>; Returns:. close; public void close(); throws Exception; Description copied from interface: DnnModel; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Specified by:; close in interface DnnModel; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:7811,Integrability,interface,interface,7811,".; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Returns:. getBlobFunction; public BlobFunction<Mat> getBlobFunction(String name); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Parameters:; name - ; Returns:. getPredictionFunction; public PredictionFunction<Mat> getPredictionFunction(); Description copied from class: AbstractDnnModel; Get the prediction function that can apply a prediction with one or more blobs as input. Specified by:; getPredictionFunction in class AbstractDnnModel<Mat>; Returns:. close; public void close(); throws Exception; Description copied from interface: DnnModel; Close this model if it will not be needed again.; Subclasses that require cleanup may override this.; The default implementation does nothing. Specified by:; close in interface AutoCloseable; Specified by:; close in interface DnnModel; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:547,Modifiability,extend,extends,547,". OpenCVDnn (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<Mat>; qupath.opencv.dnn.OpenCVDnn. All Implemented Interfaces:; AutoCloseable, UriResource, DnnModel. public class OpenCVDnn; extends AbstractDnnModel<Mat>; implements UriResource; Wrapper for an OpenCV Net, including essential metadata about how it should be used.; ; The main purpose of this is to support serializing models to JSON... kind of. In truth currently the paths ; to the original model files are serialized, since (to my knowledge) there is no way to save and reload a Net directly. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVDnn.Builder. Helper class to build an OpenCVDnn. static enum ; OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or onl",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:1212,Modifiability,inherit,inherited,1212,". Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVDnn. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<Mat>; qupath.opencv.dnn.OpenCVDnn. All Implemented Interfaces:; AutoCloseable, UriResource, DnnModel. public class OpenCVDnn; extends AbstractDnnModel<Mat>; implements UriResource; Wrapper for an OpenCV Net, including essential metadata about how it should be used.; ; The main purpose of this is to support serializing models to JSON... kind of. In truth currently the paths ; to the original model files are serialized, since (to my knowledge) there is no way to save and reload a Net directly. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVDnn.Builder. Helper class to build an OpenCVDnn. static enum ; OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get th",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:1576,Modifiability,extend,extends,1576,"UriResource; Wrapper for an OpenCV Net, including essential metadata about how it should be used.; ; The main purpose of this is to support serializing models to JSON... kind of. In truth currently the paths ; to the original model files are serialized, since (to my knowledge) there is no way to save and reload a Net directly. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVDnn.Builder. Helper class to build an OpenCVDnn. static enum ; OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:1625,Modifiability,extend,extends,1625,"ential metadata about how it should be used.; ; The main purpose of this is to support serializing models to JSON... kind of. In truth currently the paths ; to the original model files are serialized, since (to my knowledge) there is no way to save and reload a Net directly. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVDnn.Builder. Helper class to build an OpenCVDnn. static enum ; OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:2244,Modifiability,config,configuration,2244,"opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from cla",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3129,Modifiability,inherit,inherited,3129,"d by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). i",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3226,Modifiability,inherit,inherited,3226,"the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same pre",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3365,Modifiability,inherit,inherited,3365,"hould be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-read",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3757,Modifiability,extend,extends,3757,"ith one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name is specified. Returns:. getScale; public Double getScale(); Get scale factors to be applied to preprocess input. Returns:; the scale value if specified, or null if default scaling should be used; See Also:. getMean(). getModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Ret",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3966,Modifiability,extend,extends,3966," Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name is specified. Returns:. getScale; public Double getScale(); Get scale factors to be applied to preprocess input. Returns:; the scale value if specified, or null if default scaling should be used; See Also:. getMean(). getModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Returns:. getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. g",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5131,Modifiability,config,configuration,5131,"so:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name is specified. Returns:. getScale; public Double getScale(); Get scale factors to be applied to preprocess input. Returns:; the scale value if specified, or null if default scaling should be used; See Also:. getMean(). getModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Returns:. getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use o",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:1959,Safety,predict,prediction,1959,". Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVDnn.Builder. Helper class to build an OpenCVDnn. static enum ; OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource.",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:2147,Safety,predict,prediction,2147,"m representing different classes of Model supported by OpenCV. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:2715,Safety,predict,prediction,2715,"ild the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; publ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:2752,Safety,predict,prediction,2752,"ild the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; publ",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3200,Safety,predict,predict,3200,"yer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model mode",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3209,Safety,predict,predict,3209,"yer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model mode",MatchSource.WIKI,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html
