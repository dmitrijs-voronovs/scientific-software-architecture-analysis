id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/qutip/qutip/releases/tag/v5.0.3:6,Deployability,release,release,6,"Micro release to add support for numpy 2. Bug Fixes; ---------. - Bug Fix in Process Matrix Rendering. (#2400, by Anush Venkatakrishnan); - Fix steadystate permutation being reversed. (#2443); - Add parallelizing support for `vernN` methods with `mcsolve`. (#2454 by Utkarsh). Documentation; -------------. - Added `qutip.core.gates` to apidoc/functions.rst and a Gates section to guide-states.rst. (#2441, by alan-nala). Miscellaneous; -------------. - Add support for numpy 2 (#2421, #2457); - Add support for scipy 1.14 (#2469)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.3
https://github.com/qutip/qutip/releases/tag/v5.0.3:381,Usability,guid,guide-states,381,"Micro release to add support for numpy 2. Bug Fixes; ---------. - Bug Fix in Process Matrix Rendering. (#2400, by Anush Venkatakrishnan); - Fix steadystate permutation being reversed. (#2443); - Add parallelizing support for `vernN` methods with `mcsolve`. (#2454 by Utkarsh). Documentation; -------------. - Added `qutip.core.gates` to apidoc/functions.rst and a Gates section to guide-states.rst. (#2441, by alan-nala). Miscellaneous; -------------. - Add support for numpy 2 (#2421, #2457); - Add support for scipy 1.14 (#2469)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.3
https://github.com/qutip/qutip/releases/tag/v5.0.1:6,Deployability,release,release,6,"Patch release fixing small issues, mostly with the migration from self hosting the documentation to using readthedocs. - Fix broken links in the documentation when migrating to readthedocs; - Fix readthedocs search feature; - Add setuptools to runtime compilation requirements; - Fix mcsolve documentation for open systems; - Fix OverFlowError in progress bars",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.1
https://github.com/qutip/qutip/releases/tag/v5.0.1:347,Usability,progress bar,progress bars,347,"Patch release fixing small issues, mostly with the migration from self hosting the documentation to using readthedocs. - Fix broken links in the documentation when migrating to readthedocs; - Fix readthedocs search feature; - Add setuptools to runtime compilation requirements; - Fix mcsolve documentation for open systems; - Fix OverFlowError in progress bars",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.1
https://github.com/qutip/qutip/releases/tag/v5.0.0:998,Availability,avail,available,998,"# QuTiP 5.0.0 . QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``,; ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations,; and the two may be mixed sensibly as needed. ``QobjEvo`` is now used; consistently throughout QuTiP, and the implementation has been; substantially cleaned up. A new ``Coefficient`` class is used to; represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer; and the concept of ``Integrators`` which solve ODEs has been introduced.; In future, new data layers may provide their own ``Integrators``; specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-ben",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:6664,Availability,avail,available,6664,"er, #2167); - Andrey Rakhubovsky (Corrected grammar in Bloch-Redfield master equation documentation, #2174); - Rushiraj Gadhvi (qutip.ipynbtools.version_table() can now be called without Cython installed, #2110); - Harsh Khilawala (Moved HTMLProgressBar from qutip/ipynbtools.py to qutip/ui/progressbar.py, #2112); - Avatar Srinidhi P V (Added new argument bc_type to take boundary conditions when creating QobjEvo, #2114); - Andrey Rakhubovsky (Fix types in docstring of projection(), #2363). ## Qobj changes. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the; representation is flexible. Implementations for dense and sparse formats are; included in QuTiP and custom implementations are possible. QuTiP's performance; on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an; instance of the underlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type; to another. E.g. ``.to(""dense"")`` will convert to the dense representation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``,",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11298,Availability,avail,available,11298,"lver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provi",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11458,Availability,avail,available,11458,"t for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11516,Availability,avail,available,11516,"ng a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solve",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11641,Availability,avail,available,11641,"lass allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11859,Availability,avail,available,11859,"ators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is rea",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12106,Availability,avail,available,12106,"urrent state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been repla",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12801,Availability,toler,tolerance,12801,"QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A mpi based parallel map as been added.; - The result returned by ``mcsolve`` now supports calculating photocurrents; and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Na",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:13859,Availability,avail,available,13859,"e ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A mpi based parallel map as been added.; - The result returned by ``mcsolve`` now supports calculating photocurrents; and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Nat Commun 13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solv",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:13919,Availability,avail,available,13919,"st run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A mpi based parallel map as been added.; - The result returned by ``mcsolve`` now supports calculating photocurrents; and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Nat Commun 13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14429,Availability,avail,available,14429,"llel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Nat Commun 13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class; which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have; been removed. The Floquet t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14757,Availability,toler,tolerance,14757,"13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class; which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have; been removed. The Floquet tensor may still be retried using; the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and; new options added. The environment temperature may be specified using; ``w_th``, and the result states are stored in the lab basis and optionally; in the Floquet basis using ``store_floquet_state``.; ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:20798,Availability,toler,tolerance,20798,"s have had the ``target`` parameter for; expanding the measurement operator removed. Used ``expand_operator``; to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``.; - Dimensions use a class instead of layered lists.; - Allow measurement functions to support degenerate operators.; - Add ``qeye_like`` and ``qzero_like``.; - Added fermionic annihilation and creation operators. ### QuTiP settings. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is; an instance of a settings class. All the runtime modifiable settings for; core operations are in ``qutip.settings.core``. The other settings are not; modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``qui",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:20839,Availability,toler,tolerance,20839,"surement operator removed. Used ``expand_operator``; to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``.; - Dimensions use a class instead of layered lists.; - Allow measurement functions to support degenerate operators.; - Add ``qeye_like`` and ``qzero_like``.; - Added fermionic annihilation and creation operators. ### QuTiP settings. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is; an instance of a settings class. All the runtime modifiable settings for; core operations are in ``qutip.settings.core``. The other settings are not; modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibilit",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:21512,Availability,avail,available,21512,"s are not; modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:21711,Availability,avail,available,21711,"mpilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:22005,Availability,avail,available,22005,"s for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:22255,Availability,avail,available,22255,"fe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.; - Deprecate ``three_level_atom``; - Deprecate ``orbital``. ## Changes from QuTiP 5.0.0b1:. ### Features. - Ad",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1775,Deployability,update,updated,1775,"g API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``:",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1850,Deployability,update,updated,1850,"anges. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yu",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1943,Deployability,update,update,1943," know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Go",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:2874,Deployability,update,updated,2874,"torials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier Sproken (included C header files in the source distribution, #1971); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, #1962); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, #1952); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, #1951); - Christian Staufenbiel (Add a guide on Superoperators, Pauli Basis and Channel Contraction, #1984); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, #1920); - Florian Hopfmueller (added a vastly improved implemen",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:3094,Deployability,update,updated,3094,"roved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier Sproken (included C header files in the source distribution, #1971); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, #1962); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, #1952); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, #1951); - Christian Staufenbiel (Add a guide on Superoperators, Pauli Basis and Channel Contraction, #1984); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, #1920); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, #1712, #1748 , #1788); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, #1608",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:5860,Deployability,install,installed,5860,"(Fix typos in `expect` documentation, #2331); - lklivingstone (Added __repr__ to QobjEvo, #2111); - Yuji Tamakoshi (Improve print(qutip.settings) by make it shorter, #2113); - khnikhil (Added fermionic annihilation and creation operators, #2166); - Daniel Weiss (Improved sampling algorithm for mcsolve, #2218); - SJUW (Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05, #2181); - Valan Baptist Mathuranayagam (Changed qutip-notebooks to qutip-tutorials and fixed the typo in the link redirecting to the changelog section in the PR template, #2107); - Gerardo Jose Suarez (Added information on sec_cutoff to the documentation, #2136); - Cristian Emiliano Godinez Ramirez (Added inherited members to API doc of MESolver, SMESolver, SSESolver, NonMarkovianMCSolver, #2167); - Andrey Rakhubovsky (Corrected grammar in Bloch-Redfield master equation documentation, #2174); - Rushiraj Gadhvi (qutip.ipynbtools.version_table() can now be called without Cython installed, #2110); - Harsh Khilawala (Moved HTMLProgressBar from qutip/ipynbtools.py to qutip/ui/progressbar.py, #2112); - Avatar Srinidhi P V (Added new argument bc_type to take boundary conditions when creating QobjEvo, #2114); - Andrey Rakhubovsky (Fix types in docstring of projection(), #2363). ## Qobj changes. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the; representation is flexible. Implementations for dense and sparse formats are; included in QuTiP and custom implementations are possible. QuTiP's performance; on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an; instance of the underlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be autom",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:9056,Deployability,update,updated,9056,"g time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples; include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``,; and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different; orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the; underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order``; parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``.; ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values; of ``order`` gives spline interpolations of higher orders.; - The spline type can take ``bc_type`` to control the boundary conditions.; - QobjEvo can be creating from the multiplication of a Qobj with a coefficient:; ``oper * qutip.coefficient(f, args=args)`` is equivalent to; ``qutip.QobjEvo([[oper, f]], args=args)``.; - Coefficient function can be defined in a pythonic manner: ``def f(t, A, w)``.; The dictionary ``args`` second argument is no longer needed.; Function using the exact ``f(t, args)`` signature will use the old method for; backward compatibility. ## Solver changes. The solvers in QuTiP have been heavily reworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integra",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:10473,Deployability,integrat,integrator,10473," ``oper * qutip.coefficient(f, args=args)`` is equivalent to; ``qutip.QobjEvo([[oper, f]], args=args)``.; - Coefficient function can be defined in a pythonic manner: ``def f(t, A, w)``.; The dictionary ``args`` second argument is no longer needed.; Function using the exact ``f(t, args)`` signature will use the old method for; backward compatibility. ## Solver changes. The solvers in QuTiP have been heavily reworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integrators`` are included (see the list below) and; custom implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciP",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:10754,Deployability,integrat,integrated,10754,"A, w)``.; The dictionary ``args`` second argument is no longer needed.; Function using the exact ``f(t, args)`` signature will use the old method for; backward compatibility. ## Solver changes. The solvers in QuTiP have been heavily reworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integrators`` are included (see the list below) and; custom implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``v",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11284,Deployability,integrat,integrator,11284,"lver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provi",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11386,Deployability,integrat,integrator,11386,"t for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11502,Deployability,integrat,integrator,11502,"ng a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solve",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11845,Deployability,integrat,integrated,11845,"ators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is rea",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12091,Deployability,integrat,integrator,12091,"urrent state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been repla",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12136,Deployability,integrat,integrator,12136,"ver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A m",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14929,Deployability,integrat,integrator,14929,"e influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class; which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have; been removed. The Floquet tensor may still be retried using; the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and; new options added. The environment temperature may be specified using; ``w_th``, and the result states are stored in the lab basis and optionally; in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized; (i.e. accept and return numpy arrays for frequencies ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:16409,Deployability,integrat,integration,16409,"sor may still be retried using; the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and; new options added. The environment temperature may be specified using; ``w_th``, and the result states are stored in the lab basis and optionally; in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized; (i.e. accept and return numpy arrays for frequencies and densities) and; must accept negative frequence (i.e. usually include a ``w > 0`` factor; so that the returned densities are zero for negative frequencies).; - The number of sidebands to keep, ``kmax`` may only be supplied when using; the ``FMESolver``; - The ``Tsteps`` parameter has been removed from both ``fsesolve`` and; ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used; instead. ### Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration; method with ``sesolve`` or ``mesolve`` instead. ### Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously; they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state; solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:17821,Deployability,integrat,integrators,17821,"g and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and; are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the; functionality merged into the ``solver`` parameter. Use ``solver=""pi""``; instead. ### Hierarchical Equation of Motion Solver (HEOM). - Updated the solver to use the new QuTiP integrators and data layer.; - Updated all the HEOM tutorials to QuTiP 5.; - Added support for combining bosonic and fermionic baths.; - Sped up the construction of the RHS of the HEOM solver by a factor of 4x.; - As in QuTiP 4, the HEOM supports arbitrary spectral densities, bosonic and fermionic baths, P√°de and Matsubara expansions of the correlation functions, calculating the Matsubara terminator and inspection of the ADOs (auxiliary density operators). ## QuTiP core. There have been numerous other small changes to core QuTiP features:. - ``qft(...)`` the function that returns the quantum Fourier; transform operator was moved from ``qutip.qip.algorithm`` into ``qutip``.; - The Bloch-Redfield solver tensor, ``brtensor``, has been moved into; ``qutip.core``. See the section above on the Bloch-Redfield solver; for details.; - The functions ``mat2vec`` and ``vec2mat`` for transforming states to and; from super-operator states have been renamed to ``stack_columns`` and; ``unstack",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:21488,Deployability,install,installed,21488,"s are not; modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:21687,Deployability,install,installed,21687,"mpilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:22774,Deployability,release,release,22774,"anization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.; - Deprecate ``three_level_atom``; - Deprecate ``orbital``. ## Changes from QuTiP 5.0.0b1:. ### Features. - Add dtype to printed ouput of qobj (#2352 by Rochisha Agarwal). ### Miscellaneous. - Allow scipy 1.12 to be used with qutip. (#2354 by Pieter Eendebak)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:3157,Energy Efficiency,reduce,reduced,3157,"ckage](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier Sproken (included C header files in the source distribution, #1971); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, #1962); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, #1952); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, #1951); - Christian Staufenbiel (Add a guide on Superoperators, Pauli Basis and Channel Contraction, #1984); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, #1920); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, #1712, #1748 , #1788); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, #1608); - Rajath Shetty (added support for specifying colors for individual points, vector",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11588,Energy Efficiency,efficient,efficient,11588,"lass allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:450,Integrability,depend,dependent,450,"# QuTiP 5.0.0 . QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``,; ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations,; and the two may be mixed sensibly as needed. ``QobjEvo`` is now used; consistently throughout QuTiP, and the implementation has been; substantially cleaned up. A new ``Coefficient`` class is used to; represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer; and the concept of ``Integrators`` which solve ODEs has been introduced.; In future, new data layers may provide their own ``Integrators``; specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-ben",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1390,Integrability,interface,interface,1390,"ntially cleaned up. A new ``Coefficient`` class is used to; represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer; and the concept of ``Integrators`` which solve ODEs has been introduced.; In future, new data layers may provide their own ``Integrators``; specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still al",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:2127,Integrability,interface,interface,2127,"ey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:7464,Integrability,contract,contract,7464,"ata is still acessible via the ``.data`` attribute, but is now an; instance of the underlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type; to another. E.g. ``.to(""dense"")`` will convert to the dense representation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types wit",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:8024,Integrability,depend,dependent,8024,"esentation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples; include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``,; and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different; orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the; underlying coefficient function",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:8120,Integrability,depend,dependent,8120,"`dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples; include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``,; and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different; orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the; underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order``; parameter. ``_step_func_coeff=False`` is equiva",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:10473,Integrability,integrat,integrator,10473," ``oper * qutip.coefficient(f, args=args)`` is equivalent to; ``qutip.QobjEvo([[oper, f]], args=args)``.; - Coefficient function can be defined in a pythonic manner: ``def f(t, A, w)``.; The dictionary ``args`` second argument is no longer needed.; Function using the exact ``f(t, args)`` signature will use the old method for; backward compatibility. ## Solver changes. The solvers in QuTiP have been heavily reworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integrators`` are included (see the list below) and; custom implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciP",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:10567,Integrability,interface,interface,10567," ``qutip.QobjEvo([[oper, f]], args=args)``.; - Coefficient function can be defined in a pythonic manner: ``def f(t, A, w)``.; The dictionary ``args`` second argument is no longer needed.; Function using the exact ``f(t, args)`` signature will use the old method for; backward compatibility. ## Solver changes. The solvers in QuTiP have been heavily reworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integrators`` are included (see the list below) and; custom implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own i",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:10754,Integrability,integrat,integrated,10754,"A, w)``.; The dictionary ``args`` second argument is no longer needed.; Function using the exact ``f(t, args)`` signature will use the old method for; backward compatibility. ## Solver changes. The solvers in QuTiP have been heavily reworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integrators`` are included (see the list below) and; custom implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``v",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11061,Integrability,depend,depends,11061,"om implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an appr",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11108,Integrability,interface,interface,11108,"om implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an appr",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11284,Integrability,integrat,integrator,11284,"lver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provi",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11386,Integrability,integrat,integrator,11386,"t for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11502,Integrability,integrat,integrator,11502,"ng a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solve",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:11845,Integrability,integrat,integrated,11845,"ators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is rea",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12091,Integrability,integrat,integrator,12091,"urrent state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been repla",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12136,Integrability,integrat,integrator,12136,"ver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A m",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14180,Integrability,interface,interface,14180," - A mpi based parallel map as been added.; - The result returned by ``mcsolve`` now supports calculating photocurrents; and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Nat Commun 13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14929,Integrability,integrat,integrator,14929,"e influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class; which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have; been removed. The Floquet tensor may still be retried using; the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and; new options added. The environment temperature may be specified using; ``w_th``, and the result states are stored in the lab basis and optionally; in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized; (i.e. accept and return numpy arrays for frequencies ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:16409,Integrability,integrat,integration,16409,"sor may still be retried using; the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and; new options added. The environment temperature may be specified using; ``w_th``, and the result states are stored in the lab basis and optionally; in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized; (i.e. accept and return numpy arrays for frequencies and densities) and; must accept negative frequence (i.e. usually include a ``w > 0`` factor; so that the returned densities are zero for negative frequencies).; - The number of sidebands to keep, ``kmax`` may only be supplied when using; the ``FMESolver``; - The ``Tsteps`` parameter has been removed from both ``fsesolve`` and; ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used; instead. ### Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration; method with ``sesolve`` or ``mesolve`` instead. ### Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously; they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state; solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:17216,Integrability,interface,interface,17216,"; ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used; instead. ### Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration; method with ``sesolve`` or ``mesolve`` instead. ### Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously; they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state; solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and; are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the; functionality merged into the ``solver`` parameter. Use ``solver=""pi""``; instead. ### Hierarchical Equation of Motion Solver (HEOM). - Updated the solver to use the new QuTiP integrators and data layer.; - Updated all the HEOM tutorials to QuTiP 5.; - Added support for combining bosonic and fermionic baths.; - Sped up the construction of the RHS of the HEOM solver by a factor of 4x.; - As in QuTiP 4, the HEOM supports arbitrary spectral densities, bosonic and fermionic baths, P√°de and Matsubara expansions of the correlation functions, calculating the Matsubara termina",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:17304,Integrability,depend,dependent,17304," of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration; method with ``sesolve`` or ``mesolve`` instead. ### Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously; they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state; solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and; are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the; functionality merged into the ``solver`` parameter. Use ``solver=""pi""``; instead. ### Hierarchical Equation of Motion Solver (HEOM). - Updated the solver to use the new QuTiP integrators and data layer.; - Updated all the HEOM tutorials to QuTiP 5.; - Added support for combining bosonic and fermionic baths.; - Sped up the construction of the RHS of the HEOM solver by a factor of 4x.; - As in QuTiP 4, the HEOM supports arbitrary spectral densities, bosonic and fermionic baths, P√°de and Matsubara expansions of the correlation functions, calculating the Matsubara terminator and inspection of the ADOs (auxiliary density operators). ## QuTiP core. There have been numero",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:17821,Integrability,integrat,integrators,17821,"g and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and; are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the; functionality merged into the ``solver`` parameter. Use ``solver=""pi""``; instead. ### Hierarchical Equation of Motion Solver (HEOM). - Updated the solver to use the new QuTiP integrators and data layer.; - Updated all the HEOM tutorials to QuTiP 5.; - Added support for combining bosonic and fermionic baths.; - Sped up the construction of the RHS of the HEOM solver by a factor of 4x.; - As in QuTiP 4, the HEOM supports arbitrary spectral densities, bosonic and fermionic baths, P√°de and Matsubara expansions of the correlation functions, calculating the Matsubara terminator and inspection of the ADOs (auxiliary density operators). ## QuTiP core. There have been numerous other small changes to core QuTiP features:. - ``qft(...)`` the function that returns the quantum Fourier; transform operator was moved from ``qutip.qip.algorithm`` into ``qutip``.; - The Bloch-Redfield solver tensor, ``brtensor``, has been moved into; ``qutip.core``. See the section above on the Bloch-Redfield solver; for details.; - The functions ``mat2vec`` and ``vec2mat`` for transforming states to and; from super-operator states have been renamed to ``stack_columns`` and; ``unstack",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:150,Modifiability,flexible,flexible,150,"# QuTiP 5.0.0 . QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``,; ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations,; and the two may be mixed sensibly as needed. ``QobjEvo`` is now used; consistently throughout QuTiP, and the implementation has been; substantially cleaned up. A new ``Coefficient`` class is used to; represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer; and the concept of ``Integrators`` which solve ODEs has been introduced.; In future, new data layers may provide their own ``Integrators``; specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-ben",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:652,Modifiability,layers,layers,652,"# QuTiP 5.0.0 . QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``,; ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations,; and the two may be mixed sensibly as needed. ``QobjEvo`` is now used; consistently throughout QuTiP, and the implementation has been; substantially cleaned up. A new ``Coefficient`` class is used to; represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer; and the concept of ``Integrators`` which solve ODEs has been introduced.; In future, new data layers may provide their own ``Integrators``; specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-ben",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:2253,Modifiability,layers,layers,2253,"ion of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier S",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:5584,Modifiability,inherit,inherited,5584,"the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style, #2303); - Sola85 (Fixed simdiag not returning orthonormal eigenvectors, #2269); - Edward Thomas (Fix LaTeX display of Qobj state in Jupyter cell outputs, #2272); - Bogdan Reznychenko (Rework `kraus_to_choi` making it faster, #2284); - gabbence95 (Fix typos in `expect` documentation, #2331); - lklivingstone (Added __repr__ to QobjEvo, #2111); - Yuji Tamakoshi (Improve print(qutip.settings) by make it shorter, #2113); - khnikhil (Added fermionic annihilation and creation operators, #2166); - Daniel Weiss (Improved sampling algorithm for mcsolve, #2218); - SJUW (Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05, #2181); - Valan Baptist Mathuranayagam (Changed qutip-notebooks to qutip-tutorials and fixed the typo in the link redirecting to the changelog section in the PR template, #2107); - Gerardo Jose Suarez (Added information on sec_cutoff to the documentation, #2136); - Cristian Emiliano Godinez Ramirez (Added inherited members to API doc of MESolver, SMESolver, SSESolver, NonMarkovianMCSolver, #2167); - Andrey Rakhubovsky (Corrected grammar in Bloch-Redfield master equation documentation, #2174); - Rushiraj Gadhvi (qutip.ipynbtools.version_table() can now be called without Cython installed, #2110); - Harsh Khilawala (Moved HTMLProgressBar from qutip/ipynbtools.py to qutip/ui/progressbar.py, #2112); - Avatar Srinidhi P V (Added new argument bc_type to take boundary conditions when creating QobjEvo, #2114); - Andrey Rakhubovsky (Fix types in docstring of projection(), #2363). ## Qobj changes. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the; representation is flexible. Implementations for dense and sparse formats are; included in QuTiP and custom implementations are possible. QuTiP's performance; on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the `",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:6271,Modifiability,flexible,flexible,6271,"from 0 to 0.05, #2181); - Valan Baptist Mathuranayagam (Changed qutip-notebooks to qutip-tutorials and fixed the typo in the link redirecting to the changelog section in the PR template, #2107); - Gerardo Jose Suarez (Added information on sec_cutoff to the documentation, #2136); - Cristian Emiliano Godinez Ramirez (Added inherited members to API doc of MESolver, SMESolver, SSESolver, NonMarkovianMCSolver, #2167); - Andrey Rakhubovsky (Corrected grammar in Bloch-Redfield master equation documentation, #2174); - Rushiraj Gadhvi (qutip.ipynbtools.version_table() can now be called without Cython installed, #2110); - Harsh Khilawala (Moved HTMLProgressBar from qutip/ipynbtools.py to qutip/ui/progressbar.py, #2112); - Avatar Srinidhi P V (Added new argument bc_type to take boundary conditions when creating QobjEvo, #2114); - Andrey Rakhubovsky (Fix types in docstring of projection(), #2363). ## Qobj changes. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the; representation is flexible. Implementations for dense and sparse formats are; included in QuTiP and custom implementations are possible. QuTiP's performance; on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an; instance of the underlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type; to another. E.g. ``.to(""dense"")`` will convert to the dense representation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to spe",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:8101,Modifiability,extend,extended,8101,"esentation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples; include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``,; and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different; orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the; underlying coefficient function",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:23067,Modifiability,config,config,23067,"anization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.; - Deprecate ``three_level_atom``; - Deprecate ``orbital``. ## Changes from QuTiP 5.0.0b1:. ### Features. - Add dtype to printed ouput of qobj (#2352 by Rochisha Agarwal). ### Miscellaneous. - Allow scipy 1.12 to be used with qutip. (#2354 by Pieter Eendebak)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:6398,Performance,perform,performance,6398," PR template, #2107); - Gerardo Jose Suarez (Added information on sec_cutoff to the documentation, #2136); - Cristian Emiliano Godinez Ramirez (Added inherited members to API doc of MESolver, SMESolver, SSESolver, NonMarkovianMCSolver, #2167); - Andrey Rakhubovsky (Corrected grammar in Bloch-Redfield master equation documentation, #2174); - Rushiraj Gadhvi (qutip.ipynbtools.version_table() can now be called without Cython installed, #2110); - Harsh Khilawala (Moved HTMLProgressBar from qutip/ipynbtools.py to qutip/ui/progressbar.py, #2112); - Avatar Srinidhi P V (Added new argument bc_type to take boundary conditions when creating QobjEvo, #2114); - Andrey Rakhubovsky (Fix types in docstring of projection(), #2363). ## Qobj changes. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the; representation is flexible. Implementations for dense and sparse formats are; included in QuTiP and custom implementations are possible. QuTiP's performance; on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an; instance of the underlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type; to another. E.g. ``.to(""dense"")`` will convert to the dense representation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` re",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:8423,Performance,cache,cached,8423," operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples; include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``,; and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different; orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the; underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order``; parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``.; ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values; of ``order`` gives spline interpolations of higher orders.; - The spline type can take ``bc_type`` to control the boundar",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:20557,Performance,load,load,20557,"e been removed.; Use ``rand_dm(distribution=""hs"")`` and ``rand_dm(distribution=""ginibre"")``; instead.; - The function ``rand_ket_haar`` has been removed. Use; ``rand_ket(distribution=""haar"")`` instead.; - The measurement functions have had the ``target`` parameter for; expanding the measurement operator removed. Used ``expand_operator``; to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``.; - Dimensions use a class instead of layered lists.; - Allow measurement functions to support degenerate operators.; - Add ``qeye_like`` and ``qzero_like``.; - Added fermionic annihilation and creation operators. ### QuTiP settings. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is; an instance of a settings class. All the runtime modifiable settings for; core operations are in ``qutip.settings.core``. The other settings are not; modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. ## Visualization. - Added arguments to ``plot_wigner`` and ``plot_wigner_fock_distribution`` to specify parameters for ``wigner``.; - Removed ``Bloch3D``. The same functionality is provided by ``Bloch``.; - Added ``fig``, ``ax`` and ``cmap`` keyword arguments to all visualization functions.; - Most visualization functions now respect the ``colorblind_safe`` setting.; - Added new functions to create animations from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qut",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12706,Safety,timeout,timeout,12706,"QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A mpi based parallel map as been added.; - The result returned by ``mcsolve`` now supports calculating photocurrents; and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Na",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12783,Safety,timeout,timeout,12783,"QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A mpi based parallel map as been added.; - The result returned by ``mcsolve`` now supports calculating photocurrents; and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Na",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14294,Safety,timeout,timeout,14294,"e over N trajectories.; - The old ``parfor`` parallel execution function has been removed from; ``qutip.parallel``. Use ``parallel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Nat Commun 13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class; which manages the transformations from l",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:22304,Security,access,accessible,22304,"tions from a list of ``Qobj`` or directly from solver results with saved states. ## Package reorganization. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.control`` has been moved to qutip-qtrl and once installed qutip-qtrl is available as either ``qutip.control`` or ``qutip_qtrl``. Note that ``quitp_qtrl`` is provided primarily for backwards compatibility. Improvements to optimal control will take place in the new ``qutip_qoc`` package.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. ## Miscellaneous. - Support has been added for 64-bit integer sparse matrix indices, allowing; sparse matrices with up to 2**63 rows and columns. This support needs to; be enabled at compilation time by calling ``setup.py`` and passing; ``--with-idxint-64``. ### Feature removals. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.; - Deprecate ``three_level_atom``; - Deprecate ``orbital``. ## Changes from QuTiP 5.0.0b1:. ### Features. - Add dtype to printed ouput of qobj (#2352 by Rochisha ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1579,Testability,test,testing,1579,"er; and the concept of ``Integrators`` which solve ODEs has been introduced.; In future, new data layers may provide their own ``Integrators``; specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qu",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1801,Testability,benchmark,benchmarks,1801,"g API of QuTiP remains familiar, but there have; had to be many small breaking changes. If we can make changes to; easy migrating code from QuTiP 4 to QuTiP 5, please let us know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``:",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1955,Testability,benchmark,benchmarks,1955," know.; A notebook to help with migration is available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Go",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:1998,Testability,benchmark,benchmark,1998,"s available on [colab](https://colab.research.google.com/drive/18TcuHNQifYSHdGey7otK8IPDB1YbDZpW?usp=sharing). . An extensive list of changes follows. ## Contributors. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:2415,Testability,test,test,2415,"erface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing,; testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross; - Paul Menczel. Two Google Summer of Code contributors updated the tutorials and benchmarks to; QuTiP 5:. - Christian Staufenbiel updated many of the [tutorials](https://github.com/qutip/qutip-tutorials).; - Xavier Sproken update the [benchmarks](https://github.com/qutip/qutip-benchmark/). During an internship at RIKEN, Patrick Hopf created a new quantum control method and; improved the existing methods interface:. - Patrick Hopf created new [quantum control package](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier Sproken (included C header files in the source distribution, #1971); - Christian Staufenbiel (added support",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:3189,Testability,log,logger,3189,"ckage](https://github.com/qutip/qutip-qoc/). Four experimental data layers backends were written either as part of Google Summer; of Code or as separate projects. While these are still alpha quality, they helped; significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier Sproken (included C header files in the source distribution, #1971); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, #1962); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, #1952); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, #1951); - Christian Staufenbiel (Add a guide on Superoperators, Pauli Basis and Channel Contraction, #1984); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, #1920); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, #1712, #1748 , #1788); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, #1608); - Rajath Shetty (added support for specifying colors for individual points, vector",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:7561,Testability,log,logm,7561,"erlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type; to another. E.g. ``.to(""dense"")`` will convert to the dense representation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:7596,Testability,log,logarithm,7596,"erlying data type instead of a SciPy-like sparse matrix.; The operations available in ``qutip.core.data`` may be used on ``.data``,; regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other; operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type; to another. E.g. ``.to(""dense"")`` will convert to the dense representation and; ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype``; parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product.; ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of; the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``,; ``.evaluate`` and ``.check_isunitary`` have been removed.; - The property ``dtype`` return the representation of the data used.; - The new ``data_as`` allow to obtain the data as a common python formats:; numpy array, scipy sparse matrix, JAX Array, etc. ## QobjEvo changes. The ``QobjEvo`` type for storing time-dependent quantum objects has been; significantly expanded, standardized and extended. The time-dependent; coefficients are now represented using a new ``Coefficient`` type that; may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as; strings are automatically compiled if possible and the compilation is; cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:16807,Testability,log,logging,16807,"w be vectorized; (i.e. accept and return numpy arrays for frequencies and densities) and; must accept negative frequence (i.e. usually include a ``w > 0`` factor; so that the returned densities are zero for negative frequencies).; - The number of sidebands to keep, ``kmax`` may only be supplied when using; the ``FMESolver``; - The ``Tsteps`` parameter has been removed from both ``fsesolve`` and; ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used; instead. ### Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration; method with ``sesolve`` or ``mesolve`` instead. ### Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously; they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state; solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. ### Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver``; or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been; removed.; - Support for calculating correlation with ``mcsolve`` has been removed. ### Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. ### Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and; are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the; functionality merged into the ``solver`` parameter. Use ``solver=""pi""``; instead. ### Hierarchical Equation of Motion Solver (HEOM). - Updated the solver to use the new QuTiP int",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:3707,Usability,guid,guide,3707,"w); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy/); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax/). Finally, Yuji Tamakoshi updated the visualization function and added animation; functions as part of Google Summer of Code project. We have also had many other contributors, whose specific contributions are; detailed below:. - Pieter Eendebak (updated the required SciPy to 1.5+, #1982); - Pieter Eendebak (reduced import times by setting logger names, #1981); - Pieter Eendebak (Allow scipy 1.12 to be used with qutip, #2354); - Xavier Sproken (included C header files in the source distribution, #1971); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, #1962); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, #1952); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, #1951); - Christian Staufenbiel (Add a guide on Superoperators, Pauli Basis and Channel Contraction, #1984); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, #1920); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, #1712, #1748 , #1788); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, #1608); - Rajath Shetty (added support for specifying colors for individual points, vectors and states display by `qutip.Bloch`, #1335); - Rochisha Agarwal (Add dtype to printed ouput of qobj, #2352); - Kosuke Mizuno (Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(), #2057); - Matt Ord (Only pre-compute density matrices if keep_runs_results is False, #2303); - Daniel Moreno Gal√°n (Add the possi",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:10878,Usability,progress bar,progress bar,10878,"eworked and standardized.; Under the hood solvers now make use of swappable ODE ``Integrators``.; Many ``Integrators`` are included (see the list below) and; custom implementations are possible. Solvers now consistently; accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or; any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. ### All solvers:. - Solver options are now supplied in an ordinary Python dict.; ``qutip.Options`` is deprecated and returns a dict for backwards; compatibility.; - A specific ODE integrator may be selected by supplying a; ``method`` option.; - Each solver provides a class interface. Creating an instance; of the class allows a solver to be run multiple times for the; same system without having to repeatedly reconstruct the; right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g.,; ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option.; A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on; the current state of the evolution interface reworked. Now a property of the; solver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-i",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:12155,Usability,usab,usable,12155,"ver is to be used as an arguments:; ``args={""state"": MESolver.StateFeedback(default=rho0)}``. ### Integrators:. - The SciPy zvode integrator is available with the BDF and; Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by; Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods; of order 7 and 9 are available as ``vern7`` and ``vern9``. See; http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the; the system to be integrated is available as ``diag``. It only works on; time-independent systems and is slow to setup, but once the diagonalization; is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is; available as ``krylov``. This integrator is only usable with ``sesolve``. ### Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary.; Unlike ``.expect``, the values are provided in a Python list rather than; a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is; now more consistent across solvers. ### Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or; ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit; early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories.; Instead, just run the solver multiple times and use the class ``MCSolver``; if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option.; - A loky based parallel map as been added.; - A m",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0:14444,Usability,feedback,feedback,14444,"llel_map``, ``loky_map`` or ``mpi_pmap`` instead.; - Added improved sampling options which converge much faster when the; probability of collapse is small. ### Non Markovian Monte-Carlo Solver (nm_mcsolve):. - New Monte-Carlo Solver supporting negative decay rates.; - Based on the influence martingale approach, Donvil et al., Nat Commun 13, 4140 (2022).; - Most of the improvements made to the regular Monte-Carlo solver are also available here.; - The value of the influence martingale is available through the ``.trace`` attribute of the result. ### Stochastic Equation Solvers (ssesolve, smesolve). - Function call greatly changed: many keyword arguments are now options.; - m_ops and dW_factors are now changed from the default from the new class interface only.; - Use the same parallel maps as mcsolve: support for loky and mpi map added.; - End conditions ``timeout`` and ``target_tol`` added.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence``.; - Wiener function is now available as a feedback. ### Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementations been heavily reworked to; reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. ### Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov``; ODE integrator. The function ``krylovsolve`` is maintained for convenience; and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the; Hamiltonian instead. ### Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class; which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have; been removed. The Floquet t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:1009,Availability,error,errors,1009,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:1483,Availability,redundant,redundant,1483,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:322,Integrability,interface,interface,322,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:999,Safety,timeout,timeouts,999,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:1483,Safety,redund,redundant,1483,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:1109,Testability,test,tests,1109,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:1519,Testability,test,tests,1519,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:198,Usability,feedback,feedback,198,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0b1:1302,Usability,guid,guide,1302,"Features; --------. - Create a Dimension class (#1996); - Add arguments of plot_wigner() and plot_wigner_fock_distribution() to specify parameters for wigner(). (#2057, by Kosuke Mizuno); - Restore feedback to solvers (#2210); - Added mpi_pmap, which uses the mpi4py module to run computations in parallel through the MPI interface. (#2296, by Paul); - Only pre-compute density matrices if keep_runs_results is False (#2303, by Matt Ord). Bug Fixes; ---------. - Add the possibility to customize point colors as in V4 and fix point plot behavior for 'l' style (#1974, by Daniel Moreno Gal√°n); - Disabled broken ""improved sampling"" for `nm_mcsolve`. (#2234, by Paul); - Fixed result objects storing a reference to the solver through options._feedback. (#2262, by Paul); - Fixed simdiag not returning orthonormal eigenvectors. (#2269, by Sola85); - Fix LaTeX display of Qobj state in Jupyter cell outputs (#2272, by Edward Thomas); - Improved behavior of `parallel_map` and `loky_pmap` in the case of timeouts, errors or keyboard interrupts (#2280, by Paul); - Ignore deprecation warnings from cython 0.29.X in tests. (#2288); - Fixed two problems with the steady_state() solver in the HEOM method. (#2333). Miscellaneous; -------------. - Improve fidelity doc-string (#2257); - Improve documentation in guide/dynamics (#2271); - Improve states and operator parameters documentation. (#2289); - Rework `kraus_to_choi` making it faster (#2284, by Bogdan Reznychenko); - Remove Bloch3D: redundant to Bloch (#2306); - Allow tests to run without matplotlib and ipython. (#2311); - Add too small step warnings in fixed dt SODE solver (#2313); - Add `dtype` to `Qobj` and `QobjEvo` (#2325); - Fix typos in `expect` documentation (#2331, by gabbence95); - Allow measurement functions to support degenerate operators. (#2342)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0b1
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:2444,Availability,error,error,2444,"ents and applied colorblind_safe to functions in visualization.py (#2170 by Yuji Tamakoshi); - Changed arguments and applied colorblind_safe to plot_wigner_sphere and matrix_histogram in visualization.py (#2193 by Yuji Tamakoshi); - Added Dia data layer which represents operators as multi-diagonal matrices. (#2196); - Added support for animated plots. (#2203 by Yuji Tamakoshi); - Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transformation to `floquet_markov_mesolve` (#1952 by christian512); - Added default _isherm value (True) for momentum and position operators. (#2032 by Asier Galicia); - Changed qutip-notebooks to qutip-tutorials and fixed the typo in the link redirecting to the changelog section in the PR template. (#2107 by Valan Baptist Mathuranayagam); - Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05. (#2181 by SJUW); - Raise error on insufficient memory. (#2224); - Fixed fallback to `fsesolve` call in `fmmesolve` (#2225). ## Removals. - Remove `qutip.control` and replace with qutip_qtrl. (#2116); - Deleted `_solve` in countstat.py and used `_data.solve`. (#2120 by Yuji Tamakoshi); - Deprecate `three_level_atom` (#2221); - Deprecate `orbital` (#2223). ## Documentation. - Add a guide on Superoperators, Pauli Basis and Channel Contraction. (#1984 by christian512); - Added information on `sec_cutoff` to the documentation (#2136 by Gerardo Jose Suarez); - Added inherited members to API doc of `MESolver`, `SMESolver`, `SSESolver`, `NonMarkovianMCSolver` (#2167 by Cristian Emiliano Godinez Ramirez); - Corrected grammar in Bloch-Redfield master equation documentation (#2174 by Andrey Rakhubovsky). ## Miscellaneous. - Update scipy version requirement to 1.5+ (#1982 by Pieter Eendebak); - Added __all__ to qutip/measurements.py and qutip/core/semidefinite.py (#2103 by Rushiraj Gadhvi); - Restore towncrier check (#2105)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:16,Deployability,release,release,16,"**This is a pre-release.**. Continuation of the QuTiP 5 redesign. . It include fixing bugs and polishing features introduced in the alpha 1 release, updated stochastic solvers, a new solver: `nm_mcsolve` and animation functions. ## Features. - Add support for different spectra types for `bloch_redfield_tensor` (#1951); - Improve qutip import times by setting logger names explicitly. (#1981, by Pieter Eendebak); - Change the order of parameters in `expand_operator` (#1991); - Add `svn` and `solve` to dispatched (#2002); - Added `nm_mcsolve` to provide support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in arXiv:2209.08958 [quant-ph]. (#2070 by pmenczel); - Add support for combining bosinic and fermionic HEOM baths (#2089); - Added `__repr__` to QobjEvo (#2111 by lklivingstone); - Improve `print(qutip.settings)` by make it shorter (#2113 by tamakoshi2001); - Create the `trace_oper_ket` operation (#2126); - Speed up the construction of the RHS of the HEOM solver by a factor of 4x by converting the final step to Cython. (#2128); - Rewrite the stochastic solver to use the v5 solver interface. (#2131); - Add `Qobj.data_as` to extract underlying data in original format. (#2141); - Add `qeye_like` and `qzero_like` (#2153); - Add capacity to dispatch on Data (#2157); - Added fermionic annihilation and creation operators. (#2166 by khnikhil); - Changed arguments and applied colorblind_safe to functions in visualization.py (#2170 by Yuji Tamakoshi); - Changed arguments and applied colorblind_safe to plot_wigner_sphere and matrix_histogram in visualization.py (#2193 by Yuji Tamakoshi); - Added Dia data layer which represents operators as multi-diagonal matrices. (#2196); - Added support for animated plots. (#2203 by Yuji Tamakoshi); - Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transfo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:140,Deployability,release,release,140,"**This is a pre-release.**. Continuation of the QuTiP 5 redesign. . It include fixing bugs and polishing features introduced in the alpha 1 release, updated stochastic solvers, a new solver: `nm_mcsolve` and animation functions. ## Features. - Add support for different spectra types for `bloch_redfield_tensor` (#1951); - Improve qutip import times by setting logger names explicitly. (#1981, by Pieter Eendebak); - Change the order of parameters in `expand_operator` (#1991); - Add `svn` and `solve` to dispatched (#2002); - Added `nm_mcsolve` to provide support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in arXiv:2209.08958 [quant-ph]. (#2070 by pmenczel); - Add support for combining bosinic and fermionic HEOM baths (#2089); - Added `__repr__` to QobjEvo (#2111 by lklivingstone); - Improve `print(qutip.settings)` by make it shorter (#2113 by tamakoshi2001); - Create the `trace_oper_ket` operation (#2126); - Speed up the construction of the RHS of the HEOM solver by a factor of 4x by converting the final step to Cython. (#2128); - Rewrite the stochastic solver to use the v5 solver interface. (#2131); - Add `Qobj.data_as` to extract underlying data in original format. (#2141); - Add `qeye_like` and `qzero_like` (#2153); - Add capacity to dispatch on Data (#2157); - Added fermionic annihilation and creation operators. (#2166 by khnikhil); - Changed arguments and applied colorblind_safe to functions in visualization.py (#2170 by Yuji Tamakoshi); - Changed arguments and applied colorblind_safe to plot_wigner_sphere and matrix_histogram in visualization.py (#2193 by Yuji Tamakoshi); - Added Dia data layer which represents operators as multi-diagonal matrices. (#2196); - Added support for animated plots. (#2203 by Yuji Tamakoshi); - Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transfo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:149,Deployability,update,updated,149,"**This is a pre-release.**. Continuation of the QuTiP 5 redesign. . It include fixing bugs and polishing features introduced in the alpha 1 release, updated stochastic solvers, a new solver: `nm_mcsolve` and animation functions. ## Features. - Add support for different spectra types for `bloch_redfield_tensor` (#1951); - Improve qutip import times by setting logger names explicitly. (#1981, by Pieter Eendebak); - Change the order of parameters in `expand_operator` (#1991); - Add `svn` and `solve` to dispatched (#2002); - Added `nm_mcsolve` to provide support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in arXiv:2209.08958 [quant-ph]. (#2070 by pmenczel); - Add support for combining bosinic and fermionic HEOM baths (#2089); - Added `__repr__` to QobjEvo (#2111 by lklivingstone); - Improve `print(qutip.settings)` by make it shorter (#2113 by tamakoshi2001); - Create the `trace_oper_ket` operation (#2126); - Speed up the construction of the RHS of the HEOM solver by a factor of 4x by converting the final step to Cython. (#2128); - Rewrite the stochastic solver to use the v5 solver interface. (#2131); - Add `Qobj.data_as` to extract underlying data in original format. (#2141); - Add `qeye_like` and `qzero_like` (#2153); - Add capacity to dispatch on Data (#2157); - Added fermionic annihilation and creation operators. (#2166 by khnikhil); - Changed arguments and applied colorblind_safe to functions in visualization.py (#2170 by Yuji Tamakoshi); - Changed arguments and applied colorblind_safe to plot_wigner_sphere and matrix_histogram in visualization.py (#2193 by Yuji Tamakoshi); - Added Dia data layer which represents operators as multi-diagonal matrices. (#2196); - Added support for animated plots. (#2203 by Yuji Tamakoshi); - Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transfo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:3516,Deployability,install,installed,3516,"link redirecting to the changelog section in the PR template. (#2107 by Valan Baptist Mathuranayagam); - Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05. (#2181 by SJUW); - Raise error on insufficient memory. (#2224); - Fixed fallback to `fsesolve` call in `fmmesolve` (#2225). ## Removals. - Remove `qutip.control` and replace with qutip_qtrl. (#2116); - Deleted `_solve` in countstat.py and used `_data.solve`. (#2120 by Yuji Tamakoshi); - Deprecate `three_level_atom` (#2221); - Deprecate `orbital` (#2223). ## Documentation. - Add a guide on Superoperators, Pauli Basis and Channel Contraction. (#1984 by christian512); - Added information on `sec_cutoff` to the documentation (#2136 by Gerardo Jose Suarez); - Added inherited members to API doc of `MESolver`, `SMESolver`, `SSESolver`, `NonMarkovianMCSolver` (#2167 by Cristian Emiliano Godinez Ramirez); - Corrected grammar in Bloch-Redfield master equation documentation (#2174 by Andrey Rakhubovsky). ## Miscellaneous. - Update scipy version requirement to 1.5+ (#1982 by Pieter Eendebak); - Added __all__ to qutip/measurements.py and qutip/core/semidefinite.py (#2103 by Rushiraj Gadhvi); - Restore towncrier check (#2105); - qutip.ipynbtools.version_table() can now be called without Cython installed (#2110 by Rushiraj Gadhvi); - Moved `HTMLProgressBar` from qutip/ipynbtools.py to qutip/ui/progressbar.py (#2112 by Harsh Khilawala); - Added new argument `bc_type` to take boundary conditions when creating `QobjEvo` (#2114 by Avatar Srinidhi P V ); - Remove Windows build warning suppression. (#2119); - Optimize dispatcher by dispatching on positional only args. (#2135); - Clean `semidefinite` (#2138); - Migrate transfertensor.py to solver (#2142); - Add a test for progress_bar (#2150); - Enable cython 3 (#2151); - Added tests for visualization.py (#2192 by Yuji Tamakoshi); - Sorted arguments of `sphereplot` so that the order is similar to those of `plot_spin_distribution` (#2219 by Yuji Tamakoshi)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:1169,Integrability,interface,interface,1169,"lease, updated stochastic solvers, a new solver: `nm_mcsolve` and animation functions. ## Features. - Add support for different spectra types for `bloch_redfield_tensor` (#1951); - Improve qutip import times by setting logger names explicitly. (#1981, by Pieter Eendebak); - Change the order of parameters in `expand_operator` (#1991); - Add `svn` and `solve` to dispatched (#2002); - Added `nm_mcsolve` to provide support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in arXiv:2209.08958 [quant-ph]. (#2070 by pmenczel); - Add support for combining bosinic and fermionic HEOM baths (#2089); - Added `__repr__` to QobjEvo (#2111 by lklivingstone); - Improve `print(qutip.settings)` by make it shorter (#2113 by tamakoshi2001); - Create the `trace_oper_ket` operation (#2126); - Speed up the construction of the RHS of the HEOM solver by a factor of 4x by converting the final step to Cython. (#2128); - Rewrite the stochastic solver to use the v5 solver interface. (#2131); - Add `Qobj.data_as` to extract underlying data in original format. (#2141); - Add `qeye_like` and `qzero_like` (#2153); - Add capacity to dispatch on Data (#2157); - Added fermionic annihilation and creation operators. (#2166 by khnikhil); - Changed arguments and applied colorblind_safe to functions in visualization.py (#2170 by Yuji Tamakoshi); - Changed arguments and applied colorblind_safe to plot_wigner_sphere and matrix_histogram in visualization.py (#2193 by Yuji Tamakoshi); - Added Dia data layer which represents operators as multi-diagonal matrices. (#2196); - Added support for animated plots. (#2203 by Yuji Tamakoshi); - Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transformation to `floquet_markov_mesolve` (#1952 by christian512); - Added default _isherm value (True) for momentum and position operators. (#2032 ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:2986,Modifiability,inherit,inherited,2986," by christian512); - Added default _isherm value (True) for momentum and position operators. (#2032 by Asier Galicia); - Changed qutip-notebooks to qutip-tutorials and fixed the typo in the link redirecting to the changelog section in the PR template. (#2107 by Valan Baptist Mathuranayagam); - Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05. (#2181 by SJUW); - Raise error on insufficient memory. (#2224); - Fixed fallback to `fsesolve` call in `fmmesolve` (#2225). ## Removals. - Remove `qutip.control` and replace with qutip_qtrl. (#2116); - Deleted `_solve` in countstat.py and used `_data.solve`. (#2120 by Yuji Tamakoshi); - Deprecate `three_level_atom` (#2221); - Deprecate `orbital` (#2223). ## Documentation. - Add a guide on Superoperators, Pauli Basis and Channel Contraction. (#1984 by christian512); - Added information on `sec_cutoff` to the documentation (#2136 by Gerardo Jose Suarez); - Added inherited members to API doc of `MESolver`, `SMESolver`, `SSESolver`, `NonMarkovianMCSolver` (#2167 by Cristian Emiliano Godinez Ramirez); - Corrected grammar in Bloch-Redfield master equation documentation (#2174 by Andrey Rakhubovsky). ## Miscellaneous. - Update scipy version requirement to 1.5+ (#1982 by Pieter Eendebak); - Added __all__ to qutip/measurements.py and qutip/core/semidefinite.py (#2103 by Rushiraj Gadhvi); - Restore towncrier check (#2105); - qutip.ipynbtools.version_table() can now be called without Cython installed (#2110 by Rushiraj Gadhvi); - Moved `HTMLProgressBar` from qutip/ipynbtools.py to qutip/ui/progressbar.py (#2112 by Harsh Khilawala); - Added new argument `bc_type` to take boundary conditions when creating `QobjEvo` (#2114 by Avatar Srinidhi P V ); - Remove Windows build warning suppression. (#2119); - Optimize dispatcher by dispatching on positional only args. (#2135); - Clean `semidefinite` (#2138); - Migrate transfertensor.py to solver (#2142); - Add a test for progress_bar (#2150); - Enable cython 3 (#2151)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:361,Testability,log,logger,361,"**This is a pre-release.**. Continuation of the QuTiP 5 redesign. . It include fixing bugs and polishing features introduced in the alpha 1 release, updated stochastic solvers, a new solver: `nm_mcsolve` and animation functions. ## Features. - Add support for different spectra types for `bloch_redfield_tensor` (#1951); - Improve qutip import times by setting logger names explicitly. (#1981, by Pieter Eendebak); - Change the order of parameters in `expand_operator` (#1991); - Add `svn` and `solve` to dispatched (#2002); - Added `nm_mcsolve` to provide support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in arXiv:2209.08958 [quant-ph]. (#2070 by pmenczel); - Add support for combining bosinic and fermionic HEOM baths (#2089); - Added `__repr__` to QobjEvo (#2111 by lklivingstone); - Improve `print(qutip.settings)` by make it shorter (#2113 by tamakoshi2001); - Create the `trace_oper_ket` operation (#2126); - Speed up the construction of the RHS of the HEOM solver by a factor of 4x by converting the final step to Cython. (#2128); - Rewrite the stochastic solver to use the v5 solver interface. (#2131); - Add `Qobj.data_as` to extract underlying data in original format. (#2141); - Add `qeye_like` and `qzero_like` (#2153); - Add capacity to dispatch on Data (#2157); - Added fermionic annihilation and creation operators. (#2166 by khnikhil); - Changed arguments and applied colorblind_safe to functions in visualization.py (#2170 by Yuji Tamakoshi); - Changed arguments and applied colorblind_safe to plot_wigner_sphere and matrix_histogram in visualization.py (#2193 by Yuji Tamakoshi); - Added Dia data layer which represents operators as multi-diagonal matrices. (#2196); - Added support for animated plots. (#2203 by Yuji Tamakoshi); - Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transfo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:3987,Testability,test,test,3987,"link redirecting to the changelog section in the PR template. (#2107 by Valan Baptist Mathuranayagam); - Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05. (#2181 by SJUW); - Raise error on insufficient memory. (#2224); - Fixed fallback to `fsesolve` call in `fmmesolve` (#2225). ## Removals. - Remove `qutip.control` and replace with qutip_qtrl. (#2116); - Deleted `_solve` in countstat.py and used `_data.solve`. (#2120 by Yuji Tamakoshi); - Deprecate `three_level_atom` (#2221); - Deprecate `orbital` (#2223). ## Documentation. - Add a guide on Superoperators, Pauli Basis and Channel Contraction. (#1984 by christian512); - Added information on `sec_cutoff` to the documentation (#2136 by Gerardo Jose Suarez); - Added inherited members to API doc of `MESolver`, `SMESolver`, `SSESolver`, `NonMarkovianMCSolver` (#2167 by Cristian Emiliano Godinez Ramirez); - Corrected grammar in Bloch-Redfield master equation documentation (#2174 by Andrey Rakhubovsky). ## Miscellaneous. - Update scipy version requirement to 1.5+ (#1982 by Pieter Eendebak); - Added __all__ to qutip/measurements.py and qutip/core/semidefinite.py (#2103 by Rushiraj Gadhvi); - Restore towncrier check (#2105); - qutip.ipynbtools.version_table() can now be called without Cython installed (#2110 by Rushiraj Gadhvi); - Moved `HTMLProgressBar` from qutip/ipynbtools.py to qutip/ui/progressbar.py (#2112 by Harsh Khilawala); - Added new argument `bc_type` to take boundary conditions when creating `QobjEvo` (#2114 by Avatar Srinidhi P V ); - Remove Windows build warning suppression. (#2119); - Optimize dispatcher by dispatching on positional only args. (#2135); - Clean `semidefinite` (#2138); - Migrate transfertensor.py to solver (#2142); - Add a test for progress_bar (#2150); - Enable cython 3 (#2151); - Added tests for visualization.py (#2192 by Yuji Tamakoshi); - Sorted arguments of `sphereplot` so that the order is similar to those of `plot_spin_distribution` (#2219 by Yuji Tamakoshi)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:4053,Testability,test,tests,4053,"link redirecting to the changelog section in the PR template. (#2107 by Valan Baptist Mathuranayagam); - Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05. (#2181 by SJUW); - Raise error on insufficient memory. (#2224); - Fixed fallback to `fsesolve` call in `fmmesolve` (#2225). ## Removals. - Remove `qutip.control` and replace with qutip_qtrl. (#2116); - Deleted `_solve` in countstat.py and used `_data.solve`. (#2120 by Yuji Tamakoshi); - Deprecate `three_level_atom` (#2221); - Deprecate `orbital` (#2223). ## Documentation. - Add a guide on Superoperators, Pauli Basis and Channel Contraction. (#1984 by christian512); - Added information on `sec_cutoff` to the documentation (#2136 by Gerardo Jose Suarez); - Added inherited members to API doc of `MESolver`, `SMESolver`, `SSESolver`, `NonMarkovianMCSolver` (#2167 by Cristian Emiliano Godinez Ramirez); - Corrected grammar in Bloch-Redfield master equation documentation (#2174 by Andrey Rakhubovsky). ## Miscellaneous. - Update scipy version requirement to 1.5+ (#1982 by Pieter Eendebak); - Added __all__ to qutip/measurements.py and qutip/core/semidefinite.py (#2103 by Rushiraj Gadhvi); - Restore towncrier check (#2105); - qutip.ipynbtools.version_table() can now be called without Cython installed (#2110 by Rushiraj Gadhvi); - Moved `HTMLProgressBar` from qutip/ipynbtools.py to qutip/ui/progressbar.py (#2112 by Harsh Khilawala); - Added new argument `bc_type` to take boundary conditions when creating `QobjEvo` (#2114 by Avatar Srinidhi P V ); - Remove Windows build warning suppression. (#2119); - Optimize dispatcher by dispatching on positional only args. (#2135); - Clean `semidefinite` (#2138); - Migrate transfertensor.py to solver (#2142); - Add a test for progress_bar (#2150); - Enable cython 3 (#2151); - Added tests for visualization.py (#2192 by Yuji Tamakoshi); - Sorted arguments of `sphereplot` so that the order is similar to those of `plot_spin_distribution` (#2219 by Yuji Tamakoshi)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a2:2802,Usability,guid,guide,2802,"Improved sampling algorithm for `mcsolve` (#2218 by Daniel Weiss); - Added support for early termination of map functions. (#2222). ## Bug Fixes. - Add missing state transformation to `floquet_markov_mesolve` (#1952 by christian512); - Added default _isherm value (True) for momentum and position operators. (#2032 by Asier Galicia); - Changed qutip-notebooks to qutip-tutorials and fixed the typo in the link redirecting to the changelog section in the PR template. (#2107 by Valan Baptist Mathuranayagam); - Increase missing colorbar padding for matrix_histogram_complex() from 0 to 0.05. (#2181 by SJUW); - Raise error on insufficient memory. (#2224); - Fixed fallback to `fsesolve` call in `fmmesolve` (#2225). ## Removals. - Remove `qutip.control` and replace with qutip_qtrl. (#2116); - Deleted `_solve` in countstat.py and used `_data.solve`. (#2120 by Yuji Tamakoshi); - Deprecate `three_level_atom` (#2221); - Deprecate `orbital` (#2223). ## Documentation. - Add a guide on Superoperators, Pauli Basis and Channel Contraction. (#1984 by christian512); - Added information on `sec_cutoff` to the documentation (#2136 by Gerardo Jose Suarez); - Added inherited members to API doc of `MESolver`, `SMESolver`, `SSESolver`, `NonMarkovianMCSolver` (#2167 by Cristian Emiliano Godinez Ramirez); - Corrected grammar in Bloch-Redfield master equation documentation (#2174 by Andrey Rakhubovsky). ## Miscellaneous. - Update scipy version requirement to 1.5+ (#1982 by Pieter Eendebak); - Added __all__ to qutip/measurements.py and qutip/core/semidefinite.py (#2103 by Rushiraj Gadhvi); - Restore towncrier check (#2105); - qutip.ipynbtools.version_table() can now be called without Cython installed (#2110 by Rushiraj Gadhvi); - Moved `HTMLProgressBar` from qutip/ipynbtools.py to qutip/ui/progressbar.py (#2112 by Harsh Khilawala); - Added new argument `bc_type` to take boundary conditions when creating `QobjEvo` (#2114 by Avatar Srinidhi P V ); - Remove Windows build warning suppression. (#2119);",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a2
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:4592,Availability,avail,available,4592,"e_fidelity``, [#1712](https://github.com/qutip/qutip/pull/1712), [#1748](https://github.com/qutip/qutip/pull/1748), [#1788](https://github.com/qutip/qutip/pull/1788)); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, [#1608](https://github.com/qutip/qutip/pull/1608/)); - Rajath Shetty (added support for specifying colors for individual points, vectors and states display by `qutip.Bloch`, [#1335](https://github.com/qutip/qutip/pull/1335)). Qobj changes; ------------. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the representation is flexible. Implementations for dense and sparse formats are included in QuTiP and custom implementations are possible. QuTiP's performance on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an instance of the underlying data type instead of a SciPy-like sparse matrix. The operations available in ``qutip.core.data`` may be used on ``.data``, regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extr",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8447,Availability,avail,available,8447,"Evo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Pyth",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8605,Availability,avail,available,8605,"ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8663,Availability,avail,available,8663," compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Car",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8787,Availability,avail,available,8787,"Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9003,Availability,avail,available,9003," to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntra",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9247,Availability,avail,available,9247,"; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9929,Availability,toler,tolerance,9929," the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, the value ``loky`` may be supplied to use the loky package to parallelize trajectories.; - The result returned by ``mcsolve`` now supports calculating photocurrents and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from ``qutip.parallel``. Use ``parallel_map`` or ``loky_map`` instead. Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementaitons been heavily reworked to reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:10950,Availability,toler,tolerance,10950,"traj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, the value ``loky`` may be supplied to use the loky package to parallelize trajectories.; - The result returned by ``mcsolve`` now supports calculating photocurrents and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from ``qutip.parallel``. Use ``parallel_map`` or ``loky_map`` instead. Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementaitons been heavily reworked to reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov`` ODE integrator. The function ``krylovsolve`` is maintained for convenience and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the Hamiltonian instead. Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have been removed. The Floquet tensor may still be retried using the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and new options added. The environment temperature may be specified using ``w_th``, and the result states are stored in the lab basis and optionally in the Floquet basis using ``store_floquet_state``.; - The spectra fun",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16174,Availability,toler,tolerance,16174,"``rand_dm(distribution=""hs"")`` and ``rand_dm(distribution=""ginibre"")`` instead.; - The function ``rand_ket_haar`` has been removed. Use ``rand_ket(distribution=""haar"")`` instead.; - The measurement functions have had the ``target`` parameter for expanding the measurement operator removed. Used ``expand_operator`` to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``. QuTiP settings; --------------. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is an instance of a settings class. All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16215,Availability,toler,tolerance,16215,"""ginibre"")`` instead.; - The function ``rand_ket_haar`` has been removed. Use ``rand_ket(distribution=""haar"")`` instead.; - The measurement functions have had the ``target`` parameter for expanding the measurement operator removed. Used ``expand_operator`` to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``. QuTiP settings; --------------. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is an instance of a settings class. All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16421,Availability,avail,available,16421,"easurement operator removed. Used ``expand_operator`` to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``. QuTiP settings; --------------. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is an instance of a settings class. All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16616,Availability,avail,available,16616,"ectors``. QuTiP settings; --------------. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is an instance of a settings class. All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It conta",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16866,Availability,avail,available,16866," All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16,Deployability,release,release,16,"**This is a pre-release.**. QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``, ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations, and the two may be mixed sensibly as needed. ``QobjEvo`` is now used consistently throughout QuTiP, and the implementation has been substantially cleaned up. A new ``Coefficient`` class is used to represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer and the concept of ``Integrators`` which solve ODEs has been introduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1623,Deployability,update,updated,1623,"troduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1697,Deployability,update,updated,1697,"alized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import ti",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1790,Deployability,update,update,1790,"remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sp",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:2583,Deployability,update,updated,2583,"oogle Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sproken (included C header files in the source distribution, [#1971](https://github.com/qutip/qutip/pull/1971)); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, [#1962](https://github.com/qutip/qutip/pull/1962)); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, [#1952](https://github.com/qutip/qutip/pull/1952)); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, [#1951](https://github.com/qutip/qutip/pull/1951)); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, [#1920](https://github.com/qutip/qutip/pull/1920)); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``averag",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:6784,Deployability,update,updated,6784,"or storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order`` parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` op",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:7691,Deployability,integrat,integrator,7691,"llows additional arguments to the underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order`` parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementa",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:7968,Deployability,integrat,integrated,7968,"nc_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8433,Deployability,integrat,integrator,8433,"Evo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Pyth",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8534,Deployability,integrat,integrator,8534,"ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8649,Deployability,integrat,integrator,8649," compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Car",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8989,Deployability,integrat,integrated,8989," to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntra",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9233,Deployability,integrat,integrator,9233,"; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9277,Deployability,integrat,integrator,9277," state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:11117,Deployability,integrat,integrator,11117,"class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, the value ``loky`` may be supplied to use the loky package to parallelize trajectories.; - The result returned by ``mcsolve`` now supports calculating photocurrents and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from ``qutip.parallel``. Use ``parallel_map`` or ``loky_map`` instead. Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementaitons been heavily reworked to reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov`` ODE integrator. The function ``krylovsolve`` is maintained for convenience and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the Hamiltonian instead. Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have been removed. The Floquet tensor may still be retried using the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and new options added. The environment temperature may be specified using ``w_th``, and the result states are stored in the lab basis and optionally in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized (i.e. accept and return numpy arrays for frequencies and densities)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:12575,Deployability,integrat,integration,12575,"The Floquet tensor may still be retried using the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and new options added. The environment temperature may be specified using ``w_th``, and the result states are stored in the lab basis and optionally in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized (i.e. accept and return numpy arrays for frequencies and densities) and must accept negative frequence (i.e. usually include a ``w > 0`` factor so that the returned densities are zero for negative frequencies).; - The number of sidebands to keep, ``kmax`` may only be supplied when using the ``FMESolver``; - The ``Tsteps`` parameter has been removed from both ``fsesolve`` and ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used instead. Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration method with ``sesolve`` or ``mesolve`` instead. Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver`` or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been removed.; - Support for calculating correlation with ``mcsolve`` has been removed. Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. Correlation spectra (",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16397,Deployability,install,installed,16397,"easurement operator removed. Used ``expand_operator`` to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``. QuTiP settings; --------------. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is an instance of a settings class. All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:17408,Deployability,release,release,17408," All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:2691,Energy Efficiency,reduce,reduced,2691,"e tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sproken (included C header files in the source distribution, [#1971](https://github.com/qutip/qutip/pull/1971)); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, [#1962](https://github.com/qutip/qutip/pull/1962)); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, [#1952](https://github.com/qutip/qutip/pull/1952)); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, [#1951](https://github.com/qutip/qutip/pull/1951)); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, [#1920](https://github.com/qutip/qutip/pull/1920)); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, [#1712](https://github.com/qutip/qutip/pull/1712), [#1748](https://github.com/qutip/qutip/pull/1748), [#178",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8735,Energy Efficiency,efficient,efficient,8735,"Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:457,Integrability,depend,dependent,457,"**This is a pre-release.**. QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``, ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations, and the two may be mixed sensibly as needed. ``QobjEvo`` is now used consistently throughout QuTiP, and the implementation has been substantially cleaned up. A new ``Coefficient`` class is used to represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer and the concept of ``Integrators`` which solve ODEs has been introduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1255,Integrability,interface,interface,1255,"ons, and the two may be mixed sensibly as needed. ``QobjEvo`` is now used consistently throughout QuTiP, and the implementation has been substantially cleaned up. A new ``Coefficient`` class is used to represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer and the concept of ``Integrators`` which solve ODEs has been introduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (http",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:5386,Integrability,contract,contract,5386,". - The data is still acessible via the ``.data`` attribute, but is now an instance of the underlying data type instead of a SciPy-like sparse matrix. The operations available in ``qutip.core.data`` may be used on ``.data``, regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many o",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:5761,Integrability,depend,dependent,5761," type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the underlying coefficient functions to be ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:5856,Integrability,depend,dependent,5856,"E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order`` parameter. ``_step_func_coeff=False`` is equivalent to ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:7691,Integrability,integrat,integrator,7691,"llows additional arguments to the underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order`` parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementa",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:7784,Integrability,interface,interface,7784,"tions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order`` parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of orde",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:7968,Integrability,integrat,integrated,7968,"nc_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8273,Integrability,depend,depends,8273,"below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This in",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8433,Integrability,integrat,integrator,8433,"Evo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Pyth",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8534,Integrability,integrat,integrator,8534,"ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8649,Integrability,integrat,integrator,8649," compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Car",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8989,Integrability,integrat,integrated,8989," to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntra",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9233,Integrability,integrat,integrator,9233,"; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9277,Integrability,integrat,integrator,9277," state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:11117,Integrability,integrat,integrator,11117,"class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, the value ``loky`` may be supplied to use the loky package to parallelize trajectories.; - The result returned by ``mcsolve`` now supports calculating photocurrents and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from ``qutip.parallel``. Use ``parallel_map`` or ``loky_map`` instead. Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementaitons been heavily reworked to reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter has been removed. Use ``sec_cutoff=-1`` instead.; - The required tolerance is now read from ``qutip.settings``. Krylov Subspace Solver (krylovsolve):. - The Krylov solver is now implemented using ``SESolver`` and the ``krylov`` ODE integrator. The function ``krylovsolve`` is maintained for convenience and now supports many more options.; - The ``sparse`` parameter has been removed. Supply a sparse ``Qobj`` for the Hamiltonian instead. Floquet Solver (fsesolve and fmmesolve):. - The Floquet solver has been rewritten to use a new ``FloquetBasis`` class which manages the transformations from lab to Floquet basis and back.; - Many of the internal methods used by the old Floquet solvers have been removed. The Floquet tensor may still be retried using the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and new options added. The environment temperature may be specified using ``w_th``, and the result states are stored in the lab basis and optionally in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized (i.e. accept and return numpy arrays for frequencies and densities)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:12575,Integrability,integrat,integration,12575,"The Floquet tensor may still be retried using the function ``floquet_tensor``.; - The Floquet Markov Master Equation solver has had many changes and new options added. The environment temperature may be specified using ``w_th``, and the result states are stored in the lab basis and optionally in the Floquet basis using ``store_floquet_state``.; - The spectra functions supplied to ``fmmesolve`` must now be vectorized (i.e. accept and return numpy arrays for frequencies and densities) and must accept negative frequence (i.e. usually include a ``w > 0`` factor so that the returned densities are zero for negative frequencies).; - The number of sidebands to keep, ``kmax`` may only be supplied when using the ``FMESolver``; - The ``Tsteps`` parameter has been removed from both ``fsesolve`` and ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used instead. Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration method with ``sesolve`` or ``mesolve`` instead. Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver`` or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been removed.; - Support for calculating correlation with ``mcsolve`` has been removed. Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. Correlation spectra (",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:13365,Integrability,interface,interface,13365,"m both ``fsesolve`` and ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used instead. Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration method with ``sesolve`` or ``mesolve`` instead. Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver`` or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been removed.; - Support for calculating correlation with ``mcsolve`` has been removed. Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the functionality merged into the ``solver`` parameter. Use ``solver=""pi""`` instead. QuTiP core; ----------. There have been numerous other small changes to core QuTiP features:. - ``qft(...)`` the function that returns the quantum Fourier transform operator was moved from ``qutip.qip.algorithm`` into ``qutip``.; - The Bloch-Redfield solver tensor, ``brtensor``, has been moved into ``qutip.core``. See the section above on the Bloch-Redfield solver for details.; - The functions ``mat2vec`` and ``vec2mat`` for transforming states to and from super-operator states have been rename",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:13453,Integrability,depend,dependent,13453,"nstead. Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration method with ``sesolve`` or ``mesolve`` instead. Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver`` or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been removed.; - Support for calculating correlation with ``mcsolve`` has been removed. Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the functionality merged into the ``solver`` parameter. Use ``solver=""pi""`` instead. QuTiP core; ----------. There have been numerous other small changes to core QuTiP features:. - ``qft(...)`` the function that returns the quantum Fourier transform operator was moved from ``qutip.qip.algorithm`` into ``qutip``.; - The Bloch-Redfield solver tensor, ``brtensor``, has been moved into ``qutip.core``. See the section above on the Bloch-Redfield solver for details.; - The functions ``mat2vec`` and ``vec2mat`` for transforming states to and from super-operator states have been renamed to ``stack_columns`` and ``unstack_columns``.; - The function ``liouvillian_ref`` has been remove",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:161,Modifiability,flexible,flexible,161,"**This is a pre-release.**. QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``, ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations, and the two may be mixed sensibly as needed. ``QobjEvo`` is now used consistently throughout QuTiP, and the implementation has been substantially cleaned up. A new ``Coefficient`` class is used to represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer and the concept of ``Integrators`` which solve ODEs has been introduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:657,Modifiability,layers,layers,657,"**This is a pre-release.**. QuTiP 5 is a redesign of many of the core components of QuTiP (``Qobj``, ``QobjEvo``, solvers) to make them more consistent and more flexible. ``Qobj`` may now be stored in either sparse or dense representations, and the two may be mixed sensibly as needed. ``QobjEvo`` is now used consistently throughout QuTiP, and the implementation has been substantially cleaned up. A new ``Coefficient`` class is used to represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer and the concept of ``Integrators`` which solve ODEs has been introduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1880,Modifiability,layers,layers,1880,"de from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sproken (included C header files in the source distribution, [#1971](https://github.com/qutip/qutip/pull/1971)); - Ch",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:4203,Modifiability,flexible,flexible,4203,"- Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, [#1951](https://github.com/qutip/qutip/pull/1951)); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, [#1920](https://github.com/qutip/qutip/pull/1920)); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, [#1712](https://github.com/qutip/qutip/pull/1712), [#1748](https://github.com/qutip/qutip/pull/1748), [#1788](https://github.com/qutip/qutip/pull/1788)); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, [#1608](https://github.com/qutip/qutip/pull/1608/)); - Rajath Shetty (added support for specifying colors for individual points, vectors and states display by `qutip.Bloch`, [#1335](https://github.com/qutip/qutip/pull/1335)). Qobj changes; ------------. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the representation is flexible. Implementations for dense and sparse formats are included in QuTiP and custom implementations are possible. QuTiP's performance on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an instance of the underlying data type instead of a SciPy-like sparse matrix. The operations available in ``qutip.core.data`` may be used on ``.data``, regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:5837,Modifiability,extend,extended,5837," type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the underlying coefficient functions to be ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:17701,Modifiability,config,config,17701," All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:4329,Performance,perform,performance,4329," Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, [#1920](https://github.com/qutip/qutip/pull/1920)); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, [#1712](https://github.com/qutip/qutip/pull/1712), [#1748](https://github.com/qutip/qutip/pull/1748), [#1788](https://github.com/qutip/qutip/pull/1788)); - Felipe Bivort Haiek (fixed inaccuracy in docstring of the dense implementation of negation, [#1608](https://github.com/qutip/qutip/pull/1608/)); - Rajath Shetty (added support for specifying colors for individual points, vectors and states display by `qutip.Bloch`, [#1335](https://github.com/qutip/qutip/pull/1335)). Qobj changes; ------------. Previously ``Qobj`` data was stored in a SciPy-like sparse matrix. Now the representation is flexible. Implementations for dense and sparse formats are included in QuTiP and custom implementations are possible. QuTiP's performance on dense states and operators is significantly improved as a result. Some highlights:. - The data is still acessible via the ``.data`` attribute, but is now an instance of the underlying data type instead of a SciPy-like sparse matrix. The operations available in ``qutip.core.data`` may be used on ``.data``, regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a s",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:6155,Performance,cache,cached,6155,"t allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_file`` were removed.; - A new ``Spline`` coefficient supports spline interpolations of different orders. The old ``Cubic_Spline`` coefficient has been removed.; - The new ``.arguments(...)`` method allows additional arguments to the underlying coefficient functions to be updated.; - The ``_step_func_coeff`` argument has been replaced by the ``order`` parameter. ``_step_func_coeff=False`` is equivalent to ``order=3``. ``_step_func_coeff=True`` is equivalent to ``order=0``. Higher values of ``order`` gives spline interpolations of higher orders. Solver changes; --------------. The solvers in QuTiP have been heavily",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:15933,Performance,load,load,15933,"meter if explicit dimensions are required.; - The function ``rand_unitary_haar`` has been removed. Use ``rand_unitary(distribution=""haar"")`` instead.; - The functions ``rand_dm_hs`` and ``rand_dm_ginibre`` have been removed. Use ``rand_dm(distribution=""hs"")`` and ``rand_dm(distribution=""ginibre"")`` instead.; - The function ``rand_ket_haar`` has been removed. Use ``rand_ket(distribution=""haar"")`` instead.; - The measurement functions have had the ``target`` parameter for expanding the measurement operator removed. Used ``expand_operator`` to expand the operator instead.; - ``qutip.Bloch`` now supports applying colours per-point, state or vector in; ``add_point``, ``add_states``, and ``add_vectors``. QuTiP settings; --------------. Previously ``qutip.settings`` was an ordinary module. Now ``qutip.settings`` is an instance of a settings class. All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9835,Safety,timeout,timeout,9835," the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, the value ``loky`` may be supplied to use the loky package to parallelize trajectories.; - The result returned by ``mcsolve`` now supports calculating photocurrents and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from ``qutip.parallel``. Use ``parallel_map`` or ``loky_map`` instead. Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementaitons been heavily reworked to reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9911,Safety,timeout,timeout,9911," the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, the value ``loky`` may be supplied to use the loky package to parallelize trajectories.; - The result returned by ``mcsolve`` now supports calculating photocurrents and calculating the steady state over N trajectories.; - The old ``parfor`` parallel execution function has been removed from ``qutip.parallel``. Use ``parallel_map`` or ``loky_map`` instead. Bloch-Redfield Master Equation Solver (brmesolve):. - The ``a_ops`` and ``spectra`` support implementaitons been heavily reworked to reuse the techniques from the new Coefficient and QobjEvo classes.; - The ``use_secular`` parameter h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:16915,Security,access,accessible,16915," All the runtime modifiable settings for core operations are in ``qutip.settings.core``. The other settings are not modifiable at runtime. - Removed ``load``. ``reset`` and ``save`` functions.; - Removed ``.debug``, ``.fortran``, ``.openmp_thresh``.; - New ``.compile`` stores the compilation options for compiled coefficients.; - New ``.core[""rtol""]`` core option gives the default relative tolerance used by QuTiP.; - The absolute tolerance setting ``.atol`` has been moved to ``.core[""atol""]``. Package reorganization; ----------------------. - ``qutip.qip`` has been moved into its own package, qutip-qip. Once installed, qutip-qip is available as either ``qutip.qip`` or ``qutip_qip``. Some widely useful gates have been retained in ``qutip.gates``.; - ``qutip.lattice`` has been moved into its own package, qutip-lattice. It is available from `<https://github.com/qutip/qutip-lattice>`.; - ``qutip.sparse`` has been removed. It contained the old sparse matrix representation and is replaced by the new implementation in ``qutip.data``.; - ``qutip.piqs`` functions are no longer available from the ``qutip`` namespace. They are accessible from ``qutip.piqs`` instead. Miscellaneous; -------------. - Support has been added for 64-bit integer sparse matrix indices, allowing sparse matrices with up to 2**63 rows and columns. This support needs to be enabled at compilation time by calling ``setup.py`` and passing ``--with-idxint-64``. Feature removals; ----------------. - Support for OpenMP has been removed. If there is enough demand and a good plan for how to organize it, OpenMP support may return in a future QuTiP release.; - The ``qutip.parfor`` function has been removed. Use ``qutip.parallel_map`` instead.; - ``qutip.graph`` has been removed and replaced by SciPy's graph functions.; - ``qutip.topology`` has been removed. It contained only one function ``berry_curvature``.; - The ``~/.qutip/qutiprc`` config file is no longer supported. It contained settings for the OpenMP support.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1443,Testability,test,testing,1443,"`` class is used to represent the time-dependent factors inside ``QobjEvo``. The solvers have been rewritten to work well with the new data layer and the concept of ``Integrators`` which solve ODEs has been introduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend b",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1649,Testability,benchmark,benchmarks,1649,"troduced. In future, new data layers may provide their own ``Integrators`` specialized to their representation of the underlying data. Much of the user-facing API of QuTiP remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1801,Testability,benchmark,benchmarks,1801,"remains familiar, but there have had to be many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sp",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:1844,Testability,benchmark,benchmark,1844,"many small breaking changes. If we can make changes to easy migrating code from QuTiP 4 to QuTiP 5, please let us know. Any extensive list of changes follows. Contributors; ------------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sproken (included C header files in the sour",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:2039,Testability,test,test,2039,"---------. QuTiP 5 has been a large effort by many people over the last three years. In particular:. - Jake Lishman led the implementation of the new data layer and coefficients.; - Eric Gigu√®re led the implementation of the new QobjEvo interface and solvers.; - Boxi Li led the updating of QuTiP's QIP support and the creation of ``qutip_qip``. Other members of the QuTiP Admin team have been heavily involved in reviewing, testing and designing QuTiP 5:. - Alexander Pitchford; - Asier Galicia; - Nathan Shammah; - Shahnawaz Ahmed; - Neill Lambert; - Simon Cross. Two Google Summer of Code contributors updated the tutorials and benchmarks to QuTiP 5:. - Christian Staufenbiel updated many of the tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sproken (included C header files in the source distribution, [#1971](https://github.com/qutip/qutip/pull/1971)); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, [#1962](https:",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:2723,Testability,log,logger,2723,"e tutorials (https://github.com/qutip/qutip-tutorials/).; - Xavier Sproken update the benchmarks (https://github.com/qutip/qutip-benchmark/). Four experimental data layers backends were written either as part of Google Summer of Code or as separate projects. While these are still alpha quality, the helped significantly to test the data layer API:. - ``qutip-tensorflow``: a TensorFlow backend by Asier Galicia (https://github.com/qutip/qutip-tensorflow); - ``qutip-cupy``: a CuPy GPU backend by Felipe Bivort Haiek (https://github.com/qutip/qutip-cupy); - ``qutip-tensornetwork``: a TensorNetwork backend by Asier Galicia (https://github.com/qutip/qutip-tensornetwork); - ``qutip-jax``: a JAX backend by Eric Gigu√®re (https://github.com/qutip/qutip-jax). We have also had many other contributors, whose specific contributions are detailed below:. - Pieter Eendebak (updated the required SciPy to 1.4+, [#1982](https://github.com/qutip/qutip/pull/1982)).; - Pieter Eendebak (reduced import times by setting logger names, [#1981](https://github.com/qutip/qutip/pull/1981)); - Xavier Sproken (included C header files in the source distribution, [#1971](https://github.com/qutip/qutip/pull/1971)); - Christian Staufenbiel (added support for multiple collapse operators to the Floquet solver, [#1962](https://github.com/qutip/qutip/pull/1962)); - Christian Staufenbiel (fixed the basis used in the Floquet Master Equation solver, [#1952](https://github.com/qutip/qutip/pull/1952)); - Christian Staufenbiel (allowed the ``bloch_redfield_tensor`` function to accept strings and callables for `a_ops`, [#1951](https://github.com/qutip/qutip/pull/1951)); - Henrique Silv√©ro (allowed ``qutip_qip`` to be imported as ``qutip.qip``, [#1920](https://github.com/qutip/qutip/pull/1920)); - Florian Hopfmueller (added a vastly improved implementations of ``process_fidelity`` and ``average_gate_fidelity``, [#1712](https://github.com/qutip/qutip/pull/1712), [#1748](https://github.com/qutip/qutip/pull/1748), [#178",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:5482,Testability,log,logm,5482," the underlying data type instead of a SciPy-like sparse matrix. The operations available in ``qutip.core.data`` may be used on ``.data``, regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:5517,Testability,log,logarithm,5517," the underlying data type instead of a SciPy-like sparse matrix. The operations available in ``qutip.core.data`` may be used on ``.data``, regardless of the data type.; - ``Qobj`` with different data types may be mixed in arithmetic and other operations. A sensible output type will be automatically determined.; - The new ``.to(...)`` method may be used to convert a ``Qobj`` from one data type to another. E.g. ``.to(""dense"")`` will convert to the dense representation and ``.to(""csr"")`` will convert to the sparse type.; - Many ``Qobj`` methods and methods that create ``Qobj`` now accepted a ``dtype`` parameter that allows the data type of the returned ``Qobj`` to specified.; - The new ``&`` operator may be used to obtain the tensor product.; - The new ``@`` operator may be used to obtain the matrix / operator product. ``bar @ ket`` returns a scalar.; - The new ``.contract()`` method will collapse 1D subspaces of the dimensions of the ``Qobj``.; - The new ``.logm()`` method returns the matrix logarithm of an operator.; - The methods ``.set_data``, ``.get_data``, ``.extract_state``, ``.eliminate_states``, ``.evaluate`` and ``.check_isunitary`` have been removed. QobjEvo changes; ---------------. The ``QobjEvo`` type for storing time-dependent quantum objects has been significantly expanded, standardized and extended. The time-dependent coefficients are now represented using a new ``Coefficient`` type that may be independently created and manipulated if required. Some highlights:. - The ``.compile()`` method has been removed. Coefficients specified as strings are automatically compiled if possible and the compilation is cached across different Python runs and instances.; - Mixing coefficient types within a single ``Qobj`` is now supported.; - Many new attributes were added to ``QobjEvo`` for convenience. Examples include ``.dims``, ``.shape``, ``.superrep`` and ``.isconstant``.; - Many old attributes such as ``.cte``, ``.use_cython``, ``.type``, ``.const``, and ``.coeff_",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:12966,Testability,log,logging,12966,"mesolve`` must now be vectorized (i.e. accept and return numpy arrays for frequencies and densities) and must accept negative frequence (i.e. usually include a ``w > 0`` factor so that the returned densities are zero for negative frequencies).; - The number of sidebands to keep, ``kmax`` may only be supplied when using the ``FMESolver``; - The ``Tsteps`` parameter has been removed from both ``fsesolve`` and ``fmmesolve``. The ``precompute`` option to ``FloquetBasis`` may be used instead. Evolution of State Solver (essovle):. - The function ``essolve`` has been removed. Use the ``diag`` integration method with ``sesolve`` or ``mesolve`` instead. Steady-state solvers (steadystate module):. - The ``method`` parameter and ``solver`` parameters have been separated. Previously they were mixed together in the ``method`` parameter.; - The previous options are now passed as parameters to the steady state solver and mostly passed through to the underlying SciPy functions.; - The logging and statistics have been removed. Correlation functions (correlation module):. - A new ``correlation_3op`` function has been added. It supports ``MESolver`` or ``BRMESolver``.; - The ``correlation``, ``correlation_4op``, and ``correlation_ss`` functions have been removed.; - Support for calculating correlation with ``mcsolve`` has been removed. Propagators (propagator module):. - A class interface, ``qutip.Propagator``, has been added for propagators.; - Propagation of time-dependent systems is now supported using ``QobjEvo``.; - The ``unitary_mode`` and ``parallel`` options have been removed. Correlation spectra (spectrum module):. - The functions ``spectrum_ss`` and ``spectrum_pi`` have been removed and are now internal functions.; - The ``use_pinv`` parameter for ``spectrum`` has been removed and the functionality merged into the ``solver`` parameter. Use ``solver=""pi""`` instead. QuTiP core; ----------. There have been numerous other small changes to core QuTiP features:. - ``qft(...)`` the ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:8091,Usability,progress bar,progress bar,8091,"e been heavily reworked and standardized. Under the hood solvers now make use of swappable ODE ``Integrators``. Many ``Integrators`` are included (see the list below) and custom implementations are possible. Solvers now consistently accept a ``QobjEvo`` instance at the Hamiltonian or Liouvillian, or any object which can be passed to the ``QobjEvo`` constructor. A breakdown of highlights follows. All solvers:. - Solver options are now supplied in an ordinary Python dict. ``qutip.Options`` is deprecated and returns a dict for backwards compatibility.; - A specific ODE integrator may be selected by supplying a ``method`` option.; - Each solver provides a class interface. Creating an instance of the class allows a solver to be run multiple times for the same system without having to repeatedly reconstruct the right-hand side of the ODE to be integrated.; - A ``QobjEvo`` instance is accepted for most operators, e.g., ``H``, ``c_ops``, ``e_ops``, ``a_ops``.; - The progress bar is now selected using the ``progress_bar`` option. A new progess bar using the ``tqdm`` Python library is provided.; - Dynamic arguments, where the value of an operator depends on the current state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v5.0.0a1:9296,Usability,usab,usable,9296," state of the evolution, have been removed. They may be re-implemented later if there is demand for them. Integrators:. - The SciPy zvode integrator is available with the BDF and Adams methods as ``bdf`` and ``adams``.; - The SciPy dop853 integrator (an eighth order Runge-Kutta method by Dormand & Prince) is available as ``dop853``.; - The SciPy lsoda integrator is available as ``lsoda``.; - QuTiP's own implementation of Verner's ""most efficient"" Runge-Kutta methods of order 7 and 9 are available as ``vern7`` and ``vern9``. See http://people.math.sfu.ca/~jverner/ for a description of the methods.; - QuTiP's own implementation of a solver that directly diagonalizes the the system to be integrated is available as ``diag``. It only works on time-independent systems and is slow to setup, but once the diagonalization is complete, it generates solutions very quickly.; - QuTiP's own implementatoin of an approximate Krylov subspace integrator is available as ``krylov``. This integrator is only usable with ``sesolve``. Result class:. - A new ``.e_data`` attribute provides expectation values as a dictionary. Unlike ``.expect``, the values are provided in a Python list rather than a numpy array, which better supports non-numeric types.; - The contents of the ``.stats`` attribute changed significantly and is now more consistent across solvers. Monte-Carlo Solver (mcsolve):. - The system, H, may now be a super-operator.; - The ``seed`` parameter now supports supplying numpy ``SeedSequence`` or ``Generator`` types.; - The new ``timeout`` and ``target_tol`` parameters allow the solver to exit early if a timeout or target tolerance is reached.; - The ntraj option no longer supports a list of numbers of trajectories. Instead, just run the solver multiple times and use the class ``MCSolver`` if setting up the solver uses a significant amount of time.; - The ``map_func`` parameter has been replaced by the ``map`` option. In addition to the existing ``serial`` and ``parallel`` values, t",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v5.0.0a1
https://github.com/qutip/qutip/releases/tag/v4.7.0:3061,Availability,error,errors,3061,"nes and arcs on the Bloch sphere. ([#1690](https://github.com/qutip/qutip/pull/1690) by Gaurav Saxena, Asier Galicia and Simon Cross); - Added transparency parameter to the add_point, add_vector and add_states methods in the Bloch and Bloch3d classes. ([#1837](https://github.com/qutip/qutip/pull/1837) by Xavier Spronken); - Support ``Path`` objects in ``qutip.fileio``. ([#1813](https://github.com/qutip/qutip/pull/1813) by Adri√† Labay); - Improved the weighting in steadystate solver, so that the default weight matches the documented behaviour and the dense solver applies the weights in the same manner as the sparse solver. ([#1275](https://github.com/qutip/qutip/pull/1275) and [#1802](https://github.com/qutip/qutip/pull/1802) by NS2 Group at LPS and Simon Cross); - Added a ``color_style`` option to the ``hinton`` plotting function. ([#1595](https://github.com/qutip/qutip/pull/1595) by Cassandra Granade); - Improved the scaling of ``floquet_master_equation_rates`` and ``floquet_master_equation_tensor`` and fixed transposition and basis change errors in ``floquet_master_equation_tensor`` and ``floquet_markov_mesolve``. ([#1248](https://github.com/qutip/qutip/pull/1248) by Camille Le Calonnec, Jake Lishman and Eric Gigu√®re); - Removed ``linspace_with`` and ``view_methods`` from ``qutip.utilities``. For the former it is far better to use ``numpy.linspace`` and for the later Python's in-built ``help`` function or other tools. ([#1680](https://github.com/qutip/qutip/pull/1680) by Eric Gigu√®re); - Added support for passing callable functions as ``e_ops`` to ``mesolve`` and ``sesolve``. ([#1655](https://github.com/qutip/qutip/pull/1655) by Marek Naro≈ºniak); - Added the function ``steadystate_floquet``, which returns the ""effective"" steadystate of a periodic driven system. ([#1660](https://github.com/qutip/qutip/pull/1660) by Alberto Mercurio); - Improved mcsolve memory efficiency by not storing final states when they are not needed. ([#1669](https://github.com/qutip/qutip/pu",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:4358,Availability,error,error,4358,"` from ``qutip.utilities``. For the former it is far better to use ``numpy.linspace`` and for the later Python's in-built ``help`` function or other tools. ([#1680](https://github.com/qutip/qutip/pull/1680) by Eric Gigu√®re); - Added support for passing callable functions as ``e_ops`` to ``mesolve`` and ``sesolve``. ([#1655](https://github.com/qutip/qutip/pull/1655) by Marek Naro≈ºniak); - Added the function ``steadystate_floquet``, which returns the ""effective"" steadystate of a periodic driven system. ([#1660](https://github.com/qutip/qutip/pull/1660) by Alberto Mercurio); - Improved mcsolve memory efficiency by not storing final states when they are not needed. ([#1669](https://github.com/qutip/qutip/pull/1669) by Eric Gigu√®re); - Improved the default colors and styling of matrix_histogram and provided additional styling options. ([#1573](https://github.com/qutip/qutip/pull/1573) and [#1628](https://github.com/qutip/qutip/pull/1628) by Mahdi Aslani); - Sped up ``state_number_enumerate``, ``state_number_index``, ``state_index_number``, and added some error checking. ``enr_state_dictionaries`` now returns a list for ``idx2state``. ([#1604](https://github.com/qutip/qutip/pull/1604) by Johannes Feist); - Added new Husimi Q algorithms, improving the speed for density matrices, and giving a near order-of-magnitude improvement when calculating the Q function for many different states, using the new ``qutip.QFunc`` class, instead of the ``qutip.qfunc`` function. ([#934](https://github.com/qutip/qutip/pull/934) and [#1583](https://github.com/qutip/qutip/pull/1583) by Daniel Weigand and Jake Lishman); - Updated licence holders with regards to new governance model, and remove extraneous licensing information from source files. ([#1579](https://github.com/qutip/qutip/pull/1579) by Jake Lishman); - Removed the vendored copy of LaTeX's qcircuit package which is GPL licensed. We now rely on the package being installed by user. It is installed by default with TexLive. ([#1580](https",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:6150,Availability,toler,tolerance,6150," of LaTeX's qcircuit package which is GPL licensed. We now rely on the package being installed by user. It is installed by default with TexLive. ([#1580](https://github.com/qutip/qutip/pull/1580) by Jake Lishman); - The signatures of rand_ket and rand_ket_haar were changed to allow N (the size of the random ket) to be determined automatically when dims are specified. ([#1509](https://github.com/qutip/qutip/pull/1509) by Purva Thakre). # Bug Fixes. - Fix circuit index used when plotting circuits with non-reversed states. ([#1847](https://github.com/qutip/qutip/pull/1847) by Christian Staufenbiel); - Changed implementation of ``qutip.orbital`` to use ``scipy.special.spy_harm`` to remove bugs in angle interpretation. ([#1844](https://github.com/qutip/qutip/pull/1844) by Christian Staufenbiel); - Fixed ``QobjEvo.tidyup`` to use ``settings.auto_tidyup_atol`` when removing small elements in sparse matrices. ([#1832](https://github.com/qutip/qutip/pull/1832) by Eric Gigu√®re); - Ensured that tidyup's default tolerance is read from settings at each call. ([#1830](https://github.com/qutip/qutip/pull/1830) by Eric Gigu√®re); - Fixed ``scipy.sparse`` deprecation warnings raised by ``qutip.fast_csr_matrix``. ([#1827](https://github.com/qutip/qutip/pull/1827) by Simon Cross); - Fixed rendering of vectors on the Bloch sphere when using matplotlib 3.5 and above. ([#1818](https://github.com/qutip/qutip/pull/1818) by Simon Cross); - Fixed the displaying of ``Lattice1d`` instances and their unit cells. Previously calling them raised exceptions in simple cases. ([#1819](https://github.com/qutip/qutip/pull/1819), [#1697](https://github.com/qutip/qutip/pull/1697) and [#1702](https://github.com/qutip/qutip/pull/1702) by Simon Cross and Saumya Biswas); - Fixed the displaying of the title for ``hinton`` and ``matrix_histogram`` plots when a title is given. Previously the supplied title was not displayed. ([#1707](https://github.com/qutip/qutip/pull/1707) by Vladimir Vargas-Calder√≥n); - Remov",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:8217,Availability,error,errors,8217,"QubitCircuit`` constructor. This allows, for example, the construction of qutrit circuits. ([#1807](https://github.com/qutip/qutip/pull/1807) by Boxi Li); - Fixed the checking of ``method`` and ``offset`` parameters in ``coherent`` and ``coherent_dm``. ([#1469](https://github.com/qutip/qutip/pull/1469) and [#1741](https://github.com/qutip/qutip/pull/1741) by Joseph Fox-Rabinovitz and Simon Cross); - Removed the Hamiltonian saved in the ``sesolve`` solver results. ([#1689](https://github.com/qutip/qutip/pull/1689) by Eric Gigu√®re); - Fixed a bug in rand_herm with ``pos_def=True`` and ``density>0.5`` where the diagonal was incorrectly filled. ([#1562](https://github.com/qutip/qutip/pull/1562) by Eric Gigu√®re). # Documentation Improvements. - Added contributors image to the documentation. ([#1828](https://github.com/qutip/qutip/pull/1828) by Leonard Assis); - Fixed the Theory of Quantum Information bibliography link. ([#1840](https://github.com/qutip/qutip/pull/1840) by Anto Luketina); - Fixed minor grammar errors in the dynamics guide. ([#1822](https://github.com/qutip/qutip/pull/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://gith",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:5,Deployability,release,release,5,"This release sees the addition of two new solvers -- `qutip.krylovsolve` based on the Krylov subspace approximation and `qutip.nonmarkov.heom` that reimplements the BoFiN HEOM solver. Bloch sphere rendering gained support for drawing arcs and lines on the sphere, and for setting the transparency of rendered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:1089,Deployability,release,releases,1089," Krylov subspace approximation and `qutip.nonmarkov.heom` that reimplements the BoFiN HEOM solver. Bloch sphere rendering gained support for drawing arcs and lines on the sphere, and for setting the transparency of rendered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting lines and arcs on the Bloch sphere. ([#1690](https://github.com/qutip/qutip/pull/16",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:1117,Deployability,release,releases,1117,"markov.heom` that reimplements the BoFiN HEOM solver. Bloch sphere rendering gained support for drawing arcs and lines on the sphere, and for setting the transparency of rendered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting lines and arcs on the Bloch sphere. ([#1690](https://github.com/qutip/qutip/pull/1690) by Gaurav Saxena, Asier Galicia and Simon",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:1338,Deployability,release,release,1338,"ndered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting lines and arcs on the Bloch sphere. ([#1690](https://github.com/qutip/qutip/pull/1690) by Gaurav Saxena, Asier Galicia and Simon Cross); - Added transparency parameter to the add_point, add_vector and add_states methods in the Bloch and Bloch3d classes. ([#1837](https://github.com/qutip/qutip/pull/18",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:5219,Deployability,install,installed,5219,".com/qutip/qutip/pull/1628) by Mahdi Aslani); - Sped up ``state_number_enumerate``, ``state_number_index``, ``state_index_number``, and added some error checking. ``enr_state_dictionaries`` now returns a list for ``idx2state``. ([#1604](https://github.com/qutip/qutip/pull/1604) by Johannes Feist); - Added new Husimi Q algorithms, improving the speed for density matrices, and giving a near order-of-magnitude improvement when calculating the Q function for many different states, using the new ``qutip.QFunc`` class, instead of the ``qutip.qfunc`` function. ([#934](https://github.com/qutip/qutip/pull/934) and [#1583](https://github.com/qutip/qutip/pull/1583) by Daniel Weigand and Jake Lishman); - Updated licence holders with regards to new governance model, and remove extraneous licensing information from source files. ([#1579](https://github.com/qutip/qutip/pull/1579) by Jake Lishman); - Removed the vendored copy of LaTeX's qcircuit package which is GPL licensed. We now rely on the package being installed by user. It is installed by default with TexLive. ([#1580](https://github.com/qutip/qutip/pull/1580) by Jake Lishman); - The signatures of rand_ket and rand_ket_haar were changed to allow N (the size of the random ket) to be determined automatically when dims are specified. ([#1509](https://github.com/qutip/qutip/pull/1509) by Purva Thakre). # Bug Fixes. - Fix circuit index used when plotting circuits with non-reversed states. ([#1847](https://github.com/qutip/qutip/pull/1847) by Christian Staufenbiel); - Changed implementation of ``qutip.orbital`` to use ``scipy.special.spy_harm`` to remove bugs in angle interpretation. ([#1844](https://github.com/qutip/qutip/pull/1844) by Christian Staufenbiel); - Fixed ``QobjEvo.tidyup`` to use ``settings.auto_tidyup_atol`` when removing small elements in sparse matrices. ([#1832](https://github.com/qutip/qutip/pull/1832) by Eric Gigu√®re); - Ensured that tidyup's default tolerance is read from settings at each call. ([#1830](https:",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:5244,Deployability,install,installed,5244,"- Sped up ``state_number_enumerate``, ``state_number_index``, ``state_index_number``, and added some error checking. ``enr_state_dictionaries`` now returns a list for ``idx2state``. ([#1604](https://github.com/qutip/qutip/pull/1604) by Johannes Feist); - Added new Husimi Q algorithms, improving the speed for density matrices, and giving a near order-of-magnitude improvement when calculating the Q function for many different states, using the new ``qutip.QFunc`` class, instead of the ``qutip.qfunc`` function. ([#934](https://github.com/qutip/qutip/pull/934) and [#1583](https://github.com/qutip/qutip/pull/1583) by Daniel Weigand and Jake Lishman); - Updated licence holders with regards to new governance model, and remove extraneous licensing information from source files. ([#1579](https://github.com/qutip/qutip/pull/1579) by Jake Lishman); - Removed the vendored copy of LaTeX's qcircuit package which is GPL licensed. We now rely on the package being installed by user. It is installed by default with TexLive. ([#1580](https://github.com/qutip/qutip/pull/1580) by Jake Lishman); - The signatures of rand_ket and rand_ket_haar were changed to allow N (the size of the random ket) to be determined automatically when dims are specified. ([#1509](https://github.com/qutip/qutip/pull/1509) by Purva Thakre). # Bug Fixes. - Fix circuit index used when plotting circuits with non-reversed states. ([#1847](https://github.com/qutip/qutip/pull/1847) by Christian Staufenbiel); - Changed implementation of ``qutip.orbital`` to use ``scipy.special.spy_harm`` to remove bugs in angle interpretation. ([#1844](https://github.com/qutip/qutip/pull/1844) by Christian Staufenbiel); - Fixed ``QobjEvo.tidyup`` to use ``settings.auto_tidyup_atol`` when removing small elements in sparse matrices. ([#1832](https://github.com/qutip/qutip/pull/1832) by Eric Gigu√®re); - Ensured that tidyup's default tolerance is read from settings at each call. ([#1830](https://github.com/qutip/qutip/pull/1830) by Eric Gig",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:9530,Deployability,configurat,configuration,9530,"ull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10270,Deployability,update,updated,10270,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10416,Deployability,release,release,10416,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10495,Deployability,release,release,10495,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:1720,Integrability,wrap,wrapper,1720,"and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting lines and arcs on the Bloch sphere. ([#1690](https://github.com/qutip/qutip/pull/1690) by Gaurav Saxena, Asier Galicia and Simon Cross); - Added transparency parameter to the add_point, add_vector and add_states methods in the Bloch and Bloch3d classes. ([#1837](https://github.com/qutip/qutip/pull/1837) by Xavier Spronken); - Support ``Path`` objects in ``qutip.fileio``. ([#1813](https://github.com/qutip/qutip/pull/1813) by Adri√† Labay); - Improved the weighting in steadystate solver, so that the default weight matches the documented behaviour and the dense solver applies the weights in the same manner as the sparse solver. ([#1275](https://github.com/qutip/qutip/pull/1275) and [#1802](h",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:9109,Integrability,depend,dependabot,9109,"graphy link. ([#1840](https://github.com/qutip/qutip/pull/1840) by Anto Luketina); - Fixed minor grammar errors in the dynamics guide. ([#1822](https://github.com/qutip/qutip/pull/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot);",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10100,Integrability,depend,dependabot,10100,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:450,Modifiability,flexible,flexible,450,"This release sees the addition of two new solvers -- `qutip.krylovsolve` based on the Krylov subspace approximation and `qutip.nonmarkov.heom` that reimplements the BoFiN HEOM solver. Bloch sphere rendering gained support for drawing arcs and lines on the sphere, and for setting the transparency of rendered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:961,Modifiability,enhance,enhancements,961,"This release sees the addition of two new solvers -- `qutip.krylovsolve` based on the Krylov subspace approximation and `qutip.nonmarkov.heom` that reimplements the BoFiN HEOM solver. Bloch sphere rendering gained support for drawing arcs and lines on the sphere, and for setting the transparency of rendered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:9530,Modifiability,config,configuration,9530,"ull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:604,Performance,load,loading,604,"This release sees the addition of two new solvers -- `qutip.krylovsolve` based on the Krylov subspace approximation and `qutip.nonmarkov.heom` that reimplements the BoFiN HEOM solver. Bloch sphere rendering gained support for drawing arcs and lines on the sphere, and for setting the transparency of rendered points and vectors, Hinton plots gained support for specifying a coloring style, and matrix histograms gained better default colors and more flexible styling options. Other significant improvements include better scaling of the Floquet solver, support for passing `Path` objects when saving and loading files, support for passing callable functions as `e_ops` to `mesolve` and `sesolve`, and faster state number enumeration and Husimi Q functions. Import bugfixes include some bugs affecting plotting with matplotlib 3.5 and fixing support for qutrits (and other non-qubit) quantum circuits. The many other small improvements, bug fixes, documentation enhancements, and behind the scenese development changes are included in the list below. QuTiP 4.7.X will be the last series of releases for QuTiP 4. Patch releases will continue for the 4.7.X series but the main development effort will move to QuTiP 5. The many, many contributors who filed issues, submitted or reviewed pull requests, and improved the documentation for this release are listed next to their contributions below. Thank you to all of you. # Improvements. - **MAJOR** Added krylovsolve as a new solver based on krylov subspace approximation. ([#1739](https://github.com/qutip/qutip/pull/1739) by Emiliano Fortes); - **MAJOR** Imported BoFiN HEOM (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver. ([#1601](https://github.com/qutip/qutip/pull/1601), [#1726](https://github.com/qutip/qutip/pull/1726), and [#1724](https://github.com/qutip/qutip/pull/1724) by Simon Cross, Tarun Raheja and Neill Lambert); - **MAJOR** Added support for plotting",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:8825,Testability,test,test,8825,"ncorrectly filled. ([#1562](https://github.com/qutip/qutip/pull/1562) by Eric Gigu√®re). # Documentation Improvements. - Added contributors image to the documentation. ([#1828](https://github.com/qutip/qutip/pull/1828) by Leonard Assis); - Fixed the Theory of Quantum Information bibliography link. ([#1840](https://github.com/qutip/qutip/pull/1840) by Anto Luketina); - Fixed minor grammar errors in the dynamics guide. ([#1822](https://github.com/qutip/qutip/pull/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qut",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:9160,Testability,test,tests,9160,"utip/pull/1840) by Anto Luketina); - Fixed minor grammar errors in the dynamics guide. ([#1822](https://github.com/qutip/qutip/pull/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https:",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:9291,Testability,test,tests,9291,"/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to th",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10121,Testability,test,tests,10121,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:6687,Usability,simpl,simple,6687,"ttps://github.com/qutip/qutip/pull/1847) by Christian Staufenbiel); - Changed implementation of ``qutip.orbital`` to use ``scipy.special.spy_harm`` to remove bugs in angle interpretation. ([#1844](https://github.com/qutip/qutip/pull/1844) by Christian Staufenbiel); - Fixed ``QobjEvo.tidyup`` to use ``settings.auto_tidyup_atol`` when removing small elements in sparse matrices. ([#1832](https://github.com/qutip/qutip/pull/1832) by Eric Gigu√®re); - Ensured that tidyup's default tolerance is read from settings at each call. ([#1830](https://github.com/qutip/qutip/pull/1830) by Eric Gigu√®re); - Fixed ``scipy.sparse`` deprecation warnings raised by ``qutip.fast_csr_matrix``. ([#1827](https://github.com/qutip/qutip/pull/1827) by Simon Cross); - Fixed rendering of vectors on the Bloch sphere when using matplotlib 3.5 and above. ([#1818](https://github.com/qutip/qutip/pull/1818) by Simon Cross); - Fixed the displaying of ``Lattice1d`` instances and their unit cells. Previously calling them raised exceptions in simple cases. ([#1819](https://github.com/qutip/qutip/pull/1819), [#1697](https://github.com/qutip/qutip/pull/1697) and [#1702](https://github.com/qutip/qutip/pull/1702) by Simon Cross and Saumya Biswas); - Fixed the displaying of the title for ``hinton`` and ``matrix_histogram`` plots when a title is given. Previously the supplied title was not displayed. ([#1707](https://github.com/qutip/qutip/pull/1707) by Vladimir Vargas-Calder√≥n); - Removed an incorrect check on the initial state dimensions in the ``QubitCircuit`` constructor. This allows, for example, the construction of qutrit circuits. ([#1807](https://github.com/qutip/qutip/pull/1807) by Boxi Li); - Fixed the checking of ``method`` and ``offset`` parameters in ``coherent`` and ``coherent_dm``. ([#1469](https://github.com/qutip/qutip/pull/1469) and [#1741](https://github.com/qutip/qutip/pull/1741) by Joseph Fox-Rabinovitz and Simon Cross); - Removed the Hamiltonian saved in the ``sesolve`` solver results. ([#168",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:8240,Usability,guid,guide,8240,"QubitCircuit`` constructor. This allows, for example, the construction of qutrit circuits. ([#1807](https://github.com/qutip/qutip/pull/1807) by Boxi Li); - Fixed the checking of ``method`` and ``offset`` parameters in ``coherent`` and ``coherent_dm``. ([#1469](https://github.com/qutip/qutip/pull/1469) and [#1741](https://github.com/qutip/qutip/pull/1741) by Joseph Fox-Rabinovitz and Simon Cross); - Removed the Hamiltonian saved in the ``sesolve`` solver results. ([#1689](https://github.com/qutip/qutip/pull/1689) by Eric Gigu√®re); - Fixed a bug in rand_herm with ``pos_def=True`` and ``density>0.5`` where the diagonal was incorrectly filled. ([#1562](https://github.com/qutip/qutip/pull/1562) by Eric Gigu√®re). # Documentation Improvements. - Added contributors image to the documentation. ([#1828](https://github.com/qutip/qutip/pull/1828) by Leonard Assis); - Fixed the Theory of Quantum Information bibliography link. ([#1840](https://github.com/qutip/qutip/pull/1840) by Anto Luketina); - Fixed minor grammar errors in the dynamics guide. ([#1822](https://github.com/qutip/qutip/pull/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://gith",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:8603,Usability,guid,guide,8603,oseph Fox-Rabinovitz and Simon Cross); - Removed the Hamiltonian saved in the ``sesolve`` solver results. ([#1689](https://github.com/qutip/qutip/pull/1689) by Eric Gigu√®re); - Fixed a bug in rand_herm with ``pos_def=True`` and ``density>0.5`` where the diagonal was incorrectly filled. ([#1562](https://github.com/qutip/qutip/pull/1562) by Eric Gigu√®re). # Documentation Improvements. - Added contributors image to the documentation. ([#1828](https://github.com/qutip/qutip/pull/1828) by Leonard Assis); - Fixed the Theory of Quantum Information bibliography link. ([#1840](https://github.com/qutip/qutip/pull/1840) by Anto Luketina); - Fixed minor grammar errors in the dynamics guide. ([#1822](https://github.com/qutip/qutip/pull/1822) by Victor Omole); - Fixed many small documentation typos. ([#1569](https://github.com/qutip/qutip/pull/1569) by Ashish Panigrahi); - Added Pulser to the list of libraries that use QuTiP. ([#1570](https://github.com/qutip/qutip/pull/1570) by Ashish Panigrahi); - Corrected typo in the states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Py,MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10241,Usability,guid,guidelines,10241,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.7.0:10308,Usability,guid,guidelines,10308,"he states and operators guide. ([#1567](https://github.com/qutip/qutip/pull/1567) by Laurent Ajdnik); - Converted http links to https. ([#1555](https://github.com/qutip/qutip/pull/1555) by Jake Lishamn). # Developer Changes. - Add GitHub actions test run on windows-latest. ([#1853](https://github.com/qutip/qutip/pull/1853) and [#1855](https://github.com/qutip/qutip/pull/1855) by Simon Cross); - Bumped the version of pillow used to build documentation from 9.0.0 to 9.0.1. ([#1835](https://github.com/qutip/qutip/pull/1835) by dependabot); - Migrated the ``qutip.superop_reps`` tests to pytest. ([#1825](https://github.com/qutip/qutip/pull/1825) by Felipe Bivort Haiek); - Migrated the ``qutip.steadystates`` tests to pytest. ([#1679](https://github.com/qutip/qutip/pull/1679) by Eric Gigu√®re); - Changed the README.md CI badge to the GitHub Actions badge. ([#1581](https://github.com/qutip/qutip/pull/1581) by Jake Lishman); - Updated CodeClimate configuration to treat our Python source files as Python 3. ([#1577](https://github.com/qutip/qutip/pull/1577) by Jake Lishman); - Reduced cyclomatic complexity in ``qutip._mkl``. ([#1576](https://github.com/qutip/qutip/pull/1576) by Jake Lishman); - Fixed PEP8 warnings in ``qutip.control``, ``qutip.mcsolve``, ``qutip.random_objects``, and ``qutip.stochastic``. ([#1575](https://github.com/qutip/qutip/pull/1575) by Jake Lishman); - Bumped the version of urllib3 used to build documentation from 1.26.4 to 1.26.5. ([#1563](https://github.com/qutip/qutip/pull/1563) by dependabot); - Moved tests to GitHub Actions. ([#1551](https://github.com/qutip/qutip/pull/1551) by Jake Lishman); - The GitHub contributing guidelines were re-added and updated to point to the more complete guidelines in the documentation. ([#1549](https://github.com/qutip/qutip/pull/1549) by Jake Lishman); - The release documentation was reworked after the initial 4.6.1 to match the actual release process. ([#1544](https://github.com/qutip/qutip/pull/1544) by Jake Lishman)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.7.0
https://github.com/qutip/qutip/releases/tag/v4.6.3:802,Availability,fault,faults,802,"This minor release adds support for numpy 1.22 and Python 3.10 and removes some blockers for running QuTiP on the Apple M1. The performance of the ``enr_destroy``, ``state_number_enumerate`` and ``hadamard_transform`` functions was drastically improved (up to 70x or 200x faster in some common cases), and support for the drift Hamiltonian was added to the ``qutip.qip`` ``Processor``. The ``qutip.hardware_info`` module was removed as part of adding support for the Apple M1. We hope the removal of this little-used module does not adversely affect many users -- it was largely unrelated to QuTiP's core functionality and its presence was a continual source of blockers to importing ``qutip`` on new or changed platforms. A new check on the dimensions of ``Qobj``'s were added to prevent segmentation faults when invalid shape and dimension combinations were passed to Cython code. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/p",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:3622,Availability,error,errors,3622,imon Cross); - Fixed support for calculating the propagator for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed the ignoring of the random number seed passed to ``rand_dm`` in the case where ``pure`` was set to true. ([#1600](https://github.com/qutip/qutip/pull/1600) by Pontus Wikst√•hl); - Fixed qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed setting of OpenMP compilation flag on Linux. Previously when compiling the OpenMP functions were compiled without parallelization. ([#1693](https://github.com/qutip/qutip/pull/1693) by Eric Gigu√®re); - Fixed tracking the state of the Bloch sphere figure and axes to prevent exceptions during rendering. ([#1619](https://github.com/qutip/qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the correspondin,MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:4697,Availability,fault,fault,4697," and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed setting of OpenMP compilation flag on Linux. Previously when compiling the OpenMP functions were compiled without parallelization. ([#1693](https://github.com/qutip/qutip/pull/1693) by Eric Gigu√®re); - Fixed tracking the state of the Bloch sphere figure and axes to prevent exceptions during rendering. ([#1619](https://github.com/qutip/qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the corresponding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the Floquet guide. ([#1675](https://github.com/qutip/qutip/pull/1675) by Simon Cross); - Fixed the description of random number usage in the Monte Carlo solver guide. ([#1677](https://github.com/qutip/qutip/pull/1677) by Ian Thorvaldson); - Fixed the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation). ([#1678](https://github.com/qutip/qutip/pull/1678) by Simon Cross); - Updated the installation requirements in the documentati",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:11,Deployability,release,release,11,"This minor release adds support for numpy 1.22 and Python 3.10 and removes some blockers for running QuTiP on the Apple M1. The performance of the ``enr_destroy``, ``state_number_enumerate`` and ``hadamard_transform`` functions was drastically improved (up to 70x or 200x faster in some common cases), and support for the drift Hamiltonian was added to the ``qutip.qip`` ``Processor``. The ``qutip.hardware_info`` module was removed as part of adding support for the Apple M1. We hope the removal of this little-used module does not adversely affect many users -- it was largely unrelated to QuTiP's core functionality and its presence was a continual source of blockers to importing ``qutip`` on new or changed platforms. A new check on the dimensions of ``Qobj``'s were added to prevent segmentation faults when invalid shape and dimension combinations were passed to Cython code. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/p",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:1889,Deployability,release,released,1889,"de. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/pull/1754), [#1758](https://github.com/qutip/qutip/pull/1758) by Eric Gigu√®re). Bug Fixes; ---------; - Fixed support for calculating the propagator of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (Fix mesolve segfault with bad initial state [#1459](https://github.com/qutip/qutip/pull/1459)), but the propagator function's calls to mesolve violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls mesolve with the correct dimensions set on the initial state. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed support for calculating the propagator for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been a",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:4211,Deployability,configurat,configuration,4211,"ol.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed setting of OpenMP compilation flag on Linux. Previously when compiling the OpenMP functions were compiled without parallelization. ([#1693](https://github.com/qutip/qutip/pull/1693) by Eric Gigu√®re); - Fixed tracking the state of the Bloch sphere figure and axes to prevent exceptions during rendering. ([#1619](https://github.com/qutip/qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the corresponding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the F",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:4243,Deployability,release,release,4243,"on with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed setting of OpenMP compilation flag on Linux. Previously when compiling the OpenMP functions were compiled without parallelization. ([#1693](https://github.com/qutip/qutip/pull/1693) by Eric Gigu√®re); - Fixed tracking the state of the Bloch sphere figure and axes to prevent exceptions during rendering. ([#1619](https://github.com/qutip/qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the corresponding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the Floquet guide. ([#1675](https://github.com/qutip/qutip/pull/1",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:5633,Deployability,install,installation,5633,"onding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the Floquet guide. ([#1675](https://github.com/qutip/qutip/pull/1675) by Simon Cross); - Fixed the description of random number usage in the Monte Carlo solver guide. ([#1677](https://github.com/qutip/qutip/pull/1677) by Ian Thorvaldson); - Fixed the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation). ([#1678](https://github.com/qutip/qutip/pull/1678) by Simon Cross); - Updated the installation requirements in the documentation to match what is specified in setup.py. ([#1715](https://github.com/qutip/qutip/pull/1715) by Asier Galicia); - Fixed a typo in the ``chi_to_choi`` documentation. Previously the documentation mixed up chi and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:8120,Deployability,install,installed,8120," build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://github.com/qutip/qutip/pull/1751) by Simon Cross); - Added project urls to linking to the source repository, issue tracker and documentation to setup.cfg. ([#1779](https://github.com/qutip/qutip/pull/1779) by Simon Cross); - Added a numpy 1.22 and Python 3.10 buil",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:1661,Energy Efficiency,power,power,1661," was a continual source of blockers to importing ``qutip`` on new or changed platforms. A new check on the dimensions of ``Qobj``'s were added to prevent segmentation faults when invalid shape and dimension combinations were passed to Cython code. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/pull/1754), [#1758](https://github.com/qutip/qutip/pull/1758) by Eric Gigu√®re). Bug Fixes; ---------; - Fixed support for calculating the propagator of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (Fix mesolve segfault with bad initial state [#1459](https://github.com/qutip/qutip/pull/1459)), but the propagator function's calls to mesolve violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls mesolve with the correct dimensions set on the initial state. ([#1588](https://github.com/qutip/qutip/p",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:7218,Integrability,depend,dependabot,7218,"de. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Fl",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:7364,Integrability,depend,dependabot,7364," ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/quti",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:7512,Integrability,depend,dependabot,7512,"tip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:7662,Integrability,depend,dependabot,7662,"functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simo",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:4211,Modifiability,config,configuration,4211,"ol.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed setting of OpenMP compilation flag on Linux. Previously when compiling the OpenMP functions were compiled without parallelization. ([#1693](https://github.com/qutip/qutip/pull/1693) by Eric Gigu√®re); - Fixed tracking the state of the Bloch sphere figure and axes to prevent exceptions during rendering. ([#1619](https://github.com/qutip/qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the corresponding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the F",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:128,Performance,perform,performance,128,"This minor release adds support for numpy 1.22 and Python 3.10 and removes some blockers for running QuTiP on the Apple M1. The performance of the ``enr_destroy``, ``state_number_enumerate`` and ``hadamard_transform`` functions was drastically improved (up to 70x or 200x faster in some common cases), and support for the drift Hamiltonian was added to the ``qutip.qip`` ``Processor``. The ``qutip.hardware_info`` module was removed as part of adding support for the Apple M1. We hope the removal of this little-used module does not adversely affect many users -- it was largely unrelated to QuTiP's core functionality and its presence was a continual source of blockers to importing ``qutip`` on new or changed platforms. A new check on the dimensions of ``Qobj``'s were added to prevent segmentation faults when invalid shape and dimension combinations were passed to Cython code. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/p",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:2223,Safety,sanity check,sanity checks,2223,"//github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/pull/1754), [#1758](https://github.com/qutip/qutip/pull/1758) by Eric Gigu√®re). Bug Fixes; ---------; - Fixed support for calculating the propagator of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (Fix mesolve segfault with bad initial state [#1459](https://github.com/qutip/qutip/pull/1459)), but the propagator function's calls to mesolve violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls mesolve with the correct dimensions set on the initial state. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed support for calculating the propagator for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed the ignoring of the random number seed passed to ``rand_dm`` in the case where ``pure`` was set to true. ([#1600](https://github.com/qutip/qutip/pull/1600) by Pontus Wikst√•hl); - Fixed qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:993,Testability,test,testing,993,"This minor release adds support for numpy 1.22 and Python 3.10 and removes some blockers for running QuTiP on the Apple M1. The performance of the ``enr_destroy``, ``state_number_enumerate`` and ``hadamard_transform`` functions was drastically improved (up to 70x or 200x faster in some common cases), and support for the drift Hamiltonian was added to the ``qutip.qip`` ``Processor``. The ``qutip.hardware_info`` module was removed as part of adding support for the Apple M1. We hope the removal of this little-used module does not adversely affect many users -- it was largely unrelated to QuTiP's core functionality and its presence was a continual source of blockers to importing ``qutip`` on new or changed platforms. A new check on the dimensions of ``Qobj``'s were added to prevent segmentation faults when invalid shape and dimension combinations were passed to Cython code. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/p",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:2784,Testability,test,tested,2784,"odule wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/pull/1754), [#1758](https://github.com/qutip/qutip/pull/1758) by Eric Gigu√®re). Bug Fixes; ---------; - Fixed support for calculating the propagator of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (Fix mesolve segfault with bad initial state [#1459](https://github.com/qutip/qutip/pull/1459)), but the propagator function's calls to mesolve violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls mesolve with the correct dimensions set on the initial state. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed support for calculating the propagator for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed the ignoring of the random number seed passed to ``rand_dm`` in the case where ``pure`` was set to true. ([#1600](https://github.com/qutip/qutip/pull/1600) by Pontus Wikst√•hl); - Fixed qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:2798,Testability,test,test,2798,"odule wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/pull/1754), [#1758](https://github.com/qutip/qutip/pull/1758) by Eric Gigu√®re). Bug Fixes; ---------; - Fixed support for calculating the propagator of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (Fix mesolve segfault with bad initial state [#1459](https://github.com/qutip/qutip/pull/1459)), but the propagator function's calls to mesolve violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls mesolve with the correct dimensions set on the initial state. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed support for calculating the propagator for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed the ignoring of the random number seed passed to ``rand_dm`` in the case where ``pure`` was set to true. ([#1600](https://github.com/qutip/qutip/pull/1600) by Pontus Wikst√•hl); - Fixed qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:3714,Testability,test,tests,3714,imon Cross); - Fixed support for calculating the propagator for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed. ([#1588](https://github.com/qutip/qutip/pull/1588) by Simon Cross); - Fixed the ignoring of the random number seed passed to ``rand_dm`` in the case where ``pure`` was set to true. ([#1600](https://github.com/qutip/qutip/pull/1600) by Pontus Wikst√•hl); - Fixed qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems). ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Removed qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional. ([#1621](https://github.com/qutip/qutip/pull/1621) by Simon Cross); - Fixed errors in the calculation of the Husimi spin_q_function and spin_wigner functions and added tests for them. ([#1632](https://github.com/qutip/qutip/pull/1632) by Mark Johnson); - Fixed setting of OpenMP compilation flag on Linux. Previously when compiling the OpenMP functions were compiled without parallelization. ([#1693](https://github.com/qutip/qutip/pull/1693) by Eric Gigu√®re); - Fixed tracking the state of the Bloch sphere figure and axes to prevent exceptions during rendering. ([#1619](https://github.com/qutip/qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the correspondin,MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:6623,Testability,test,test,6623,"pdated the installation requirements in the documentation to match what is specified in setup.py. ([#1715](https://github.com/qutip/qutip/pull/1715) by Asier Galicia); - Fixed a typo in the ``chi_to_choi`` documentation. Previously the documentation mixed up chi and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:6899,Testability,test,tests,6899,"i and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/q",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:6917,Testability,test,test,6917,"i and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/q",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:7828,Testability,test,tests,7828,"ip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://g",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:7976,Testability,test,test,7976,"sses when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://github.com/qutip/qutip/pull/1751) by Simon Cross); - Added project urls to linking to the source repository, issue tracker",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:8098,Testability,test,tests,8098," build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://github.com/qutip/qutip/pull/1751) by Simon Cross); - Added project urls to linking to the source repository, issue tracker and documentation to setup.cfg. ([#1779](https://github.com/qutip/qutip/pull/1779) by Simon Cross); - Added a numpy 1.22 and Python 3.10 buil",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:8154,Testability,test,tests,8154,"/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://github.com/qutip/qutip/pull/1695) by dependabot); - Bumped the version of numpy used to build documentation from 1.19.5 to 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://github.com/qutip/qutip/pull/1751) by Simon Cross); - Added project urls to linking to the source repository, issue tracker and documentation to setup.cfg. ([#1779](https://github.com/qutip/qutip/pull/1779) by Simon Cross); - Added a numpy 1.22 and Python 3.10 build to the CI test matrix. ([#1777](https://github.com/qutip/qutip/pull/1777) by Simon C",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:9084,Testability,test,test,9084,"o 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://github.com/qutip/qutip/pull/1751) by Simon Cross); - Added project urls to linking to the source repository, issue tracker and documentation to setup.cfg. ([#1779](https://github.com/qutip/qutip/pull/1779) by Simon Cross); - Added a numpy 1.22 and Python 3.10 build to the CI test matrix. ([#1777](https://github.com/qutip/qutip/pull/1777) by Simon Cross); - Ignore deprecation warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests. ([#1797](https://github.com/qutip/qutip/pull/1797) by Simon Cross); - Add building of wheels for Python 3.10 to the cibuildwheel job. ([#1796](https://github.com/qutip/qutip/pull/1796) by Simon Cross)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:9241,Testability,test,tests,9241,"o 1.21.0. ([#1767](https://github.com/qutip/qutip/pull/1767) by dependabot); - Bumped the version of ipython used to build documentation from 7.22.0 to 7.31.1. ([#1780](https://github.com/qutip/qutip/pull/1780) by dependabot); - Rename qutip.bib to CITATION.bib to enable GitHub's citation support. ([#1662](https://github.com/qutip/qutip/pull/1662) by Ashish Panigrahi); - Added tests for simdiags. ([#1681](https://github.com/qutip/qutip/pull/1681) by Eric Gigu√®re); - Added support for specifying the numpy version in the CI test matrix. ([#1696](https://github.com/qutip/qutip/pull/1696) by Simon Cross); - Fixed the skipping of the dnorm metric tests if cvxpy is not installed. Previously all metrics tests were skipped by accident. ([#1704](https://github.com/qutip/qutip/pull/1704) by Florian Hopfmueller); - Added bug report, feature request and other options to the GitHub issue reporting template. ([#1728](https://github.com/qutip/qutip/pull/1728) by Aryaman Kolhe); - Updated the build process to support building on Python 3.10 by removing the build requirement for numpy < 1.20 and replacing it with a requirement on oldest-supported-numpy. ([#1747](https://github.com/qutip/qutip/pull/1747) by Simon Cross); - Updated the version of cibuildwheel used to build wheels to 2.3.0. ([#1747](https://github.com/qutip/qutip/pull/1747), [#1751](https://github.com/qutip/qutip/pull/1751) by Simon Cross); - Added project urls to linking to the source repository, issue tracker and documentation to setup.cfg. ([#1779](https://github.com/qutip/qutip/pull/1779) by Simon Cross); - Added a numpy 1.22 and Python 3.10 build to the CI test matrix. ([#1777](https://github.com/qutip/qutip/pull/1777) by Simon Cross); - Ignore deprecation warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests. ([#1797](https://github.com/qutip/qutip/pull/1797) by Simon Cross); - Add building of wheels for Python 3.10 to the cibuildwheel job. ([#1796](https://github.com/qutip/qutip/pull/1796) by Simon Cross)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:1101,Usability,simpl,simple,1101," and removes some blockers for running QuTiP on the Apple M1. The performance of the ``enr_destroy``, ``state_number_enumerate`` and ``hadamard_transform`` functions was drastically improved (up to 70x or 200x faster in some common cases), and support for the drift Hamiltonian was added to the ``qutip.qip`` ``Processor``. The ``qutip.hardware_info`` module was removed as part of adding support for the Apple M1. We hope the removal of this little-used module does not adversely affect many users -- it was largely unrelated to QuTiP's core functionality and its presence was a continual source of blockers to importing ``qutip`` on new or changed platforms. A new check on the dimensions of ``Qobj``'s were added to prevent segmentation faults when invalid shape and dimension combinations were passed to Cython code. In addition, there were many small bugfixes, documentation improvements, and improvements to our building and testing processes. Improvements; ------------; - The ``enr_destroy`` function was made ~200x faster in many simple cases. ([#1593](https://github.com/qutip/qutip/pull/1593) by Johannes Feist); - The ``state_number_enumerate`` function was made significantly faster. ([#1594](https://github.com/qutip/qutip/pull/1594) by Johannes Feist); - Added the missing drift Hamiltonian to the method run_analytically of ``Processor``. ([#1603](https://github.com/qutip/qutip/pull/1603) Boxi Li); - The ``hadamard_transform`` was made much faster, e.g., ~70x faster for N=10. ([#1688](https://github.com/qutip/qutip/pull/1688) by Asier Galicia); - Added support for computing the power of a scalar-like Qobj. ([#1692](https://github.com/qutip/qutip/pull/1692) by Asier Galicia); - Removed the ``hardware_info`` module. This module wasn't used inside QuTiP and regularly broke when new operating systems were released, and in particular prevented importing QuTiP on the Apple M1. ([#1754](https://github.com/qutip/qutip/pull/1754), [#1758](https://github.com/qutip/qutip/pull/1758) b",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:5193,Usability,guid,guide,5193,"qutip/pull/1619) by Simon Cross); - Fixed compatibility with numpy configuration in numpy's 1.22.0 release. ([#1752](https://github.com/qutip/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the corresponding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the Floquet guide. ([#1675](https://github.com/qutip/qutip/pull/1675) by Simon Cross); - Fixed the description of random number usage in the Monte Carlo solver guide. ([#1677](https://github.com/qutip/qutip/pull/1677) by Ian Thorvaldson); - Fixed the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation). ([#1678](https://github.com/qutip/qutip/pull/1678) by Simon Cross); - Updated the installation requirements in the documentation to match what is specified in setup.py. ([#1715](https://github.com/qutip/qutip/pull/1715) by Asier Galicia); - Fixed a typo in the ``chi_to_choi`` documentation. Previously the documentation mixed up chi and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/q",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:5341,Usability,guid,guide,5341,"/qutip/pull/1752) by Matthew Treinish); - Added dims checks for e_ops passed to solvers to prevent hanging the calling process when e_ops of the wrong dimensions were passed. ([#1778](https://github.com/qutip/qutip/pull/1778) by Eric Gigu√®re); - Added a check in Qobj constructor that the respective members of data.shape cannot be larger than what the corresponding dims could contain to prevent a segmentation fault caused by inconsistencies between dims and shapes. ([#1783](https://github.com/qutip/qutip/pull/1783), [#1785](https://github.com/qutip/qutip/pull/1785), [#1784](https://github.com/qutip/qutip/pull/1784) by Lajos Palanki & Eric Gigu√®re). Documentation Improvements; --------------------------; - Added docs for the num_cbits parameter of the QubitCircuit class. ([#1652](https://github.com/qutip/qutip/pull/1652) by Jon Crall); - Fixed the parameters in the call to fsesolve in the Floquet guide. ([#1675](https://github.com/qutip/qutip/pull/1675) by Simon Cross); - Fixed the description of random number usage in the Monte Carlo solver guide. ([#1677](https://github.com/qutip/qutip/pull/1677) by Ian Thorvaldson); - Fixed the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation). ([#1678](https://github.com/qutip/qutip/pull/1678) by Simon Cross); - Updated the installation requirements in the documentation to match what is specified in setup.py. ([#1715](https://github.com/qutip/qutip/pull/1715) by Asier Galicia); - Fixed a typo in the ``chi_to_choi`` documentation. Previously the documentation mixed up chi and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:6239,Usability,guid,guide,6239,"qutip/qutip/pull/1675) by Simon Cross); - Fixed the description of random number usage in the Monte Carlo solver guide. ([#1677](https://github.com/qutip/qutip/pull/1677) by Ian Thorvaldson); - Fixed the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation). ([#1678](https://github.com/qutip/qutip/pull/1678) by Simon Cross); - Updated the installation requirements in the documentation to match what is specified in setup.py. ([#1715](https://github.com/qutip/qutip/pull/1715) by Asier Galicia); - Fixed a typo in the ``chi_to_choi`` documentation. Previously the documentation mixed up chi and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.3:6382,Usability,guid,guide,6382,"arlo solver guide. ([#1677](https://github.com/qutip/qutip/pull/1677) by Ian Thorvaldson); - Fixed the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation). ([#1678](https://github.com/qutip/qutip/pull/1678) by Simon Cross); - Updated the installation requirements in the documentation to match what is specified in setup.py. ([#1715](https://github.com/qutip/qutip/pull/1715) by Asier Galicia); - Fixed a typo in the ``chi_to_choi`` documentation. Previously the documentation mixed up chi and choi. ([#1731](https://github.com/qutip/qutip/pull/1731) by Pontus Wikst√•hl); - Improved the documentation for the stochastic equation solvers. Added links to notebooks with examples, API doumentation and external references. ([#1743](https://github.com/qutip/qutip/pull/1743) by Leonardo Assis); - Fixed a typo in ``qutip.settings`` in the settings guide. ([#1786](https://github.com/qutip/qutip/pull/1786) by Mahdi Aslani); - Made numerous small improvements to the text of the QuTiP basics guide. ([#1768](https://github.com/qutip/qutip/pull/1768) by Anna Naden); - Made a small phrasing improvement to the README. ([#1790](https://github.com/qutip/qutip/pull/1790) by Rita Abani). Developer Changes; -----------------; - Improved test coverage of states and operators functions. ([#1578](https://github.com/qutip/qutip/pull/1578) by Eric Gigu√®re); - Fixed test_interpolate mcsolve use ([#1645](https://github.com/qutip/qutip/pull/1645) by Eric Gigu√®re); - Ensured figure plots are explicitly closed during tests so that the test suite passes when run headless under Xvfb. ([#1648](https://github.com/qutip/qutip/pull/1648) by Simon Cross); - Bumped the version of pillow used to build documentation from 8.2.0 to 9.0.0. ([#1654](https://github.com/qutip/qutip/pull/1654), [#1760](https://github.com/qutip/qutip/pull/1760) by dependabot); - Bumped the version of babel used to build documentation from 2.9.0 to 2.9.1. ([#1695](https://gi",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.3
https://github.com/qutip/qutip/releases/tag/v4.6.0:1626,Availability,error,error,1626,"p``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators. (by **Jake Lishman**); - Calling Numpy ufuncs on ``Qobj`` will now correctly raise a ``TypeError`` rather than returning a nonsense ``ndarray``. (by **Jake Lishman**); - Convert segfault into Python exception when creating too-large tensor products. (by **Jake Lishman**); - Correctly set ``num_collapse`` in the output of ``mesolve``. (by **Jake Lishman**); - Fix ``ptrace`` when all subspaces are being kept, or the subspaces are passed in order. (by **Jake Lishman**); - Fix sorting bug in ``Bloch3d.add_points()`",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:2822,Availability,toler,tolerance,2822,"ubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators. (by **Jake Lishman**); - Calling Numpy ufuncs on ``Qobj`` will now correctly raise a ``TypeError`` rather than returning a nonsense ``ndarray``. (by **Jake Lishman**); - Convert segfault into Python exception when creating too-large tensor products. (by **Jake Lishman**); - Correctly set ``num_collapse`` in the output of ``mesolve``. (by **Jake Lishman**); - Fix ``ptrace`` when all subspaces are being kept, or the subspaces are passed in order. (by **Jake Lishman**); - Fix sorting bug in ``Bloch3d.add_points()``. (by **pschindler**); - Fix invalid string literals in docstrings and some unclosed files. (by **√âlie Gouzien**); - Fix Hermicity tests for matrices with values that are within the tolerance of 0. (by **Jake Lishman**); - Fix the trace norm being incorrectly reported as 0 for small matrices. (by **Jake Lishman**); - Fix issues with ``dnorm`` when using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:5,Deployability,release,release,5,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:195,Deployability,release,release,195,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:229,Deployability,release,releases,229,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:267,Deployability,install,install,267,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:819,Deployability,configurat,configuration,819,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:1488,Deployability,install,installation,1488,"derations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators. (by **Jake Lishman**); - Calling Numpy ufuncs on ``Qobj`` will now correctly raise a ``TypeError`` rather than returning a nonsense ``ndarray``. (by **Jake Lishman**); - Convert segfault into Python exception when creating too-large tensor products. (by **Jake Lishman**); - Correctly set ``num_collapse`` in the output of ``mesolve``. (by **Jake Lishman**); - Fix ``ptrace`` when al",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:1556,Deployability,install,installations,1556,"rted PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators. (by **Jake Lishman**); - Calling Numpy ufuncs on ``Qobj`` will now correctly raise a ``TypeError`` rather than returning a nonsense ``ndarray``. (by **Jake Lishman**); - Convert segfault into Python exception when creating too-large tensor products. (by **Jake Lishman**); - Correctly set ``num_collapse`` in the output of ``mesolve``. (by **Jake Lishman**); - Fix ``ptrace`` when all subspaces are being kept, or the subspaces are passed in order. (by **J",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:4151,Deployability,release,release,4151," using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending removal in QuTiP 5.0. These are legacy functions and classes that have been left unmaintained for a long time, and their functionality is now better achieved with ``QobjEvo`` or ``mesolve``. Developer Changes; -----------------; - **MAJOR** Overhaul of setup and packaging code to make it satisfy PEP 517, and move the build to a matrix on GitHub Actions in order to release binary wheels on pip for all major platforms and supported Python versions. (by **Jake Lishman**); - Default arguments in ``Qobj`` are now ``None`` rather than mutable types. (by **Jake Lishman**); - Fixed comsumable iterators being used to parametrise some tests, preventing the testing suite from being re-run within the same session. (by **Jake Lishman**); - Remove unused imports, simplify some floats and remove unnecessary list conversions. (by **jakobjakobson13**); - Improve Travis jobs matrix for specifying the testing containers. (by **Jake Lishman**); - Fix coverage reporting on Travis. (by **Jake Lishman**); - Added a ``pyproject.toml`` file. (by **Simon Humpohl** and **Eric Gigu√®re**); - Add doctests to documentation. (by **Sidhant Saraogi**); - Fix all warnings in the documentation build. (by **Jake Lishman**)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:71,Energy Efficiency,schedul,scheduler,71,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:888,Energy Efficiency,schedul,scheduler,888,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:913,Energy Efficiency,schedul,scheduler,913,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:997,Energy Efficiency,schedul,scheduling,997," improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Cos",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:655,Integrability,depend,dependencies,655,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:1632,Integrability,message,message,1632,"p``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators. (by **Jake Lishman**); - Calling Numpy ufuncs on ``Qobj`` will now correctly raise a ``TypeError`` rather than returning a nonsense ``ndarray``. (by **Jake Lishman**); - Convert segfault into Python exception when creating too-large tensor products. (by **Jake Lishman**); - Correctly set ``num_collapse`` in the output of ``mesolve``. (by **Jake Lishman**); - Fix ``ptrace`` when all subspaces are being kept, or the subspaces are passed in order. (by **Jake Lishman**); - Fix sorting bug in ``Bloch3d.add_points()`",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:819,Modifiability,config,configuration,819,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:749,Performance,load,loading,749,"This release brings improvements for qubit circuits, including a pulse scheduler, measurement statistics, reading/writing OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:1157,Performance,perform,performance,1157," OpenQASM and optimisations in the circuit simulations. This is the first release to have full binary wheel releases on pip; you can now do ``pip install qutip`` on almost any machine to get a correct version of the package without needing any compilers set up. The support for Numpy 1.20 that was first added in QuTiP 4.5.3 is present in this version as well, and the same build considerations mentioned there apply here too. If building using the now-supported PEP 517 mechanisms (e.g. ``python -mbuild /path/to/qutip``), all build dependencies will be correctly satisfied. Improvements; ------------; - **MAJOR** Add saving, loading and resetting functionality to ``qutip.settings`` for easy re-configuration. (by **Eric Gigu√®re**); - **MAJOR** Add a quantum gate scheduler in ``qutip.qip.scheduler``, to help parallelise the operations of quantum gates. This supports two scheduling modes: as late as possible, and as soon as possible. (by **Boxi Li**); - **MAJOR** Improved qubit circuit simulators, including OpenQASM support and performance optimisations. (by **Sidhant Saraogi**); - **MAJOR** Add tools for quantum measurements and their statistics. (by **Simon Cross** and **Sidhant Saraogi**); - Add support for Numpy 1.20. QuTiP should be compiled against a version of Numpy ``>= 1.16.6`` and ``< 1.20`` (note: does _not_ include 1.20 itself), but such an installation is compatible with any modern version of Numpy. Source installations from ``pip`` understand this constraint.; - Improve the error message when circuit plotting fails. (by **Boxi Li**); - Add support for parsing M1 Mac hardware information. (by **Xiaoliang Wu**); - Add more single-qubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators.",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:2771,Testability,test,tests,2771,"ubit gates and controlled gates. (by **Mateo Laguna** and **Mart√≠n Sande Costa**); - Support decomposition of ``X``, ``Y`` and ``Z`` gates in circuits. (by **Boxi Li**); - Refactor ``QubitCircuit.resolve_gate()`` (by **Mart√≠n Sande Costa**). Bug Fixes; ---------; - Fix ``dims`` in the returns from ``Qobj.eigenstates`` on superoperators. (by **Jake Lishman**); - Calling Numpy ufuncs on ``Qobj`` will now correctly raise a ``TypeError`` rather than returning a nonsense ``ndarray``. (by **Jake Lishman**); - Convert segfault into Python exception when creating too-large tensor products. (by **Jake Lishman**); - Correctly set ``num_collapse`` in the output of ``mesolve``. (by **Jake Lishman**); - Fix ``ptrace`` when all subspaces are being kept, or the subspaces are passed in order. (by **Jake Lishman**); - Fix sorting bug in ``Bloch3d.add_points()``. (by **pschindler**); - Fix invalid string literals in docstrings and some unclosed files. (by **√âlie Gouzien**); - Fix Hermicity tests for matrices with values that are within the tolerance of 0. (by **Jake Lishman**); - Fix the trace norm being incorrectly reported as 0 for small matrices. (by **Jake Lishman**); - Fix issues with ``dnorm`` when using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending ",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:4417,Testability,test,tests,4417," using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending removal in QuTiP 5.0. These are legacy functions and classes that have been left unmaintained for a long time, and their functionality is now better achieved with ``QobjEvo`` or ``mesolve``. Developer Changes; -----------------; - **MAJOR** Overhaul of setup and packaging code to make it satisfy PEP 517, and move the build to a matrix on GitHub Actions in order to release binary wheels on pip for all major platforms and supported Python versions. (by **Jake Lishman**); - Default arguments in ``Qobj`` are now ``None`` rather than mutable types. (by **Jake Lishman**); - Fixed comsumable iterators being used to parametrise some tests, preventing the testing suite from being re-run within the same session. (by **Jake Lishman**); - Remove unused imports, simplify some floats and remove unnecessary list conversions. (by **jakobjakobson13**); - Improve Travis jobs matrix for specifying the testing containers. (by **Jake Lishman**); - Fix coverage reporting on Travis. (by **Jake Lishman**); - Added a ``pyproject.toml`` file. (by **Simon Humpohl** and **Eric Gigu√®re**); - Add doctests to documentation. (by **Sidhant Saraogi**); - Fix all warnings in the documentation build. (by **Jake Lishman**)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:4439,Testability,test,testing,4439," using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending removal in QuTiP 5.0. These are legacy functions and classes that have been left unmaintained for a long time, and their functionality is now better achieved with ``QobjEvo`` or ``mesolve``. Developer Changes; -----------------; - **MAJOR** Overhaul of setup and packaging code to make it satisfy PEP 517, and move the build to a matrix on GitHub Actions in order to release binary wheels on pip for all major platforms and supported Python versions. (by **Jake Lishman**); - Default arguments in ``Qobj`` are now ``None`` rather than mutable types. (by **Jake Lishman**); - Fixed comsumable iterators being used to parametrise some tests, preventing the testing suite from being re-run within the same session. (by **Jake Lishman**); - Remove unused imports, simplify some floats and remove unnecessary list conversions. (by **jakobjakobson13**); - Improve Travis jobs matrix for specifying the testing containers. (by **Jake Lishman**); - Fix coverage reporting on Travis. (by **Jake Lishman**); - Added a ``pyproject.toml`` file. (by **Simon Humpohl** and **Eric Gigu√®re**); - Add doctests to documentation. (by **Sidhant Saraogi**); - Fix all warnings in the documentation build. (by **Jake Lishman**)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:4680,Testability,test,testing,4680," using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending removal in QuTiP 5.0. These are legacy functions and classes that have been left unmaintained for a long time, and their functionality is now better achieved with ``QobjEvo`` or ``mesolve``. Developer Changes; -----------------; - **MAJOR** Overhaul of setup and packaging code to make it satisfy PEP 517, and move the build to a matrix on GitHub Actions in order to release binary wheels on pip for all major platforms and supported Python versions. (by **Jake Lishman**); - Default arguments in ``Qobj`` are now ``None`` rather than mutable types. (by **Jake Lishman**); - Fixed comsumable iterators being used to parametrise some tests, preventing the testing suite from being re-run within the same session. (by **Jake Lishman**); - Remove unused imports, simplify some floats and remove unnecessary list conversions. (by **jakobjakobson13**); - Improve Travis jobs matrix for specifying the testing containers. (by **Jake Lishman**); - Fix coverage reporting on Travis. (by **Jake Lishman**); - Added a ``pyproject.toml`` file. (by **Simon Humpohl** and **Eric Gigu√®re**); - Add doctests to documentation. (by **Sidhant Saraogi**); - Fix all warnings in the documentation build. (by **Jake Lishman**)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
https://github.com/qutip/qutip/releases/tag/v4.6.0:4544,Usability,simpl,simplify,4544," using CVXPy 1.1 with sparse matrices. (by **Felipe Bivort Haiek**); - Fix segfaults in ``mesolve`` when passed a bad initial ``Qobj`` as the state. (by **Jake Lishman**); - Fix sparse matrix construction in PIQS when using Scipy 1.6.1. (by **Drew Parsons**); - Fix ``zspmv_openmp.cpp`` missing from the pip sdist. (by **Christoph Gohlke**); - Fix correlation functions throwing away imaginary components. (by **Asier Galicia Martinez**); - Fix ``QubitCircuit.add_circuit()`` for SWAP gate. (by **Canoming**); - Fix the broken LaTeX image conversion. (by **Jake Lishman**); - Fix gate resolution of the FREDKIN gate. (by **Bo Yang**); - Fix broken formatting in docstrings. (by **Jake Lishman**). Deprecations; ------------; - ``eseries``, ``essolve`` and ``ode2es`` are all deprecated, pending removal in QuTiP 5.0. These are legacy functions and classes that have been left unmaintained for a long time, and their functionality is now better achieved with ``QobjEvo`` or ``mesolve``. Developer Changes; -----------------; - **MAJOR** Overhaul of setup and packaging code to make it satisfy PEP 517, and move the build to a matrix on GitHub Actions in order to release binary wheels on pip for all major platforms and supported Python versions. (by **Jake Lishman**); - Default arguments in ``Qobj`` are now ``None`` rather than mutable types. (by **Jake Lishman**); - Fixed comsumable iterators being used to parametrise some tests, preventing the testing suite from being re-run within the same session. (by **Jake Lishman**); - Remove unused imports, simplify some floats and remove unnecessary list conversions. (by **jakobjakobson13**); - Improve Travis jobs matrix for specifying the testing containers. (by **Jake Lishman**); - Fix coverage reporting on Travis. (by **Jake Lishman**); - Added a ``pyproject.toml`` file. (by **Simon Humpohl** and **Eric Gigu√®re**); - Add doctests to documentation. (by **Sidhant Saraogi**); - Fix all warnings in the documentation build. (by **Jake Lishman**)",MatchSource.RELEASES,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/releases/tag/v4.6.0
