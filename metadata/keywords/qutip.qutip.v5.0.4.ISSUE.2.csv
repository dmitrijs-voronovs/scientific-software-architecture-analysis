id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/qutip/qutip/issues/1396:113,Deployability,install,installation,113,"I installed qutip through Anaconda on MacBook M1. The installation was successful but when I tried to verify the installation through `from qutip import *`, I received following error:; `Traceback (most recent call last):; File ""/Users/akhil/opt/anaconda3/lib/python3.8/site-packages/qutip/__init__.py"", line 46, in <module>; __IPYTHON__; NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/akhil/opt/anaconda3/lib/python3.8/site-packages/qutip/__init__.py"", line 49, in <module>; qutip.settings.ipython = False; AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1396
https://github.com/qutip/qutip/issues/1398:12,Integrability,depend,dependent,12,I have time-dependent collapse operator that the time dependent part is matrix format.how should I write this ?; my collapse operator is consist of expm(f(t)),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1398
https://github.com/qutip/qutip/issues/1398:54,Integrability,depend,dependent,54,I have time-dependent collapse operator that the time dependent part is matrix format.how should I write this ?; my collapse operator is consist of expm(f(t)),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1398
https://github.com/qutip/qutip/pull/1401:672,Availability,error,error,672,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/pull/1401:1460,Availability,error,error,1460,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/pull/1401:337,Deployability,update,updated,337,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/pull/1401:1204,Integrability,message,message,1204,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/pull/1401:1307,Integrability,message,message,1307,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/pull/1401:894,Testability,test,tests,894,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/pull/1401:948,Testability,test,test,948,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1401
https://github.com/qutip/qutip/issues/1402:292,Energy Efficiency,meter,meter,292,"The below code is to find eigenenergies of 1D harmonic-like potential. # ============================================================================; from qutip import *; import numpy as np; import scipy as sci; import matplotlib.pyplot as plt. ns=3001; x=np.linspace(-100e-6,100e-6,ns) #in meter; dx=x[2]-x[1]; psi_0=basis(ns,int(ns/2)). #Potential Operator; hbar=sci.constants.hbar # hbar; mK39=sci.constants.m_p*38.963707 # Potassium 39 mass; w0=40e-6 # beam waist in micrometer (1/e^2); T=2e-6 # Trap depth in K. U=sci.constants.Boltzmann * T # trap depth in K * Boltzmann constant; omega=np.sqrt(4*U/mK39/w0**2) # Harmonic approximation Angular Freq. def _VGauss(U,x,w0,x0):; return (U-U * np.exp(-2*(x-x0) ** 2/w0**2)). V_xr=(_VGauss(U,x,w0,20e-6)+_VGauss(U,x,w0,-20e-6)); V_xr=V_xr-min(V_xr). #Momentum^2 Operator; P_x2r=(np.eye(ns,ns,k=-1)+np.eye(ns,ns)*-2+np.eye(ns,ns,k=1))/dx**2 #https://en.wikipedia.org/wiki/Finite_difference_method . #T+V Hamiltonian; #H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39+V_xr * np.eye(ns,ns)) ; H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39)+Qobj(V_xr * np.eye(ns,ns)) . #Eigenenergies; E_x=H_x.eigenenergies()/hbar/2/np.pi #in freq.; # =====================================================. Focus on this part.; #T+V Hamiltonian; #H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39+V_xr * np.eye(ns,ns)); H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39)+Qobj(V_xr * np.eye(ns,ns)). H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39+V_xr * np.eye(ns,ns)) generates correct result, ; while H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39)+Qobj(V_xr * np.eye(ns,ns)) generates all-zero. Is it an intended way or a bug?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1402
https://github.com/qutip/qutip/issues/1403:5907,Deployability,Install,Installed,5907,"se1, atom1_coeffs], [pulse2, atom2_coeffs]]; times = np.arange(duration, dtype=np.double). H = qutip.QobjEvo(op_list, tlist= times); H = H + H.dag(); H.compress(). psi0 = qutip.tensor([e2,e1]); result = qutip.sesolve(H, psi0, tlist=times, options=qutip.Options(nsteps=5000)); phase = [state.overlap(psi0) for state in result.states]; ```. **Expected behavior**; If I choose the 30 time steps pulse sequence, I obtain the expected results:; ```python; plt.plot(np.real(phase)); plt.title(""Results""); plt.show(); ```; <img width=""338"" alt=""image"" src=""https://user-images.githubusercontent.com/13460713/101365919-a6d98f80-38a4-11eb-8c7f-ea948781ec78.png"">. However, choosing the second one (33 time steps) gives:; <img width=""353"" alt=""image"" src=""https://user-images.githubusercontent.com/13460713/101365992-bc4eb980-38a4-11eb-8218-925254549430.png"">. In fact, further analysis shows that the evolution discards the evolution after the first ""blue"" pulse. **Environment**; I've tried this in the following environments with the same results:. ```; QuTiP Version: 4.5.2; Numpy Version: 1.19.3; Scipy Version: 1.5.3; Cython Version: 0.29.21; Matplotlib Version: 3.3.2; Python Version: 3.8.5; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); ```. ```; QuTiP Version: 4.5.2; Numpy Version: 1.19.4; Scipy Version: 1.5.4; Cython Version: 0.29.21; Matplotlib Version: 3.3.3; Python Version: 3.9.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); ```. **Additional information**; On the other hand, if I shift the Hamiltonian by a very small amount:. ```python; shift = qutip.tensor([qutip.qeye(3),qutip.qeye(3)]); op_list = [blocking, [pulse1, atom1_coeffs], [pulse2, atom2_coeffs],[shift,np.full(duration,1e-5)]]; ```; Then the results of `sesolve()` for all array durations agree and are correct. Is there some issue with the fact that the Hamiltonian reaches zero?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1403
https://github.com/qutip/qutip/issues/1403:6178,Deployability,Install,Installed,6178,"se1, atom1_coeffs], [pulse2, atom2_coeffs]]; times = np.arange(duration, dtype=np.double). H = qutip.QobjEvo(op_list, tlist= times); H = H + H.dag(); H.compress(). psi0 = qutip.tensor([e2,e1]); result = qutip.sesolve(H, psi0, tlist=times, options=qutip.Options(nsteps=5000)); phase = [state.overlap(psi0) for state in result.states]; ```. **Expected behavior**; If I choose the 30 time steps pulse sequence, I obtain the expected results:; ```python; plt.plot(np.real(phase)); plt.title(""Results""); plt.show(); ```; <img width=""338"" alt=""image"" src=""https://user-images.githubusercontent.com/13460713/101365919-a6d98f80-38a4-11eb-8c7f-ea948781ec78.png"">. However, choosing the second one (33 time steps) gives:; <img width=""353"" alt=""image"" src=""https://user-images.githubusercontent.com/13460713/101365992-bc4eb980-38a4-11eb-8218-925254549430.png"">. In fact, further analysis shows that the evolution discards the evolution after the first ""blue"" pulse. **Environment**; I've tried this in the following environments with the same results:. ```; QuTiP Version: 4.5.2; Numpy Version: 1.19.3; Scipy Version: 1.5.3; Cython Version: 0.29.21; Matplotlib Version: 3.3.2; Python Version: 3.8.5; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); ```. ```; QuTiP Version: 4.5.2; Numpy Version: 1.19.4; Scipy Version: 1.5.4; Cython Version: 0.29.21; Matplotlib Version: 3.3.3; Python Version: 3.9.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); ```. **Additional information**; On the other hand, if I shift the Hamiltonian by a very small amount:. ```python; shift = qutip.tensor([qutip.qeye(3),qutip.qeye(3)]); op_list = [blocking, [pulse1, atom1_coeffs], [pulse2, atom2_coeffs],[shift,np.full(duration,1e-5)]]; ```; Then the results of `sesolve()` for all array durations agree and are correct. Is there some issue with the fact that the Hamiltonian reaches zero?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1403
https://github.com/qutip/qutip/issues/1403:239,Energy Efficiency,energy,energy,239,"**Description**; Depending on the length of the array of coefficients given to a QobjEvo, `sesolve()` gives erroneous results. **Minimal working example**. I am trying to simulate the behavior of a system of two atoms, each one with three energy levels, using `QobjEvo`. Preamble:; ```python; import qutip; import numpy as np; import matplotlib.pyplot as plt; ```; Consider the following arrays of coefficients:; ```python; atom1_coeffs = np.array([0. , 0.000554 , 0.00232179, 0.00559138, 0.01075109,; 0.0181713 , 0.02807408, 0.04041764, 0.05482037, 0.07054261,; 0.0865334 , 0.10153804, 0.11425045, 0.123486 , 0.12834601,; 0.12834601, 0.123486 , 0.11425045, 0.10153804, 0.0865334 ,; 0.07054261, 0.05482037, 0.04041764, 0.02807408, 0.0181713 ,; 0.01075109, 0.00559138, 0.00232179, 0.000554 , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0.000554 , 0.00232179, 0.00559138, 0.01075109,; 0.0181713 , 0.02807408, 0.04041764, 0.05482037, 0.07054261,; 0.0865334 , 0.10153804, 0.11425045, 0.123486 , 0.12834601,; 0.12834601, 0.123486 , 0.11425045, 0.10153804, 0.0865334 ,; 0.07054261, 0.05482037, 0.04041764, 0.02807408, 0.0181713 ,; 0.01075109, 0.00559138, 0.00232179, 0.000554 , 0. ]). atom2_coeffs = np.array([0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0.00110801, 0.00464357, 0.01118276, 0.02150219,; 0.03634261, 0.05614817, 0.08083527, 0.10964074, 0.14108522,; 0.1730668 , 0.20307607, 0.22850089, 0.24697201, 0.25669201,; 0.25669201, 0.24697201, 0.22850089, 0.20307607, 0.1730668 ,; 0.14108522, 0.10964074, 0.08083527, 0.05614817, 0.03634261,; 0.02150219, 0.01118276, 0.00464357, 0.00110801, 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ]); ```. ```p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1403
https://github.com/qutip/qutip/issues/1403:17,Integrability,Depend,Depending,17,"**Description**; Depending on the length of the array of coefficients given to a QobjEvo, `sesolve()` gives erroneous results. **Minimal working example**. I am trying to simulate the behavior of a system of two atoms, each one with three energy levels, using `QobjEvo`. Preamble:; ```python; import qutip; import numpy as np; import matplotlib.pyplot as plt; ```; Consider the following arrays of coefficients:; ```python; atom1_coeffs = np.array([0. , 0.000554 , 0.00232179, 0.00559138, 0.01075109,; 0.0181713 , 0.02807408, 0.04041764, 0.05482037, 0.07054261,; 0.0865334 , 0.10153804, 0.11425045, 0.123486 , 0.12834601,; 0.12834601, 0.123486 , 0.11425045, 0.10153804, 0.0865334 ,; 0.07054261, 0.05482037, 0.04041764, 0.02807408, 0.0181713 ,; 0.01075109, 0.00559138, 0.00232179, 0.000554 , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0.000554 , 0.00232179, 0.00559138, 0.01075109,; 0.0181713 , 0.02807408, 0.04041764, 0.05482037, 0.07054261,; 0.0865334 , 0.10153804, 0.11425045, 0.123486 , 0.12834601,; 0.12834601, 0.123486 , 0.11425045, 0.10153804, 0.0865334 ,; 0.07054261, 0.05482037, 0.04041764, 0.02807408, 0.0181713 ,; 0.01075109, 0.00559138, 0.00232179, 0.000554 , 0. ]). atom2_coeffs = np.array([0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0.00110801, 0.00464357, 0.01118276, 0.02150219,; 0.03634261, 0.05614817, 0.08083527, 0.10964074, 0.14108522,; 0.1730668 , 0.20307607, 0.22850089, 0.24697201, 0.25669201,; 0.25669201, 0.24697201, 0.22850089, 0.20307607, 0.1730668 ,; 0.14108522, 0.10964074, 0.08083527, 0.05614817, 0.03634261,; 0.02150219, 0.01118276, 0.00464357, 0.00110801, 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ,; 0. , 0. , 0. , 0. , 0. ]); ```. ```p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1403
https://github.com/qutip/qutip/issues/1404:375,Availability,error,error,375,"**Describe the bug**; Hi world, I can't install qutip on my computer with this features:; System information; Python	3.7.6 (default, Jan 8 2020, 13:42:34) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	Darwin Version 10.15.7; CPUs	8; Memory (Gb)	16.0; Wed Dec 09 15:00:15 2020 EST. Any help?. Building wheels for collected packages: qutip; Building wheel for qutip (PEP 517) ... error; ERROR: Command errored out with exit status 1:; command: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip/_vendor/pep517/_in_process.py build_wheel /var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/tmpxkq1pgdg; cwd: /private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-install-ehditow9/qutip; Complete output (299 lines):; running bdist_wheel; running build; running build_py; creating build; creating build/lib.macosx-10.9-x86_64-3.7; creating build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/permute.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/three_level_atom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/version.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rhs_generate.py -> build/lib.macosx-10.9-x86_64-3.7/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:382,Availability,ERROR,ERROR,382,"**Describe the bug**; Hi world, I can't install qutip on my computer with this features:; System information; Python	3.7.6 (default, Jan 8 2020, 13:42:34) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	Darwin Version 10.15.7; CPUs	8; Memory (Gb)	16.0; Wed Dec 09 15:00:15 2020 EST. Any help?. Building wheels for collected packages: qutip; Building wheel for qutip (PEP 517) ... error; ERROR: Command errored out with exit status 1:; command: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip/_vendor/pep517/_in_process.py build_wheel /var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/tmpxkq1pgdg; cwd: /private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-install-ehditow9/qutip; Complete output (299 lines):; running bdist_wheel; running build; running build_py; creating build; creating build/lib.macosx-10.9-x86_64-3.7; creating build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/permute.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/three_level_atom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/version.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rhs_generate.py -> build/lib.macosx-10.9-x86_64-3.7/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:397,Availability,error,errored,397,"**Describe the bug**; Hi world, I can't install qutip on my computer with this features:; System information; Python	3.7.6 (default, Jan 8 2020, 13:42:34) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	Darwin Version 10.15.7; CPUs	8; Memory (Gb)	16.0; Wed Dec 09 15:00:15 2020 EST. Any help?. Building wheels for collected packages: qutip; Building wheel for qutip (PEP 517) ... error; ERROR: Command errored out with exit status 1:; command: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip/_vendor/pep517/_in_process.py build_wheel /var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/tmpxkq1pgdg; cwd: /private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-install-ehditow9/qutip; Complete output (299 lines):; running bdist_wheel; running build; running build_py; creating build; creating build/lib.macosx-10.9-x86_64-3.7; creating build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/permute.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/three_level_atom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/version.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rhs_generate.py -> build/lib.macosx-10.9-x86_64-3.7/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:9700,Availability,error,errors,9700,hms; creating build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/fidcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimresult.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/io.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dump.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimconfig.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/symplectic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/stats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/termcond.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimizer.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/errors.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/propcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/grape.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulsegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/tslotcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/loadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/no,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:24086,Availability,error,error,24086,"opying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy/src; gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Iqutip/cy -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o build/temp.macosx-10.9-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -funroll-loops -mmacosx-version-min=10.9; xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun; error: command 'gcc' failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for qutip; Failed to build qutip; ERROR: Could not build wheels for qutip which use PEP 517 and cannot be installed directly. Many thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:24231,Availability,error,error,24231,"opying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy/src; gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Iqutip/cy -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o build/temp.macosx-10.9-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -funroll-loops -mmacosx-version-min=10.9; xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun; error: command 'gcc' failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for qutip; Failed to build qutip; ERROR: Could not build wheels for qutip which use PEP 517 and cannot be installed directly. Many thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:24321,Availability,ERROR,ERROR,24321,"opying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy/src; gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Iqutip/cy -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o build/temp.macosx-10.9-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -funroll-loops -mmacosx-version-min=10.9; xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun; error: command 'gcc' failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for qutip; Failed to build qutip; ERROR: Could not build wheels for qutip which use PEP 517 and cannot be installed directly. Many thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:24384,Availability,ERROR,ERROR,24384,"opying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy/src; gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Iqutip/cy -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o build/temp.macosx-10.9-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -funroll-loops -mmacosx-version-min=10.9; xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun; error: command 'gcc' failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for qutip; Failed to build qutip; ERROR: Could not build wheels for qutip which use PEP 517 and cannot be installed directly. Many thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:40,Deployability,install,install,40,"**Describe the bug**; Hi world, I can't install qutip on my computer with this features:; System information; Python	3.7.6 (default, Jan 8 2020, 13:42:34) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	Darwin Version 10.15.7; CPUs	8; Memory (Gb)	16.0; Wed Dec 09 15:00:15 2020 EST. Any help?. Building wheels for collected packages: qutip; Building wheel for qutip (PEP 517) ... error; ERROR: Command errored out with exit status 1:; command: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip/_vendor/pep517/_in_process.py build_wheel /var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/tmpxkq1pgdg; cwd: /private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-install-ehditow9/qutip; Complete output (299 lines):; running bdist_wheel; running build; running build_py; creating build; creating build/lib.macosx-10.9-x86_64-3.7; creating build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/permute.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/three_level_atom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/version.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rhs_generate.py -> build/lib.macosx-10.9-x86_64-3.7/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:755,Deployability,install,install-,755,"**Describe the bug**; Hi world, I can't install qutip on my computer with this features:; System information; Python	3.7.6 (default, Jan 8 2020, 13:42:34) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	Darwin Version 10.15.7; CPUs	8; Memory (Gb)	16.0; Wed Dec 09 15:00:15 2020 EST. Any help?. Building wheels for collected packages: qutip; Building wheel for qutip (PEP 517) ... error; ERROR: Command errored out with exit status 1:; command: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip/_vendor/pep517/_in_process.py build_wheel /var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/tmpxkq1pgdg; cwd: /private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-install-ehditow9/qutip; Complete output (299 lines):; running bdist_wheel; running build; running build_py; creating build; creating build/lib.macosx-10.9-x86_64-3.7; creating build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/permute.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/three_level_atom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/version.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rhs_generate.py -> build/lib.macosx-10.9-x86_64-3.7/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:24456,Deployability,install,installed,24456,"opying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy/src; gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Iqutip/cy -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/private/var/folders/xk/b7_mprf9407c0l8kvdj_f8_80000gs/T/pip-build-env-ob76l82e/overlay/lib/python3.7/site-packages/numpy/core/include -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o build/temp.macosx-10.9-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -funroll-loops -mmacosx-version-min=10.9; xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun; error: command 'gcc' failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for qutip; Failed to build qutip; ERROR: Could not build wheels for qutip which use PEP 517 and cannot be installed directly. Many thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:3372,Modifiability,config,configrc,3372,7/qutip; copying qutip/fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/stochastic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/simdiag.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/random_objects.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/semidefinite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/about.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/visualization.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/distributions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/hardware_info.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/configrc.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/orbital.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/ipynbtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/subsystem_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/superoperator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo_codegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/topology.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/settings.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mcsolve.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:17948,Modifiability,config,configspec,17948,10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names to qutip.egg-info/top_level.txt; reading manifest file 'qutip.egg-info/SOURCES.txt'; reading manifest template 'MANIFEST.in'; writing manifest file 'qutip.egg-info/SOURCES.txt'; copying qutip/configspec.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cy/br_tensor.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/br_tensor.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools_checks.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools_checks.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/checks.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/checks.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/complex_math.pxi -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/cqobjevo.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/cqobjevo.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/c,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:9614,Performance,optimiz,optimizer,9614,utip/qip/algorithms/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/qip/algorithms; creating build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/fidcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimresult.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/io.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dump.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimconfig.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/symplectic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/stats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/termcond.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimizer.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/errors.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/propcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/grape.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulsegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/tslotcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/loadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/non,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:10121,Performance,load,loadparams,10121,_init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dump.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimconfig.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/symplectic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/stats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/termcond.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimizer.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/errors.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/propcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/grape.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulsegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/tslotcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/loadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:4765,Testability,test,testing,4765,osx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo_codegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/topology.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/settings.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/tomography.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch3d.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/testing.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/pdpsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/essolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/matplotlib_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/logging_utils.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; creating build/lib.macosx-10.9-x86_64-3.7/qutip/ui; copying qutip/ui/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/ui; copying qutip/ui/progressbar.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/ui; creating build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11107,Testability,test,tests,11107,oadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11128,Testability,test,tests,11128,oadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11191,Testability,test,tests,11191,/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11212,Testability,test,tests,11212,/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11276,Testability,test,tests,11276,osx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11297,Testability,test,tests,11297,osx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11363,Testability,test,tests,11363,d/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11384,Testability,test,tests,11384,d/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11447,Testability,test,tests,11447,r.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11468,Testability,test,tests,11468,r.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11528,Testability,test,tests,11528,_init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11549,Testability,test,tests,11549,_init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11613,Testability,test,tests,11613,m.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11634,Testability,test,tests,11634,m.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11711,Testability,test,tests,11711,64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11732,Testability,test,tests,11732,64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11799,Testability,test,tests,11799,p/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11820,Testability,test,tests,11820,p/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11882,Testability,test,tests,11882,pying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11903,Testability,test,tests,11903,pying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11975,Testability,test,tests,11975,_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:11996,Testability,test,tests,11996,_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12064,Testability,test,tests,12064,acosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12085,Testability,test,tests,12085,acosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12148,Testability,test,tests,12148,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12169,Testability,test,tests,12169,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12238,Testability,test,tests,12238,10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12259,Testability,test,tests,12259,10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12323,Testability,test,tests,12323,x-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12344,Testability,test,tests,12344,x-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12408,Testability,test,tests,12408,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12429,Testability,test,tests,12429,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12497,Testability,test,tests,12497,_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12518,Testability,test,tests,12518,_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12584,Testability,test,tests,12584,4-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12605,Testability,test,tests,12605,4-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12672,Testability,test,tests,12672,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12693,Testability,test,tests,12693,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12753,Testability,test,tests,12753,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12774,Testability,test,tests,12774,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12837,Testability,test,tests,12837,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12858,Testability,test,tests,12858,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12928,Testability,test,tests,12928,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:12949,Testability,test,tests,12949,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13023,Testability,test,tests,13023,cosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13044,Testability,test,tests,13044,cosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13104,Testability,test,tests,13104,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13125,Testability,test,tests,13125,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13200,Testability,test,tests,13200,.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13221,Testability,test,tests,13221,.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13290,Testability,test,tests,13290,-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13311,Testability,test,tests,13311,-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13374,Testability,test,tests,13374,86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13395,Testability,test,tests,13395,86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13463,Testability,test,tests,13463,x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13484,Testability,test,tests,13484,x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13550,Testability,test,tests,13550,x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13571,Testability,test,tests,13571,x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13637,Testability,test,tests,13637,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13658,Testability,test,tests,13658,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13718,Testability,test,tests,13718,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13739,Testability,test,tests,13739,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13803,Testability,test,tests,13803,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13824,Testability,test,tests,13824,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13887,Testability,test,tests,13887,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13908,Testability,test,tests,13908,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13977,Testability,test,tests,13977,macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:13998,Testability,test,tests,13998,macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14065,Testability,test,tests,14065,-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14086,Testability,test,tests,14086,-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14160,Testability,test,tests,14160,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14181,Testability,test,tests,14181,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14243,Testability,test,tests,14243,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14264,Testability,test,tests,14264,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14328,Testability,test,tests,14328,ib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14349,Testability,test,tests,14349,ib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14410,Testability,test,tests,14410,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14431,Testability,test,tests,14431,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14492,Testability,test,tests,14492,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14513,Testability,test,tests,14513,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14579,Testability,test,tests,14579,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14600,Testability,test,tests,14600,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14670,Testability,test,tests,14670,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14691,Testability,test,tests,14691,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14758,Testability,test,tests,14758,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14779,Testability,test,tests,14779,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14842,Testability,test,tests,14842,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14863,Testability,test,tests,14863,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14926,Testability,test,tests,14926,d/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:14947,Testability,test,tests,14947,d/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15011,Testability,test,tests,15011,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15032,Testability,test,tests,15032,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15097,Testability,test,tests,15097,e.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15118,Testability,test,tests,15118,e.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15182,Testability,test,tests,15182,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15203,Testability,test,tests,15203,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15269,Testability,test,tests,15269,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15290,Testability,test,tests,15290,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15358,Testability,test,tests,15358,/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15379,Testability,test,tests,15379,/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15448,Testability,test,tests,15448,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15469,Testability,test,tests,15469,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15530,Testability,test,tests,15530,lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15551,Testability,test,tests,15551,lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15615,Testability,test,tests,15615,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15636,Testability,test,tests,15636,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15702,Testability,test,tests,15702,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15723,Testability,test,tests,15723,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15786,Testability,test,tests,15786, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15807,Testability,test,tests,15807, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15871,Testability,test,tests,15871, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/leg,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15892,Testability,test,tests,15892, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/leg,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15955,Testability,test,tests,15955,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:15976,Testability,test,tests,15976,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16042,Testability,test,tests,16042,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16063,Testability,test,tests,16063,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16130,Testability,test,tests,16130,ild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16151,Testability,test,tests,16151,ild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16213,Testability,test,tests,16213,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16234,Testability,test,tests,16234,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16296,Testability,test,tests,16296,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/open,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16317,Testability,test,tests,16317,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/open,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16385,Testability,test,tests,16385,.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16406,Testability,test,tests,16406,.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16473,Testability,test,tests,16473,-> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16494,Testability,test,tests,16494,-> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16557,Testability,test,tests,16557, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16578,Testability,test,tests,16578, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16646,Testability,test,tests,16646,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/depend,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16667,Testability,test,tests,16667,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/depend,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16733,Testability,test,tests,16733,ib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16754,Testability,test,tests,16754,ib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:16829,Testability,test,tests,16829,lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names to qutip.egg-info/top_level.txt; reading manifest file 'qutip.egg-info/SOURCES.txt,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:22320,Testability,test,tests,22320,ip/cy/spmatfuncs.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/control/cy_grape.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/cy_grape.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/tests/Hadamard_params.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/cy/openmp/benchmark.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:22388,Testability,test,tests,22388,funcs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/control/cy_grape.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/cy_grape.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/tests/Hadamard_params.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/cy/openmp/benchmark.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/issues/1404:22419,Testability,benchmark,benchmark,22419,funcs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/control/cy_grape.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/cy_grape.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/tests/Hadamard_params.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/cy/openmp/benchmark.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1404
https://github.com/qutip/qutip/pull/1405:2592,Deployability,Update,Update,2592,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:480,Integrability,rout,routine,480,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:1289,Integrability,depend,depends,1289,"rix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:1382,Integrability,rout,routines,1382,"t to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:1416,Integrability,depend,depends,1416,"t to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:1703,Integrability,rout,routine,1703,"lly useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:1949,Integrability,contract,contractor,1949,"oach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:2279,Integrability,wrap,wrapper,2279,"mes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share so",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:3319,Integrability,rout,routine,3319,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:3498,Integrability,rout,routine,3498,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:215,Performance,perform,performing,215,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:1152,Performance,Perform,Performance,1152,"rix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:3270,Performance,perform,perform,3270,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:130,Testability,test,tests,130,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:139,Testability,test,tests,139,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:2683,Testability,test,tests,2683,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/pull/1405:3220,Testability,test,tests,3220,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1405
https://github.com/qutip/qutip/issues/1406:108,Availability,fault,fault,108,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/issues/1406:254,Availability,error,error,254,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/issues/1406:274,Availability,fault,fault,274,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/issues/1406:501,Availability,fault,fault,501,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/issues/1406:521,Availability,fault,faulthandler,521,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/issues/1406:1221,Deployability,Install,Installed,1221,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/issues/1406:1292,Deployability,Install,Installation,1292,"**Describe the bug**. When I try to make a tensor profuct of a large number of qubits, I get a segmentation fault. **To Reproduce**. ```python; from qutip import *; tensor([basis(2,0) for i in range(31)]); ```. The terminal out put is; ```; Fatal Python error: Segmentation fault. Current thread 0x000000011b71be00 (most recent call first):; File ""/Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip/tensor.py"", line 116 in tensor; File ""<stdin>"", line 1 in <module>; zsh: segmentation fault python3 -q -X faulthandler; ```. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.19.2; Scipy Version: 1.5.2; Cython Version: None; Matplotlib Version: 3.3.2; Python Version: 3.8.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/evanphilip/opt/miniforge3/lib/python3.8/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1406
https://github.com/qutip/qutip/pull/1407:216,Deployability,Update,Update,216,"**Description**; First part of rework of solver for dev.major. It allows QobjEvo to support any data types for both itself and the state. And reuse the QobjEvoFunc of #1123 so function can be used in any solver. . - Update `cQobjEvo` to use `Data` object instead of `CSR` matrices only.; - Split `cQobjEvo.matmul` and `expect`: used to accept only `Dense` state, now accept any data type and use Jake's dispatcher. But added `matmul_dense` and `expect_dense` to do operation inplace when possible. Dispatche on `inplace` out parameter is not possible and such operation are mostly limited to `Dense`.; - Compiling string coefficients will now create the build directory in `.qutip` folder instead of current active directory.; - array coefficients addition will add array when possible.; - `scipy.special` had a cython interface... added it to string coefficient's cimport as `cython_special`.; - Added an inplace addition for `Dense` object and inplace multiplication with a scalar for both `Dense` and `CSR`.; - Added `Dense` specialization for `expect`.; - Added `project_dense`.; - Added `QobjEvoFunc`, a wrapper for function `f(t: float, args: dict) -> Qobj` to be used like `QobjEvo` in solver.; - Added the method `to` to QobjEvo to control data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1407
https://github.com/qutip/qutip/pull/1407:819,Integrability,interface,interface,819,"**Description**; First part of rework of solver for dev.major. It allows QobjEvo to support any data types for both itself and the state. And reuse the QobjEvoFunc of #1123 so function can be used in any solver. . - Update `cQobjEvo` to use `Data` object instead of `CSR` matrices only.; - Split `cQobjEvo.matmul` and `expect`: used to accept only `Dense` state, now accept any data type and use Jake's dispatcher. But added `matmul_dense` and `expect_dense` to do operation inplace when possible. Dispatche on `inplace` out parameter is not possible and such operation are mostly limited to `Dense`.; - Compiling string coefficients will now create the build directory in `.qutip` folder instead of current active directory.; - array coefficients addition will add array when possible.; - `scipy.special` had a cython interface... added it to string coefficient's cimport as `cython_special`.; - Added an inplace addition for `Dense` object and inplace multiplication with a scalar for both `Dense` and `CSR`.; - Added `Dense` specialization for `expect`.; - Added `project_dense`.; - Added `QobjEvoFunc`, a wrapper for function `f(t: float, args: dict) -> Qobj` to be used like `QobjEvo` in solver.; - Added the method `to` to QobjEvo to control data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1407
https://github.com/qutip/qutip/pull/1407:1109,Integrability,wrap,wrapper,1109,"**Description**; First part of rework of solver for dev.major. It allows QobjEvo to support any data types for both itself and the state. And reuse the QobjEvoFunc of #1123 so function can be used in any solver. . - Update `cQobjEvo` to use `Data` object instead of `CSR` matrices only.; - Split `cQobjEvo.matmul` and `expect`: used to accept only `Dense` state, now accept any data type and use Jake's dispatcher. But added `matmul_dense` and `expect_dense` to do operation inplace when possible. Dispatche on `inplace` out parameter is not possible and such operation are mostly limited to `Dense`.; - Compiling string coefficients will now create the build directory in `.qutip` folder instead of current active directory.; - array coefficients addition will add array when possible.; - `scipy.special` had a cython interface... added it to string coefficient's cimport as `cython_special`.; - Added an inplace addition for `Dense` object and inplace multiplication with a scalar for both `Dense` and `CSR`.; - Added `Dense` specialization for `expect`.; - Added `project_dense`.; - Added `QobjEvoFunc`, a wrapper for function `f(t: float, args: dict) -> Qobj` to be used like `QobjEvo` in solver.; - Added the method `to` to QobjEvo to control data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1407
https://github.com/qutip/qutip/pull/1408:106,Testability,test,testing,106,"**Description**; Add CSC data-layer. For our use, CSC is almost always slower than CSR...; I build it for testing possible use in AHS. I reused the CSR code as much as possible. Specializations where the *free* transformation `CSC -> transpose(CSR)` could be used have been added. **Related issues or PRs**; Build on top of #1407.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1408
https://github.com/qutip/qutip/pull/1409:2000,Availability,avail,available,2000,"easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` opt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:3047,Availability,error,error,3047," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:26,Deployability,upgrade,upgrade,26,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1316,Deployability,integrat,integrate,1316,"tput. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that hand",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2517,Deployability,update,update,2517," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1439,Energy Efficiency,efficient,efficient,1439,"ctories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2108,Energy Efficiency,Adapt,Adaptative,2108,"e the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:470,Integrability,interface,interface,470,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:594,Integrability,wrap,wrapping,594,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:658,Integrability,wrap,wrapper,658,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1055,Integrability,depend,dependent,1055,"ress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Ad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1316,Integrability,integrat,integrate,1316,"tput. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that hand",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2287,Integrability,Wrap,Wrapper,2287," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2365,Integrability,interface,interface,2365," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:252,Modifiability,Evolve,Evolver,252,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:439,Modifiability,Evolve,Evolver,439,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:586,Modifiability,evolve,evolver,586,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:727,Modifiability,Evolve,EvolverScipyZvode,727,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:895,Modifiability,evolve,evolver,895,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1106,Modifiability,Evolve,Evolver,1106,"ress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Ad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1184,Modifiability,Evolve,Evolver,1184,"es: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1630,Modifiability,evolve,evolver,1630," our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help wind",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1749,Modifiability,evolve,evolvers,1749,"olverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:1780,Modifiability,evolve,evolver,1780,"le.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2108,Modifiability,Adapt,Adaptative,2108,"e the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2417,Modifiability,evolve,evolver,2417," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:3002,Safety,timeout,timeout,3002," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2275,Usability,Feedback,Feedback,2275," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2324,Usability,feedback,feedback,2324," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/pull/1409:2485,Usability,progress bar,progress bar,2485," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1409
https://github.com/qutip/qutip/issues/1411:62,Integrability,depend,dependent,62,Hi.How could I use the Hamiltonian in mesolve.I mean for time dependent Hamiltonian I need to know the elements of Hamiltonian that mesolve use.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1411
https://github.com/qutip/qutip/issues/1412:655,Testability,assert,assert,655,"I think it will be so helpful to introduce composite Hamiltonian to qutip ; It used frequently as in jaynes cumming model; I inspired it from qit toolbox; http://qit.sourceforge.net/docs/html/; My function ; Not need nested list of ascending ordered Hamiltonians. Function found under ; Utils.Op_list ; That will so helpful in future to introduce Hamiltonian models. ```python; import numpy as np; def _cmpst(op,dim):; dL=dim[:op[1]]; if len(dL)==0:; opL=1; else:; dL=np.prod(dL); opL=np.eye(dL); dR=dim[op[1]+1:]; if len(dR)==0:; opR=1; else:; dR=np.prod(dR); opR=np.eye(dR); fop=np.kron(np.kron(opL,op[0]),opR); return(fop). def composit_ham(opl,dim):; assert max([opl[i][1] for i in range(len(opl))])<len(dim),""some operator excit outsite range od lattice""; dm=np.prod(dim); opf=np.zeros([dm,dm],dtype='complex128'); for op in opl:; opf+=_cmpst(op,dim); return opf . """"""; >>> ham1=np.array([[1,2],[3,4]]); >>> ham2=np.array([[5,6],[7,8]]). >>> composit_ham([(ham1,0),(ham2,1)],[2,2]); array([[ 6.+0.j, 6.+0.j, 2.+0.j, 0.+0.j],; [ 7.+0.j, 9.+0.j, 0.+0.j, 2.+0.j],; [ 3.+0.j, 0.+0.j, 9.+0.j, 6.+0.j],; [ 0.+0.j, 3.+0.j, 7.+0.j, 12.+0.j]]); if put 1 in dim list it just like above ; >>> composit_ham([(ham1,0),(ham2,2)],[2,1,2]); array([[ 6.+0.j, 6.+0.j, 2.+0.j, 0.+0.j],; [ 7.+0.j, 9.+0.j, 0.+0.j, 2.+0.j],; [ 3.+0.j, 0.+0.j, 9.+0.j, 6.+0.j],; [ 0.+0.j, 3.+0.j, 7.+0.j, 12.+0.j]]); two Hamiltonian separtated by identity operator; ham1 at position 1(0); identiy operator of dimension 2*2 at position 2(1); ham2 at position 3(2); >>> composit_ham([(ham1,0),(ham2,2)],[2,2,2]); array([[ 6.+0.j, 6.+0.j, 0.+0.j, 0.+0.j, 2.+0.j, 0.+0.j, 0.+0.j,; 0.+0.j],; [ 7.+0.j, 9.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 2.+0.j, 0.+0.j,; 0.+0.j],; [ 0.+0.j, 0.+0.j, 6.+0.j, 6.+0.j, 0.+0.j, 0.+0.j, 2.+0.j,; 0.+0.j],; [ 0.+0.j, 0.+0.j, 7.+0.j, 9.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,; 2.+0.j],; [ 3.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 9.+0.j, 6.+0.j, 0.+0.j,; 0.+0.j],; [ 0.+0.j, 3.+0.j, 0.+0.j, 0.+0.j, 7.+0.j, 12.+0.j, 0.+0.j,; 0.+0.j],; [ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1412
https://github.com/qutip/qutip/issues/1413:351,Availability,error,error,351,"I apologize for not being that familiar with the technical terminology anymore as I have been out of quantum optics research for over 3 years, but I hope that I'll be able to explain the issue anyway. **Describe the issue**; Taking partial trace of a quantum object over its basis does not return the quantum object itself anymore but produces a type error. **To Reproduce**; Since version 4.5.0 running; ```python; psi = qt.thermal_dm(2,1); psi.ptrace(0); ```. Produces the following error. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-7-87c31fb793ec> in <module>; ----> 1 psi.ptrace(0). ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qobj.py in ptrace(self, sel, sparse); 1353 return q.tidyup() if settings.auto_tidyup else q; 1354 else:; -> 1355 return _ptrace_dense(self, sel); 1356 ; 1357 def permute(self, order):. ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qobj.py in _ptrace_dense(Q, sel); 2203 rhomat = vmat.dot(vmat.conj().T); 2204 else:; -> 2205 rhomat = np.trace(Q.full(); 2206 .reshape(rd + rd); 2207 .transpose(qtrace + [nd + q for q in qtrace] +. TypeError: 'numpy.float64' object cannot be interpreted as an integer; ```. Whereas in versions older than 4.5.0 (verified in 4.3.2 and 4.4.1) running; ```python; psi = qt.thermal_dm(2,1); psi.ptrace(0); ```; produced the Qobj psi as the output. . ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True. (0.667, 0.0,; 0.0, 0.333); ```. Is this change on purpose? I've found it very useful in older versions to loop over taking the partial trace of quantum objects whether it was necessary or not and I believe that unless there is any specific reason for the change other people may prefer the older output generation. Curious what other people think, thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1413
https://github.com/qutip/qutip/issues/1413:485,Availability,error,error,485,"I apologize for not being that familiar with the technical terminology anymore as I have been out of quantum optics research for over 3 years, but I hope that I'll be able to explain the issue anyway. **Describe the issue**; Taking partial trace of a quantum object over its basis does not return the quantum object itself anymore but produces a type error. **To Reproduce**; Since version 4.5.0 running; ```python; psi = qt.thermal_dm(2,1); psi.ptrace(0); ```. Produces the following error. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-7-87c31fb793ec> in <module>; ----> 1 psi.ptrace(0). ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qobj.py in ptrace(self, sel, sparse); 1353 return q.tidyup() if settings.auto_tidyup else q; 1354 else:; -> 1355 return _ptrace_dense(self, sel); 1356 ; 1357 def permute(self, order):. ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qobj.py in _ptrace_dense(Q, sel); 2203 rhomat = vmat.dot(vmat.conj().T); 2204 else:; -> 2205 rhomat = np.trace(Q.full(); 2206 .reshape(rd + rd); 2207 .transpose(qtrace + [nd + q for q in qtrace] +. TypeError: 'numpy.float64' object cannot be interpreted as an integer; ```. Whereas in versions older than 4.5.0 (verified in 4.3.2 and 4.4.1) running; ```python; psi = qt.thermal_dm(2,1); psi.ptrace(0); ```; produced the Qobj psi as the output. . ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True. (0.667, 0.0,; 0.0, 0.333); ```. Is this change on purpose? I've found it very useful in older versions to loop over taking the partial trace of quantum objects whether it was necessary or not and I believe that unless there is any specific reason for the change other people may prefer the older output generation. Curious what other people think, thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1413
https://github.com/qutip/qutip/pull/1414:217,Deployability,patch,patch,217,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1414
https://github.com/qutip/qutip/pull/1414:414,Safety,avoid,avoid,414,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1414
https://github.com/qutip/qutip/pull/1414:310,Testability,log,logic,310,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1414
https://github.com/qutip/qutip/pull/1414:524,Testability,log,logic,524,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1414
https://github.com/qutip/qutip/pull/1414:53,Usability,simpl,simple,53,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1414
https://github.com/qutip/qutip/issues/1418:1262,Deployability,update,update,1262," big enough to have a visible effect over the 10^-7 time scale that's being plotted. Right now, I am only plotting state_z_plus so I can focus on the T1 decay from 1 to -1. However, as the animation and graph indicate, it seems to stop short of -1 and I don't see why that should be happening. I appreciate any feedback. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; import qutip as q; import cmath; import matplotlib as mpl; from mpl_toolkits.mplot3d import Axes3D. rc_dict = {; ""figure.subplot.bottom"": 0.11,; ""figure.subplot.hspace"": 0.2,; ""figure.subplot.left"": 0.125,; ""figure.subplot.right"": 0.9,; ""figure.subplot.top"": 0.88,; ""figure.subplot.wspace"": 0.2,; ""figure.figsize"":(10,10/1.61),; ""axes.grid"": True,; ""text.usetex"": True,; ""grid.linestyle"": "":"",; ""grid.color"": ""black"", #; ""legend.fontsize"": 20,; ""lines.linewidth"": 2.5,; ""axes.linewidth"": 1.5,; ""font.family"": [""serif""],; ""font.sans-serif"": ""Times New Roman Bold"",; ""font.size"":26,; }; plt.rcParams.update(rc_dict). qutip_options = q.Odeoptions(; store_states=True,; nsteps=20000000; ); si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); sp, sm=q.sigmap(), q.sigmam(); state_z_plus=q.basis(2,0); state_z_minus=q.basis(2,1); state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; print(w); gamma_phi = 44200000; gamma_minus = 100000000. epsilon = g*u*b/h*(2*cmath.pi); Delta = g*u*b_AC/h*(2*cmath.pi). H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy. print(abs(((w-w0)/(w)))*epsilon/2). #note here the final time satisfies: omega*t_final = pi/2; times=np",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1418
https://github.com/qutip/qutip/issues/1418:581,Usability,feedback,feedback,581,"This code produces an animation of the Bloch sphere vector evolution. I have implemented a rotating frame approximation as defined by H. The goal is to model T1 and T2 decay. I am still experimenting with different gamma_phi and gamma_minus values, but right now they're big enough to have a visible effect over the 10^-7 time scale that's being plotted. Right now, I am only plotting state_z_plus so I can focus on the T1 decay from 1 to -1. However, as the animation and graph indicate, it seems to stop short of -1 and I don't see why that should be happening. I appreciate any feedback. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; import qutip as q; import cmath; import matplotlib as mpl; from mpl_toolkits.mplot3d import Axes3D. rc_dict = {; ""figure.subplot.bottom"": 0.11,; ""figure.subplot.hspace"": 0.2,; ""figure.subplot.left"": 0.125,; ""figure.subplot.right"": 0.9,; ""figure.subplot.top"": 0.88,; ""figure.subplot.wspace"": 0.2,; ""figure.figsize"":(10,10/1.61),; ""axes.grid"": True,; ""text.usetex"": True,; ""grid.linestyle"": "":"",; ""grid.color"": ""black"", #; ""legend.fontsize"": 20,; ""lines.linewidth"": 2.5,; ""axes.linewidth"": 1.5,; ""font.family"": [""serif""],; ""font.sans-serif"": ""Times New Roman Bold"",; ""font.size"":26,; }; plt.rcParams.update(rc_dict). qutip_options = q.Odeoptions(; store_states=True,; nsteps=20000000; ); si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); sp, sm=q.sigmap(), q.sigmam(); state_z_plus=q.basis(2,0); state_z_minus=q.basis(2,1); state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; prin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1418
https://github.com/qutip/qutip/issues/1418:2949,Usability,clear,clear,2949," (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; print(w); gamma_phi = 44200000; gamma_minus = 100000000. epsilon = g*u*b/h*(2*cmath.pi); Delta = g*u*b_AC/h*(2*cmath.pi). H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy. print(abs(((w-w0)/(w)))*epsilon/2). #note here the final time satisfies: omega*t_final = pi/2; times=np.linspace(0, 0.0000001, 1000). #our initial qubit state ; state0=(state_z_plus)/(np.sqrt(1)). H/(2*cmath.pi). results=q.mesolve(H, state0, times, c_ops=[cmath.sqrt(gamma_phi/2)*sz+ cmath.sqrt(gamma_minus)*sm], e_ops=[sx, sy, sz], options=qutip_options). fig, ax=plt.subplots(); ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$'); ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$'); ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$'); ax.set_xlabel(""time""); ax.legend();. import imageio; def animate_bloch(values):; b = q.Bloch(); images=[] ; b.point_marker = ['o']; b.point_size = [30]; for i in range(len(values)):; b.clear(); b.add_states(values[i]); b.add_states(values[:(i+1)],'point'); beans = 'beans.png'; b.save(beans); images.append(imageio.imread(beans)); imageio.mimwrite('beans.gif',images). values = []; for t in range(0,len(times),30):; values.append((results.states[t])); animate_bloch(values). from IPython.core.interactiveshell import InteractiveShell; InteractiveShell.ast_node_interactivity = ""all""; from IPython import display. from pathlib import Path; gifPath = Path('beans.gif'); with open(gifPath,'rb') as f:; display.Image(data=f.read(), format='png'). ![g](https://user-images.githubusercontent.com/29261370/105053116-36429880-5a36-11eb-978b-8804dd1e679e.PNG); ![sp](https://user-images.githubusercontent.com/29261370/105053129-3c387980-5a36-11eb-9c0d-da3fd30bbaf5.PNG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1418
https://github.com/qutip/qutip/pull/1419:443,Performance,bottleneck,bottleneck,443,"Adds custom `csr.diags` and swaps `qdiags` over to use it to avoid using the `scipy` version with its large overhead. Constructing a tridiagonal matrix of dimension 100 gets approximately a 7x speed up (320µs to 45µs on my machine) and it's better for small dimensions - the `scipy` overhead has a constant component something around 280µs compared to a constant ~20µs in the new `csr` one. Not a big deal since it's hardly ever going to be a bottleneck, but it's just part of my work speeding up general QuTiP operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1419
https://github.com/qutip/qutip/pull/1419:61,Safety,avoid,avoid,61,"Adds custom `csr.diags` and swaps `qdiags` over to use it to avoid using the `scipy` version with its large overhead. Constructing a tridiagonal matrix of dimension 100 gets approximately a 7x speed up (320µs to 45µs on my machine) and it's better for small dimensions - the `scipy` overhead has a constant component something around 280µs compared to a constant ~20µs in the new `csr` one. Not a big deal since it's hardly ever going to be a bottleneck, but it's just part of my work speeding up general QuTiP operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1419
https://github.com/qutip/qutip/pull/1420:723,Deployability,update,updated,723,"**Description**; Qobj support Dense representation, but there are still no easy way to create dense matrix. So this add a keyword only `dtype` options to most function of qutip.states, qutip.operators and qutip.random_object. To make them, I made 2 new dispatched function: `diag` and `one_element`. `diag` has the same use than @jakelishman #1419 function, but I fall back on scipy quickly... So I will switch to his version as soon as it is merged. . To make the `dtype` more user friendly than seeking the type in `qutip.core.data`, I changed `to` to accept the string representation of the name (case insensitive). Only `to` accept string, `dispatch` is not really user facing so there is no reason to touch it. I also updated the `create` to use `add_creators` and make `Dense` out of `numpy array`. Jake, I am not sure of what were your plans for this. So if I am messing your plans, please tell me. . Tests are not all created yet and it will create a conflict with #1419 and #1407. **Related issues or PRs**; #1419",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1420
https://github.com/qutip/qutip/pull/1420:908,Testability,Test,Tests,908,"**Description**; Qobj support Dense representation, but there are still no easy way to create dense matrix. So this add a keyword only `dtype` options to most function of qutip.states, qutip.operators and qutip.random_object. To make them, I made 2 new dispatched function: `diag` and `one_element`. `diag` has the same use than @jakelishman #1419 function, but I fall back on scipy quickly... So I will switch to his version as soon as it is merged. . To make the `dtype` more user friendly than seeking the type in `qutip.core.data`, I changed `to` to accept the string representation of the name (case insensitive). Only `to` accept string, `dispatch` is not really user facing so there is no reason to touch it. I also updated the `create` to use `add_creators` and make `Dense` out of `numpy array`. Jake, I am not sure of what were your plans for this. So if I am messing your plans, please tell me. . Tests are not all created yet and it will create a conflict with #1419 and #1407. **Related issues or PRs**; #1419",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1420
https://github.com/qutip/qutip/issues/1421:5145,Availability,failure,failures,5145,"gleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:8337,Availability,down,down,8337,"r the instances, and _not_ `__init__`. The former is effectively a class method, while the latter is an instance method; since we want instances representing the same object to be unique, we don't want it. In order to maintain referential equality, tensor-product operations must move into a canonical form. Calling `Compound(Compound(x, y), z)` must return the same object as `Compound(x, y, z)`. Internally this parsing is easy; if one is using the new object constructors, Python evaluation order guarantees that they will flatten themselves; so long as the `Compound` constructor unpacks `Compound` objects at a depth of 1, the whole object will always be as flat as possible. The tensor product will be expanded by having `Compound` ""thread"" over `Map`. This effectively expands the mathematicians' definition of the tensor product to allows us to continue to represent ""silly"" objects such as; ```python; tensor(qeye(5), basis(2).dag()); ```; which is an odd object that contracts one element of a tensor-product space down to the field and leaves the other. This will report its `Qobj.type` as `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:9360,Availability,avail,available,9360,"s `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:10157,Availability,avail,available,10157," (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj` factory functions that take a `dims` parameter should now also accept the new form. Since almost all of them just pass this directly to the `dims` argument in the `Qobj` constructor, this likely won't involve any developer effort. `Qobj` construction overhead should be reduced to near-zero when passed a new dimensions object, which we will always do within the library. Compared to the 4.x branch, the overhead of `Qobj` will shrink from ~100µs to ~1µs in library code, even for functions where the `Qobj` type cannot be cleanly inferred from the input types. ## Particular points worth commenting on. 1. Are there currently valid `Qobj` that cannot be represented with this system?; 2. Should we push to implement basis-safety for QuTiP 5.x?; 3. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:10682,Energy Efficiency,reduce,reduced,10682," number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj` factory functions that take a `dims` parameter should now also accept the new form. Since almost all of them just pass this directly to the `dims` argument in the `Qobj` constructor, this likely won't involve any developer effort. `Qobj` construction overhead should be reduced to near-zero when passed a new dimensions object, which we will always do within the library. Compared to the 4.x branch, the overhead of `Qobj` will shrink from ~100µs to ~1µs in library code, even for functions where the `Qobj` type cannot be cleanly inferred from the input types. ## Particular points worth commenting on. 1. Are there currently valid `Qobj` that cannot be represented with this system?; 2. Should we push to implement basis-safety for QuTiP 5.x?; 3. Do you agree we should keep track of ""missing"" tensor product spaces?; 4. Should we change the pretty-printed format of `dims` and `type` in `Qobj.__repr__()`?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:6493,Integrability,contract,contraction,6493,"lid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing spaces are useful in principle in QIP settings for defining local operations on subsets of the whole system, but right now we do not have the mathematics backend to implement this completely. For now, I propose we keep track of all the missing spaces; it allows this extension in the future, with no cost right now. ### Implementation details. All objects will be completely immutable, and all their construction arguments will be as well (e.g. `State` will take only `int`, which is immutable). This means that singleton instances can be found by looking them up in a global store, similar to Python's `builtin` package or its `import` system. The singleton nature of the dimension classes is achieved by defining `__new__` for the instances, and _not_ `__init__`. The former is effectively a class method, while the latter is an instance method; since we want instances representing the same object t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:8289,Integrability,contract,contracts,8289,"r the instances, and _not_ `__init__`. The former is effectively a class method, while the latter is an instance method; since we want instances representing the same object to be unique, we don't want it. In order to maintain referential equality, tensor-product operations must move into a canonical form. Calling `Compound(Compound(x, y), z)` must return the same object as `Compound(x, y, z)`. Internally this parsing is easy; if one is using the new object constructors, Python evaluation order guarantees that they will flatten themselves; so long as the `Compound` constructor unpacks `Compound` objects at a depth of 1, the whole object will always be as flat as possible. The tensor product will be expanded by having `Compound` ""thread"" over `Map`. This effectively expands the mathematicians' definition of the tensor product to allows us to continue to represent ""silly"" objects such as; ```python; tensor(qeye(5), basis(2).dag()); ```; which is an odd object that contracts one element of a tensor-product space down to the field and leaves the other. This will report its `Qobj.type` as `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:274,Modifiability,extend,extended,274,"This document is a design specification for new dimensions handling. It is only a draft right now; please feel free to offer comments and suggestions. If you only read one section, read ""Overview"" inside ""Proposal"" to get the gist of what will happen. ## Background. For an extended discussion of some of the problems in 4.x branch dimension handling, see #1320. With the new system, we aim to solve a few main problems:; 1. `Qobj` `type` inference should be instantaneous; 2. Binary operation dimension compatibility tests should be instantaneous; 3. Dimension/shape equality tests should be instantaneous; 4. Invalid dimensions should not be representable; Currently, dimension handling is the major overhead in `Qobj` because these problems are not solved. The allowed exception to point 1 is if we include a short-hand notation to represent dimension objects; we may allow a ""pure-Python"" representation (effectively the current dimension specification) to be parsed into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:5958,Modifiability,extend,extended,5958,". The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing spaces are useful in principle in QIP settings for defining local operations on subsets of the whole system, but right now we do not have the mathematics backend to implement this completely. For now, I propose we keep track of all the missing spaces; it allows this extension in the future, with no cost right now. ### Implementation details. All objects will be completely immutable, and all their construction argume",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:4939,Safety,avoid,avoids,4939,"ntain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:6123,Safety,safe,safely,6123,"em. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing spaces are useful in principle in QIP settings for defining local operations on subsets of the whole system, but right now we do not have the mathematics backend to implement this completely. For now, I propose we keep track of all the missing spaces; it allows this extension in the future, with no cost right now. ### Implementation details. All objects will be completely immutable, and all their construction arguments will be as well (e.g. `State` will take only `int`, which is immutable). This means that singleton instances can be found by looking them up in a global store, similar to Python's `bui",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:11135,Safety,safe,safety,11135," number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj` factory functions that take a `dims` parameter should now also accept the new form. Since almost all of them just pass this directly to the `dims` argument in the `Qobj` constructor, this likely won't involve any developer effort. `Qobj` construction overhead should be reduced to near-zero when passed a new dimensions object, which we will always do within the library. Compared to the 4.x branch, the overhead of `Qobj` will shrink from ~100µs to ~1µs in library code, even for functions where the `Qobj` type cannot be cleanly inferred from the input types. ## Particular points worth commenting on. 1. Are there currently valid `Qobj` that cannot be represented with this system?; 2. Should we push to implement basis-safety for QuTiP 5.x?; 3. Do you agree we should keep track of ""missing"" tensor product spaces?; 4. Should we change the pretty-printed format of `dims` and `type` in `Qobj.__repr__()`?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:9407,Security,access,access,9407,"s `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:518,Testability,test,tests,518,"This document is a design specification for new dimensions handling. It is only a draft right now; please feel free to offer comments and suggestions. If you only read one section, read ""Overview"" inside ""Proposal"" to get the gist of what will happen. ## Background. For an extended discussion of some of the problems in 4.x branch dimension handling, see #1320. With the new system, we aim to solve a few main problems:; 1. `Qobj` `type` inference should be instantaneous; 2. Binary operation dimension compatibility tests should be instantaneous; 3. Dimension/shape equality tests should be instantaneous; 4. Invalid dimensions should not be representable; Currently, dimension handling is the major overhead in `Qobj` because these problems are not solved. The allowed exception to point 1 is if we include a short-hand notation to represent dimension objects; we may allow a ""pure-Python"" representation (effectively the current dimension specification) to be parsed into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:577,Testability,test,tests,577,"This document is a design specification for new dimensions handling. It is only a draft right now; please feel free to offer comments and suggestions. If you only read one section, read ""Overview"" inside ""Proposal"" to get the gist of what will happen. ## Background. For an extended discussion of some of the problems in 4.x branch dimension handling, see #1320. With the new system, we aim to solve a few main problems:; 1. `Qobj` `type` inference should be instantaneous; 2. Binary operation dimension compatibility tests should be instantaneous; 3. Dimension/shape equality tests should be instantaneous; 4. Invalid dimensions should not be representable; Currently, dimension handling is the major overhead in `Qobj` because these problems are not solved. The allowed exception to point 1 is if we include a short-hand notation to represent dimension objects; we may allow a ""pure-Python"" representation (effectively the current dimension specification) to be parsed into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:4022,Testability,test,test,4022,"note the reversal) a non-square operator that takes a two-qubit state to a tensor-product space between a 4-element space and 5-element space; - `[[[2], [2]], [[2], [2]]]` = `Map(Space(Map(Space(2), Space(2))), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:4193,Testability,test,tests,4193,")), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:4209,Testability,test,tests,4209,")), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:4439,Testability,test,test,4439,"The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:9573,Testability,log,logically,9573,"e rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj` factory functions that take a `dims` parameter should now also accept the new form. Since almost all of them just pass this directly to the `dims` argument in the `Qobj` constructor, t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:1980,Usability,simpl,simply,1980,"into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex number.; - `Compound(dims1, dims2, ...)` for tensor-product spaces. The current `Qobj.type` values (with no tensor products) map like so:; - ket: `Space`; - bra: `Map(Space, Field)`; - oper: `Map(Space, Space)`; - operator-ket: `Space(Map(Space, Space))`; - operator-bra: `Map(Space(Map(Space, Space)), Field)`; - super: `Map(Space(Map(Space, Space)), Space(Map(Space, Space)))`. Users will not have to type out such monstrosities as the mapping for `super`; the current QuTiP dims syntax will be parsed into these types, but internally this form will almost completely remove parsing costs. Some explicit mappings between the current list syntax and the new parsed syntax:; - `[[2], [1]]` = `Space(2)`: a qubit pure state; - `[[2, 10], [1, 1]]` = `Compound(Space(2), Space(10))`: a pure state of a qubit space tensor-product a 10-element space; - `[[2, 2], [2, 2]]` = `Map(Compound(Space(2), Space(2)), Compound(Space(2), Space(2)))`: a square operator on a two-qubit st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1421:5658,Usability,simpl,simply,5658,"solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1421
https://github.com/qutip/qutip/issues/1422:141,Availability,error,error,141,"I have noticed that when I try to use the `.dnorm()` method to calculate the diamond norm distance between two channels I am greeted with an error and the operation fails. Rather than an error I expected the output to be a number between 0 and 2. See the simple example below. ```; from qutip import destroy, qeye, fock_dm, kraus_to_choi. # Choi matrix for 1 qubit amplitude damping channel with probability p; def AmpDampChoi(p):; Kraus = [(1-p)**.5*qeye(2),p**.5*destroy(2),p**.5*fock_dm(2,0)]; return kraus_to_choi(Kraus). # Choi matrix for identity channel on 1 qubit; IdChoi = kraus_to_choi([qeye(2)]). # These values are found without issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1422:187,Availability,error,error,187,"I have noticed that when I try to use the `.dnorm()` method to calculate the diamond norm distance between two channels I am greeted with an error and the operation fails. Rather than an error I expected the output to be a number between 0 and 2. See the simple example below. ```; from qutip import destroy, qeye, fock_dm, kraus_to_choi. # Choi matrix for 1 qubit amplitude damping channel with probability p; def AmpDampChoi(p):; Kraus = [(1-p)**.5*qeye(2),p**.5*destroy(2),p**.5*fock_dm(2,0)]; return kraus_to_choi(Kraus). # Choi matrix for identity channel on 1 qubit; IdChoi = kraus_to_choi([qeye(2)]). # These values are found without issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1422:1078,Availability,error,error,1078,"dnorm()` method to calculate the diamond norm distance between two channels I am greeted with an error and the operation fails. Rather than an error I expected the output to be a number between 0 and 2. See the simple example below. ```; from qutip import destroy, qeye, fock_dm, kraus_to_choi. # Choi matrix for 1 qubit amplitude damping channel with probability p; def AmpDampChoi(p):; Kraus = [(1-p)**.5*qeye(2),p**.5*destroy(2),p**.5*fock_dm(2,0)]; return kraus_to_choi(Kraus). # Choi matrix for identity channel on 1 qubit; IdChoi = kraus_to_choi([qeye(2)]). # These values are found without issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/qutip/metrics.py in dnorm(A, B, solver, verb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1422:1713,Availability,error,error,1713,"ithout issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/qutip/metrics.py in dnorm(A, B, solver, verbose, force_solve); 475 shape=J_dat.shape); 476 # Finally, set up and run the problem.; --> 477 problem.solve(solver=solver, verbose=verbose); 478 ; 479 return problem.value. ~/.local/lib/python3.8/site-packages/cvxpy/problems/problem.py in solve(self, *args, **kwargs); 394 else:; 395 solve_func = Problem._solve; --> 396 return solve_func(self, *args, **kwargs); 397 ; 398 @classmethod. ~/.local/lib/python3.8/site-packages/cvxpy/problems/problem.py in _solve(self, solver, warm_start, verbose, gp, qcp, requires_grad, enforce_dpp, **kwargs); 742 return self.value; 743 ; --> 744 data, so",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1422:4596,Deployability,Install,Installed,4596,"solve_via_data(. ~/.local/lib/python3.8/site-packages/cvxpy/problems/problem.py in get_problem_data(self, solver, gp, enforce_dpp); 523 inverse_data = self._cache.inverse_data + [solver_inverse_data]; 524 else:; --> 525 data, inverse_data = solving_chain.apply(self); 526 safe_to_cache = (; 527 isinstance(data, dict). ~/.local/lib/python3.8/site-packages/cvxpy/reductions/chain.py in apply(self, problem); 69 inverse_data = []; 70 for r in self.reductions:; ---> 71 problem, inv = r.apply(problem); 72 inverse_data.append(inv); 73 return problem, inverse_data. ~/.local/lib/python3.8/site-packages/cvxpy/reductions/solvers/conic_solvers/cvxopt_conif.py in apply(self, problem); 110 len_eq = problem.cone_dims.zero; 111 ; --> 112 c, d, A, b = problem.apply_parameters(); 113 data[s.C] = c; 114 inv_data[s.OFFSET] = d. ~/.local/lib/python3.8/site-packages/cvxpy/reductions/dcp2cone/cone_matrix_stuffing.py in apply_parameters(self, id_to_param_value, zero_offset, keep_zeros); 167 return (np.array(self.id_to_param[idx].value) if id_to_param_value; 168 is None else id_to_param_value[idx]); --> 169 param_vec = canonInterface.get_parameter_vector(; 170 self.total_param_size,; 171 self.param_id_to_col,. ~/.local/lib/python3.8/site-packages/cvxpy/cvxcore/python/canonInterface.py in get_parameter_vector(param_size, param_id_to_col, param_id_to_size, param_id_to_value_fn, zero_offset); 55 value = param_id_to_value_fn(param_id).flatten(order='F'); 56 size = param_id_to_size[param_id]; ---> 57 param_vec[col:col + size] = value; 58 return param_vec; 59 . ValueError: setting an array element with a sequence.; ```. qutip.about() outputs the following info. ```; QuTiP Version: 4.5.2; Numpy Version: 1.19.1; Scipy Version: 1.5.2; Cython Version: 0.29.21; Matplotlib Version: 3.3.1; Python Version: 3.8.2; Number of CPUs: 6; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/charlie/.local/lib/python3.8/site-packages/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1422:4667,Deployability,Install,Installation,4667,"solve_via_data(. ~/.local/lib/python3.8/site-packages/cvxpy/problems/problem.py in get_problem_data(self, solver, gp, enforce_dpp); 523 inverse_data = self._cache.inverse_data + [solver_inverse_data]; 524 else:; --> 525 data, inverse_data = solving_chain.apply(self); 526 safe_to_cache = (; 527 isinstance(data, dict). ~/.local/lib/python3.8/site-packages/cvxpy/reductions/chain.py in apply(self, problem); 69 inverse_data = []; 70 for r in self.reductions:; ---> 71 problem, inv = r.apply(problem); 72 inverse_data.append(inv); 73 return problem, inverse_data. ~/.local/lib/python3.8/site-packages/cvxpy/reductions/solvers/conic_solvers/cvxopt_conif.py in apply(self, problem); 110 len_eq = problem.cone_dims.zero; 111 ; --> 112 c, d, A, b = problem.apply_parameters(); 113 data[s.C] = c; 114 inv_data[s.OFFSET] = d. ~/.local/lib/python3.8/site-packages/cvxpy/reductions/dcp2cone/cone_matrix_stuffing.py in apply_parameters(self, id_to_param_value, zero_offset, keep_zeros); 167 return (np.array(self.id_to_param[idx].value) if id_to_param_value; 168 is None else id_to_param_value[idx]); --> 169 param_vec = canonInterface.get_parameter_vector(; 170 self.total_param_size,; 171 self.param_id_to_col,. ~/.local/lib/python3.8/site-packages/cvxpy/cvxcore/python/canonInterface.py in get_parameter_vector(param_size, param_id_to_col, param_id_to_size, param_id_to_value_fn, zero_offset); 55 value = param_id_to_value_fn(param_id).flatten(order='F'); 56 size = param_id_to_size[param_id]; ---> 57 param_vec[col:col + size] = value; 58 return param_vec; 59 . ValueError: setting an array element with a sequence.; ```. qutip.about() outputs the following info. ```; QuTiP Version: 4.5.2; Numpy Version: 1.19.1; Scipy Version: 1.5.2; Cython Version: 0.29.21; Matplotlib Version: 3.3.1; Python Version: 3.8.2; Number of CPUs: 6; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/charlie/.local/lib/python3.8/site-packages/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1422:255,Usability,simpl,simple,255,"I have noticed that when I try to use the `.dnorm()` method to calculate the diamond norm distance between two channels I am greeted with an error and the operation fails. Rather than an error I expected the output to be a number between 0 and 2. See the simple example below. ```; from qutip import destroy, qeye, fock_dm, kraus_to_choi. # Choi matrix for 1 qubit amplitude damping channel with probability p; def AmpDampChoi(p):; Kraus = [(1-p)**.5*qeye(2),p**.5*destroy(2),p**.5*fock_dm(2,0)]; return kraus_to_choi(Kraus). # Choi matrix for identity channel on 1 qubit; IdChoi = kraus_to_choi([qeye(2)]). # These values are found without issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1422
https://github.com/qutip/qutip/issues/1423:319,Performance,Concurren,Concurrence,319,"**Describe the bug**; I am trying to find the fidelity of the maximally mixed two qubit state. I got fidelity as one where it should be zero. I am attaching the file and the results. **To Reproduce**; I created a maximally mixed state as 1/2*|00> + 1/2*|01> + 1/2*|10> + 1/2*|11> . I want to check the relation between Concurrence and Fidelity. Concurrence is working correctly, but in case of Fidelity I am facing the issue. I calculated Fidelity using partial trace. Partial traces are giving the same results for both basis (0 and 1) and hence Fidelity is coming as one. ```python; def two_qubit_mixed_state(a, b, c):; ; if (a >= 0 and b >= 0 and c >= 0) and (a*a + b*b + c*c <= 1):; d = math.sqrt(1 - (a*a + b*b + c*c)); ; if d >= 0:; i = tensor(basis(2, 0), basis(2, 0)); j = tensor(basis(2, 0), basis(2, 1)); k = tensor(basis(2, 1), basis(2, 0)); l = tensor(basis(2, 1), basis(2, 1)); ; obj = a*i + b*j + c*k + d*l; pa = obj.ptrace(0); pb = obj.ptrace(1); qstate1 = (ket2dm(obj)); ; concurrence_measure = concurrence(qstate1); ; fidelity_m = fidelity(pa, pb); ; print(qstate1); print(pa); print(pb); print(concurrence_measure); print(fidelity_m); return obj; ; two_qubit_mixed_state(1/2, 1/2, 1/2)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1423
https://github.com/qutip/qutip/issues/1423:345,Performance,Concurren,Concurrence,345,"**Describe the bug**; I am trying to find the fidelity of the maximally mixed two qubit state. I got fidelity as one where it should be zero. I am attaching the file and the results. **To Reproduce**; I created a maximally mixed state as 1/2*|00> + 1/2*|01> + 1/2*|10> + 1/2*|11> . I want to check the relation between Concurrence and Fidelity. Concurrence is working correctly, but in case of Fidelity I am facing the issue. I calculated Fidelity using partial trace. Partial traces are giving the same results for both basis (0 and 1) and hence Fidelity is coming as one. ```python; def two_qubit_mixed_state(a, b, c):; ; if (a >= 0 and b >= 0 and c >= 0) and (a*a + b*b + c*c <= 1):; d = math.sqrt(1 - (a*a + b*b + c*c)); ; if d >= 0:; i = tensor(basis(2, 0), basis(2, 0)); j = tensor(basis(2, 0), basis(2, 1)); k = tensor(basis(2, 1), basis(2, 0)); l = tensor(basis(2, 1), basis(2, 1)); ; obj = a*i + b*j + c*k + d*l; pa = obj.ptrace(0); pb = obj.ptrace(1); qstate1 = (ket2dm(obj)); ; concurrence_measure = concurrence(qstate1); ; fidelity_m = fidelity(pa, pb); ; print(qstate1); print(pa); print(pb); print(concurrence_measure); print(fidelity_m); return obj; ; two_qubit_mixed_state(1/2, 1/2, 1/2)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1423
https://github.com/qutip/qutip/issues/1423:1011,Performance,concurren,concurrence,1011,"**Describe the bug**; I am trying to find the fidelity of the maximally mixed two qubit state. I got fidelity as one where it should be zero. I am attaching the file and the results. **To Reproduce**; I created a maximally mixed state as 1/2*|00> + 1/2*|01> + 1/2*|10> + 1/2*|11> . I want to check the relation between Concurrence and Fidelity. Concurrence is working correctly, but in case of Fidelity I am facing the issue. I calculated Fidelity using partial trace. Partial traces are giving the same results for both basis (0 and 1) and hence Fidelity is coming as one. ```python; def two_qubit_mixed_state(a, b, c):; ; if (a >= 0 and b >= 0 and c >= 0) and (a*a + b*b + c*c <= 1):; d = math.sqrt(1 - (a*a + b*b + c*c)); ; if d >= 0:; i = tensor(basis(2, 0), basis(2, 0)); j = tensor(basis(2, 0), basis(2, 1)); k = tensor(basis(2, 1), basis(2, 0)); l = tensor(basis(2, 1), basis(2, 1)); ; obj = a*i + b*j + c*k + d*l; pa = obj.ptrace(0); pb = obj.ptrace(1); qstate1 = (ket2dm(obj)); ; concurrence_measure = concurrence(qstate1); ; fidelity_m = fidelity(pa, pb); ; print(qstate1); print(pa); print(pb); print(concurrence_measure); print(fidelity_m); return obj; ; two_qubit_mixed_state(1/2, 1/2, 1/2)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1423
https://github.com/qutip/qutip/issues/1426:92,Availability,error,error,92,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:500,Availability,error,error,500,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:882,Availability,error,error,882,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:1582,Availability,error,error,1582,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:98,Integrability,message,message,98,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:506,Integrability,message,message,506,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:754,Integrability,depend,dependency,754,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:888,Integrability,message,message,888,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:1208,Integrability,message,message,1208,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/issues/1426:1058,Usability,Simpl,Simply,1058,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1426
https://github.com/qutip/qutip/pull/1427:20,Availability,error,error,20,Catch and raise the error message of the subprocess. **Description**; See https://github.com/qutip/qutip/issues/1426#issuecomment-770080582. **Related issues or PRs**; This should fix #1426 . **Changelog**; Improve the error message of circuit plotting,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1427
https://github.com/qutip/qutip/pull/1427:219,Availability,error,error,219,Catch and raise the error message of the subprocess. **Description**; See https://github.com/qutip/qutip/issues/1426#issuecomment-770080582. **Related issues or PRs**; This should fix #1426 . **Changelog**; Improve the error message of circuit plotting,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1427
https://github.com/qutip/qutip/pull/1427:26,Integrability,message,message,26,Catch and raise the error message of the subprocess. **Description**; See https://github.com/qutip/qutip/issues/1426#issuecomment-770080582. **Related issues or PRs**; This should fix #1426 . **Changelog**; Improve the error message of circuit plotting,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1427
https://github.com/qutip/qutip/pull/1427:225,Integrability,message,message,225,Catch and raise the error message of the subprocess. **Description**; See https://github.com/qutip/qutip/issues/1426#issuecomment-770080582. **Related issues or PRs**; This should fix #1426 . **Changelog**; Improve the error message of circuit plotting,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1427
https://github.com/qutip/qutip/pull/1429:300,Availability,avail,available,300,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:1026,Availability,avail,available,1026,"erhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:1040,Availability,down,download,1040,"erhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:1134,Availability,avail,available,1134,"jor`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:4350,Availability,avail,available,4350,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:4491,Availability,avail,available,4491,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:5,Deployability,patch,patch,5,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:70,Deployability,patch,patch,70,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:263,Deployability,release,release,263,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:331,Deployability,release,release,331,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:520,Deployability,patch,patch,520,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:1163,Deployability,release,release,1163,"jor`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:1336,Deployability,release,releases,1336," changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than att",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:1772,Deployability,install,installation,1772,"build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the cod",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:2653,Deployability,release,release,2653,"517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pyp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3206,Deployability,update,updated,3206,"t's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3868,Deployability,configurat,configuration,3868,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:4058,Deployability,deploy,deployment,4058,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:4168,Deployability,deploy,deploy,4168,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:711,Modifiability,portab,portability,711,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:2682,Modifiability,variab,variable,2682,"517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pyp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3868,Modifiability,config,configuration,3868,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:4559,Security,access,access,4559,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:2452,Testability,test,tested,2452,"at. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3708,Testability,test,testing,3708,"ELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/bu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3737,Testability,test,test,3737,"ELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/bu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3827,Testability,test,testing,3827,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1429:3986,Testability,test,testing,3986,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1429
https://github.com/qutip/qutip/pull/1430:309,Performance,load,loaded,309,"If; ```python; qutip.testing.run(); ```; was called twice in the same Python session, then cases where a consumable iterator (such as `itertools.permutations` or `itertools.chain`) was used in the test parametrisation would fail on subsequent runs. This is because the iterator is consumed when the module is loaded, and cannot be re-run after. This was not caught in CI because naturally CI only runs the testing suite once in a session.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1430
https://github.com/qutip/qutip/pull/1430:21,Testability,test,testing,21,"If; ```python; qutip.testing.run(); ```; was called twice in the same Python session, then cases where a consumable iterator (such as `itertools.permutations` or `itertools.chain`) was used in the test parametrisation would fail on subsequent runs. This is because the iterator is consumed when the module is loaded, and cannot be re-run after. This was not caught in CI because naturally CI only runs the testing suite once in a session.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1430
https://github.com/qutip/qutip/pull/1430:197,Testability,test,test,197,"If; ```python; qutip.testing.run(); ```; was called twice in the same Python session, then cases where a consumable iterator (such as `itertools.permutations` or `itertools.chain`) was used in the test parametrisation would fail on subsequent runs. This is because the iterator is consumed when the module is loaded, and cannot be re-run after. This was not caught in CI because naturally CI only runs the testing suite once in a session.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1430
https://github.com/qutip/qutip/pull/1430:406,Testability,test,testing,406,"If; ```python; qutip.testing.run(); ```; was called twice in the same Python session, then cases where a consumable iterator (such as `itertools.permutations` or `itertools.chain`) was used in the test parametrisation would fail on subsequent runs. This is because the iterator is consumed when the module is loaded, and cannot be re-run after. This was not caught in CI because naturally CI only runs the testing suite once in a session.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1430
https://github.com/qutip/qutip/issues/1431:185,Availability,toler,tolerance,185,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:529,Availability,failure,failure,529,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:864,Availability,failure,failures,864,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:1117,Availability,toler,tolerance,1117,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:254,Deployability,release,released,254,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:350,Performance,load,load,350,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:358,Testability,test,tests,358,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:485,Testability,test,tests,485,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:859,Testability,test,test,859,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/issues/1431:1054,Testability,test,test,1054,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1431
https://github.com/qutip/qutip/pull/1432:909,Deployability,release,release,909,"Numpy 1.20 officially deprecated use of `np.int` and other things like `np.complex`. These were just thin aliases to Python types anyway, so that replacement is safe. Swap `float` and `complex` to `np.float64` and `np.complex128`; these still match Python precision (and standard double-precision floats), but more importantly we assume at all points in Cython code that we're dealing with double-precision arithmetic. Anything else would be a larger problem for us. In cases where `np.int` was used as a type check, we actually care more about checking for Integral typing, rather than specifically the int class; super weird constructs like; ```python; isinstance(np.int64(1), int) == False; ```; so taking indices out of an ndarry may lead to incorrect results when this sort of test is used. Better to use the abstract; ```python; isinstance(..., numbers.Integral); ```. See: https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1432
https://github.com/qutip/qutip/pull/1432:161,Safety,safe,safe,161,"Numpy 1.20 officially deprecated use of `np.int` and other things like `np.complex`. These were just thin aliases to Python types anyway, so that replacement is safe. Swap `float` and `complex` to `np.float64` and `np.complex128`; these still match Python precision (and standard double-precision floats), but more importantly we assume at all points in Cython code that we're dealing with double-precision arithmetic. Anything else would be a larger problem for us. In cases where `np.int` was used as a type check, we actually care more about checking for Integral typing, rather than specifically the int class; super weird constructs like; ```python; isinstance(np.int64(1), int) == False; ```; so taking indices out of an ndarry may lead to incorrect results when this sort of test is used. Better to use the abstract; ```python; isinstance(..., numbers.Integral); ```. See: https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1432
https://github.com/qutip/qutip/pull/1432:782,Testability,test,test,782,"Numpy 1.20 officially deprecated use of `np.int` and other things like `np.complex`. These were just thin aliases to Python types anyway, so that replacement is safe. Swap `float` and `complex` to `np.float64` and `np.complex128`; these still match Python precision (and standard double-precision floats), but more importantly we assume at all points in Cython code that we're dealing with double-precision arithmetic. Anything else would be a larger problem for us. In cases where `np.int` was used as a type check, we actually care more about checking for Integral typing, rather than specifically the int class; super weird constructs like; ```python; isinstance(np.int64(1), int) == False; ```; so taking indices out of an ndarry may lead to incorrect results when this sort of test is used. Better to use the abstract; ```python; isinstance(..., numbers.Integral); ```. See: https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1432
https://github.com/qutip/qutip/issues/1433:89,Availability,error,error,89,"QuTiP is currently incompatible with numpy 1.20. Tests will fail to even collect with an error such as; ```; AttributeError: 'numpy.ndarray' object has no attribute 'dag'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:1964,Availability,avail,availability,1964,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:1390,Deployability,release,release,1390,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:1426,Deployability,patch,patch,1426,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:340,Integrability,interface,interface,340,"QuTiP is currently incompatible with numpy 1.20. Tests will fail to even collect with an error such as; ```; AttributeError: 'numpy.ndarray' object has no attribute 'dag'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:395,Safety,safe,safely,395,"QuTiP is currently incompatible with numpy 1.20. Tests will fail to even collect with an error such as; ```; AttributeError: 'numpy.ndarray' object has no attribute 'dag'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:1779,Safety,safe,safely,1779,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:49,Testability,Test,Tests,49,"QuTiP is currently incompatible with numpy 1.20. Tests will fail to even collect with an error such as; ```; AttributeError: 'numpy.ndarray' object has no attribute 'dag'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/issues/1433:1217,Testability,test,test,1217,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1433
https://github.com/qutip/qutip/pull/1434:50,Testability,log,logs,50,Proposed solution to #1433. See that issue/commit logs for more details on this PR.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1434
https://github.com/qutip/qutip/issues/1437:158,Performance,bottleneck,bottleneck,158,"**Describe the issue**; In `mesolve`, all the intermediate result for each `t` in the `tlist` will be saved. If the given `tlist` is very long, this can be a bottleneck for time and memory. In the `Option` class, there is an option `store_states`, but it does not work as I expected. Setting it to False does not turn this off. https://github.com/qutip/qutip/blob/7a73b136cb74f832cf19f15e93c7268244674bdb/qutip/mesolve.py#L461-L463. According to the code above, there is no way to completely turn this off. One has to either save expectation values or save the intermediate states. **To Reproduce**; ```; from qutip import *; import numpy as np. options = Options(); options.store_states = False; print(options.store_states); result = mesolve(sigmax(), basis(2,0), np.linspace(0,1,10), options=options); print(options.store_states); ```; gives; ```; False; True; ```. @Ericgig @jakelishman",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1437
https://github.com/qutip/qutip/pull/1438:1453,Availability,error,error,1453,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1438
https://github.com/qutip/qutip/pull/1438:615,Deployability,update,update,615,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1438
https://github.com/qutip/qutip/pull/1438:482,Testability,test,tests,482,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1438
https://github.com/qutip/qutip/pull/1438:1401,Testability,log,log,1401,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1438
https://github.com/qutip/qutip/issues/1439:16,Deployability,release,released,16,"I have recently released a package, [sequencing](https://github.com/sequencing-dev/sequencing), which provides an ""experimentalist-friendly"" layer on top of QuTiP for constructing and simulating time-dependent Hamiltonians, especially those composed of sequences of pulses. - Repo: https://github.com/sequencing-dev/sequencing; - Docs: https://sequencing.readthedocs.io/en/latest/. I think this package could be of great use to many QuTiP users who are interested in simulating realistic pulse sequences acting on noisy devices. There is some conceptual overlap with `qutip.qip`, but the implementation is rather different. I'm not sure if GH issues is the right forum on which to share this information - I apologize if it's not. What would be the best way to share this project with the QuTiP community?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1439
https://github.com/qutip/qutip/issues/1439:200,Integrability,depend,dependent,200,"I have recently released a package, [sequencing](https://github.com/sequencing-dev/sequencing), which provides an ""experimentalist-friendly"" layer on top of QuTiP for constructing and simulating time-dependent Hamiltonians, especially those composed of sequences of pulses. - Repo: https://github.com/sequencing-dev/sequencing; - Docs: https://sequencing.readthedocs.io/en/latest/. I think this package could be of great use to many QuTiP users who are interested in simulating realistic pulse sequences acting on noisy devices. There is some conceptual overlap with `qutip.qip`, but the implementation is rather different. I'm not sure if GH issues is the right forum on which to share this information - I apologize if it's not. What would be the best way to share this project with the QuTiP community?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1439
https://github.com/qutip/qutip/pull/1440:578,Safety,avoid,avoid,578,"Fix #1433, see further discussion of points there. - sets `Qobj.__array_ufunc__ = None` to prevent implicit usage with ufuncs; - change use of `np.array(dtype=object)` with `Qobj` into either raw Python lists (when only used internally), or sets `out = np.empty(shape, dtype=object); out[:] = ...` to force object-array creation; - fix version of numpy build version to `1.16.6 <= x < 1.20` to prevent cross-version ABI incompatibility (see also comments in #1429); - change default of `dims` and `shape` in `Qobj` constructor to `None`, rather than dangerous lists (also helps avoid numpy calls on ragged sequences)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1440
https://github.com/qutip/qutip/issues/1442:597,Deployability,Install,Installed,597,"**Describe the bug**; In qobj.py, on line 1699 in the image below, ket was a QObj when using numpy v1.19 but in numpy v1.20 it's a numpy array. **To Reproduce**; ![image](https://user-images.githubusercontent.com/16978018/108094096-4d73a680-7033-11eb-9448-46199697e14c.png). **Expected behavior**; In line 1699 in the image above, ket should not be a numpy array but rather stay a QObj. **Your Environment**; QuTiP Version: 4.5.2; Numpy Version: 1.20.1; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.7.8; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64). **Additional context**; Working with @marcolincs on this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1442
https://github.com/qutip/qutip/pull/1444:19,Deployability,Integrat,Integrate,19,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:850,Deployability,integrat,integrating,850,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:919,Deployability,Integrat,Integrate,919,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:29,Energy Efficiency,schedul,scheduler,29,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:79,Energy Efficiency,schedul,schedule,79,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:105,Energy Efficiency,reduce,reduce,105,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:643,Energy Efficiency,schedul,scheduler,643,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:732,Energy Efficiency,schedul,scheduler,732,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:866,Energy Efficiency,schedul,scheduler,866,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:891,Energy Efficiency,adapt,adaptations,891,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:933,Energy Efficiency,schedul,scheduler,933,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:19,Integrability,Integrat,Integrate,19,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:850,Integrability,integrat,integrating,850,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:919,Integrability,Integrat,Integrate,919,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1444:891,Modifiability,adapt,adaptations,891,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1444
https://github.com/qutip/qutip/pull/1445:189,Deployability,Update,Update,189,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1445
https://github.com/qutip/qutip/pull/1445:200,Testability,test,test,200,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1445
https://github.com/qutip/qutip/pull/1445:210,Testability,test,test,210,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1445
https://github.com/qutip/qutip/pull/1445:278,Testability,Test,Test,278,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1445
https://github.com/qutip/qutip/pull/1445:53,Usability,simpl,simplified,53,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1445
https://github.com/qutip/qutip/pull/1446:52,Availability,robust,robust,52,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1446
https://github.com/qutip/qutip/pull/1446:127,Deployability,continuous,continuous,127,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1446
https://github.com/qutip/qutip/pull/1446:85,Integrability,wrap,wrapper,85,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1446
https://github.com/qutip/qutip/pull/1446:468,Integrability,wrap,wrapper,468,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1446
https://github.com/qutip/qutip/pull/1446:521,Usability,guid,guide,521,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1446
https://github.com/qutip/qutip/pull/1448:190,Deployability,patch,patch,190,"Boxi and I decided to hold off on 4.6.0 until after the next admin meeting - it was too rushed to finish off all the features, and there are deprecations to be discussed. This is a proposed patch release on the 4.5.X branch that purely adds the fixes for NumPy 1.20. The base of this PR is the code state at 4.5.2, so this PR is a complete list of changes from 4.5.2 to 4.5.3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1448
https://github.com/qutip/qutip/pull/1448:196,Deployability,release,release,196,"Boxi and I decided to hold off on 4.6.0 until after the next admin meeting - it was too rushed to finish off all the features, and there are deprecations to be discussed. This is a proposed patch release on the 4.5.X branch that purely adds the fixes for NumPy 1.20. The base of this PR is the code state at 4.5.2, so this PR is a complete list of changes from 4.5.2 to 4.5.3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1448
https://github.com/qutip/qutip/pull/1449:96,Availability,error,error,96,"QuTiP 4.5.3 fails to build from source distribution on PyPI, e.g. on Windows:; ```; c1xx: fatal error C1083: Cannot open source file: 'qutip/cy/openmp/src/zspmv_openmp.cpp': No such file or directory; ```; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1449
https://github.com/qutip/qutip/pull/1449:1659,Availability,error,error,1659,"QuTiP 4.5.3 fails to build from source distribution on PyPI, e.g. on Windows:; ```; c1xx: fatal error C1083: Cannot open source file: 'qutip/cy/openmp/src/zspmv_openmp.cpp': No such file or directory; ```; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1449
https://github.com/qutip/qutip/pull/1449:821,Deployability,update,update,821,"QuTiP 4.5.3 fails to build from source distribution on PyPI, e.g. on Windows:; ```; c1xx: fatal error C1083: Cannot open source file: 'qutip/cy/openmp/src/zspmv_openmp.cpp': No such file or directory; ```; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1449
https://github.com/qutip/qutip/pull/1449:688,Testability,test,tests,688,"QuTiP 4.5.3 fails to build from source distribution on PyPI, e.g. on Windows:; ```; c1xx: fatal error C1083: Cannot open source file: 'qutip/cy/openmp/src/zspmv_openmp.cpp': No such file or directory; ```; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1449
https://github.com/qutip/qutip/pull/1449:1607,Testability,log,log,1607,"QuTiP 4.5.3 fails to build from source distribution on PyPI, e.g. on Windows:; ```; c1xx: fatal error C1083: Cannot open source file: 'qutip/cy/openmp/src/zspmv_openmp.cpp': No such file or directory; ```; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1449
https://github.com/qutip/qutip/issues/1451:305,Availability,error,error,305,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:132,Deployability,release,release,132,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:4335,Deployability,Install,Installed,4335," or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:4405,Deployability,Install,Installation,4405," or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:311,Integrability,message,message,311,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:5,Testability,Test,TestDicke,5,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:15,Testability,test,tests,15,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:225,Testability,test,tests,225,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:279,Testability,Test,TestDicke,279,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:300,Testability,test,test,300,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:325,Testability,Test,TestDicke,325,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:454,Testability,Test,TestDicke,454,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:583,Testability,test,tests,583,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:599,Testability,Test,TestDicke,599,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:676,Testability,Test,Test,676,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:987,Testability,test,tests,987,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:3465,Testability,Test,TestDicke,3465,"=idx_dtype); self.col = np.array([], dtype=idx_dtype); self.data = np.array([], dtype=data_dtype); self.has_canonical_format = True; else:; try:; obj, (row, col) = arg1; except (TypeError, ValueError) as e:; raise TypeError('invalid input format') from e; ; if shape is None:; if len(row) == 0 or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/issues/1451:3503,Testability,Test,TestDicke,3503,"([], dtype=idx_dtype); self.data = np.array([], dtype=data_dtype); self.has_canonical_format = True; else:; try:; obj, (row, col) = arg1; except (TypeError, ValueError) as e:; raise TypeError('invalid input format') from e; ; if shape is None:; if len(row) == 0 or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1451
https://github.com/qutip/qutip/pull/1452:99,Availability,robust,robust,99,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:169,Deployability,patch,patch,169,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:488,Deployability,patch,patch,488,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:494,Safety,avoid,avoids,494,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:132,Testability,Test,Tested,132,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:175,Testability,test,tests,175,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:380,Testability,Test,TestDicke,380,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1452:390,Testability,test,tests,390,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1452
https://github.com/qutip/qutip/pull/1453:491,Testability,test,tests,491,"Brings `dev.major` up-to-date with the current state of master (f995f6f6). Includes nontrivial additional changes to resolve merge conflicts in some nonobvious files, due to the files moving place:. |new file | old file |; |--------------------------|------------------------|; |core/qobj.py | qobj.py (`eigenstates`, `__array_ufunc__`) |; |core/data/kron.pyx | cy/spmath.pyx (`kron`) |; |core/data/ptrace.pyx | qobj.py (`ptrace`) |; |core/data/properties.pyx | cy/spmath.pyx (`isherm`) |; |tests/test_device.py | tests/test_cavityqed.py |; |tests/test_device.py | tests/test_spinchain.py |. The merging of PRs gh-1289 and gh-1337 (overhauling the settings and reset handling on master and dev.major respectively) is handled by taking only the results of gh-1337; in terms of the ""setting reset"" functionality, these two PRs were equivalent but a huge merge-conflict because they achieved the same thing in two completely separate manners.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1453
https://github.com/qutip/qutip/pull/1453:514,Testability,test,tests,514,"Brings `dev.major` up-to-date with the current state of master (f995f6f6). Includes nontrivial additional changes to resolve merge conflicts in some nonobvious files, due to the files moving place:. |new file | old file |; |--------------------------|------------------------|; |core/qobj.py | qobj.py (`eigenstates`, `__array_ufunc__`) |; |core/data/kron.pyx | cy/spmath.pyx (`kron`) |; |core/data/ptrace.pyx | qobj.py (`ptrace`) |; |core/data/properties.pyx | cy/spmath.pyx (`isherm`) |; |tests/test_device.py | tests/test_cavityqed.py |; |tests/test_device.py | tests/test_spinchain.py |. The merging of PRs gh-1289 and gh-1337 (overhauling the settings and reset handling on master and dev.major respectively) is handled by taking only the results of gh-1337; in terms of the ""setting reset"" functionality, these two PRs were equivalent but a huge merge-conflict because they achieved the same thing in two completely separate manners.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1453
https://github.com/qutip/qutip/pull/1453:542,Testability,test,tests,542,"Brings `dev.major` up-to-date with the current state of master (f995f6f6). Includes nontrivial additional changes to resolve merge conflicts in some nonobvious files, due to the files moving place:. |new file | old file |; |--------------------------|------------------------|; |core/qobj.py | qobj.py (`eigenstates`, `__array_ufunc__`) |; |core/data/kron.pyx | cy/spmath.pyx (`kron`) |; |core/data/ptrace.pyx | qobj.py (`ptrace`) |; |core/data/properties.pyx | cy/spmath.pyx (`isherm`) |; |tests/test_device.py | tests/test_cavityqed.py |; |tests/test_device.py | tests/test_spinchain.py |. The merging of PRs gh-1289 and gh-1337 (overhauling the settings and reset handling on master and dev.major respectively) is handled by taking only the results of gh-1337; in terms of the ""setting reset"" functionality, these two PRs were equivalent but a huge merge-conflict because they achieved the same thing in two completely separate manners.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1453
https://github.com/qutip/qutip/pull/1453:565,Testability,test,tests,565,"Brings `dev.major` up-to-date with the current state of master (f995f6f6). Includes nontrivial additional changes to resolve merge conflicts in some nonobvious files, due to the files moving place:. |new file | old file |; |--------------------------|------------------------|; |core/qobj.py | qobj.py (`eigenstates`, `__array_ufunc__`) |; |core/data/kron.pyx | cy/spmath.pyx (`kron`) |; |core/data/ptrace.pyx | qobj.py (`ptrace`) |; |core/data/properties.pyx | cy/spmath.pyx (`isherm`) |; |tests/test_device.py | tests/test_cavityqed.py |; |tests/test_device.py | tests/test_spinchain.py |. The merging of PRs gh-1289 and gh-1337 (overhauling the settings and reset handling on master and dev.major respectively) is handled by taking only the results of gh-1337; in terms of the ""setting reset"" functionality, these two PRs were equivalent but a huge merge-conflict because they achieved the same thing in two completely separate manners.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1453
https://github.com/qutip/qutip/pull/1454:0,Deployability,Update,Updates,0,Updates the `.mailmap` file that git uses to link people and emails (try `git shortlog` with vs without this patch). Just general book-keeping.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1454
https://github.com/qutip/qutip/pull/1454:109,Deployability,patch,patch,109,Updates the `.mailmap` file that git uses to link people and emails (try `git shortlog` with vs without this patch). Just general book-keeping.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1454
https://github.com/qutip/qutip/issues/1538:190,Integrability,depend,dependent,190,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1538
https://github.com/qutip/qutip/issues/1538:296,Integrability,depend,dependent,296,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1538
https://github.com/qutip/qutip/issues/1538:85,Security,Access,Accessing,85,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1538
https://github.com/qutip/qutip/issues/1538:30,Usability,guid,guide,30,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1538
https://github.com/qutip/qutip/pull/1455:297,Deployability,Update,Updated,297,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:898,Deployability,update,updated,898,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:1009,Integrability,interface,interface,1009,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:17,Modifiability,Rewrite,Rewrite,17,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:159,Modifiability,Evolve,Evolver,159,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:1587,Modifiability,Evolve,Evolver,1587,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:1385,Testability,benchmark,benchmark,1385,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/pull/1455:726,Usability,feedback,feedback,726,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1455
https://github.com/qutip/qutip/issues/1456:485,Availability,fault,fault,485,"Passing incompatible dimensions for `rho0`, `H` and `c_ops` to `mesolve` leads to a segfault when the dimensions are large enough and when passing `c_ops`. . **To Reproduce**. Pass something for the initial state that is neither a state vector nor square density matrix. ```python; from qutip import *. D = 13; psi0 = tensor(coherent(D, 100e-9), qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], [destroy(D**2)])```; ```; ```; (qutip) ➜ ~ python mwe.py ; [1] 83143 segmentation fault python mwe.py; ```. Changing `D = 13` to `D = 12` correctly raises a `ValueError`:; ```; (qutip) ➜ ~ python mwe.py; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], [destroy(D**2)]); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (20736,) (1728,) ; ```. Trying to get a little more info on the segfault:. ```; (qutip) ➜ ~ lldb --file python mwe.py; (lldb) target create ""/Users/colmrya/miniconda3/envs/qutip/bin/python""; Current executable set to '/Users/colmrya/miniconda3/envs/qutip/bin/python' (x86_64).; (lldb) settings set -- target.run-args ""mwe.py""; (lldb) r; Process 83317 launched: '/Users/colmrya/miniconda3/envs/qutip/bin/python' (x86_64); Process 83317 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x1168d1000); frame #0: 0x0000000113018acd spmatfuncs.cpython-38-darwin.so`__pyx_f_5qutip_2cy_10spmatfuncs_spmvpy(std::__1::complex<double>*, int*, int*, std::__1::complex<double>*, std::__1::complex<double>, std::__1::complex<double>*, unsigned int) + 157; spmatfuncs.cpython-38-darwin.so`__pyx_f_5qutip_2cy_10spmatfuncs_spmvpy:; -> 0x113018acd <+157>: movupd (%rcx,%rax), %xmm4; 0x113018ad2 <+162>: mulpd %xmm4, %xmm3; 0x113018ad6 <+166>: movddup (%rbx), %xmm5 ; xmm5 = mem[0,0] ; 0x113018ada <+170>: shufpd $0x1, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1456
https://github.com/qutip/qutip/issues/1456:3834,Deployability,Install,Installed,3834,"➜ ~ python mwe.py ; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (28561,) (2197,) ; ```. **Expected behavior**; A exception for incompatible dimensions raised in all cases. ** Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. ```; (qutip) ➜ ~ ipython; Python 3.8.8 (default, Feb 24 2021, 13:46:16) ; Type 'copyright', 'credits' or 'license' for more information; IPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: import qutip; q; In [2]: qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.2; Scipy Version: 1.6.1; Cython Version: 0.29.22; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`. ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1456
https://github.com/qutip/qutip/issues/1456:3905,Deployability,Install,Installation,3905,"➜ ~ python mwe.py ; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (28561,) (2197,) ; ```. **Expected behavior**; A exception for incompatible dimensions raised in all cases. ** Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. ```; (qutip) ➜ ~ ipython; Python 3.8.8 (default, Feb 24 2021, 13:46:16) ; Type 'copyright', 'credits' or 'license' for more information; IPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: import qutip; q; In [2]: qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.2; Scipy Version: 1.6.1; Cython Version: 0.29.22; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`. ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1456
https://github.com/qutip/qutip/issues/1456:3014,Modifiability,enhance,enhanced,3014,"mm4[1,0] ; Target 0: (python) stopped.; ```. Not passing `c_ops` restores just raising a `ValueError`. ```python; from qutip import *. D = 13; psi0 = tensor(coherent(D, 100e-9), qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); ```; gives; ```; (qutip) ➜ ~ python mwe.py ; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (28561,) (2197,) ; ```. **Expected behavior**; A exception for incompatible dimensions raised in all cases. ** Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. ```; (qutip) ➜ ~ ipython; Python 3.8.8 (default, Feb 24 2021, 13:46:16) ; Type 'copyright', 'credits' or 'license' for more information; IPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: import qutip; q; In [2]: qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.2; Scipy Version: 1.6.1; Cython Version: 0.29.22; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip; ============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1456
https://github.com/qutip/qutip/issues/1456:1406,Performance,queue,queue,1406," qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], [destroy(D**2)])```; ```; ```; (qutip) ➜ ~ python mwe.py ; [1] 83143 segmentation fault python mwe.py; ```. Changing `D = 13` to `D = 12` correctly raises a `ValueError`:; ```; (qutip) ➜ ~ python mwe.py; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], [destroy(D**2)]); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (20736,) (1728,) ; ```. Trying to get a little more info on the segfault:. ```; (qutip) ➜ ~ lldb --file python mwe.py; (lldb) target create ""/Users/colmrya/miniconda3/envs/qutip/bin/python""; Current executable set to '/Users/colmrya/miniconda3/envs/qutip/bin/python' (x86_64).; (lldb) settings set -- target.run-args ""mwe.py""; (lldb) r; Process 83317 launched: '/Users/colmrya/miniconda3/envs/qutip/bin/python' (x86_64); Process 83317 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x1168d1000); frame #0: 0x0000000113018acd spmatfuncs.cpython-38-darwin.so`__pyx_f_5qutip_2cy_10spmatfuncs_spmvpy(std::__1::complex<double>*, int*, int*, std::__1::complex<double>*, std::__1::complex<double>, std::__1::complex<double>*, unsigned int) + 157; spmatfuncs.cpython-38-darwin.so`__pyx_f_5qutip_2cy_10spmatfuncs_spmvpy:; -> 0x113018acd <+157>: movupd (%rcx,%rax), %xmm4; 0x113018ad2 <+162>: mulpd %xmm4, %xmm3; 0x113018ad6 <+166>: movddup (%rbx), %xmm5 ; xmm5 = mem[0,0] ; 0x113018ada <+170>: shufpd $0x1, %xmm4, %xmm4 ; xmm4 = xmm4[1,0] ; Target 0: (python) stopped.; ```. Not passing `c_ops` restores just raising a `ValueError`. ```python; from qutip import *. D = 13; psi0 = tensor(coherent(D, 100e-9), qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); ```; gives; ```; (qutip) ➜ ~ python mwe.py ; Traceback (most recent call last):; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1456
https://github.com/qutip/qutip/pull/1459:499,Availability,down,down,499,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1459:663,Integrability,rout,routine,663,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1459:877,Integrability,depend,dependence,877,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1459:64,Testability,test,testing,64,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1459:588,Testability,test,tested,588,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1459:710,Testability,test,test,710,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1459:852,Testability,test,test,852,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1459
https://github.com/qutip/qutip/pull/1461:1683,Availability,avail,available,1683,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:621,Deployability,update,update,621,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force us",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:1474,Deployability,update,update,1474," code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:1670,Deployability,update,update,1670,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:1935,Deployability,update,update,1935,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:2035,Safety,risk,risk,2035,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:2391,Security,hash,hash,2391,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:488,Testability,test,tests,488,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force us",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1461:1663,Usability,simpl,simply,1663,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1461
https://github.com/qutip/qutip/pull/1462:61,Deployability,Integrat,Integrator,61,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1462
https://github.com/qutip/qutip/pull/1462:61,Integrability,Integrat,Integrator,61,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1462
https://github.com/qutip/qutip/pull/1462:1075,Integrability,depend,depending,1075,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1462
https://github.com/qutip/qutip/pull/1462:1572,Usability,progress bar,progress bar,1572,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1462
https://github.com/qutip/qutip/pull/1462:1633,Usability,progress bar,progress bar,1633,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1462
https://github.com/qutip/qutip/issues/1464:385,Modifiability,coupling,coupling,385,"Hi,. I'm new to the project as a user. I am trying to solve some problems involving multiple baths with Floquet formalism. Just wondering if you already implemented it in your current version? . Notice this just now in the documentation: http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-floquet.html where 'Currently the qutip.floquet.fmmesolve can only accept a single environment coupling operator and spectral-density function.' But I think it's good and not so difficult to come up with a general solvers where multiple baths are supported by myself. Is it okay if I contribute to this as well?. Cheers,; Tianqi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1464
https://github.com/qutip/qutip/issues/1464:266,Usability,guid,guide,266,"Hi,. I'm new to the project as a user. I am trying to solve some problems involving multiple baths with Floquet formalism. Just wondering if you already implemented it in your current version? . Notice this just now in the documentation: http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-floquet.html where 'Currently the qutip.floquet.fmmesolve can only accept a single environment coupling operator and spectral-density function.' But I think it's good and not so difficult to come up with a general solvers where multiple baths are supported by myself. Is it okay if I contribute to this as well?. Cheers,; Tianqi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1464
https://github.com/qutip/qutip/pull/1465:754,Availability,avail,available,754,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:1207,Availability,avail,available,1207," `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:1221,Availability,down,download,1221," `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:1315,Availability,avail,available,1315,"ean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:5,Deployability,patch,patch,5,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:156,Deployability,patch,patch,156,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:494,Deployability,patch,patch,494,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:559,Deployability,patch,patch,559,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:717,Deployability,release,release,717,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:785,Deployability,release,release,785,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:1344,Deployability,release,release,1344,"ean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:1517,Deployability,release,releases,1517,"d and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:2183,Deployability,install,installation,2183,"will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the cod",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:3064,Deployability,release,release,3064,"517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pyp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:3617,Deployability,update,updated,3617,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:4401,Deployability,deploy,deployment,4401,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:4511,Deployability,deploy,deploy,4511,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:466,Integrability,message,message,466,"This patch obsoletes #1429, by applying the packaging changes to the current version of `master` rather than needing the new structure on `dev.major`. This patch should (mostly) apply cleanly to `dev.major` as well, so merging this up will be easy - the new automated systems in `setup.py` also mean that the distribution can handle both the current `master` and the `dev.major` package layouts with no changes. The rest of this text is very similar to the original message in #1429. ---. This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged, there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:3093,Modifiability,variab,variable,3093,"517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pyp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:1819,Security,access,access,1819,"kflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:2863,Testability,test,tested,2863,"latform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:4119,Testability,test,testing,4119,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:4148,Testability,test,test,4148,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/pull/1465:4329,Testability,test,testing,4329,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1465
https://github.com/qutip/qutip/issues/1466:161,Integrability,depend,dependent,161,"I've got this code which uses a rotating frame approximation. I got it to work when the Hamiltonian was time independent, but now I'm trying to implement a time dependent Hamiltonian and nothing happens to the graph. I understand how to do this, but I'm not sure how it differs when using a rotating frame approximation. ```python; h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency. gamma_phi = 999000; gamma_minus = 1000. epsilon = g*u*b/h*(2*cmath.pi); Delta = g*u*b_AC/h*(2*cmath.pi). H0 = (w-w0)*epsilon/2 * sz #+ Delta/2*sy. def pulse(t0,t):; return np.heaviside(t0,2e-9). def H1_coeff(t,args):; t0=args['t0']; phi=args['phi']; return Delta*pulse(t0,t)*np.sin((w-w0)*t+phi). H = [H0,[sx,H1_coeff]]. times=np.linspace(0, 0.0001, 1000). #our initial qubit state ; state0=(state_z_plus)/(np.sqrt(1)); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1466
https://github.com/qutip/qutip/issues/1467:153,Availability,down,download,153,I am unable to open slides that were provided on [FOSDEM 2020 presentation](https://archive.fosdem.org/2020/schedule/event/quantum_qutip/). I am able to download the slides but I don't know what format these slides are in. . This presentation was references[ here](https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2021#1-error-mitigation-in-qutip).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1467
https://github.com/qutip/qutip/issues/1467:330,Availability,error,error-mitigation-in-qutip,330,I am unable to open slides that were provided on [FOSDEM 2020 presentation](https://archive.fosdem.org/2020/schedule/event/quantum_qutip/). I am able to download the slides but I don't know what format these slides are in. . This presentation was references[ here](https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2021#1-error-mitigation-in-qutip).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1467
https://github.com/qutip/qutip/issues/1467:108,Energy Efficiency,schedul,schedule,108,I am unable to open slides that were provided on [FOSDEM 2020 presentation](https://archive.fosdem.org/2020/schedule/event/quantum_qutip/). I am able to download the slides but I don't know what format these slides are in. . This presentation was references[ here](https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2021#1-error-mitigation-in-qutip).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1467
https://github.com/qutip/qutip/pull/1469:350,Testability,test,tests,350,"**Description**; Since the code is checking `or offset ? 0`, the method is effectively being ignored in most cases. Pretty sure that's not intended behavior. Changing to correct behavior in `coherent` makes `coherent_dm` pretty trivial. In theory, this introduces nothing that isn't explicitly documented. However, since there don't appear to be any tests that were failing because of this, I'll try to add some. **Changelog**; Fixed method name check in `coherent` and `coherent_dm`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1469
https://github.com/qutip/qutip/issues/1470:149,Availability,error,errors,149,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1993,Energy Efficiency,allocate,allocated,1993,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:560,Modifiability,config,configrc,560,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:636,Modifiability,config,config,636,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:674,Modifiability,config,configrc,674,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:737,Modifiability,config,config,737,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:770,Modifiability,config,config,770,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:808,Modifiability,config,config,808,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:841,Modifiability,config,config,841,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:926,Modifiability,config,configparser,926,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1199,Modifiability,config,configparser,1199,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:627,Performance,Load,Load,627,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1009,Security,validat,validating,1009,"in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1731,Testability,test,testing,1731,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1784,Testability,test,tests,1784,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1824,Testability,test,tests,1824,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1869,Testability,test,test,1869,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:2118,Testability,test,tested,2118,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/issues/1470:1675,Usability,simpl,simple,1675,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1470
https://github.com/qutip/qutip/pull/1471:680,Availability,error,errors,680,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:786,Availability,error,errors,786,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:842,Availability,error,error,842,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:874,Availability,mask,masks,874,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:257,Deployability,install,installation,257,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:1260,Deployability,patch,patch,1260,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:418,Integrability,depend,dependency,418,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:1445,Integrability,message,messages,1445,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:35,Modifiability,config,configrc,35,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:598,Performance,load,loading,598,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:173,Testability,test,testing,173,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:310,Testability,test,test,310,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:856,Testability,test,testing,856,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/pull/1471:1406,Testability,log,logic,1406,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1471
https://github.com/qutip/qutip/issues/1472:359,Availability,down,down,359,"Dear Qutip admin,. Currently, I am using mesolve in qutip. I would like to get the final_state from the mesolve without evaluating any expectation operator (e_ops). I realize that the default feature of qutip is that if I input e_ops to be an empty matrix and set final_state_store = True, qutip will automatically store the state at all time which will slow down the simulation. As for now, I would like to have mesolve to store only the final_state without storing the states at all time. May I kindly ask for your help to add this feature to mesolve? Is it possible also to add a feature where I can evaluate the expectation operator at the final time only without having to evaluate it at all time?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1472
https://github.com/qutip/qutip/issues/1473:204,Availability,error,error,204,"I am new to quantum computing and I want to use Qutip to calculate the entanglement entropy on my M1 MacBook Pro. However, I cannot import the Qutip library into either Jupyter notebook or Python3.9. The error message as shown in follow. May I ask how to solve this problem? Thank you. . ```python; IndexError Traceback (most recent call last); <ipython-input-4-82c62ef8635d> in <module>; ----> 1 from qutip import *. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/__init__.py in <module>; 145 # if num_cpu is 0 set it to the available number of cores; 146 import qutip.hardware_info; --> 147 info = qutip.hardware_info.hardware_info(); 148 if 'cpus' in info:; 149 qutip.settings.num_cpus = info['cpus']. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in hardware_info(); 121 """"""; 122 if sys.platform == 'darwin':; --> 123 out = _mac_hardware_info(); 124 elif sys.platform == 'win32':; 125 out = _win_hardware_info(). /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in _mac_hardware_info(); 46 l[1].strip('.\n '); 47 results.update({'cpus': int(info['physicalcpu'])}); ---> 48 results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); 49 .readlines()[0].split('@')[1][:-4])*1000)}); 50 results.update({'memsize': int(int(info['memsize']) / (1024 ** 2))}). IndexError: list index out of range; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1473
https://github.com/qutip/qutip/issues/1473:563,Availability,avail,available,563,"I am new to quantum computing and I want to use Qutip to calculate the entanglement entropy on my M1 MacBook Pro. However, I cannot import the Qutip library into either Jupyter notebook or Python3.9. The error message as shown in follow. May I ask how to solve this problem? Thank you. . ```python; IndexError Traceback (most recent call last); <ipython-input-4-82c62ef8635d> in <module>; ----> 1 from qutip import *. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/__init__.py in <module>; 145 # if num_cpu is 0 set it to the available number of cores; 146 import qutip.hardware_info; --> 147 info = qutip.hardware_info.hardware_info(); 148 if 'cpus' in info:; 149 qutip.settings.num_cpus = info['cpus']. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in hardware_info(); 121 """"""; 122 if sys.platform == 'darwin':; --> 123 out = _mac_hardware_info(); 124 elif sys.platform == 'win32':; 125 out = _win_hardware_info(). /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in _mac_hardware_info(); 46 l[1].strip('.\n '); 47 results.update({'cpus': int(info['physicalcpu'])}); ---> 48 results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); 49 .readlines()[0].split('@')[1][:-4])*1000)}); 50 results.update({'memsize': int(int(info['memsize']) / (1024 ** 2))}). IndexError: list index out of range; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1473
https://github.com/qutip/qutip/issues/1473:1169,Deployability,update,update,1169,"I am new to quantum computing and I want to use Qutip to calculate the entanglement entropy on my M1 MacBook Pro. However, I cannot import the Qutip library into either Jupyter notebook or Python3.9. The error message as shown in follow. May I ask how to solve this problem? Thank you. . ```python; IndexError Traceback (most recent call last); <ipython-input-4-82c62ef8635d> in <module>; ----> 1 from qutip import *. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/__init__.py in <module>; 145 # if num_cpu is 0 set it to the available number of cores; 146 import qutip.hardware_info; --> 147 info = qutip.hardware_info.hardware_info(); 148 if 'cpus' in info:; 149 qutip.settings.num_cpus = info['cpus']. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in hardware_info(); 121 """"""; 122 if sys.platform == 'darwin':; --> 123 out = _mac_hardware_info(); 124 elif sys.platform == 'win32':; 125 out = _win_hardware_info(). /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in _mac_hardware_info(); 46 l[1].strip('.\n '); 47 results.update({'cpus': int(info['physicalcpu'])}); ---> 48 results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); 49 .readlines()[0].split('@')[1][:-4])*1000)}); 50 results.update({'memsize': int(int(info['memsize']) / (1024 ** 2))}). IndexError: list index out of range; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1473
https://github.com/qutip/qutip/issues/1473:1229,Deployability,update,update,1229,"I am new to quantum computing and I want to use Qutip to calculate the entanglement entropy on my M1 MacBook Pro. However, I cannot import the Qutip library into either Jupyter notebook or Python3.9. The error message as shown in follow. May I ask how to solve this problem? Thank you. . ```python; IndexError Traceback (most recent call last); <ipython-input-4-82c62ef8635d> in <module>; ----> 1 from qutip import *. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/__init__.py in <module>; 145 # if num_cpu is 0 set it to the available number of cores; 146 import qutip.hardware_info; --> 147 info = qutip.hardware_info.hardware_info(); 148 if 'cpus' in info:; 149 qutip.settings.num_cpus = info['cpus']. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in hardware_info(); 121 """"""; 122 if sys.platform == 'darwin':; --> 123 out = _mac_hardware_info(); 124 elif sys.platform == 'win32':; 125 out = _win_hardware_info(). /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in _mac_hardware_info(); 46 l[1].strip('.\n '); 47 results.update({'cpus': int(info['physicalcpu'])}); ---> 48 results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); 49 .readlines()[0].split('@')[1][:-4])*1000)}); 50 results.update({'memsize': int(int(info['memsize']) / (1024 ** 2))}). IndexError: list index out of range; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1473
https://github.com/qutip/qutip/issues/1473:1366,Deployability,update,update,1366,"I am new to quantum computing and I want to use Qutip to calculate the entanglement entropy on my M1 MacBook Pro. However, I cannot import the Qutip library into either Jupyter notebook or Python3.9. The error message as shown in follow. May I ask how to solve this problem? Thank you. . ```python; IndexError Traceback (most recent call last); <ipython-input-4-82c62ef8635d> in <module>; ----> 1 from qutip import *. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/__init__.py in <module>; 145 # if num_cpu is 0 set it to the available number of cores; 146 import qutip.hardware_info; --> 147 info = qutip.hardware_info.hardware_info(); 148 if 'cpus' in info:; 149 qutip.settings.num_cpus = info['cpus']. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in hardware_info(); 121 """"""; 122 if sys.platform == 'darwin':; --> 123 out = _mac_hardware_info(); 124 elif sys.platform == 'win32':; 125 out = _win_hardware_info(). /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in _mac_hardware_info(); 46 l[1].strip('.\n '); 47 results.update({'cpus': int(info['physicalcpu'])}); ---> 48 results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); 49 .readlines()[0].split('@')[1][:-4])*1000)}); 50 results.update({'memsize': int(int(info['memsize']) / (1024 ** 2))}). IndexError: list index out of range; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1473
https://github.com/qutip/qutip/issues/1473:210,Integrability,message,message,210,"I am new to quantum computing and I want to use Qutip to calculate the entanglement entropy on my M1 MacBook Pro. However, I cannot import the Qutip library into either Jupyter notebook or Python3.9. The error message as shown in follow. May I ask how to solve this problem? Thank you. . ```python; IndexError Traceback (most recent call last); <ipython-input-4-82c62ef8635d> in <module>; ----> 1 from qutip import *. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/__init__.py in <module>; 145 # if num_cpu is 0 set it to the available number of cores; 146 import qutip.hardware_info; --> 147 info = qutip.hardware_info.hardware_info(); 148 if 'cpus' in info:; 149 qutip.settings.num_cpus = info['cpus']. /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in hardware_info(); 121 """"""; 122 if sys.platform == 'darwin':; --> 123 out = _mac_hardware_info(); 124 elif sys.platform == 'win32':; 125 out = _win_hardware_info(). /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/qutip/hardware_info.py in _mac_hardware_info(); 46 l[1].strip('.\n '); 47 results.update({'cpus': int(info['physicalcpu'])}); ---> 48 results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); 49 .readlines()[0].split('@')[1][:-4])*1000)}); 50 results.update({'memsize': int(int(info['memsize']) / (1024 ** 2))}). IndexError: list index out of range; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1473
https://github.com/qutip/qutip/pull/1474:462,Availability,failure,failures,462,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:637,Availability,toler,tolerances,637,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:961,Availability,error,error,961,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:983,Availability,toler,tolerances,983,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:1106,Availability,toler,tolerances,1106,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:573,Safety,avoid,avoid,573,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:5,Testability,test,test,5,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:74,Testability,test,test,74,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:225,Testability,test,test,225,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:955,Testability,log,logic,955,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1474:1101,Testability,test,test,1101,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1474
https://github.com/qutip/qutip/pull/1475:212,Availability,error,error,212,"Also for `operator_to_vector`, though this is harder to mis-use. The documentation now spells out exactly what we expect, and we verify that we do have the correct inputs, rather than exploding with a misleading error message (at best) or silently doing something very unexpected (at worst). Fix gh-1204.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1475
https://github.com/qutip/qutip/pull/1475:218,Integrability,message,message,218,"Also for `operator_to_vector`, though this is harder to mis-use. The documentation now spells out exactly what we expect, and we verify that we do have the correct inputs, rather than exploding with a misleading error message (at best) or silently doing something very unexpected (at worst). Fix gh-1204.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1475
https://github.com/qutip/qutip/pull/1478:157,Availability,error,error,157,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1478
https://github.com/qutip/qutip/pull/1478:284,Availability,error,error,284,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1478
https://github.com/qutip/qutip/pull/1478:523,Availability,error,error,523,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1478
https://github.com/qutip/qutip/pull/1478:666,Availability,error,error,666,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1478
https://github.com/qutip/qutip/pull/1478:431,Testability,test,test,431,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1478
https://github.com/qutip/qutip/pull/1478:706,Testability,test,test,706,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1478
https://github.com/qutip/qutip/pull/1479:495,Safety,avoid,avoid,495,"The first step of calculating the trace norm is to do `A @ A.dag()`, which we did internally in Qobj.norm. This creates a temporary `Qobj`, and those created from `Qobj.__mul__` are subject to tidyup by default, so this temporary structure may incorrectly get tidied to the zero matrix. For example, the code; ```python; qutip.qdiags(1e-7 * np.random.rand(10), 0).norm(); ```; would previously give 0, as clearly all elements of `A @ A.dag()` would be less than 1e-14, and subject to tidyup. We avoid the call that may be tidied up by jumping straight to CSR-CSR matrix multiplication, and set `isherm=True` without going via Qobj, since the operation is Hermitian for any matrix. Fix gh-952",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1479
https://github.com/qutip/qutip/pull/1479:405,Usability,clear,clearly,405,"The first step of calculating the trace norm is to do `A @ A.dag()`, which we did internally in Qobj.norm. This creates a temporary `Qobj`, and those created from `Qobj.__mul__` are subject to tidyup by default, so this temporary structure may incorrectly get tidied to the zero matrix. For example, the code; ```python; qutip.qdiags(1e-7 * np.random.rand(10), 0).norm(); ```; would previously give 0, as clearly all elements of `A @ A.dag()` would be less than 1e-14, and subject to tidyup. We avoid the call that may be tidied up by jumping straight to CSR-CSR matrix multiplication, and set `isherm=True` without going via Qobj, since the operation is Hermitian for any matrix. Fix gh-952",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1479
https://github.com/qutip/qutip/pull/1480:608,Deployability,release,release,608,"These are to be removed in QuTiP 5.0. We use `FutureWarning` rather than `DeprecationWarning` because a lot (most?) QuTiP users run interactively in notebooks, which generally filter out the latter. *edit*: changed to `DeprecationWarning` after review. The ""es"" solver options in correlation gain warning filters, because they aren't being removed in 5.0; the small parts of functionality they need is just being folded into private helpers within the module. The legacy correlation API had its deprecation warnings issued in 2014... But nonetheless, we shouldn't actually remove functionality until a major release. See fe5ef7d, d9ea79a for more details around the removals that have already been merged into `dev.major`. Fix #1281",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1480
https://github.com/qutip/qutip/pull/1481:241,Integrability,depend,dependant,241,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1481
https://github.com/qutip/qutip/pull/1481:307,Integrability,interface,interface,307,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1481
https://github.com/qutip/qutip/pull/1481:737,Performance,optimiz,optimization,737,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1481
https://github.com/qutip/qutip/pull/1481:820,Security,access,accessible,820,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1481
https://github.com/qutip/qutip/pull/1481:1075,Testability,log,logic,1075,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1481
https://github.com/qutip/qutip/pull/1481:871,Usability,simpl,simply,871,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1481
https://github.com/qutip/qutip/issues/1482:478,Availability,error,error,478,"Dear qutip admin,. I have a question related to the question about mesolve returning only final state. Here, I would like to ask how to save only the propagator matrix at the final time from qutip.propagator without saving the propagator matrix at all time steps? If I followed the method given in the previous thread titled ""mesolve returning only final state"", the method does not work. Basically if I declared H as QobjEvo and use it in qutip.propagator, I got the following error message ""Invalid time-dependent format"". Any idea how to rectify this problem? Below is the code. import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); omegalist = 2.91e2*fast_ts; fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * omegalist * fast_ts). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]). e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options). U = qutip.propagator(H, times, [], options=options); print(U[1]*rho)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1482
https://github.com/qutip/qutip/issues/1482:484,Integrability,message,message,484,"Dear qutip admin,. I have a question related to the question about mesolve returning only final state. Here, I would like to ask how to save only the propagator matrix at the final time from qutip.propagator without saving the propagator matrix at all time steps? If I followed the method given in the previous thread titled ""mesolve returning only final state"", the method does not work. Basically if I declared H as QobjEvo and use it in qutip.propagator, I got the following error message ""Invalid time-dependent format"". Any idea how to rectify this problem? Below is the code. import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); omegalist = 2.91e2*fast_ts; fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * omegalist * fast_ts). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]). e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options). U = qutip.propagator(H, times, [], options=options); print(U[1]*rho)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1482
https://github.com/qutip/qutip/issues/1482:506,Integrability,depend,dependent,506,"Dear qutip admin,. I have a question related to the question about mesolve returning only final state. Here, I would like to ask how to save only the propagator matrix at the final time from qutip.propagator without saving the propagator matrix at all time steps? If I followed the method given in the previous thread titled ""mesolve returning only final state"", the method does not work. Basically if I declared H as QobjEvo and use it in qutip.propagator, I got the following error message ""Invalid time-dependent format"". Any idea how to rectify this problem? Below is the code. import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); omegalist = 2.91e2*fast_ts; fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * omegalist * fast_ts). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]). e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options). U = qutip.propagator(H, times, [], options=options); print(U[1]*rho)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1482
https://github.com/qutip/qutip/pull/1485:130,Deployability,configurat,configurations,130,"This was an incredibly minor optimisation that had a ~2% speedup in some cases on Linux/Mac, but was preventing the build in some configurations on Windows due to failed type conversions. That's not a worthwhile trade-off for some functions that aren't even used that heavily in QuTiP code. I'm now using `dev.major` QuTiP on a Windows machine in day-to-day life, so maybe I'll catch a few more problems with it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1485
https://github.com/qutip/qutip/pull/1485:130,Modifiability,config,configurations,130,"This was an incredibly minor optimisation that had a ~2% speedup in some cases on Linux/Mac, but was preventing the build in some configurations on Windows due to failed type conversions. That's not a worthwhile trade-off for some functions that aren't even used that heavily in QuTiP code. I'm now using `dev.major` QuTiP on a Windows machine in day-to-day life, so maybe I'll catch a few more problems with it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1485
https://github.com/qutip/qutip/pull/1486:68,Availability,toler,tolerances,68,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:417,Availability,toler,tolerance,417,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:489,Availability,toler,tolerance,489,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:554,Availability,toler,tolerance,554,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:657,Availability,toler,tolerances,657,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:742,Availability,toler,tolerances,742,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:645,Deployability,update,updates,645,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1486:784,Testability,test,testing,784,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1486
https://github.com/qutip/qutip/pull/1487:962,Availability,failure,failure,962,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1487
https://github.com/qutip/qutip/pull/1487:616,Deployability,update,update,616,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1487
https://github.com/qutip/qutip/pull/1487:943,Integrability,depend,dependent,943,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1487
https://github.com/qutip/qutip/pull/1487:482,Testability,test,tests,482,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1487
https://github.com/qutip/qutip/pull/1487:805,Testability,test,tests,805,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1487
https://github.com/qutip/qutip/pull/1489:734,Availability,error,errors,734,"**Description**; Modified the function `_gate_FREDKIN` in `qutip/qutip/qip/circuit.py`. As reported in [issue #1330](https://github.com/qutip/qutip/issues/1330), there was a bug when unrolling Fredkin gate into basis gates. This bug derives from the use of a list with length >1 when making a new single-qubit gate in the function `_gate_FREDKIN`.; In this PR, I fixed this problem by manually unrolling this part.; For the details and the correctness verification, please refer to the attached pdf: [issue_1330.pdf](https://github.com/qutip/qutip/files/6272589/issue_1330.pdf). Thank you very much!. **Related issues or PRs**; Fixed the bug reported at [issue #1330](https://github.com/qutip/qutip/issues/1330). **Changelog**; Fixed errors in _gate_FREDKIN function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1489
https://github.com/qutip/qutip/pull/1490:165,Availability,failure,failures,165,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:507,Availability,error,error,507,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:610,Availability,failure,failure,610,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:670,Availability,failure,failure,670,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:742,Availability,failure,failure,742,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1064,Availability,failure,failures,1064,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1355,Availability,failure,failure,1355,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:351,Deployability,integrat,integration,351,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1897,Deployability,install,installed,1897,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:351,Integrability,integrat,integration,351,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1639,Integrability,depend,dependency,1639,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1508,Modifiability,plugin,plugin,1508,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:143,Safety,risk,risk,143,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:6,Testability,test,tests,6,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:85,Testability,test,tests,85,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:530,Testability,test,test,530,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:567,Testability,test,tests,567,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:665,Testability,test,test,665,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:837,Testability,test,tests,837,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1007,Testability,test,test,1007,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1197,Testability,test,test,1197,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1245,Testability,test,test,1245,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1330,Testability,test,test,1330,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1451,Testability,test,test,1451,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1490:1874,Testability,test,test,1874,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1490
https://github.com/qutip/qutip/pull/1491:39,Testability,test,tests,39,"**Description**; Making superop module tests compliant with the general pytest scheme. While doing that I found out some left `TODO` points. This took me to change code in the generalized kraus calculation to use SVD decomposition of rectangular matrices accurately.; Still there is a cryptic `TODO` referring to ptrace, the meaning of which I can not guess. Maybe someone with more experience on the module can be of help. **Changelog**; - Converted superop_rep tests to pytest; - Changed code in `generalized_kraus` to allow expansion of rectangular operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1491
https://github.com/qutip/qutip/pull/1491:463,Testability,test,tests,463,"**Description**; Making superop module tests compliant with the general pytest scheme. While doing that I found out some left `TODO` points. This took me to change code in the generalized kraus calculation to use SVD decomposition of rectangular matrices accurately.; Still there is a cryptic `TODO` referring to ptrace, the meaning of which I can not guess. Maybe someone with more experience on the module can be of help. **Changelog**; - Converted superop_rep tests to pytest; - Changed code in `generalized_kraus` to allow expansion of rectangular operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1491
https://github.com/qutip/qutip/issues/1492:302,Integrability,depend,depend,302,"I'm trying to simulate a Rabi oscillating Hamiltonian with unitary decay operators (the real simulation has decay on a different tensored component, so I tensor with qeye). Even though the decay operators are unitary, I keep seeing decay. It's independent of the unitary prefactor, and doesn't seem to depend on the timestep. If I remove the time dependence I don't see decay. If I remove the decay operators it Rabi oscillates fine. Can someone please tell me what I'm doing wrong?; Thank you; '; import numpy as np; import qutip as qt; import matplotlib.pyplot as plt. tlist=np.linspace(0, 10, 10000). Hq=5e3 * 2 * np.pi / 2 * qt.sigmaz(); HDrive = qt.sigmax(); def Hdrive_Coef(t,args):; return 2 * np.pi * np.sin(2 * np.pi * 5e3 * t); H=[Hq, [HDrive, Hdrive_Coef]]. psi0=qt.basis(2,0). result=qt.mesolve(H, psi0, tlist, [qt.qeye(2)], qt.sigmaz(), progress_bar=True). plt.figure(1); plt.clf(); plt.plot(result.times, result.expect[0]); '. ![image](https://user-images.githubusercontent.com/79229341/113942940-8ec43f00-97b6-11eb-8a33-f0da7293ab71.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1492
https://github.com/qutip/qutip/issues/1492:347,Integrability,depend,dependence,347,"I'm trying to simulate a Rabi oscillating Hamiltonian with unitary decay operators (the real simulation has decay on a different tensored component, so I tensor with qeye). Even though the decay operators are unitary, I keep seeing decay. It's independent of the unitary prefactor, and doesn't seem to depend on the timestep. If I remove the time dependence I don't see decay. If I remove the decay operators it Rabi oscillates fine. Can someone please tell me what I'm doing wrong?; Thank you; '; import numpy as np; import qutip as qt; import matplotlib.pyplot as plt. tlist=np.linspace(0, 10, 10000). Hq=5e3 * 2 * np.pi / 2 * qt.sigmaz(); HDrive = qt.sigmax(); def Hdrive_Coef(t,args):; return 2 * np.pi * np.sin(2 * np.pi * 5e3 * t); H=[Hq, [HDrive, Hdrive_Coef]]. psi0=qt.basis(2,0). result=qt.mesolve(H, psi0, tlist, [qt.qeye(2)], qt.sigmaz(), progress_bar=True). plt.figure(1); plt.clf(); plt.plot(result.times, result.expect[0]); '. ![image](https://user-images.githubusercontent.com/79229341/113942940-8ec43f00-97b6-11eb-8a33-f0da7293ab71.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1492
https://github.com/qutip/qutip/pull/1493:218,Deployability,patch,patch,218,"This isn't a complete ""fix"" of every piece of bad formatting in the API documentation that we're building, but it does fix every warning that Sphinx produces in both the `html` and `latexpdf` targets. It's quite a big patch, but there's no meaningful changes, only formatting ones - I haven't attempted to actually change the meaning of any of the writing, only to reformat it. If we want to make any changes to any of the docstrings, we can do that in separate patches. My intent is to merge this in as the very final patch in the 4.6 release, since it's useful for doing the documentation release. See also qutip/qutip-doc#136",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1493
https://github.com/qutip/qutip/pull/1493:462,Deployability,patch,patches,462,"This isn't a complete ""fix"" of every piece of bad formatting in the API documentation that we're building, but it does fix every warning that Sphinx produces in both the `html` and `latexpdf` targets. It's quite a big patch, but there's no meaningful changes, only formatting ones - I haven't attempted to actually change the meaning of any of the writing, only to reformat it. If we want to make any changes to any of the docstrings, we can do that in separate patches. My intent is to merge this in as the very final patch in the 4.6 release, since it's useful for doing the documentation release. See also qutip/qutip-doc#136",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1493
https://github.com/qutip/qutip/pull/1493:519,Deployability,patch,patch,519,"This isn't a complete ""fix"" of every piece of bad formatting in the API documentation that we're building, but it does fix every warning that Sphinx produces in both the `html` and `latexpdf` targets. It's quite a big patch, but there's no meaningful changes, only formatting ones - I haven't attempted to actually change the meaning of any of the writing, only to reformat it. If we want to make any changes to any of the docstrings, we can do that in separate patches. My intent is to merge this in as the very final patch in the 4.6 release, since it's useful for doing the documentation release. See also qutip/qutip-doc#136",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1493
https://github.com/qutip/qutip/pull/1493:536,Deployability,release,release,536,"This isn't a complete ""fix"" of every piece of bad formatting in the API documentation that we're building, but it does fix every warning that Sphinx produces in both the `html` and `latexpdf` targets. It's quite a big patch, but there's no meaningful changes, only formatting ones - I haven't attempted to actually change the meaning of any of the writing, only to reformat it. If we want to make any changes to any of the docstrings, we can do that in separate patches. My intent is to merge this in as the very final patch in the 4.6 release, since it's useful for doing the documentation release. See also qutip/qutip-doc#136",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1493
https://github.com/qutip/qutip/pull/1493:591,Deployability,release,release,591,"This isn't a complete ""fix"" of every piece of bad formatting in the API documentation that we're building, but it does fix every warning that Sphinx produces in both the `html` and `latexpdf` targets. It's quite a big patch, but there's no meaningful changes, only formatting ones - I haven't attempted to actually change the meaning of any of the writing, only to reformat it. If we want to make any changes to any of the docstrings, we can do that in separate patches. My intent is to merge this in as the very final patch in the 4.6 release, since it's useful for doing the documentation release. See also qutip/qutip-doc#136",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1493
https://github.com/qutip/qutip/issues/1495:163,Availability,error,error,163,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:219,Availability,error,error-parameter-,219,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:495,Availability,error,error,495,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:525,Availability,ERROR,ERROR,525,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1223,Availability,ERROR,ERROR,1223,"arge-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperato",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1347,Availability,FAILURE,FAILURES,1347," the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:394,Deployability,release,release,394,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:452,Performance,perform,performs,452,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:823,Testability,test,tests,823,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1005,Testability,test,tests,1005,"e the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); ch",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1129,Testability,test,tests,1129," being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1182,Testability,test,tests,1182,"://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1474,Testability,Test,TestSuperopReps,1474," the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1581,Testability,test,tests,1581,"h mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:1605,Testability,Test,TestSuperopReps,1605,"ting it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:2080,Testability,Assert,Assert,2080,"rop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:2212,Testability,assert,assert,2212,"ROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:2275,Testability,assert,assert,2275,"to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:3363,Testability,test,tests,3363,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:3395,Testability,Assert,AssertionError,3395,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:3993,Testability,test,test,3993,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:4084,Testability,test,tests,4084,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:4112,Testability,Test,TestSuperopReps,4112,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1495:4157,Testability,assert,assert,4157,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1495
https://github.com/qutip/qutip/issues/1497:1205,Modifiability,variab,variable,1205,"**Is your feature request related to a problem? Please describe.**; I would like to check the behavior of the parameter `index` in the function `QubitCircuit.add_gate()`. In `qutip.qip.QubitCircuit.add_gate()`, there is a optional `list` type attribute called index.; This seems to be used to insert gates in the middle of the gate list (`qutip.qip.QubitCircuit.gates`).; The corresponding code is shown below.; ```; for position in index:; num_mes = (sum(isinstance(op, Measurement) for op; in self.gates[:position])); gate = Gate(name, targets=targets, controls=controls,; arg_value=arg_value, arg_label=arg_label,; classical_controls=classical_controls,; control_value=control_value); self.gates.insert(position, gate); ```; In this code, if `index` contains two or more elements, then the insert positions would be shifted one by one.; Is this an expected behavior?. In the current code, the positions in `index` would not indicate the original positions during the insertion loop. (e.g. When we want to insert a gate `A` to `gates=[B0,B1,B2,B3,B4,B5]` in `index=[0,2,3]`, then the output gate list would be `gates=[A,B0,A,A,B1,B2,B3,B4,B5]`, not `gates=[A,B0,B1,A,B2,A,B3,B4,B5]`.). In addition, the variable `num_mes` is unused throughout the code. **Describe the solution you'd like**; If this is not the expected behavior, and if the expected behavior is like the latter gate list in the former example, then we can fix this part into:. ```; gate = Gate(name, targets=targets, controls=controls,; arg_value=arg_value, arg_label=arg_label,; classical_controls=classical_controls,; control_value=control_value); for i, position in enumerate(sorted(index)):; self.gates.insert(position + i, gate); ```. **Additional context**; This issue is also mentioned in the PR #1489 .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1497
https://github.com/qutip/qutip/pull/1498:138,Safety,safe,safe,138,**Description**; Setting eigh_unsafe on sipy<1.5 and MKL. **Related issues or PRs**; #1495. **Changelog**; - Changed init to set eigh not safe in case scipy<1.5 and mkl backend; - Added the correct pytest breaking test from issue #1491 to check the solution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1498
https://github.com/qutip/qutip/pull/1498:214,Testability,test,test,214,**Description**; Setting eigh_unsafe on sipy<1.5 and MKL. **Related issues or PRs**; #1495. **Changelog**; - Changed init to set eigh not safe in case scipy<1.5 and mkl backend; - Added the correct pytest breaking test from issue #1491 to check the solution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1498
https://github.com/qutip/qutip/pull/1499:419,Availability,error,error,419,"**Description**; Adds hyperlinks for functions, classes, attributes etc. wherever possible. . - Deleted methods table. See [this comment](https://github.com/qutip/qutip/pull/1499#issuecomment-822679427). ; - Every function, class etc is linked by default method of ``:obj:`.some_func` ``; - Functions not in API doc are referenced as 'func_not_in_API'. ; - Added `TypeError` and `ValueError` etc. in docstrings when an error of either type is raised by a function. Most of these might not be needed as [this link](https://numpydoc.readthedocs.io/en/latest/format.html#raises) advises to provide information about only the obvious errors. I read the link after making the changes. If needed, the new additions can be removed from the docstrings. . **Related issues or PRs**; [One of the fixes for issue 71 in documentation](https://github.com/qutip/qutip-doc/issues/71). . **Changelog**; Add hyperlinks in documentation and errors in docstrings of functions in qobj and qobevo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1499
https://github.com/qutip/qutip/pull/1499:630,Availability,error,errors,630,"**Description**; Adds hyperlinks for functions, classes, attributes etc. wherever possible. . - Deleted methods table. See [this comment](https://github.com/qutip/qutip/pull/1499#issuecomment-822679427). ; - Every function, class etc is linked by default method of ``:obj:`.some_func` ``; - Functions not in API doc are referenced as 'func_not_in_API'. ; - Added `TypeError` and `ValueError` etc. in docstrings when an error of either type is raised by a function. Most of these might not be needed as [this link](https://numpydoc.readthedocs.io/en/latest/format.html#raises) advises to provide information about only the obvious errors. I read the link after making the changes. If needed, the new additions can be removed from the docstrings. . **Related issues or PRs**; [One of the fixes for issue 71 in documentation](https://github.com/qutip/qutip-doc/issues/71). . **Changelog**; Add hyperlinks in documentation and errors in docstrings of functions in qobj and qobevo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1499
https://github.com/qutip/qutip/pull/1499:923,Availability,error,errors,923,"**Description**; Adds hyperlinks for functions, classes, attributes etc. wherever possible. . - Deleted methods table. See [this comment](https://github.com/qutip/qutip/pull/1499#issuecomment-822679427). ; - Every function, class etc is linked by default method of ``:obj:`.some_func` ``; - Functions not in API doc are referenced as 'func_not_in_API'. ; - Added `TypeError` and `ValueError` etc. in docstrings when an error of either type is raised by a function. Most of these might not be needed as [this link](https://numpydoc.readthedocs.io/en/latest/format.html#raises) advises to provide information about only the obvious errors. I read the link after making the changes. If needed, the new additions can be removed from the docstrings. . **Related issues or PRs**; [One of the fixes for issue 71 in documentation](https://github.com/qutip/qutip-doc/issues/71). . **Changelog**; Add hyperlinks in documentation and errors in docstrings of functions in qobj and qobevo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1499
https://github.com/qutip/qutip/pull/1501:21,Availability,error,errors,21,**Description**; Fix errors in gate definitions. **Changelog**; Correct expansion of berkeley and swapalpha gates; Correct definition of CZ gate; Add CPHASE gate to list of control gates,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1501
https://github.com/qutip/qutip/issues/1502:6,Deployability,update,updated,6,"#1496 updated the Bloch sphere to prevent distortion in matplotlib 3.3+. This appears to have inadvertantly pinned the effective matplotlib dependency to `matplotlib>=3.3`, because it uses `Axes3D.set_box_aspect` which didn't exist before then. We might need to add a small version-dependent switch beacuse matplotlib 3.3 is under a year old, so it's a very recent version to be depending on. I would like to keep the optional matplotlib dependency to at least `matplotlib>=3` if at all possible, since I don't think we're using much cutting-edge stuff. Note we now have `packaging` as a run-time dependency, which will make any version comparisons much easier (e.g. ; ```python; from packaging.version import parse as parse_version. if parse_version(matplotlib.__version__) > parse_version('3.3'):; ...; else:; ...; ```. @BoxiLi: do you have thoughts?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1502
https://github.com/qutip/qutip/issues/1502:140,Integrability,depend,dependency,140,"#1496 updated the Bloch sphere to prevent distortion in matplotlib 3.3+. This appears to have inadvertantly pinned the effective matplotlib dependency to `matplotlib>=3.3`, because it uses `Axes3D.set_box_aspect` which didn't exist before then. We might need to add a small version-dependent switch beacuse matplotlib 3.3 is under a year old, so it's a very recent version to be depending on. I would like to keep the optional matplotlib dependency to at least `matplotlib>=3` if at all possible, since I don't think we're using much cutting-edge stuff. Note we now have `packaging` as a run-time dependency, which will make any version comparisons much easier (e.g. ; ```python; from packaging.version import parse as parse_version. if parse_version(matplotlib.__version__) > parse_version('3.3'):; ...; else:; ...; ```. @BoxiLi: do you have thoughts?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1502
https://github.com/qutip/qutip/issues/1502:282,Integrability,depend,dependent,282,"#1496 updated the Bloch sphere to prevent distortion in matplotlib 3.3+. This appears to have inadvertantly pinned the effective matplotlib dependency to `matplotlib>=3.3`, because it uses `Axes3D.set_box_aspect` which didn't exist before then. We might need to add a small version-dependent switch beacuse matplotlib 3.3 is under a year old, so it's a very recent version to be depending on. I would like to keep the optional matplotlib dependency to at least `matplotlib>=3` if at all possible, since I don't think we're using much cutting-edge stuff. Note we now have `packaging` as a run-time dependency, which will make any version comparisons much easier (e.g. ; ```python; from packaging.version import parse as parse_version. if parse_version(matplotlib.__version__) > parse_version('3.3'):; ...; else:; ...; ```. @BoxiLi: do you have thoughts?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1502
https://github.com/qutip/qutip/issues/1502:379,Integrability,depend,depending,379,"#1496 updated the Bloch sphere to prevent distortion in matplotlib 3.3+. This appears to have inadvertantly pinned the effective matplotlib dependency to `matplotlib>=3.3`, because it uses `Axes3D.set_box_aspect` which didn't exist before then. We might need to add a small version-dependent switch beacuse matplotlib 3.3 is under a year old, so it's a very recent version to be depending on. I would like to keep the optional matplotlib dependency to at least `matplotlib>=3` if at all possible, since I don't think we're using much cutting-edge stuff. Note we now have `packaging` as a run-time dependency, which will make any version comparisons much easier (e.g. ; ```python; from packaging.version import parse as parse_version. if parse_version(matplotlib.__version__) > parse_version('3.3'):; ...; else:; ...; ```. @BoxiLi: do you have thoughts?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1502
https://github.com/qutip/qutip/issues/1502:438,Integrability,depend,dependency,438,"#1496 updated the Bloch sphere to prevent distortion in matplotlib 3.3+. This appears to have inadvertantly pinned the effective matplotlib dependency to `matplotlib>=3.3`, because it uses `Axes3D.set_box_aspect` which didn't exist before then. We might need to add a small version-dependent switch beacuse matplotlib 3.3 is under a year old, so it's a very recent version to be depending on. I would like to keep the optional matplotlib dependency to at least `matplotlib>=3` if at all possible, since I don't think we're using much cutting-edge stuff. Note we now have `packaging` as a run-time dependency, which will make any version comparisons much easier (e.g. ; ```python; from packaging.version import parse as parse_version. if parse_version(matplotlib.__version__) > parse_version('3.3'):; ...; else:; ...; ```. @BoxiLi: do you have thoughts?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1502
https://github.com/qutip/qutip/issues/1502:597,Integrability,depend,dependency,597,"#1496 updated the Bloch sphere to prevent distortion in matplotlib 3.3+. This appears to have inadvertantly pinned the effective matplotlib dependency to `matplotlib>=3.3`, because it uses `Axes3D.set_box_aspect` which didn't exist before then. We might need to add a small version-dependent switch beacuse matplotlib 3.3 is under a year old, so it's a very recent version to be depending on. I would like to keep the optional matplotlib dependency to at least `matplotlib>=3` if at all possible, since I don't think we're using much cutting-edge stuff. Note we now have `packaging` as a run-time dependency, which will make any version comparisons much easier (e.g. ; ```python; from packaging.version import parse as parse_version. if parse_version(matplotlib.__version__) > parse_version('3.3'):; ...; else:; ...; ```. @BoxiLi: do you have thoughts?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1502
https://github.com/qutip/qutip/issues/1503:988,Deployability,release,releases,988,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1503
https://github.com/qutip/qutip/issues/1503:1535,Testability,test,test,1535,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1503
https://github.com/qutip/qutip/issues/1503:1590,Testability,test,test,1590,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1503
https://github.com/qutip/qutip/issues/1503:110,Usability,Simpl,Simple,110,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1503
https://github.com/qutip/qutip/issues/1504:1130,Deployability,Install,Installed,1130,"**Describe the bug**; qutip.random_objects.rand_ket does not work as intended; rand_ket(N=0, density=1, dims=None, seed=None) should be to figure out what N is, given dims is assigned when N is set to be 0 or None. **To Reproduce**. ```python; from qutip.random_objects import rand_ket; rand_ket(None, dims=[[2],[1]]); ```; The terminal out put is; ```; ---------------------------------------------------------------------------; NameError Traceback (most recent call last); <ipython-input-61-18d662b8b1db> in <module>; ----> 1 rand_ket(None, dims=[[2],[1]]). ~\Anaconda3\envs\quspin_env\lib\site-packages\qutip\random_objects.py in rand_ket(N, density, dims, seed); 326 _check_dims(dims, N, 1); 327 elif dims:; --> 328 N = prod(dims[0]); 329 _check_dims(dims, N, 1); 330 else:. NameError: name 'prod' is not defined; ```. **Expected behavior**; rand_ket should give you the same answer as rand_ket(2, dims=[[2],[1]]). **Your Environment**; QuTiP Version: 4.6.0; Numpy Version: 1.19.2; Scipy Version: 1.6.2; Cython Version: None; Matplotlib Version: 3.3.4; Python Version: 3.7.10; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1504
https://github.com/qutip/qutip/pull/1505:1334,Availability,error,errors,1334,"There were a few invalid escape sequences and scipy imports that somehow escaped being fixed #1493, so this fixes those. Also, in #1480 we issued deprecation warnings for user-facing uses of `eseries`, `essolve` and `ode2es`, however we are not deprecating the correlation and spectrum methods (in QuTiP 5.0 the necessary components are just absorbed into private functions inside `correlation.py`), so these should not generate warnings. Simon (@hodgestar) and I briefly discussed whether we needed a special warnings filter inside those functions, but we thought we didn't need it because default Python filters would prevent `DeprecationWarning` from being shown, since it is triggered by library code and not code in `__main__`. The problem is that not everything uses the default filters; both `pytest` and the documentation build do not suppress all `DeprecationWarning` messages. This was a particular problem in `pytest`, where approximately 68,000 warnings (!) were generated. Since this is _not_ deprecated functionality, nor is it using deprecated functionality, so there shouldn't be any warnings. This PR removes those as well. The end result is that a completely clean documentation build now should generate 0 warnings. My eventual intent is to create an automatic documentation build process, which treats warnings as errors to prevent us from breaking it in PRs. This cannot happen until the merger of the documentation into this repository, however, because otherwise new features/feature removals could get into an impossible situation where the two PRs to `qutip` and `qutip-doc` would not be aware of each other, so would return failed CI. Tests still generate several warnings, but that's for a different PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1505
https://github.com/qutip/qutip/pull/1505:877,Integrability,message,messages,877,"There were a few invalid escape sequences and scipy imports that somehow escaped being fixed #1493, so this fixes those. Also, in #1480 we issued deprecation warnings for user-facing uses of `eseries`, `essolve` and `ode2es`, however we are not deprecating the correlation and spectrum methods (in QuTiP 5.0 the necessary components are just absorbed into private functions inside `correlation.py`), so these should not generate warnings. Simon (@hodgestar) and I briefly discussed whether we needed a special warnings filter inside those functions, but we thought we didn't need it because default Python filters would prevent `DeprecationWarning` from being shown, since it is triggered by library code and not code in `__main__`. The problem is that not everything uses the default filters; both `pytest` and the documentation build do not suppress all `DeprecationWarning` messages. This was a particular problem in `pytest`, where approximately 68,000 warnings (!) were generated. Since this is _not_ deprecated functionality, nor is it using deprecated functionality, so there shouldn't be any warnings. This PR removes those as well. The end result is that a completely clean documentation build now should generate 0 warnings. My eventual intent is to create an automatic documentation build process, which treats warnings as errors to prevent us from breaking it in PRs. This cannot happen until the merger of the documentation into this repository, however, because otherwise new features/feature removals could get into an impossible situation where the two PRs to `qutip` and `qutip-doc` would not be aware of each other, so would return failed CI. Tests still generate several warnings, but that's for a different PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1505
https://github.com/qutip/qutip/pull/1505:1661,Testability,Test,Tests,1661,"There were a few invalid escape sequences and scipy imports that somehow escaped being fixed #1493, so this fixes those. Also, in #1480 we issued deprecation warnings for user-facing uses of `eseries`, `essolve` and `ode2es`, however we are not deprecating the correlation and spectrum methods (in QuTiP 5.0 the necessary components are just absorbed into private functions inside `correlation.py`), so these should not generate warnings. Simon (@hodgestar) and I briefly discussed whether we needed a special warnings filter inside those functions, but we thought we didn't need it because default Python filters would prevent `DeprecationWarning` from being shown, since it is triggered by library code and not code in `__main__`. The problem is that not everything uses the default filters; both `pytest` and the documentation build do not suppress all `DeprecationWarning` messages. This was a particular problem in `pytest`, where approximately 68,000 warnings (!) were generated. Since this is _not_ deprecated functionality, nor is it using deprecated functionality, so there shouldn't be any warnings. This PR removes those as well. The end result is that a completely clean documentation build now should generate 0 warnings. My eventual intent is to create an automatic documentation build process, which treats warnings as errors to prevent us from breaking it in PRs. This cannot happen until the merger of the documentation into this repository, however, because otherwise new features/feature removals could get into an impossible situation where the two PRs to `qutip` and `qutip-doc` would not be aware of each other, so would return failed CI. Tests still generate several warnings, but that's for a different PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1505
https://github.com/qutip/qutip/pull/1506:92,Availability,error,errors,92,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1242,Availability,error,errors,1242,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:321,Integrability,depend,dependencies,321,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1371,Integrability,depend,dependence,1371,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:666,Testability,Test,Tests,666,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:682,Testability,test,test,682,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:989,Testability,test,testing,989,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1148,Testability,test,test,1148,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1162,Testability,test,test,1162,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1573,Testability,test,test,1573,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1820,Testability,test,tested,1820,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1506:1871,Testability,log,logs,1871,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1506
https://github.com/qutip/qutip/pull/1507:151,Performance,optimiz,optimized,151,"Remove `Coefficient.argument` which modify the object inplace for `Coefficient.replace` which return a modified copy.; `Copy` of string coefficient is optimized.; Initially from #1481, more discussion there. Some circular import in unrelated files have been moved inside function as they are causing problem in tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1507
https://github.com/qutip/qutip/pull/1507:311,Testability,test,tests,311,"Remove `Coefficient.argument` which modify the object inplace for `Coefficient.replace` which return a modified copy.; `Copy` of string coefficient is optimized.; Initially from #1481, more discussion there. Some circular import in unrelated files have been moved inside function as they are causing problem in tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1507
https://github.com/qutip/qutip/issues/1508:208,Deployability,release,release,208,"Hello,; I'm the Lead developer of [netket](https://github.com/netket/netket), a jax-based framework for using Machine-Learning techiques to study quantum systems (open and closed). We are finalising the next release and as I am a big fan of extensibility, I would like our two frameworks to coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:3013,Deployability,integrat,integrate,3013,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:596,Integrability,interface,interface,596,"Hello,; I'm the Lead developer of [netket](https://github.com/netket/netket), a jax-based framework for using Machine-Learning techiques to study quantum systems (open and closed). We are finalising the next release and as I am a big fan of extensibility, I would like our two frameworks to coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:1123,Integrability,interface,interface,1123,"ng techiques to study quantum systems (open and closed). We are finalising the next release and as I am a big fan of extensibility, I would like our two frameworks to coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)di",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:1498,Integrability,interface,interface,1498,"onvert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:2182,Integrability,interface,interface,2182,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:2371,Integrability,interface,interface,2371,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:2912,Integrability,interface,interface,2912,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:3013,Integrability,integrat,integrate,3013,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:1932,Performance,perform,perform,1932,"s` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:118,Usability,Learn,Learning,118,"Hello,; I'm the Lead developer of [netket](https://github.com/netket/netket), a jax-based framework for using Machine-Learning techiques to study quantum systems (open and closed). We are finalising the next release and as I am a big fan of extensibility, I would like our two frameworks to coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:1313,Usability,simpl,simply,1313," coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:1861,Usability,simpl,simplest-to-use,1861,"s` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/issues/1508:2539,Usability,simpl,simple,2539,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1508
https://github.com/qutip/qutip/pull/1509:156,Testability,test,tests,156,"**Description**; Fixes #1504 and changes signature of `rand_ket` as [requested](https://github.com/qutip/qutip/issues/1504#issuecomment-823455134). . Added tests to check behavior of `rand_ket` by checking shape of output when - both N and dims are specified, only dims is specified and finally only N is specified. . **Changelog**; Fixes typo in random objects and changes signature of rand_ket",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1509
https://github.com/qutip/qutip/pull/1510:64,Deployability,install,install,64,"This makes a `qutip[full]` target for pip, to make it easier to install qutip and all its optional dependencies.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1510
https://github.com/qutip/qutip/pull/1510:99,Integrability,depend,dependencies,99,"This makes a `qutip[full]` target for pip, to make it easier to install qutip and all its optional dependencies.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1510
https://github.com/qutip/qutip/issues/1539:350,Availability,down,downloads,350,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1539
https://github.com/qutip/qutip/issues/1539:180,Deployability,deploy,deployment,180,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1539
https://github.com/qutip/qutip/issues/1539:285,Deployability,release,release,285,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1539
https://github.com/qutip/qutip/issues/1539:471,Deployability,Release,Releases,471,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1539
https://github.com/qutip/qutip/issues/1539:1273,Deployability,patch,patching,1273,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1539
https://github.com/qutip/qutip/issues/1539:968,Usability,guid,guide-visualization-,968,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1539
https://github.com/qutip/qutip/pull/1511:317,Availability,down,download,317,"Updates the README to point various links at the new places in the documentation (this cannot be merged until qutip/qutip-doc#142 is merged and the docs are re-built on the website). As part of this, I tidied up the sections quite a lot and grouped similar ones together to make it a bit easier to read. I added some download and installation badges as well (see #983). Probably the best way to look at this PR is looking at [the rendered version on my fork](https://github.com/jakelishman/qutip/tree/update-readme#qutip-quantum-toolbox-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1511
https://github.com/qutip/qutip/pull/1511:0,Deployability,Update,Updates,0,"Updates the README to point various links at the new places in the documentation (this cannot be merged until qutip/qutip-doc#142 is merged and the docs are re-built on the website). As part of this, I tidied up the sections quite a lot and grouped similar ones together to make it a bit easier to read. I added some download and installation badges as well (see #983). Probably the best way to look at this PR is looking at [the rendered version on my fork](https://github.com/jakelishman/qutip/tree/update-readme#qutip-quantum-toolbox-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1511
https://github.com/qutip/qutip/pull/1511:330,Deployability,install,installation,330,"Updates the README to point various links at the new places in the documentation (this cannot be merged until qutip/qutip-doc#142 is merged and the docs are re-built on the website). As part of this, I tidied up the sections quite a lot and grouped similar ones together to make it a bit easier to read. I added some download and installation badges as well (see #983). Probably the best way to look at this PR is looking at [the rendered version on my fork](https://github.com/jakelishman/qutip/tree/update-readme#qutip-quantum-toolbox-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1511
https://github.com/qutip/qutip/pull/1511:501,Deployability,update,update-readme,501,"Updates the README to point various links at the new places in the documentation (this cannot be merged until qutip/qutip-doc#142 is merged and the docs are re-built on the website). As part of this, I tidied up the sections quite a lot and grouped similar ones together to make it a bit easier to read. I added some download and installation badges as well (see #983). Probably the best way to look at this PR is looking at [the rendered version on my fork](https://github.com/jakelishman/qutip/tree/update-readme#qutip-quantum-toolbox-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1511
https://github.com/qutip/qutip/issues/1540:128,Deployability,deploy,deploying,128,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1540
https://github.com/qutip/qutip/issues/1540:210,Deployability,update,updates,210,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1540
https://github.com/qutip/qutip/issues/1540:851,Deployability,deploy,deployed,851,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1540
https://github.com/qutip/qutip/issues/1540:545,Usability,guid,guide,545,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1540
https://github.com/qutip/qutip/issues/1540:602,Usability,guid,guide,602,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1540
https://github.com/qutip/qutip/issues/1512:371,Usability,clear,clearly,371,"**Issue**; In the codebase, the weight for setting the unit trace condition in the steadystate function should be set according to the documentation to the average value of the (nonzero) elements in the Liouvillian L, if not specified explicitly. However in the code the weight is set as ; ```python; ss_args['weight'] = np.mean(np.abs(A.data.data.max())); ```; which is clearly different as it just set to the maximum value in the Liouvillian matrix A and hence the mean and abs are meaningless. I think this could be an overlooked mistake, or else just a mistake in the documentation of the parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1512
https://github.com/qutip/qutip/pull/1513:299,Security,hash,hashes,299,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:698,Testability,log,log,698,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:746,Testability,log,log,746,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:829,Testability,log,log,829,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:1075,Testability,log,logically,1075," if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change be",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:1637,Testability,test,tested,1637," an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:1853,Testability,test,tests,1853,"w you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` - it's near the very bottom of the list), unless you enjoy looking through a binary tonne of commits. Also, I'm laughing at the diff-stat line `+14,785 | -1`. It's the `-1` that makes it art.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:2282,Testability,test,tests,2282,"w you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` - it's near the very bottom of the list), unless you enjoy looking through a binary tonne of commits. Also, I'm laughing at the diff-stat line `+14,785 | -1`. It's the `-1` that makes it art.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/pull/1513:56,Usability,simpl,simply,56,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1513
https://github.com/qutip/qutip/issues/1514:115,Modifiability,Config,Configuring,115,"**Describe the bug**; Source tarball taken from PyPI https://pypi.org/project/qutip/ fails without git:; ```; ===> Configuring for py38-qutip-4.6.0; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""setup.py"", line 231, in <module>; options = process_options(); File ""setup.py"", line 45, in process_options; options = _determine_version(options); File ""setup.py"", line 127, in _determine_version; git_out = subprocess.run(; File ""/usr/local/lib/python3.8/subprocess.py"", line 493, in run; with Popen(*popenargs, **kwargs) as process:; File ""/usr/local/lib/python3.8/subprocess.py"", line 858, in __init__; self._execute_child(args, executable, preexec_fn, close_fds,; File ""/usr/local/lib/python3.8/subprocess.py"", line 1704, in _execute_child; raise child_exception_type(errno_num, err_msg, err_filename); FileNotFoundError: [Errno 2] No such file or directory: 'git'; ```. git shouldn't be required because PyPI != GitHub and it is expected to be just a directory and not a cloned git repository.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1514
https://github.com/qutip/qutip/pull/1541:536,Availability,error,errors,536,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1541:68,Deployability,release,release,68,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1541:276,Deployability,release,releases,276,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1541:292,Deployability,release,release,292,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1541:484,Deployability,install,installed,484,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1541:584,Deployability,release,release,584,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1541:48,Modifiability,variab,variable,48,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1541
https://github.com/qutip/qutip/pull/1543:198,Availability,error,errors,198,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1543:317,Availability,error,errors,317,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1543:35,Deployability,release,release,35,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1543:484,Deployability,install,install,484,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1543:556,Deployability,update,updated,556,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1543:726,Deployability,release,release,726,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1543:392,Testability,test,test,392,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1543
https://github.com/qutip/qutip/pull/1544:24,Deployability,release,release,24,"Simon managed the 4.6.1 release using the current version of the release documentation, and we identified lots of places where it wasn't as clear as it could have been. This is a new pass at the same documentation trying to improve it. There are points of the website and documentation procedures that we want to update as well, but at the moment we're just trying to document what you do _right now_.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1544
https://github.com/qutip/qutip/pull/1544:65,Deployability,release,release,65,"Simon managed the 4.6.1 release using the current version of the release documentation, and we identified lots of places where it wasn't as clear as it could have been. This is a new pass at the same documentation trying to improve it. There are points of the website and documentation procedures that we want to update as well, but at the moment we're just trying to document what you do _right now_.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1544
https://github.com/qutip/qutip/pull/1544:313,Deployability,update,update,313,"Simon managed the 4.6.1 release using the current version of the release documentation, and we identified lots of places where it wasn't as clear as it could have been. This is a new pass at the same documentation trying to improve it. There are points of the website and documentation procedures that we want to update as well, but at the moment we're just trying to document what you do _right now_.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1544
https://github.com/qutip/qutip/pull/1544:140,Usability,clear,clear,140,"Simon managed the 4.6.1 release using the current version of the release documentation, and we identified lots of places where it wasn't as clear as it could have been. This is a new pass at the same documentation trying to improve it. There are points of the website and documentation procedures that we want to update as well, but at the moment we're just trying to document what you do _right now_.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1544
https://github.com/qutip/qutip/pull/1546:24,Deployability,release,released,24,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:57,Deployability,update,update,57,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:104,Deployability,configurat,configuration,104,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:138,Deployability,update,updates,138,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:180,Deployability,release,release,180,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:279,Deployability,release,releases,279,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:431,Deployability,release,release,431,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1546:104,Modifiability,config,configuration,104,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1546
https://github.com/qutip/qutip/pull/1548:80,Deployability,release,release,80,This is the changelog for 4.6.1 that we forgot to merge when we made the actual release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1548
https://github.com/qutip/qutip/pull/1549:108,Usability,guid,guidelines,108,"This file has been added and removed a few times, but GitHub likes it if; we have it. The main contributing guidelines remain in the actual; documentation, so this just replicates the readme and points to the main; version. I think the UnitaryHack guidelines say we should have it, too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1549
https://github.com/qutip/qutip/pull/1549:248,Usability,guid,guidelines,248,"This file has been added and removed a few times, but GitHub likes it if; we have it. The main contributing guidelines remain in the actual; documentation, so this just replicates the readme and points to the main; version. I think the UnitaryHack guidelines say we should have it, too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1549
https://github.com/qutip/qutip/pull/1550:355,Integrability,depend,depending,355,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1550
https://github.com/qutip/qutip/pull/1550:274,Safety,safe,safe,274,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1550
https://github.com/qutip/qutip/pull/1550:299,Testability,test,test,299,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1550
https://github.com/qutip/qutip/pull/1550:515,Testability,log,logarithmic,515,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1550
https://github.com/qutip/qutip/pull/1550:983,Testability,log,logarithmic,983,"in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each); 4.63 ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1550
https://github.com/qutip/qutip/pull/1551:541,Availability,failure,failure,541,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:205,Deployability,integrat,integration,205,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2007,Deployability,install,install,2007,"t there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You sho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2238,Deployability,install,install,2238,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2427,Deployability,install,install,2427,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:205,Integrability,integrat,integration,205,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:336,Integrability,depend,dependency,336,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2030,Integrability,depend,dependencies,2030,"t there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You sho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2254,Integrability,depend,dependencies,2254,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2337,Integrability,depend,dependencies,2337,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:3034,Integrability,message,message,3034,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2512,Modifiability,variab,variables,2512,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:261,Performance,concurren,concurrent,261,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1360,Performance,concurren,concurrent,1360," add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1694,Performance,concurren,concurrent,1694,"ery test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning fi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:3045,Safety,avoid,avoid,3045,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:285,Security,access,access,285,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:22,Testability,test,testing,22,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:422,Testability,test,tests,422,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:668,Testability,test,test,668,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:779,Testability,test,tested,779,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:838,Testability,test,tests,838,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:947,Testability,test,testing,947,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1015,Testability,test,test,1015,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1100,Testability,test,test,1100,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1156,Testability,test,tests,1156,"r us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1187,Testability,test,testing,1187,"r us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1298,Testability,test,tests,1298," access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPAC",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1474,Testability,test,test,1474," add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1501,Testability,test,tests,1501," currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are rea",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1534,Testability,test,test,1534," currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are rea",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:1765,Testability,test,test,1765,"er, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that ski",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2082,Testability,test,tested,2082,"t there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You sho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2633,Testability,test,testing,2633,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2679,Testability,test,tests,2679,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/pull/1551:2823,Testability,test,testing,2823,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1551
https://github.com/qutip/qutip/issues/1552:174,Availability,avail,available,174,"It has been pointed out by collaborators that it may be nice to add the following in the Readme, ; “If you use QuTiP in your research, please cite the original QuTiP papers, available here: https://dml.riken.jp/?s=QuTiP .” for a more direct link to the QuTiP papers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1552
https://github.com/qutip/qutip/pull/1553:406,Deployability,Update,Update,406,"**Description**; Re-implement entropy_relative. This function was implemented in March 2012, but then removed a month later. After some digging, it appears that the reason the function was removed is that it assumed the eigenvectors of the density matrices were identical (and in the same order). After some reading of Nielsen & Chuang, I have re-implemented it to address the issue. **Still todo**; - [x] Update the documentation.; - [ ] Add an example to an example notebook.; - [x] Add some tests for specific cases where we know what the answer should be.; - [x] Stretch goal: Vectorize the calculation of P_ij and the rest of the loop as much as we can (but let's make sure the answers are correct first). **Changelog**; Re-implement entropy_relative which returns the quantum relative entropy between two density matrices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1553
https://github.com/qutip/qutip/pull/1553:494,Testability,test,tests,494,"**Description**; Re-implement entropy_relative. This function was implemented in March 2012, but then removed a month later. After some digging, it appears that the reason the function was removed is that it assumed the eigenvectors of the density matrices were identical (and in the same order). After some reading of Nielsen & Chuang, I have re-implemented it to address the issue. **Still todo**; - [x] Update the documentation.; - [ ] Add an example to an example notebook.; - [x] Add some tests for specific cases where we know what the answer should be.; - [x] Stretch goal: Vectorize the calculation of P_ij and the rest of the loop as much as we can (but let's make sure the answers are correct first). **Changelog**; Re-implement entropy_relative which returns the quantum relative entropy between two density matrices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1553
https://github.com/qutip/qutip/pull/1555:47,Security,certificate,certificates,47,"Not quite all links we refer to have valid SSL certificates, so we leave those ones be. **Changelog**; Convert http links to https",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1555
https://github.com/qutip/qutip/pull/1556:471,Integrability,depend,depending,471,"**Description**; This PR attempts to add version checks for resolving deprecation warnings for `matplotlib` in the `bloch` and `visualization` modules. Specifically, it attempts to resolve warnings related to `matplotlib>=3.4` and `matplotlib>=3.3`. Places where the change has been made:; - `proj3d.proj_transform`; - `Axes3D`. Thanks!. **Related issues or PRs**; Fix #1503 and #1502. **Changelog**; Added a version checking condition to handle specific functionalities depending on the `matplotlib` version.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1556
https://github.com/qutip/qutip/pull/1557:47,Availability,error,error,47,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1557
https://github.com/qutip/qutip/pull/1557:283,Availability,error,error,283,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1557
https://github.com/qutip/qutip/pull/1557:358,Availability,error,error,358,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1557
https://github.com/qutip/qutip/pull/1557:91,Usability,guid,guide,91,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1557
https://github.com/qutip/qutip/pull/1557:402,Usability,guid,guide,402,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1557
https://github.com/qutip/qutip/pull/1558:158,Availability,error,error,158,Description; Fixes TypeError: 'Axes3D' object is not iterable when running the code from the tutorial. Related issues or PRs; #799 . Changelog; Fixed runtime error in http://qutip.org/docs/latest/guide/guide-bloch.html#generating-images-for-animation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1558
https://github.com/qutip/qutip/pull/1558:196,Usability,guid,guide,196,Description; Fixes TypeError: 'Axes3D' object is not iterable when running the code from the tutorial. Related issues or PRs; #799 . Changelog; Fixed runtime error in http://qutip.org/docs/latest/guide/guide-bloch.html#generating-images-for-animation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1558
https://github.com/qutip/qutip/pull/1558:202,Usability,guid,guide-bloch,202,Description; Fixes TypeError: 'Axes3D' object is not iterable when running the code from the tutorial. Related issues or PRs; #799 . Changelog; Fixed runtime error in http://qutip.org/docs/latest/guide/guide-bloch.html#generating-images-for-animation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1558
https://github.com/qutip/qutip/issues/1559:752,Availability,error,error,752,"I am trying to determine the relationship between Delta and the frequency of this graph. I put all the code that creates the pulse into a for loop and replaced Delta with ""x"" so the loop can run over different values. For each Delta (""x""), I use lmfit to fit the curve to a decaying oscillation equation and determine its frequency, then I plot the fit. I've noticed that the fit is worse for the lower values of Delta in the for loop. I think restricting the fit to the region over which the pulse actually acts can improve it. The pulse occurs from 0 to 0.5e-5 seconds which is half the length of the times array (1e-5). len(times) outputs 1000, so I thought I could accomplish this by writing times[0:500] and results.expect[1][0:500], but I get an error. Code:. from lmfit import Minimizer, Parameters, report_fit. h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = gub/h #omega; w0 = 5e9 # omega0 is the rotating frame frequency. gamma_phi = 999000; gamma_minus = 1000. epsilon = gub/h*(2cmath.pi); Delta = gub_AC/h(2*cmath.pi). H0 = (w-w0)/2 * sz #+ Delta/2*sy. times=np.linspace(0, 0.00001, 1000); state0=(state_z_plus)/(np.sqrt(1)). for x in range(2000000,10000000,900000):. def pulse(t0,t1,t):; return np.heaviside(t-t0,2e-9)-np.heaviside(t-t1,2e-9). def H1_coeff(t,args):; t0=args['t0'] #pulse start time; t1=args['t1'] #pulse end time; phi=args['phi'] #phase; return x*pulse(t0,t1,t)*np.sin((w-w0)*t+phi). args = {""t0"":0,""t1"":0.5e-5 ,""phi"":(1/4)*np.pi}. H = [H0,[sx,H1_coeff]]. results=q.mesolve(H, state0, times, e_ops=[sx, sy, sz],c_ops=[cmath.sqrt(gamma_phi/2)*sz,cmath.sqrt(gamma_minus)*sm], options=qutip_options, args=args). def fcn2min(params, x, data):; amp = params['amp']; shift = params['shift']; omega = params['omega']; decay = params['decay']; model = amp * np.sin(x*omega + shift) * np.exp(-x*x*decay); return model - data. params = Parameters(); params.add",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1559
https://github.com/qutip/qutip/issues/1560:489,Availability,error,error,489,"Hi,; I'm trying to use `mesolve` using a sampled hamiltonian to be interpolated (_list array format_ according to [the doc](https://qutip.org/docs/latest/apidoc/functions.html?highlight=mesolve#module-qutip.mesolve)) with a `tlist` that isn't the time list `times` of the Hamiltonian coefficients, but a sublist `eval_times` of `times`. This method works fine and returns the results at `eval_times` when `c_ops=[]`, but if I specify collapse operators, I get a `tlist are not compatible` error. Here is an example of what I'm saying.; ```python; times = np.linspace(0, 1, 100); x = np.cos(2*np.pi * times); eval_times=times[0:-1:3]; rho = qutip.basis(2, 0).proj(); ham = qutip.QobjEvo([[qutip.sigmax(), x]], tlist=times); qutip.mesolve(ham, rho0=rho, tlist=eval_times, c_ops=[]) # works fine; collapse = [qutip.qeye(2)] ; qutip.mesolve(ham, rho0=rho, tlist=times, c_ops=collapse) # works fine as well; qutip.mesolve(ham, rho0=rho, tlist=eval_times, c_ops=collapse) # raises `tlist are not compatible` error; ```. Do you have any idea what might cause this behaviour ? I believe this might be an issue with the `mesolve` solver, since when you don't specify `c_ops`, you use `sesolve`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1560
https://github.com/qutip/qutip/issues/1560:1002,Availability,error,error,1002,"Hi,; I'm trying to use `mesolve` using a sampled hamiltonian to be interpolated (_list array format_ according to [the doc](https://qutip.org/docs/latest/apidoc/functions.html?highlight=mesolve#module-qutip.mesolve)) with a `tlist` that isn't the time list `times` of the Hamiltonian coefficients, but a sublist `eval_times` of `times`. This method works fine and returns the results at `eval_times` when `c_ops=[]`, but if I specify collapse operators, I get a `tlist are not compatible` error. Here is an example of what I'm saying.; ```python; times = np.linspace(0, 1, 100); x = np.cos(2*np.pi * times); eval_times=times[0:-1:3]; rho = qutip.basis(2, 0).proj(); ham = qutip.QobjEvo([[qutip.sigmax(), x]], tlist=times); qutip.mesolve(ham, rho0=rho, tlist=eval_times, c_ops=[]) # works fine; collapse = [qutip.qeye(2)] ; qutip.mesolve(ham, rho0=rho, tlist=times, c_ops=collapse) # works fine as well; qutip.mesolve(ham, rho0=rho, tlist=eval_times, c_ops=collapse) # raises `tlist are not compatible` error; ```. Do you have any idea what might cause this behaviour ? I believe this might be an issue with the `mesolve` solver, since when you don't specify `c_ops`, you use `sesolve`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1560
https://github.com/qutip/qutip/pull/1561:345,Availability,failure,failure,345,"Previously, passing a Hamiltonian to `mesolve` which used ""array"" time dependence with a tlist not equal to `mesolve`'s would fail if any constant collapse operators were present. This was because `mesolve` was a little over-zealous in promoting `c_ops` to time-dependent `QobjEvo` using the `mesolve` time list. This would cause an unnecessary failure if the Hamiltonian was a `QobjEvo` specified previously with a different tlist. Fix #1560. #### Changelog; - Specialise exception types in ``QobjEvo`` failure paths; - Fix ``tlist`` ``QobjEvo`` with constant collapse operators in ``mesolve``; - 2-element list elements in ``QobjEvo`` specifiers can now be any iterable type, not just ``list``",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1561
https://github.com/qutip/qutip/pull/1561:504,Availability,failure,failure,504,"Previously, passing a Hamiltonian to `mesolve` which used ""array"" time dependence with a tlist not equal to `mesolve`'s would fail if any constant collapse operators were present. This was because `mesolve` was a little over-zealous in promoting `c_ops` to time-dependent `QobjEvo` using the `mesolve` time list. This would cause an unnecessary failure if the Hamiltonian was a `QobjEvo` specified previously with a different tlist. Fix #1560. #### Changelog; - Specialise exception types in ``QobjEvo`` failure paths; - Fix ``tlist`` ``QobjEvo`` with constant collapse operators in ``mesolve``; - 2-element list elements in ``QobjEvo`` specifiers can now be any iterable type, not just ``list``",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1561
https://github.com/qutip/qutip/pull/1561:71,Integrability,depend,dependence,71,"Previously, passing a Hamiltonian to `mesolve` which used ""array"" time dependence with a tlist not equal to `mesolve`'s would fail if any constant collapse operators were present. This was because `mesolve` was a little over-zealous in promoting `c_ops` to time-dependent `QobjEvo` using the `mesolve` time list. This would cause an unnecessary failure if the Hamiltonian was a `QobjEvo` specified previously with a different tlist. Fix #1560. #### Changelog; - Specialise exception types in ``QobjEvo`` failure paths; - Fix ``tlist`` ``QobjEvo`` with constant collapse operators in ``mesolve``; - 2-element list elements in ``QobjEvo`` specifiers can now be any iterable type, not just ``list``",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1561
https://github.com/qutip/qutip/pull/1561:262,Integrability,depend,dependent,262,"Previously, passing a Hamiltonian to `mesolve` which used ""array"" time dependence with a tlist not equal to `mesolve`'s would fail if any constant collapse operators were present. This was because `mesolve` was a little over-zealous in promoting `c_ops` to time-dependent `QobjEvo` using the `mesolve` time list. This would cause an unnecessary failure if the Hamiltonian was a `QobjEvo` specified previously with a different tlist. Fix #1560. #### Changelog; - Specialise exception types in ``QobjEvo`` failure paths; - Fix ``tlist`` ``QobjEvo`` with constant collapse operators in ``mesolve``; - 2-element list elements in ``QobjEvo`` specifiers can now be any iterable type, not just ``list``",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1561
https://github.com/qutip/qutip/pull/1562:17,Testability,Test,Tests,17,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1562
https://github.com/qutip/qutip/pull/1562:174,Testability,test,test,174,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1562
https://github.com/qutip/qutip/pull/1562:292,Testability,test,tests,292,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1562
https://github.com/qutip/qutip/pull/1562:345,Testability,test,test,345,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1562
https://github.com/qutip/qutip/pull/1562:512,Testability,test,tests,512,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1562
https://github.com/qutip/qutip/pull/1563:96,Deployability,Release,Release,96,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.4 to 1.26.5.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:185,Deployability,release,releases,185,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.4 to 1.26.5.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:205,Deployability,release,releases,205,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.4 to 1.26.5.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:523,Deployability,Update,Updated,523,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.4 to 1.26.5.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:1141,Deployability,Update,Updated,1141,"ithub.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Pytho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:1487,Deployability,Release,Release,1487,"></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09dd",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:1812,Deployability,Update,Update,1812,"ub.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3120,Deployability,update,updates,3120,"9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4272,Deployability,upgrade,upgrade,4272,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4448,Deployability,upgrade,upgrade,4448,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4618,Deployability,upgrade,upgrade,4618,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:2838,Integrability,Depend,Dependabot,2838,"s://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:2878,Integrability,depend,dependabot-badges,2878,"s://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:2937,Integrability,depend,dependency-name,2937,"bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3100,Integrability,depend,dependabot-security-updates,3100,"9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3157,Integrability,Depend,Dependabot,3157,"=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3303,Integrability,depend,dependabot,3303,"1""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3332,Integrability,depend,dependabot-automerge-start,3332,"href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3370,Integrability,depend,dependabot-automerge-end,3370,"href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3422,Integrability,Depend,Dependabot,3422,"bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3489,Integrability,Depend,Dependabot,3489,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3539,Integrability,depend,dependabot,3539,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3583,Integrability,depend,dependabot,3583,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3680,Integrability,depend,dependabot,3680,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3749,Integrability,depend,dependabot,3749,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3840,Integrability,depend,dependabot,3840,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3933,Integrability,depend,dependabot,3933,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3993,Integrability,depend,dependabot,3993,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4039,Integrability,Depend,Dependabot,4039,"1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4125,Integrability,depend,dependabot,4125,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4191,Integrability,Depend,Dependabot,4191,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4301,Integrability,depend,dependabot,4301,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4367,Integrability,Depend,Dependabot,4367,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4477,Integrability,depend,dependabot,4477,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4500,Integrability,depend,dependency,4500,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4540,Integrability,Depend,Dependabot,4540,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4578,Integrability,depend,dependency,4578,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4647,Integrability,depend,dependabot,4647,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4766,Integrability,depend,dependabot,4766,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:4891,Integrability,depend,dependabot,4891,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:5016,Integrability,depend,dependabot,5016,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:595,Performance,perform,performance,595,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.4 to 1.26.5.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:1213,Performance,perform,performance,1213,"uote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:1638,Performance,perform,performance,1638,"plitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3069,Security,secur,security-vulnerabilities,3069,"9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:3111,Security,secur,security-updates,3111,"9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:5162,Security,secur,security,5162,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:5203,Security,Secur,Security,5203,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1563:2678,Testability,test,test,2678,">; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependab",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1563
https://github.com/qutip/qutip/pull/1564:10,Deployability,update,updates,10,Changelog updates for v4.6.2.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1564
https://github.com/qutip/qutip/pull/1565:0,Deployability,Release,Release,0,Release for 4.6.2 version.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1565
https://github.com/qutip/qutip/issues/1566:1954,Deployability,Install,Installed,1954,"state import steadystate; from qutip.correlation import correlation_2op_2t; import numpy as np. H = 2 * np.pi * 0.1 * sigmax(). c1 = correlation_2op_2t(; H,; state0=None,; tlist = [0, 0.1],; taulist = [0],; c_ops=[sigmay()],; a_op=sigmaz(),; b_op=sigmax(),; ). ss = steadystate(H, [sigmay()]); c2 = correlation_2op_2t(; H,; state0=ss,; tlist = [0, 0.1],; taulist = [0],; c_ops=[sigmay()],; a_op=sigmaz(),; b_op=sigmax(),; ); print(c1); print(c2); ```; The terminal out put is; ```; [[0.+0.j]]; [[0.+0.j]; [0.+0.j]]; ```. **Expected behavior**; `c1` and `c2` should be the same. **Your Environment**; ```zsh; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.0; Numpy Version: 1.20.2; Scipy Version: 1.6.3; Cython Version: None; Matplotlib Version: 3.4.1; Python Version: 3.8.5; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/vladimir/.local/share/virtualenvs/phonon-bundles-5Sbweyp4/lib/python3.8/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. **Additional context**; This is easy to solve, I can open a PR. I've also noticed that some 1t correlation functions have t and tau defined in the documentation, but t should be 0 instead.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1566
https://github.com/qutip/qutip/issues/1566:2025,Deployability,Install,Installation,2025,"state import steadystate; from qutip.correlation import correlation_2op_2t; import numpy as np. H = 2 * np.pi * 0.1 * sigmax(). c1 = correlation_2op_2t(; H,; state0=None,; tlist = [0, 0.1],; taulist = [0],; c_ops=[sigmay()],; a_op=sigmaz(),; b_op=sigmax(),; ). ss = steadystate(H, [sigmay()]); c2 = correlation_2op_2t(; H,; state0=ss,; tlist = [0, 0.1],; taulist = [0],; c_ops=[sigmay()],; a_op=sigmaz(),; b_op=sigmax(),; ); print(c1); print(c2); ```; The terminal out put is; ```; [[0.+0.j]]; [[0.+0.j]; [0.+0.j]]; ```. **Expected behavior**; `c1` and `c2` should be the same. **Your Environment**; ```zsh; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.0; Numpy Version: 1.20.2; Scipy Version: 1.6.3; Cython Version: None; Matplotlib Version: 3.4.1; Python Version: 3.8.5; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/vladimir/.local/share/virtualenvs/phonon-bundles-5Sbweyp4/lib/python3.8/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. **Additional context**; This is easy to solve, I can open a PR. I've also noticed that some 1t correlation functions have t and tau defined in the documentation, but t should be 0 instead.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1566
https://github.com/qutip/qutip/issues/1566:294,Integrability,message,messages,294,"**Describe the bug**; I want to compute the 2op_2t correlation function for a problem that I have. The documentation says that the steady state will be computed if I pass `state0=None`. In the source code, whenever this is passed, the time list `tlist` gets overridden to `[0]`. No warnings or messages are shown to the user that whatever previous `tlist` the user passed is being overridden. I think either a warning or the possibility that the list is not overridden should be the default behaviour. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; from qutip import *; from qutip.steadystate import steadystate; from qutip.correlation import correlation_2op_2t; import numpy as np. H = 2 * np.pi * 0.1 * sigmax(). c1 = correlation_2op_2t(; H,; state0=None,; tlist = [0, 0.1],; taulist = [0],; c_ops=[sigmay()],; a_op=sigmaz(),; b_op=sigmax(),; ). ss = steadystate(H, [sigmay()]); c2 = correlation_2op_2t(; H,; state0=ss,; tlist = [0, 0.1],; taulist = [0],; c_ops=[sigmay()],; a_op=sigmaz(),; b_op=sigmax(),; ); print(c1); print(c2); ```; The terminal out put is; ```; [[0.+0.j]]; [[0.+0.j]; [0.+0.j]]; ```. **Expected behavior**; `c1` and `c2` should be the same. **Your Environment**; ```zsh; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.0; Numpy Version: 1.20.2; Scipy Version: 1.6.3; Cython Version: None; Matplotlib Version: 3.4.1; Python Version: 3.8.5; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platfor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1566
https://github.com/qutip/qutip/pull/1567:200,Usability,Guid,Guide,200,"**Description**. The word ""then"" is mistyped in the sentence ""If the operator is Hermitian, **than** the output will always be real"". **Related issues or PRs**. None. **Changelog**. Corrected typo in Guide / Manipulating States and Operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1567
https://github.com/qutip/qutip/issues/1571:834,Availability,avail,available,834,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:904,Availability,avail,available,904,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:487,Energy Efficiency,adapt,adaptive,487,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:533,Integrability,depend,depending,533,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:487,Modifiability,adapt,adaptive,487,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:581,Modifiability,refactor,refactoring,581,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:461,Safety,detect,detected,461,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:251,Security,access,access,251,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1571:325,Usability,progress bar,progress bar,325,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1571
https://github.com/qutip/qutip/issues/1572:304,Testability,log,logic,304,"How does unit() function works in qutip. Generally in matrices, when we have to find the normalized matrices, we find the square root of sum of squares of all the elements and divide each element with the result. Is it the same thing happens when we use unit() function? Or I just want to understand the logic behind unit() function. Regards,; Ganesh M",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1572
https://github.com/qutip/qutip/pull/1574:305,Availability,down,down,305,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:1346,Availability,error,errors,1346,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:25,Deployability,patch,patch,25,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:91,Testability,test,testing,91,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:517,Testability,test,testing,517,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:654,Testability,log,logically,654,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:897,Testability,log,log,897,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:1360,Testability,test,testing,1360,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1574:670,Usability,simpl,simpler,670,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1574
https://github.com/qutip/qutip/pull/1575:266,Security,access,access,266,"Some minor pep8 fixes in files I might touch soon with regards to moving to the Numpy 1.17 random-number generation. There's a bunch of seemingly dead code in `mcsolve` about a ""diagonal"" system? Seems to have a few logic bugs in it at the very least, and no way to access it. I fixed one about `e_ops`, but looking at the log, seems like the whole system might not be needed. **Changelog**: pep8 changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1575
https://github.com/qutip/qutip/pull/1575:216,Testability,log,logic,216,"Some minor pep8 fixes in files I might touch soon with regards to moving to the Numpy 1.17 random-number generation. There's a bunch of seemingly dead code in `mcsolve` about a ""diagonal"" system? Seems to have a few logic bugs in it at the very least, and no way to access it. I fixed one about `e_ops`, but looking at the log, seems like the whole system might not be needed. **Changelog**: pep8 changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1575
https://github.com/qutip/qutip/pull/1575:323,Testability,log,log,323,"Some minor pep8 fixes in files I might touch soon with regards to moving to the Numpy 1.17 random-number generation. There's a bunch of seemingly dead code in `mcsolve` about a ""diagonal"" system? Seems to have a few logic bugs in it at the very least, and no way to access it. I fixed one about `e_ops`, but looking at the log, seems like the whole system might not be needed. **Changelog**: pep8 changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1575
https://github.com/qutip/qutip/pull/1576:98,Testability,log,logic,98,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1576
https://github.com/qutip/qutip/pull/1576:293,Testability,log,logic,293,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1576
https://github.com/qutip/qutip/pull/1576:5,Usability,simpl,simplifies,5,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1576
https://github.com/qutip/qutip/pull/1576:77,Usability,simpl,simpler,77,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1576
https://github.com/qutip/qutip/pull/1576:284,Usability,simpl,simplify,284,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1576
https://github.com/qutip/qutip/pull/1577:151,Availability,error,errors,151,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1577
https://github.com/qutip/qutip/pull/1577:406,Availability,error,errors,406,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1577
https://github.com/qutip/qutip/pull/1577:4,Modifiability,plugin,plugin,4,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1577
https://github.com/qutip/qutip/pull/1577:321,Performance,load,load,321,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1577
https://github.com/qutip/qutip/pull/1577:577,Safety,detect,detection,577,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1577
https://github.com/qutip/qutip/pull/1578:4,Testability,test,tests,4,Add tests for previously untested function in states and operators and parametrize some of the existing tests.; Should improve the coverall by about 100 lines. **Changelog**; Improve test coverage of states and operators functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1578
https://github.com/qutip/qutip/pull/1578:104,Testability,test,tests,104,Add tests for previously untested function in states and operators and parametrize some of the existing tests.; Should improve the coverall by about 100 lines. **Changelog**; Improve test coverage of states and operators functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1578
https://github.com/qutip/qutip/pull/1578:183,Testability,test,test,183,Add tests for previously untested function in states and operators and parametrize some of the existing tests.; Should improve the coverall by about 100 lines. **Changelog**; Improve test coverage of states and operators functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1578
https://github.com/qutip/qutip/pull/1579:463,Availability,redundant,redundant,463,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1579:5,Deployability,update,updates,5,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1579:127,Deployability,update,updates,127,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1579:555,Deployability,update,update,555,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1579:896,Deployability,update,update,896,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1579:353,Safety,detect,detection,353,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1579:463,Safety,redund,redundant,463,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1579
https://github.com/qutip/qutip/pull/1580:138,Deployability,install,install,138,"This file included GPL'd code, which is incompatible with QuTiP's 3-clause BSD licence. Instead, we rely on the user to have a functional install of the file (it's been included in TeXLive since at least 2014). See qutip/qutip#1579. **Changelog**: removed vendored version of LaTeX package `qcircuit`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1580
https://github.com/qutip/qutip/pull/1582:207,Availability,error,errors,207,**Description**; `pyximport` raises a deprecation warning due to importing `imp` instead of `importlib`. I silenced it. It was causing some problem in qutip-tensorflow testing as all warnings are treated as errors. Let me know if I should have proceeded in a different way. . **Changelog**; Silenced deprecation warning from `pyximport`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1582
https://github.com/qutip/qutip/pull/1582:168,Testability,test,testing,168,**Description**; `pyximport` raises a deprecation warning due to importing `imp` instead of `importlib`. I silenced it. It was causing some problem in qutip-tensorflow testing as all warnings are treated as errors. Let me know if I should have proceeded in a different way. . **Changelog**; Silenced deprecation warning from `pyximport`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1582
https://github.com/qutip/qutip/pull/1583:895,Availability,error,error,895,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:2805,Availability,error,errors,2805,"his limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of memory.; Needed 78.52 MB, but only allowed to use 0.00 MB. Increase `precompute_memory` to raise limit, or; set to `None` to suppress warning.; array( ... ); ```; To suppress the warning, and always use the iterative approach, you can set `precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calcu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:5368,Energy Efficiency,efficient,efficient,5368," - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text; │ original │ prev def │ prev pre │ cur def │ cur pre; ────────────┼───────────┼───────────┼───────────┼───────────┼──────────; 11, ket 5 │ 126.07 µs │ 133.02 µs │ 89.63 µs │ 108.95 µs │ 25.12 µs; 11, ket 32 │ 192.49 µs │ 197.88 µs │ 90.91 µs │ 172.13 µs │ 29.33 µs; 11, dm 5 │ 481.68 µs │ 440.45 µs │ 316.93 µs │ 304.86 µs │ 161.00 µs; 11, dm 32 │ 4.69 ms │ 1.87 ms │ 1.66 ms │ 1.07 ms │ 823.49 µs; │ │ │ │ │; 101, ket 5 │ 570.59 µs │ 566.65 µs │ 501.86 µs │ 463.96 µs │ 329.25 µs; 101, ket 32 │ 1.61 ms │ 1.43 ms │ 751.97 µs │ 1.34 ms │ 507.20 µs; 101, dm 5 │ 2.51 ms │ 3.51 ms │ 2.20 ms │ 2.62 ms │ 1.72 ms; 101, dm 32 │ 42.91 ms │ 26.84 ms │ 19.73 ms │ 23.30 ms │ 16.30 ms; │ │ │ │ │; 401, ket 5 │ 10.56 ms │ 13.50 ms │ 7.91 ms │ 11.95 ms │ 5.28 ms; 401, ket 32 │ 34.44 ms │ 43.73 ms │ 10.37 ms │ 41.17 ms │ 7.70 ms; 401, dm 5 │ 46.85 ms │ 57.51 ms │ 33.19 ms │ 52.30 ms │ 26.71 ms; 401, dm 32 │ 1.05 s │ 411.32 ms │ 273.93 ms │ 428.32 ms │ 246.59 ms; ```. You can see that there are huge benefits to the precomputation, even compared to the previous precomputation implementation. This makes calling in a loop much much more efficient. #### Changelog. Large feature, authored by @dweigand (Daniel Weigand) and me (Jake). Add new Husimi Q algorithms, improving the speed for density matrices, and giving a near order-of-magnitude improvement when calculating the Q function for many different states (using the new `qutip.QFunc` class, instead of the `qutip.qfunc` function).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:851,Integrability,interface,interface,851,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:287,Modifiability,rewrite,rewrite,287,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:622,Performance,cache,cached,622,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:1487,Performance,cache,caches,1487,"r to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of memory.; Needed 78.52 MB, but only allowed to use 0.00 MB. Increase `precompute_memory` to raise limit, or; set to `None` to suppress warning.; array( ... ); ```; To suppress the warning, and always use the iterative approach, you can set `precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:1532,Safety,avoid,avoid,1532,"r to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of memory.; Needed 78.52 MB, but only allowed to use 0.00 MB. Increase `precompute_memory` to raise limit, or; set to `None` to suppress warning.; array( ... ); ```; To suppress the warning, and always use the iterative approach, you can set `precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:437,Security,access,access,437,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:185,Testability,log,logically,185,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:945,Testability,test,testing,945,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:3221,Testability,benchmark,benchmarks,3221,"precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/pull/1583:3308,Testability,test,tests,3308," inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text; │ original │ prev def │ prev pre │ cur def │ cur pre; ────────────┼───────────┼───────────┼───────────┼───────────┼──────────; 11, ket 5 │ 126.07 µs │ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1583
https://github.com/qutip/qutip/issues/1585:3942,Deployability,Install,Installed,3942,"ckages\qutip\mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . c:\users\mizuno\research\py38\lib\site-packages\qutip\mesolve.py in _test_liouvillian_dimensions(L_dims, rho_dims); 330 raise ValueError(""Liouvillian had nonsquare dims: "" + str(L_dims)); 331 if not ((L_dims[1] == rho_dims) or (L_dims[1] == rho_dims[0])):; --> 332 raise ValueError("""".join([; 333 ""incompatible Liouvillian and state dimensions: "",; 334 str(L_dims), "" and "", str(rho_dims),. ValueError: incompatible Liouvillian and state dimensions: [[[2, 2], [2, 2]], [[2, 2], [2, 2]]] and [[4], [4]]; ```. My environment is following.; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.6.2; Cython Version: 0.29.22; Matplotlib Version: 3.4.1; Python Version: 3.8.9; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: c:\users\mizuno\research\py38\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1585
https://github.com/qutip/qutip/issues/1585:4014,Deployability,Install,Installation,4014,"ckages\qutip\mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . c:\users\mizuno\research\py38\lib\site-packages\qutip\mesolve.py in _test_liouvillian_dimensions(L_dims, rho_dims); 330 raise ValueError(""Liouvillian had nonsquare dims: "" + str(L_dims)); 331 if not ((L_dims[1] == rho_dims) or (L_dims[1] == rho_dims[0])):; --> 332 raise ValueError("""".join([; 333 ""incompatible Liouvillian and state dimensions: "",; 334 str(L_dims), "" and "", str(rho_dims),. ValueError: incompatible Liouvillian and state dimensions: [[[2, 2], [2, 2]], [[2, 2], [2, 2]]] and [[4], [4]]; ```. My environment is following.; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.6.2; Cython Version: 0.29.22; Matplotlib Version: 3.4.1; Python Version: 3.8.9; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: c:\users\mizuno\research\py38\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1585
https://github.com/qutip/qutip/issues/1585:112,Security,validat,validation,112,"Hi, I report a strange behavior of `propagator` method.; `propagator` with collapse operator fails to dimension validation on composite system. At first, single system works correctly.; ```python; import qutip as qt; ```; ```python; H = qt.sigmaz(); c_ops = [np.sqrt(1) * qt.sigmam()]; tlist = np.linspace(0, 10, 201); rho0 = qt.ket2dm(qt.basis(2, 0)).unit(). # mesolve; rho_f = qt.mesolve(H, rho0, tlist, c_ops=c_ops).states[-1]. # using propagator; F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)). rho_f.overlap(rho_f_prop); ```. The output is; ```; 0.9999092149599982; ```; (I'm not sure why this is not 1. I guess it's limited by the numerical precision.). However, same code on composite system fails.; The differences are only `H`, `c_ops`, and `rho0`, using `qt.tensor(*, qt.qeye(2))`; ```python; H = qt.tensor(qt.sigmaz(), qt.qeye(2)); c_ops = [np.sqrt(1) * qt.tensor(qt.sigmam(), qt.qeye(2))]; tlist = np.linspace(0, 10, 201); rho0 = qt.ket2dm(qt.tensor(qt.basis(2, 0), qt.basis(2, 0))).unit(). # mesolve; rho_f = qt.mesolve(H, rho0, tlist, c_ops=c_ops).states[-1]. # using propagator; F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)). rho_f.overlap(rho_f_prop); ```. ```; ---------------------------------------------------------------------------; ValueError Traceback (most recent call last); <ipython-input-1-551bcc27bcfa> in <module>; 8 ; 9 # using propagator; ---> 10 F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; 11 rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)); 12 . c:\users\mizuno\research\py38\lib\site-packages\qutip\propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 239 rho0 = Qobj(sp.csr_matrix(([1], ([row_idx], [col_idx])),; 240 shape=(N, N), dtype=complex)); --> 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; 242 _saf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1585
https://github.com/qutip/qutip/issues/1587:1037,Availability,error,error,1037,"Hello everybody,; I am using QuTiP 4.6.2. I created the Hamiltonian for a harmonic oscillator in terms of; 1) the momentum and position operator; 2) the number operators. The first case runs into trouble always whereas the second does not. The issue: When I use the momentum and position operator to create the Hamiltonian, the eigenvalues of two states in the middle of the series of states come out to be equal. this happens no matter how many Hilbert space levels I use. This issue is not there when I use the creation and annihilation operators. I should be getting identical results in both cases. Can someone point out where have I gone wrong? The code below is copied from my interpreter to show the results.; ```python; >>> import qutip as qt; >>> N = 10 # no. of states; >>> om = 1; >>> p = qt.momentum(N); >>> x = qt.position(N); >>> H = 0.5*(p*p+ om*om*x*x); >>> evals, evecs = H.eigenstates(); >>> print(""evals: "",evals); evals: [0.5 1.5 2.5 3.5 4.5 4.5 5.5 6.5 7.5 8.5]; >>> # evals[4] and evals[5] are equal (Why?) <<< The error; >>> evecs[4]==evecs[5]; False; >>> # now let us use the creation and annihilation operators to create the Hamiltonian; >>> ad = qt.create(N); >>> a = ad.dag(); >>> H1 = (ad*a + 0.5)*om; >>> evals1, evecs1 = H1.eigenstates(); >>> print(""evals1: "",evals1) # <<< No trouble here; evals1: [0.5 1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5]; >>>; ```. I would appreciate any input to fix my understanding. I am not opening a bug report because I am not sure. . With my best regards; Subimal Deb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1587
https://github.com/qutip/qutip/pull/1588:536,Safety,sanity check,sanity checking,536,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1588
https://github.com/qutip/qutip/pull/1588:1015,Safety,sanity check,sanity checks,1015,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1588
https://github.com/qutip/qutip/pull/1588:1446,Testability,test,tested,1446,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1588
https://github.com/qutip/qutip/pull/1588:1460,Testability,test,test,1460,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1588
https://github.com/qutip/qutip/pull/1588:1520,Testability,Test,Tests,1520,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1588
https://github.com/qutip/qutip/pull/1589:171,Safety,sanity check,sanity checks,171,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1589
https://github.com/qutip/qutip/pull/1589:601,Testability,test,tested,601,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1589
https://github.com/qutip/qutip/pull/1589:615,Testability,test,test,615,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1589
https://github.com/qutip/qutip/pull/1589:675,Testability,Test,Tests,675,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1589
https://github.com/qutip/qutip/pull/1590:287,Availability,error,error,287,"**Description**; Set `operator-ket`'s `superrep` to `'super'`.; `operator-ket` are the states of super operators, ie. `super @ operator-ket` make sense but `oper @ operator-ket` does not. So it is natural that they have an attached `superrep`. This will make `choi_super @ operator-ket` error unless care is taken in making the `superrep` match. TODO? Have `to_choi`, etc. work for operator-kets?; closes #1586",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1590
https://github.com/qutip/qutip/issues/1591:1286,Modifiability,coupling,coupling,1286,"and the Qutip version of the code. The code just set up the parameters of the system and builds the Hamiltonian and Lindblad equation. Finally it solves de equation with mesolve, and compute a 2op_2t correlation function. For the case of Qutip, the mesolve spends about 15 minutes for solving the equation, and 3 hours the correlation function. For the case of matlab toolbox, it takes a few seconds solving the equation and one minte computing the correlation function. Finally, if I try ode2solve in qutip, it solves the equation in just 45 seconds. Is there something I am doing terribly wrong with the mesolver in qutip?, or is just that the matlab toolbox has a much better solver?. Thank you very much,. Joaquin Guimbao. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import * ; qutip.settings.num_cpus = 16; import math. # Set parameters. g2 = 1 # coupling strength with EM field; kappa = 1 # cavity dissipation rate; gamma = 1 # atom dissipation rate; gamma12 = 1 # dipole-coupling dissipation; N = 2 # number of cavity fock states; dephasing = 10000 # pure dephasing; g=np.random.rand(10)*500 # dipole coupling strengths between 5 atoms. tlist = np.linspace(0,60,200). # intial state; psi0 = tensor(basis(N,0), basis(2,1),basis(2,0),basis(2,0),basis(2,0),basis(2,0)) # start with an excited atom; rho0 = psi0 * psi0.dag();. # operators; a = tensor(destroy(N),qeye(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm1 = tensor(qeye(N),destroy(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm2 = tensor(qeye(N),qeye(2),destroy(2),qeye(2),qeye(2),qeye(2));; sm3 = tensor(qeye(N),qeye(2),qeye(2),destroy(2),qeye(2),qeye(2));; sm4 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),destroy(2),qeye(2));; sm5 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),qeye(2),destroy(2));. # Hamiltonian; H = sm1.dag()*sm1+sm2.dag()*sm2 +sm3.dag()*sm3+ sm4.dag()*sm4+sm5.dag()*sm5+a.dag()*a + g2*(sm1.dag()*a+sm1*a.dag())+g2*(sm2.dag()*a+sm2*a.dag()) + g2*(sm3.dag()*a+sm3*a.dag())+g2*(sm4.dag()*a+sm4*a.dag(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1591
https://github.com/qutip/qutip/issues/1591:1412,Modifiability,coupling,coupling,1412,"and the Qutip version of the code. The code just set up the parameters of the system and builds the Hamiltonian and Lindblad equation. Finally it solves de equation with mesolve, and compute a 2op_2t correlation function. For the case of Qutip, the mesolve spends about 15 minutes for solving the equation, and 3 hours the correlation function. For the case of matlab toolbox, it takes a few seconds solving the equation and one minte computing the correlation function. Finally, if I try ode2solve in qutip, it solves the equation in just 45 seconds. Is there something I am doing terribly wrong with the mesolver in qutip?, or is just that the matlab toolbox has a much better solver?. Thank you very much,. Joaquin Guimbao. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import * ; qutip.settings.num_cpus = 16; import math. # Set parameters. g2 = 1 # coupling strength with EM field; kappa = 1 # cavity dissipation rate; gamma = 1 # atom dissipation rate; gamma12 = 1 # dipole-coupling dissipation; N = 2 # number of cavity fock states; dephasing = 10000 # pure dephasing; g=np.random.rand(10)*500 # dipole coupling strengths between 5 atoms. tlist = np.linspace(0,60,200). # intial state; psi0 = tensor(basis(N,0), basis(2,1),basis(2,0),basis(2,0),basis(2,0),basis(2,0)) # start with an excited atom; rho0 = psi0 * psi0.dag();. # operators; a = tensor(destroy(N),qeye(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm1 = tensor(qeye(N),destroy(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm2 = tensor(qeye(N),qeye(2),destroy(2),qeye(2),qeye(2),qeye(2));; sm3 = tensor(qeye(N),qeye(2),qeye(2),destroy(2),qeye(2),qeye(2));; sm4 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),destroy(2),qeye(2));; sm5 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),qeye(2),destroy(2));. # Hamiltonian; H = sm1.dag()*sm1+sm2.dag()*sm2 +sm3.dag()*sm3+ sm4.dag()*sm4+sm5.dag()*sm5+a.dag()*a + g2*(sm1.dag()*a+sm1*a.dag())+g2*(sm2.dag()*a+sm2*a.dag()) + g2*(sm3.dag()*a+sm3*a.dag())+g2*(sm4.dag()*a+sm4*a.dag(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1591
https://github.com/qutip/qutip/issues/1591:1542,Modifiability,coupling,coupling,1542,"e equation with mesolve, and compute a 2op_2t correlation function. For the case of Qutip, the mesolve spends about 15 minutes for solving the equation, and 3 hours the correlation function. For the case of matlab toolbox, it takes a few seconds solving the equation and one minte computing the correlation function. Finally, if I try ode2solve in qutip, it solves the equation in just 45 seconds. Is there something I am doing terribly wrong with the mesolver in qutip?, or is just that the matlab toolbox has a much better solver?. Thank you very much,. Joaquin Guimbao. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import * ; qutip.settings.num_cpus = 16; import math. # Set parameters. g2 = 1 # coupling strength with EM field; kappa = 1 # cavity dissipation rate; gamma = 1 # atom dissipation rate; gamma12 = 1 # dipole-coupling dissipation; N = 2 # number of cavity fock states; dephasing = 10000 # pure dephasing; g=np.random.rand(10)*500 # dipole coupling strengths between 5 atoms. tlist = np.linspace(0,60,200). # intial state; psi0 = tensor(basis(N,0), basis(2,1),basis(2,0),basis(2,0),basis(2,0),basis(2,0)) # start with an excited atom; rho0 = psi0 * psi0.dag();. # operators; a = tensor(destroy(N),qeye(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm1 = tensor(qeye(N),destroy(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm2 = tensor(qeye(N),qeye(2),destroy(2),qeye(2),qeye(2),qeye(2));; sm3 = tensor(qeye(N),qeye(2),qeye(2),destroy(2),qeye(2),qeye(2));; sm4 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),destroy(2),qeye(2));; sm5 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),qeye(2),destroy(2));. # Hamiltonian; H = sm1.dag()*sm1+sm2.dag()*sm2 +sm3.dag()*sm3+ sm4.dag()*sm4+sm5.dag()*sm5+a.dag()*a + g2*(sm1.dag()*a+sm1*a.dag())+g2*(sm2.dag()*a+sm2*a.dag()) + g2*(sm3.dag()*a+sm3*a.dag())+g2*(sm4.dag()*a+sm4*a.dag())+g2*(sm5.dag()*a+sm5*a.dag())+g[0]*(sm1.dag()*sm2+sm2.dag()*sm1)+g[1]*(sm1.dag()*sm3+sm3.dag()*sm1)+g[2]*(sm1.dag()*sm4+sm4.dag()*sm1)+g[3]*(sm1.dag()*s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1591
https://github.com/qutip/qutip/pull/1593:132,Usability,simpl,simpler,132,"**Description**; The algorithm used in `enr_destroy` was extremely inefficient, with a triple loop. This PR replaces it with a much simpler algorithm with only a single loop. For `dims = [3,8,2,4,6,1,3]` and `Nexc = 6`, on my computer `enr_destroy(dims,Nexc)` took almost 4 s, with the new algorithm it takes 20 ms. I've checked that the output is identical. **Changelog**; Made enr_destroy significantly faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1593
https://github.com/qutip/qutip/pull/1594:471,Energy Efficiency,reduce,reduces,471,"**Description**; When the number of excitations in `state_number_enumerate` is limited, instead of iterating over all states and discarding the ones with too many excitations, directly choose the limits to only iterate over allowed states. As a small additional optimization, do not redo the same sum every time, but keep track of the sum within the algorithm. For the tests I've made, this is a factor of ~4-10 faster than the current version. Together with #1593, this reduces the runtime of `enr_destroy` (which uses `state_number_enumerate`) from almost 4s to 15 ms for the case I just treated, and another much bigger case takes 2.5 s now, while it hadn't finished after more than an hour with the previous version. Note that since the two PRs (this one and #1593) are somewhat related, it might make sense to combine them into a single one. I'd be happy to do that. **Changelog**; Made state_number_enumerate somewhat faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1594
https://github.com/qutip/qutip/pull/1594:262,Performance,optimiz,optimization,262,"**Description**; When the number of excitations in `state_number_enumerate` is limited, instead of iterating over all states and discarding the ones with too many excitations, directly choose the limits to only iterate over allowed states. As a small additional optimization, do not redo the same sum every time, but keep track of the sum within the algorithm. For the tests I've made, this is a factor of ~4-10 faster than the current version. Together with #1593, this reduces the runtime of `enr_destroy` (which uses `state_number_enumerate`) from almost 4s to 15 ms for the case I just treated, and another much bigger case takes 2.5 s now, while it hadn't finished after more than an hour with the previous version. Note that since the two PRs (this one and #1593) are somewhat related, it might make sense to combine them into a single one. I'd be happy to do that. **Changelog**; Made state_number_enumerate somewhat faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1594
https://github.com/qutip/qutip/pull/1594:369,Testability,test,tests,369,"**Description**; When the number of excitations in `state_number_enumerate` is limited, instead of iterating over all states and discarding the ones with too many excitations, directly choose the limits to only iterate over allowed states. As a small additional optimization, do not redo the same sum every time, but keep track of the sum within the algorithm. For the tests I've made, this is a factor of ~4-10 faster than the current version. Together with #1593, this reduces the runtime of `enr_destroy` (which uses `state_number_enumerate`) from almost 4s to 15 ms for the case I just treated, and another much bigger case takes 2.5 s now, while it hadn't finished after more than an hour with the previous version. Note that since the two PRs (this one and #1593) are somewhat related, it might make sense to combine them into a single one. I'd be happy to do that. **Changelog**; Made state_number_enumerate somewhat faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1594
https://github.com/qutip/qutip/issues/1595:660,Modifiability,config,config,660,"**Is your feature request related to a problem? Please describe.**; Traditionally in Hinton diagrams, any positive number is represented by a fully white square, while any negative number is represented by a fully black square. In the current implementation of `qutip.visualization.hinton`, however, each square is shaded such that numbers close to zero are represented by colors close to gray. While it is nice to be able to use shaded colormaps of this form, traditional Hinton diagrams (that is, thresholded at zero) can be easier to read when some elements that are close to zero can still have significant impact. **Describe the solution you'd like**; A `config` option or keyword argument that would allow using a threshold at zero. **Additional context**; Current Hinton diagram implementation (with colorblind safe mode turned off):. ![image](https://user-images.githubusercontent.com/31516/124228221-bb8ba800-dac0-11eb-8fc4-047ed79ecb1d.png). Current Hinton diagram implementation (with colorblind safe mode turned on):. ![image](https://user-images.githubusercontent.com/31516/124228374-fa216280-dac0-11eb-9e5c-095c1fd10373.png). Examples with thresholded colors (https://arxiv.org/pdf/1509.03770.pdf):. ![image](https://user-images.githubusercontent.com/31516/124228283-dcec9400-dac0-11eb-9067-7870f3dddf95.png); ![image](https://user-images.githubusercontent.com/31516/124228321-e970ec80-dac0-11eb-9006-c535f21c6f9b.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1595
https://github.com/qutip/qutip/issues/1595:818,Safety,safe,safe,818,"**Is your feature request related to a problem? Please describe.**; Traditionally in Hinton diagrams, any positive number is represented by a fully white square, while any negative number is represented by a fully black square. In the current implementation of `qutip.visualization.hinton`, however, each square is shaded such that numbers close to zero are represented by colors close to gray. While it is nice to be able to use shaded colormaps of this form, traditional Hinton diagrams (that is, thresholded at zero) can be easier to read when some elements that are close to zero can still have significant impact. **Describe the solution you'd like**; A `config` option or keyword argument that would allow using a threshold at zero. **Additional context**; Current Hinton diagram implementation (with colorblind safe mode turned off):. ![image](https://user-images.githubusercontent.com/31516/124228221-bb8ba800-dac0-11eb-8fc4-047ed79ecb1d.png). Current Hinton diagram implementation (with colorblind safe mode turned on):. ![image](https://user-images.githubusercontent.com/31516/124228374-fa216280-dac0-11eb-9e5c-095c1fd10373.png). Examples with thresholded colors (https://arxiv.org/pdf/1509.03770.pdf):. ![image](https://user-images.githubusercontent.com/31516/124228283-dcec9400-dac0-11eb-9067-7870f3dddf95.png); ![image](https://user-images.githubusercontent.com/31516/124228321-e970ec80-dac0-11eb-9006-c535f21c6f9b.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1595
https://github.com/qutip/qutip/issues/1595:1007,Safety,safe,safe,1007,"**Is your feature request related to a problem? Please describe.**; Traditionally in Hinton diagrams, any positive number is represented by a fully white square, while any negative number is represented by a fully black square. In the current implementation of `qutip.visualization.hinton`, however, each square is shaded such that numbers close to zero are represented by colors close to gray. While it is nice to be able to use shaded colormaps of this form, traditional Hinton diagrams (that is, thresholded at zero) can be easier to read when some elements that are close to zero can still have significant impact. **Describe the solution you'd like**; A `config` option or keyword argument that would allow using a threshold at zero. **Additional context**; Current Hinton diagram implementation (with colorblind safe mode turned off):. ![image](https://user-images.githubusercontent.com/31516/124228221-bb8ba800-dac0-11eb-8fc4-047ed79ecb1d.png). Current Hinton diagram implementation (with colorblind safe mode turned on):. ![image](https://user-images.githubusercontent.com/31516/124228374-fa216280-dac0-11eb-9e5c-095c1fd10373.png). Examples with thresholded colors (https://arxiv.org/pdf/1509.03770.pdf):. ![image](https://user-images.githubusercontent.com/31516/124228283-dcec9400-dac0-11eb-9067-7870f3dddf95.png); ![image](https://user-images.githubusercontent.com/31516/124228321-e970ec80-dac0-11eb-9006-c535f21c6f9b.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1595
https://github.com/qutip/qutip/issues/1597:2005,Integrability,message,message,2005,"was the dimension; 2) V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()) I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal because the HO is just shifted on the right of the x axis and its shape doesn't change. But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with dim = 8 for example, I found the following eigenvalues :; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407] . ; The problem is that the first eigenvalues have really decreased which seems not logical because with the x added, the potential should be slightly higher. I also use in parallel the PySlise package for Python which enables to solve Schödinger equation and finds eigenfunctions and eigenvalues and it gives me :; [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it was giving the good results for 1) and 2)); So I don't understant why qutip doesn't give me the same result, I know I use two different methods; qutip is just finding eigenvalues of a matrix and PySlise solve differential equations but when I don't use displacement operator both always give the same result. I tried to write the displacement operator my self with the create & destroy operators and the Glauber formula because I noticed that the commutation relations were not respected cause of the truncation but I didn't work. If anyone has any ideas I would be very grateful, I have already spent a lot of time looking and I am getting desperate.; I thank you for reading my message, I apologize for any spelling mistakes that may remain in my message, (I am in bachelor and English is not my native language); . **To Reproduce**; ```python; import qutip as qtp; import numpy as np; H = qtp.displace(8,3)*qtp.num(8)*(qtp.displace(8,3).dag())+0.5*qtp.qeye(8)+qtp.position(8); print(H.eigenenergies()); ```; The terminal out put is; ```; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1597
https://github.com/qutip/qutip/issues/1597:2074,Integrability,message,message,2074,"was the dimension; 2) V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()) I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal because the HO is just shifted on the right of the x axis and its shape doesn't change. But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with dim = 8 for example, I found the following eigenvalues :; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407] . ; The problem is that the first eigenvalues have really decreased which seems not logical because with the x added, the potential should be slightly higher. I also use in parallel the PySlise package for Python which enables to solve Schödinger equation and finds eigenfunctions and eigenvalues and it gives me :; [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it was giving the good results for 1) and 2)); So I don't understant why qutip doesn't give me the same result, I know I use two different methods; qutip is just finding eigenvalues of a matrix and PySlise solve differential equations but when I don't use displacement operator both always give the same result. I tried to write the displacement operator my self with the create & destroy operators and the Glauber formula because I noticed that the commutation relations were not respected cause of the truncation but I didn't work. If anyone has any ideas I would be very grateful, I have already spent a lot of time looking and I am getting desperate.; I thank you for reading my message, I apologize for any spelling mistakes that may remain in my message, (I am in bachelor and English is not my native language); . **To Reproduce**; ```python; import qutip as qtp; import numpy as np; H = qtp.displace(8,3)*qtp.num(8)*(qtp.displace(8,3).dag())+0.5*qtp.qeye(8)+qtp.position(8); print(H.eigenenergies()); ```; The terminal out put is; ```; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1597
https://github.com/qutip/qutip/issues/1597:1019,Testability,log,logical,1019,"urrently having an issue with the qutip.displace operator. I want to solve the dynamics of a 1D Hamiltonian which consists in two terms, the first one a displaced harmonic oscillator and the second one a cosine of the position operator.; Before writing all the Hamiltonian I tried several examples with different potentials : . 1) V(x) = 0.5*x**2 --> H_0 = num(dim)+0.5*qeye(dim) I found the good eigenvalues [0.5,1.5,2.5,....] no matter what was the dimension; 2) V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()) I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal because the HO is just shifted on the right of the x axis and its shape doesn't change. But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with dim = 8 for example, I found the following eigenvalues :; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407] . ; The problem is that the first eigenvalues have really decreased which seems not logical because with the x added, the potential should be slightly higher. I also use in parallel the PySlise package for Python which enables to solve Schödinger equation and finds eigenfunctions and eigenvalues and it gives me :; [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it was giving the good results for 1) and 2)); So I don't understant why qutip doesn't give me the same result, I know I use two different methods; qutip is just finding eigenvalues of a matrix and PySlise solve differential equations but when I don't use displacement operator both always give the same result. I tried to write the displacement operator my self with the create & destroy operators and the Glauber formula because I noticed that the commutation relations were not respected cause of the truncation but I didn't work. If anyone has any ideas I would be very grateful, I have already spent a lot of time looking and I am getting desperate.; I thank you for reading my message, I",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1597
https://github.com/qutip/qutip/pull/1601:223,Integrability,wrap,wrapper,223,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:1563,Integrability,interface,interfaces,1563,m https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:2520,Integrability,depend,dependent,2520, we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:2636,Integrability,depend,dependent,2636, we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:2708,Integrability,depend,dependent,2708, we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:3039,Integrability,wrap,wrapper,3039, we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:780,Modifiability,variab,variables,780,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:2655,Modifiability,coupling,coupling,2655, we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:684,Testability,test,tests,684,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:809,Testability,test,tests,809,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/pull/1601:1986,Usability,guid,guide,1986,BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1601
https://github.com/qutip/qutip/issues/1602:214,Integrability,depend,depending,214,"When calculating the propagators analytically it does not include the drift hamiltonian, which can result in a significantly different operator. This is particularly relevant to me as the drift hamiltonian changes depending on which qubit is being controlled because the basis is changed to a different rotating frame. This means I replace the drift when operating a pulse. If the drift is not included in the propagator calculation it results in a substantially incorrect matrix. I think there should be an include_drift=True/False option in the function definition which if true adds the drift hamiltonian before it exponentiates.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1602
https://github.com/qutip/qutip/pull/1603:140,Testability,test,test,140,"**Description**; In the analytical calculation of the circuit unitaries in `Processor`, the drift Hamiltonian was missing. Add it and add a test accordingly. Also fix a wrong docstring. **Related issues or PRs**; fix #1602 . **Changelog**; Add the missing drift Hamiltonian to the method `run_analytically` of `Processor`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1603
https://github.com/qutip/qutip/pull/1604:874,Availability,down,down,874,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:2413,Availability,error,error,2413,"n any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating over the dictionary could give the indices and states in any order, and it seems to me that `enr_thermal_dm`, which did exactly that, was not guaranteed to work).; - `state_number_index` and `state_index_number` now just call `np.ravel_multi_index` and `np.unravel_index`, which are exactly the same operations (mapping between linear and multi-index in a multidimensional array). These are faster and also include error checking. The previous code had no error checks (such as `state` being allowed for the given dims). . Since the behavior of the code has changed, but the differences should not be noticeable in most cases, I'm not sure if I should do anything else. . **Related issues or PRs**; This is in some sense a follow-up of #1594. . **Changelog**; Speed up state_number_enumerate, state_number_index, state_index_number, and add some error checking; Made enr_state_dictionaries return a list for idx2state.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:2454,Availability,error,error,2454,"n any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating over the dictionary could give the indices and states in any order, and it seems to me that `enr_thermal_dm`, which did exactly that, was not guaranteed to work).; - `state_number_index` and `state_index_number` now just call `np.ravel_multi_index` and `np.unravel_index`, which are exactly the same operations (mapping between linear and multi-index in a multidimensional array). These are faster and also include error checking. The previous code had no error checks (such as `state` being allowed for the given dims). . Since the behavior of the code has changed, but the differences should not be noticeable in most cases, I'm not sure if I should do anything else. . **Related issues or PRs**; This is in some sense a follow-up of #1594. . **Changelog**; Speed up state_number_enumerate, state_number_index, state_index_number, and add some error checking; Made enr_state_dictionaries return a list for idx2state.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:2844,Availability,error,error,2844,"n any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating over the dictionary could give the indices and states in any order, and it seems to me that `enr_thermal_dm`, which did exactly that, was not guaranteed to work).; - `state_number_index` and `state_index_number` now just call `np.ravel_multi_index` and `np.unravel_index`, which are exactly the same operations (mapping between linear and multi-index in a multidimensional array). These are faster and also include error checking. The previous code had no error checks (such as `state` being allowed for the given dims). . Since the behavior of the code has changed, but the differences should not be noticeable in most cases, I'm not sure if I should do anything else. . **Related issues or PRs**; This is in some sense a follow-up of #1594. . **Changelog**; Speed up state_number_enumerate, state_number_index, state_index_number, and add some error checking; Made enr_state_dictionaries return a list for idx2state.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:955,Integrability,depend,depending,955,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:1024,Integrability,interface,interface,1024,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:760,Testability,test,test,760,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:1357,Testability,test,test,1357,"ine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating over the dictionary could give the indices and states in any order, and it seems to me that `enr_thermal_dm`, which did exactly that, was not guaranteed to work).; - `state_number_index` and `state_index_number` now just call `np.ravel_multi_index` and `np.unravel_i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:30,Usability,simpl,simplify,30,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/pull/1604:667,Usability,simpl,simple,667,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1604
https://github.com/qutip/qutip/issues/1605:293,Availability,error,error,293,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:1094,Availability,Toler,Tolerances,1094," of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/pytho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:2299,Availability,error,error,2299,"olve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wrong with it ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:2456,Availability,error,error,2456,"olve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wrong with it ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:281,Deployability,integrat,integration,281,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:1022,Deployability,integrat,integrate,1022,"rouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 pr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:2287,Deployability,integrat,integration,2287,"olve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wrong with it ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:2444,Deployability,integrat,integration,2444,"olve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wrong with it ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:281,Integrability,integrat,integration,281,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:1022,Integrability,integrat,integrate,1022,"rouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 pr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:2287,Integrability,integrat,integration,2287,"olve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wrong with it ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:2444,Integrability,integrat,integration,2444,"olve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wrong with it ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:187,Modifiability,evolve,evolve,187,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:674,Modifiability,evolve,evolve,674,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:792,Safety,predict,predictions,792,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:1383,Safety,predict,predictions,1383,"s by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed numb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1605:1614,Safety,predict,predictions,1614," I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wro",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1605
https://github.com/qutip/qutip/issues/1606:63,Availability,error,error,63,"**Describe the bug**; qutip fails to import with the following error:; ```; Python 3.9.6 (default, Jun 28 2021, 19:24:41) ; [Clang 12.0.5 (clang-1205.0.22.9)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/opt/homebrew/lib/python3.9/site-packages/qutip/__init__.py"", line 115, in <module>; info = qutip.hardware_info.hardware_info(); File ""/opt/homebrew/lib/python3.9/site-packages/qutip/hardware_info.py"", line 133, in hardware_info; out = _mac_hardware_info(); File ""/opt/homebrew/lib/python3.9/site-packages/qutip/hardware_info.py"", line 50, in _mac_hardware_info; results.update({'cpu_freq': int(float(os.popen('sysctl hw.cpufrequency'); IndexError: list index out of range; ```. This appears to be caused by Apple having removed hw.cpufrequency from the list of sysctl's (see below). **To Reproduce**; Installed qutip using homebrew/pip3 (after using the workaround of specifying OPENBLAS properly before building scipy etc... so that part is all sorted). Then python3 and import qutip. ```python; from qutip import identity; print(identity(2)); ```; The terminal output (aftrer I hacked up a workaround for this issue):; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; qutip successfully initializes :-). **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here.; ```; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead deve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:2760,Availability,error,error,2760,"z Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:710,Deployability,update,update,710,"**Describe the bug**; qutip fails to import with the following error:; ```; Python 3.9.6 (default, Jun 28 2021, 19:24:41) ; [Clang 12.0.5 (clang-1205.0.22.9)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/opt/homebrew/lib/python3.9/site-packages/qutip/__init__.py"", line 115, in <module>; info = qutip.hardware_info.hardware_info(); File ""/opt/homebrew/lib/python3.9/site-packages/qutip/hardware_info.py"", line 133, in hardware_info; out = _mac_hardware_info(); File ""/opt/homebrew/lib/python3.9/site-packages/qutip/hardware_info.py"", line 50, in _mac_hardware_info; results.update({'cpu_freq': int(float(os.popen('sysctl hw.cpufrequency'); IndexError: list index out of range; ```. This appears to be caused by Apple having removed hw.cpufrequency from the list of sysctl's (see below). **To Reproduce**; Installed qutip using homebrew/pip3 (after using the workaround of specifying OPENBLAS properly before building scipy etc... so that part is all sorted). Then python3 and import qutip. ```python; from qutip import identity; print(identity(2)); ```; The terminal output (aftrer I hacked up a workaround for this issue):; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; qutip successfully initializes :-). **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here.; ```; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead deve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:941,Deployability,Install,Installed,941,"**Describe the bug**; qutip fails to import with the following error:; ```; Python 3.9.6 (default, Jun 28 2021, 19:24:41) ; [Clang 12.0.5 (clang-1205.0.22.9)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/opt/homebrew/lib/python3.9/site-packages/qutip/__init__.py"", line 115, in <module>; info = qutip.hardware_info.hardware_info(); File ""/opt/homebrew/lib/python3.9/site-packages/qutip/hardware_info.py"", line 133, in hardware_info; out = _mac_hardware_info(); File ""/opt/homebrew/lib/python3.9/site-packages/qutip/hardware_info.py"", line 50, in _mac_hardware_info; results.update({'cpu_freq': int(float(os.popen('sysctl hw.cpufrequency'); IndexError: list index out of range; ```. This appears to be caused by Apple having removed hw.cpufrequency from the list of sysctl's (see below). **To Reproduce**; Installed qutip using homebrew/pip3 (after using the workaround of specifying OPENBLAS properly before building scipy etc... so that part is all sorted). Then python3 and import qutip. ```python; from qutip import identity; print(identity(2)); ```; The terminal output (aftrer I hacked up a workaround for this issue):; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; qutip successfully initializes :-). **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here.; ```; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead deve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:2317,Deployability,Install,Installed,2317,"data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; qutip successfully initializes :-). **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here.; ```; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.ca",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:2388,Deployability,Install,Installation,2388,"data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; qutip successfully initializes :-). **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here.; ```; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.ca",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:3288,Performance,cache,cacheconfig,3288,"kum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalcpu_max: 8; hw.serialdebugmode: 0; hw.tbfrequency: 24000000; hw.use_kernelmanagerd: 1; hw.use_recovery_securityd: 0; hw.targettype: J293; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:3325,Performance,cache,cachelinesize,3325,"kum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalcpu_max: 8; hw.serialdebugmode: 0; hw.tbfrequency: 24000000; hw.use_kernelmanagerd: 1; hw.use_recovery_securityd: 0; hw.targettype: J293; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:3348,Performance,cache,cachesize,3348,"kum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalcpu_max: 8; hw.serialdebugmode: 0; hw.tbfrequency: 24000000; hw.use_kernelmanagerd: 1; hw.use_recovery_securityd: 0; hw.targettype: J293; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1606:3610,Testability,log,logicalcpu,3610,"kum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalcpu_max: 8; hw.serialdebugmode: 0; hw.tbfrequency: 24000000; hw.use_kernelmanagerd: 1; hw.use_recovery_securityd: 0; hw.targettype: J293; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1606
https://github.com/qutip/qutip/issues/1607:792,Availability,error,error,792,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/issues/1607:891,Availability,error,error,891,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/issues/1607:1637,Availability,error,error,1637," to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see if `other` can be represented as a Qobj. . These two changes should probably go in a different PR. _Edit: added third option_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/issues/1607:448,Modifiability,Variab,Variable,448,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/issues/1607:1706,Performance,perform,perform,1706," to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see if `other` can be represented as a Qobj. . These two changes should probably go in a different PR. _Edit: added third option_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/issues/1607:1883,Performance,perform,perform,1883," to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see if `other` can be represented as a Qobj. . These two changes should probably go in a different PR. _Edit: added third option_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/issues/1607:462,Usability,simpl,simplicity,462,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1607
https://github.com/qutip/qutip/pull/1609:204,Availability,avail,available,204,"**Description**; With Coefficient, supporting func(t, **kwargs) in parallel to f(t, args) for function coefficient is mostly free. ; This signature is more 'pythonic' and would probably by appreciated if available. ; With this new scheme, `t` is positional and the `**kwargs` is needed even if unused.; For backward compatibility, we should not remove the old format. Example:; ```; def f(t, args):; return t*args['w']. def g(t, w, **kwargs):; return t*w. qevo_old = QobjEvo([qeye(3), f], args={'w':1}). qevo_new = QobjEvo([qeye(3), g], args={'w':1}). for t in any_ts:; qevo_old(t) == qevo_new(t); ```. **Changelog**; For time-depedent function, f(t, **args) is available with",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1609
https://github.com/qutip/qutip/pull/1609:662,Availability,avail,available,662,"**Description**; With Coefficient, supporting func(t, **kwargs) in parallel to f(t, args) for function coefficient is mostly free. ; This signature is more 'pythonic' and would probably by appreciated if available. ; With this new scheme, `t` is positional and the `**kwargs` is needed even if unused.; For backward compatibility, we should not remove the old format. Example:; ```; def f(t, args):; return t*args['w']. def g(t, w, **kwargs):; return t*w. qevo_old = QobjEvo([qeye(3), f], args={'w':1}). qevo_new = QobjEvo([qeye(3), g], args={'w':1}). for t in any_ts:; qevo_old(t) == qevo_new(t); ```. **Changelog**; For time-depedent function, f(t, **args) is available with",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1609
https://github.com/qutip/qutip/pull/1611:299,Availability,error,error,299,"**Description**; Before this fix the following two situations were incosinsten:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # This would perform a matrix multiplication as `__mul__` tries to convert matrix into `Qobj`.; matrix * qobj # This would raise an error as `__rmul__` assumed that matrix was a `Qobj`.; ```. I assumed that `qobj * matrix` behaviour is the correct one as it is explicitly programmed to work like that. With this fix `matrix * qobj` will first try to convert matrix to `Qobj` and perform a matmul between matrix and `Qobj`. **Related issues or PRs**; Issue #1607 is related to this although this PR does not close that issue. **Changelog**; __rmul__ now accepts as `other` an array_like that is understood by `Qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1611
https://github.com/qutip/qutip/pull/1611:180,Performance,perform,perform,180,"**Description**; Before this fix the following two situations were incosinsten:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # This would perform a matrix multiplication as `__mul__` tries to convert matrix into `Qobj`.; matrix * qobj # This would raise an error as `__rmul__` assumed that matrix was a `Qobj`.; ```. I assumed that `qobj * matrix` behaviour is the correct one as it is explicitly programmed to work like that. With this fix `matrix * qobj` will first try to convert matrix to `Qobj` and perform a matmul between matrix and `Qobj`. **Related issues or PRs**; Issue #1607 is related to this although this PR does not close that issue. **Changelog**; __rmul__ now accepts as `other` an array_like that is understood by `Qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1611
https://github.com/qutip/qutip/pull/1611:546,Performance,perform,perform,546,"**Description**; Before this fix the following two situations were incosinsten:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # This would perform a matrix multiplication as `__mul__` tries to convert matrix into `Qobj`.; matrix * qobj # This would raise an error as `__rmul__` assumed that matrix was a `Qobj`.; ```. I assumed that `qobj * matrix` behaviour is the correct one as it is explicitly programmed to work like that. With this fix `matrix * qobj` will first try to convert matrix to `Qobj` and perform a matmul between matrix and `Qobj`. **Related issues or PRs**; Issue #1607 is related to this although this PR does not close that issue. **Changelog**; __rmul__ now accepts as `other` an array_like that is understood by `Qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1611
https://github.com/qutip/qutip/issues/1613:80,Availability,error,error,80,"Hi friends,. I'm going to import qutip as . from qutip import *. but i get this error:. Traceback (most recent call last):; File ""D:\py\Master_solve.py"", line 4, in <module>; import qutip; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\__init__.py"", line 149, in <module>; from qutip.qobj import *; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\qobj.py"", line 60, in <module>; from qutip.fastsparse import fast_csr_matrix, fast_identity; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\fastsparse.py"", line 423, in <module>; from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult); ImportError: DLL load failed: The specified module could not be found. Any suggestion?Thanks in advance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1613
https://github.com/qutip/qutip/issues/1613:694,Performance,load,load,694,"Hi friends,. I'm going to import qutip as . from qutip import *. but i get this error:. Traceback (most recent call last):; File ""D:\py\Master_solve.py"", line 4, in <module>; import qutip; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\__init__.py"", line 149, in <module>; from qutip.qobj import *; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\qobj.py"", line 60, in <module>; from qutip.fastsparse import fast_csr_matrix, fast_identity; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\fastsparse.py"", line 423, in <module>; from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult); ImportError: DLL load failed: The specified module could not be found. Any suggestion?Thanks in advance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1613
https://github.com/qutip/qutip/pull/1614:36,Security,access,accesses,36,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1614
https://github.com/qutip/qutip/pull/1614:248,Testability,test,tests,248,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1614
https://github.com/qutip/qutip/pull/1614:362,Testability,test,tests,362,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1614
https://github.com/qutip/qutip/pull/1615:306,Availability,toler,tolerance,306,"**Description**; The `auto-tidyup` step is moved from `Qobj` to `CSR` operations as discussed in #1610.; Most methods which supported `auto-tidyup` still do, with the exceptions of does based on scalar product.; `__matmul__` and `__add__` already had a `if value != 0` check which was changed to support a tolerance.; This new conditions affect both the real and imaginary part together:; Previously : `[1+1e-15j, 1e-15+1e-15j]` -> `[1+0j, 0]`; Now : `[1+1e-15j, 1e-15+1e-15j]` -> `[1+1e-15j, 0]`; This can be changed if desired. `expm_csr` was the only function that is not covered by these changes. ; I added a `tidyup` keyword to `CSR.__init__` for it instead of using a decorator.; It could be dropped if we judge `tidyup` is not needed for `expm`. **Related issues or PRs**; #1610 . **Changelog**; Move auto-tidyup from Qobj to CSR function",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1615
https://github.com/qutip/qutip/issues/1616:910,Deployability,install,install,910,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1616
https://github.com/qutip/qutip/issues/1616:1180,Deployability,Install,Installed,1180,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1616
https://github.com/qutip/qutip/issues/1616:1252,Deployability,Install,Installation,1252,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1616
https://github.com/qutip/qutip/issues/1616:272,Usability,pause,pause,272,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1616
https://github.com/qutip/qutip/issues/1616:352,Usability,simpl,simply,352,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1616
https://github.com/qutip/qutip/issues/1617:106,Availability,error,error,106,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:792,Availability,error,error,792,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:3785,Availability,error,error,3785,"g()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:7067,Deployability,Install,Installed,7067,"/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 474, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1421, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"", line 299, in recompute_evolution; prop_comp._compute_prop_grad(k, j); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/propcomp.py"", line 272, in _compute_prop_grad; dyn._ensure_decomp_curr(k); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1437, in _ensure_decomp_curr; self._spectral_decomp(k); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1654, in _spectral_decomp; dims=self.dyn_dims); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/qobj.py"", line 292, in __init__; _tmp = sp.csr_matrix(inpt, dtype=complex, copy=do_copy); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/scipy/sparse/compressed.py"", line 88, in __init__; self._set_self(self.__class__(coo_matrix(arg1, dtype=dtype))); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/scipy/sparse/coo.py"", line 191, in __init__; self.row, self.col = M.nonzero(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/scipy/sparse/base.py"", line 287, in __bool__; raise ValueError(""The truth value of an array with more than one ""; ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all(). ```. I am using the following QuTiP environment:; QuTiP Version: 4.4.1; Numpy Version: 1.21.0; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.4.2; Python Version: 3.7.6; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64). Thank you for your help.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:626,Modifiability,coupling,coupling,626,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:843,Performance,optimiz,optimization,843,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:3199,Performance,optimiz,optimization,3199,"chi * (a.dag() * a * P_se) + chi * (b.dag() * b * P_ze) + chi * (c.dag() * c * P_te) + chi * (d.dag() * d * P_qe). row = np.array([1,1,2,2,3,3,3,3,4,4,4,4,5,5,6,6]); column = np.array([3,4,3,4,1,2,5,6,1,2,5,6,3,4,3,4]); data = np.array([-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1]). mapped=csr_matrix((data,(row,column)),shape=(N**4*2*2*2*2,N**4*2*2*2*2)); mapped=Qobj(mapped). n_ctrls=4 # Controls; ctrls = [sm.dag()*a+sm*a.dag()+sm.dag()*b+sm*b.dag()+zm.dag()*b+zm*b.dag()+zm.dag()*c+zm*c.dag()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:3363,Performance,optimiz,optimization,3363," (d.dag() * d * P_qe). row = np.array([1,1,2,2,3,3,3,3,4,4,4,4,5,5,6,6]); column = np.array([3,4,3,4,1,2,5,6,1,2,5,6,3,4,3,4]); data = np.array([-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1]). mapped=csr_matrix((data,(row,column)),shape=(N**4*2*2*2*2,N**4*2*2*2*2)); mapped=Qobj(mapped). n_ctrls=4 # Controls; ctrls = [sm.dag()*a+sm*a.dag()+sm.dag()*b+sm*b.dag()+zm.dag()*b+zm*b.dag()+zm.dag()*c+zm*c.dag()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anacon",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:3725,Performance,optimiz,optimized,3725,"g()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:4566,Performance,optimiz,optimizer,4566,"le_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; result.initial_fid_err = self.dynamics.fid_computer.get_fid_err(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 448, in get_fid_err; return np.abs(1 - self.get_fidelity()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 458, in get_fidelity; self.fid_norm_func(self.get_fidelity_prenorm()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 474, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1421, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"",",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:4720,Performance,optimiz,optimizer,4720,"rintout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; result.initial_fid_err = self.dynamics.fid_computer.get_fid_err(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 448, in get_fid_err; return np.abs(1 - self.get_fidelity()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 458, in get_fidelity; self.fid_norm_func(self.get_fidelity_prenorm()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 474, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1421, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"", line 299, in recompute_evolution; prop_comp._compute_prop_grad(k, j); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/propcom",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:384,Testability,log,logging,384,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:393,Testability,log,logger,393,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:402,Testability,log,logging,402,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:445,Testability,log,logging,445,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/issues/1617:493,Testability,log,logging,493,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1617
https://github.com/qutip/qutip/pull/1619:824,Deployability,update,update,824,"Previously .render(...) took fig and axes arguments and overwrote self.fig and self.axes if the arguments were None. The actual values of the arguments were completely discarded (!!). In addition, not supplying a value for fig and axes would overwrite the values passed to the constructor as Bloch(..., fig=fig, axes=axes). The new behaviour is as follows:. * If an external figure is passed to the constructor it is retained. * If no figure is supplied, .render() will create a figure if one has not been created yet, or if the figure has been closed, will recreate it. As a special case, it will *not* recreate *closed* figures inside Jupyter notebooks using the inline backend, because that closes figures at the end of every cell and displays closed figures quite happily. . * .render() will always call self.fig.canvas.update() to ensure that any existing figure that is already shown will be updated. * .show() will now always render the figure and call `IPython.display.display` (if running in an IPython terminal) or `fig.plot()` otherwise. Previously it was possible to cause .render() to raise obscure exceptions by, e.g., calling .render(), closing the figure, calling; .render() again. See, for example, https://github.com/qutip/qutip/issues/1616. Previously when running in an IPython shell `.show()` would have to be called twice to have any effect if no figure was passed in. Now it only needs to be called once. The external figure tracking was backported from Qiskit's copy of Bloch and was inspired by PR https://github.com/Qiskit/qiskit-terra/pull/1091/. **Related issues or PRs**. * fixes #1616; * inspired by https://github.com/Qiskit/qiskit-terra/pull/1091/; * issue with `.show()` under `IPython` mentioned in #1690. **Changelog**. More carefully track the state of the Bloch sphere figure and axes to prevent exceptions during rendering.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1619
https://github.com/qutip/qutip/pull/1619:898,Deployability,update,updated,898,"Previously .render(...) took fig and axes arguments and overwrote self.fig and self.axes if the arguments were None. The actual values of the arguments were completely discarded (!!). In addition, not supplying a value for fig and axes would overwrite the values passed to the constructor as Bloch(..., fig=fig, axes=axes). The new behaviour is as follows:. * If an external figure is passed to the constructor it is retained. * If no figure is supplied, .render() will create a figure if one has not been created yet, or if the figure has been closed, will recreate it. As a special case, it will *not* recreate *closed* figures inside Jupyter notebooks using the inline backend, because that closes figures at the end of every cell and displays closed figures quite happily. . * .render() will always call self.fig.canvas.update() to ensure that any existing figure that is already shown will be updated. * .show() will now always render the figure and call `IPython.display.display` (if running in an IPython terminal) or `fig.plot()` otherwise. Previously it was possible to cause .render() to raise obscure exceptions by, e.g., calling .render(), closing the figure, calling; .render() again. See, for example, https://github.com/qutip/qutip/issues/1616. Previously when running in an IPython shell `.show()` would have to be called twice to have any effect if no figure was passed in. Now it only needs to be called once. The external figure tracking was backported from Qiskit's copy of Bloch and was inspired by PR https://github.com/Qiskit/qiskit-terra/pull/1091/. **Related issues or PRs**. * fixes #1616; * inspired by https://github.com/Qiskit/qiskit-terra/pull/1091/; * issue with `.show()` under `IPython` mentioned in #1690. **Changelog**. More carefully track the state of the Bloch sphere figure and axes to prevent exceptions during rendering.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1619
https://github.com/qutip/qutip/pull/1620:436,Modifiability,flexible,flexible,436,"**Description**; I changed __mul__ behaviour following the discussion of issue #1607. However, the implementation details differ slightly from what was discussed there. The current behaviout of `__mul__(self, other)` is:; - If other is a `Qobj`: dispatch to `__matmul__`; - If not try dipatching to mul and return `NotImplemented` if `TypeError` is returned.; - The dispatcher now gets `other` instead of `complex(other)`. This is more flexible and allows specialisations to handle arbitrary scalar like objects (something extremely useful for qutip-tensorflow).; - Infer hermiticity and unitarity when possible trying complex(other). `__rmul__` now directly dispatches to `__mul__`. Any necessary check (casting to complex included) is done in `__mul__`. _No_ changes were required to `mul_dense` and `mul_csr` as `add_dense(data, value=np.array(1))` works. It internally tries `complex(np.array(1))` which is guaranteed to work. This is something I was very happy to find as I do not think that specialisations should return `NotImplemented` (although they still can if required). **Related issues or PRs**; Fixes issue #1611 . **Changelog**. - Qobj `__mul__` now handles consistently right and left multiplications of an arbitrary python object.; - `__mul__` is now more flexible passing `other` to the dispatcher instead of `complex(other)`.; - `qobj*np.array([1,2])` and `qobj*np.array([1,2])` (or any other numpy array that does not represent an scalar) now raise TypeError. This change is not backwards compatible (!!). _Edit: changed changelog and description_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1620
https://github.com/qutip/qutip/pull/1620:1274,Modifiability,flexible,flexible,1274,"**Description**; I changed __mul__ behaviour following the discussion of issue #1607. However, the implementation details differ slightly from what was discussed there. The current behaviout of `__mul__(self, other)` is:; - If other is a `Qobj`: dispatch to `__matmul__`; - If not try dipatching to mul and return `NotImplemented` if `TypeError` is returned.; - The dispatcher now gets `other` instead of `complex(other)`. This is more flexible and allows specialisations to handle arbitrary scalar like objects (something extremely useful for qutip-tensorflow).; - Infer hermiticity and unitarity when possible trying complex(other). `__rmul__` now directly dispatches to `__mul__`. Any necessary check (casting to complex included) is done in `__mul__`. _No_ changes were required to `mul_dense` and `mul_csr` as `add_dense(data, value=np.array(1))` works. It internally tries `complex(np.array(1))` which is guaranteed to work. This is something I was very happy to find as I do not think that specialisations should return `NotImplemented` (although they still can if required). **Related issues or PRs**; Fixes issue #1611 . **Changelog**. - Qobj `__mul__` now handles consistently right and left multiplications of an arbitrary python object.; - `__mul__` is now more flexible passing `other` to the dispatcher instead of `complex(other)`.; - `qobj*np.array([1,2])` and `qobj*np.array([1,2])` (or any other numpy array that does not represent an scalar) now raise TypeError. This change is not backwards compatible (!!). _Edit: changed changelog and description_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1620
https://github.com/qutip/qutip/pull/1621:1049,Availability,avail,available,1049,"Currently qutip.control.optimize_pulse supports four formats for `oper_dtype` (i.e. its internal representation of propagators and intermediate states). The four formats and their statuses before this PR are described below:. - `numpy.ndarray`: Working.; - `Qobj`: Working, except that some dimensions were lost in Qobj construction and using sparse eigenvector decomposition was broken.; - `scipy.sparse.csr_matrix`: Broken. There was an undefined variable referenced in the code to construct the propagators. Many code paths had no explicit support for them and assumed they worked the same as ndarrays in cases where they didn't.; - `anything matrix-like`: Broken for the same reasons as `csr_matrix` above. This PR removes support for last two oper_dtypes and fixes the `Qobj` one, leaving the situation as follows:. - `numpy.ndarray`: Working.; - `Qobj`: Working.; - `scipy.sparse.csr_matrix`: No longer supported.; - `anything matrix-like`: No longer supported. Note that `Qobj` uses sparse matrices internally, so CSR matrix support is still available via the `Qobj` oper_dtype. In QuTiP v5, only `Qobj` support will be retained since `Qobj` will support both sparse and dense representations via the data layer. **Related issues or PRs**; * Fixes #1617. **Changelog**; Fix qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems).; Remove qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1621
https://github.com/qutip/qutip/pull/1621:449,Modifiability,variab,variable,449,"Currently qutip.control.optimize_pulse supports four formats for `oper_dtype` (i.e. its internal representation of propagators and intermediate states). The four formats and their statuses before this PR are described below:. - `numpy.ndarray`: Working.; - `Qobj`: Working, except that some dimensions were lost in Qobj construction and using sparse eigenvector decomposition was broken.; - `scipy.sparse.csr_matrix`: Broken. There was an undefined variable referenced in the code to construct the propagators. Many code paths had no explicit support for them and assumed they worked the same as ndarrays in cases where they didn't.; - `anything matrix-like`: Broken for the same reasons as `csr_matrix` above. This PR removes support for last two oper_dtypes and fixes the `Qobj` one, leaving the situation as follows:. - `numpy.ndarray`: Working.; - `Qobj`: Working.; - `scipy.sparse.csr_matrix`: No longer supported.; - `anything matrix-like`: No longer supported. Note that `Qobj` uses sparse matrices internally, so CSR matrix support is still available via the `Qobj` oper_dtype. In QuTiP v5, only `Qobj` support will be retained since `Qobj` will support both sparse and dense representations via the data layer. **Related issues or PRs**; * Fixes #1617. **Changelog**; Fix qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems).; Remove qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1621
https://github.com/qutip/qutip/pull/1622:79,Availability,error,error,79,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1622
https://github.com/qutip/qutip/pull/1622:23,Testability,test,tests,23,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1622
https://github.com/qutip/qutip/pull/1622:253,Testability,test,tests,253,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1622
https://github.com/qutip/qutip/pull/1622:853,Testability,log,log,853,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1622
https://github.com/qutip/qutip/pull/1622:899,Testability,Test,Tests,899,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1622
https://github.com/qutip/qutip/issues/1623:11,Availability,error,error,11,"I get this error for anything less than nsteps = 1000000 (I've tried 5000, 10000, 50000, 100000, 500000) while using mesolve to get the dynamics of the system according to the Lindblad ME.; Details - It is a two qubit model, with both qubits coupled to baths and with inter-qubit coupling present. The solution for unit time with 100 divisions takes about 10 min but for any time interval greater than 1, I keep getting this error even with nsteps = 1000000, 5000000. Anything greater than that takes >2 hours to evaluate. ```python; import numpy as np; import matplotlib as plt; from qutip import *; from cmath import *; ```; Initial State:; ```; initialstate=tensor(fock_dm(2,0),fock_dm(2,0)); ```; Hamiltonian:; ```; epsilon=1; g=0.025; sigmaplus=0.5*(sigmax()+1j*sigmay()); sigmaminus=0.5*(sigmax()-1j*sigmay()); H=0.5*epsilon*(tensor(sigmaz()+qeye(2),qeye(2))+tensor(qeye(2),sigmaz()+qeye(2))) + g*(tensor(sigmaplus,sigmaminus)+tensor(sigmaminus, sigmaplus)). ```; Jump operators:; ```; gamma1=0.1; gamma2=0.05; T1=2; T2=0.05. diss_coeff=[cmath.sqrt(gamma1*(1/exp(epsilon/T1)-1)),cmath.sqrt(gamma1*exp(epsilon/T1)*(1/exp(epsilon/T1)-1)), cmath.sqrt(gamma2*(1/exp(epsilon/T2)-1)), cmath.sqrt(gamma2*exp(epsilon/T2)*(1/exp(epsilon/T2)-1))]. diss_oper=[diss_coeff[0]*tensor(sigmaplus, qeye(2)),diss_coeff[1]*tensor(sigmaminus, qeye(2)),diss_coeff[2]*tensor(qeye(2),sigmaplus), diss_coeff[3]*tensor(qeye(2),sigmaminus)]; ```; Time steps:; ```; tlist = np.linspace(0, 1, 100); ```; Using mesolve:; ```; dynamics=mesolve(H, initialstate, tlist,diss_oper, options=Options(nsteps=10000)) ; ```; Note: nsteps=1000000 in the line above evaluates in 7 min. Ideally, I would like to solve for time in the range (0, 400) but in the worst case, time range (0,250) will do (with about 1000 divisions). But, increasing nsteps is not an option because the evaluation takes too long. Are there any changes I can make for faster evaluation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1623
https://github.com/qutip/qutip/issues/1623:425,Availability,error,error,425,"I get this error for anything less than nsteps = 1000000 (I've tried 5000, 10000, 50000, 100000, 500000) while using mesolve to get the dynamics of the system according to the Lindblad ME.; Details - It is a two qubit model, with both qubits coupled to baths and with inter-qubit coupling present. The solution for unit time with 100 divisions takes about 10 min but for any time interval greater than 1, I keep getting this error even with nsteps = 1000000, 5000000. Anything greater than that takes >2 hours to evaluate. ```python; import numpy as np; import matplotlib as plt; from qutip import *; from cmath import *; ```; Initial State:; ```; initialstate=tensor(fock_dm(2,0),fock_dm(2,0)); ```; Hamiltonian:; ```; epsilon=1; g=0.025; sigmaplus=0.5*(sigmax()+1j*sigmay()); sigmaminus=0.5*(sigmax()-1j*sigmay()); H=0.5*epsilon*(tensor(sigmaz()+qeye(2),qeye(2))+tensor(qeye(2),sigmaz()+qeye(2))) + g*(tensor(sigmaplus,sigmaminus)+tensor(sigmaminus, sigmaplus)). ```; Jump operators:; ```; gamma1=0.1; gamma2=0.05; T1=2; T2=0.05. diss_coeff=[cmath.sqrt(gamma1*(1/exp(epsilon/T1)-1)),cmath.sqrt(gamma1*exp(epsilon/T1)*(1/exp(epsilon/T1)-1)), cmath.sqrt(gamma2*(1/exp(epsilon/T2)-1)), cmath.sqrt(gamma2*exp(epsilon/T2)*(1/exp(epsilon/T2)-1))]. diss_oper=[diss_coeff[0]*tensor(sigmaplus, qeye(2)),diss_coeff[1]*tensor(sigmaminus, qeye(2)),diss_coeff[2]*tensor(qeye(2),sigmaplus), diss_coeff[3]*tensor(qeye(2),sigmaminus)]; ```; Time steps:; ```; tlist = np.linspace(0, 1, 100); ```; Using mesolve:; ```; dynamics=mesolve(H, initialstate, tlist,diss_oper, options=Options(nsteps=10000)) ; ```; Note: nsteps=1000000 in the line above evaluates in 7 min. Ideally, I would like to solve for time in the range (0, 400) but in the worst case, time range (0,250) will do (with about 1000 divisions). But, increasing nsteps is not an option because the evaluation takes too long. Are there any changes I can make for faster evaluation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1623
https://github.com/qutip/qutip/issues/1623:280,Modifiability,coupling,coupling,280,"I get this error for anything less than nsteps = 1000000 (I've tried 5000, 10000, 50000, 100000, 500000) while using mesolve to get the dynamics of the system according to the Lindblad ME.; Details - It is a two qubit model, with both qubits coupled to baths and with inter-qubit coupling present. The solution for unit time with 100 divisions takes about 10 min but for any time interval greater than 1, I keep getting this error even with nsteps = 1000000, 5000000. Anything greater than that takes >2 hours to evaluate. ```python; import numpy as np; import matplotlib as plt; from qutip import *; from cmath import *; ```; Initial State:; ```; initialstate=tensor(fock_dm(2,0),fock_dm(2,0)); ```; Hamiltonian:; ```; epsilon=1; g=0.025; sigmaplus=0.5*(sigmax()+1j*sigmay()); sigmaminus=0.5*(sigmax()-1j*sigmay()); H=0.5*epsilon*(tensor(sigmaz()+qeye(2),qeye(2))+tensor(qeye(2),sigmaz()+qeye(2))) + g*(tensor(sigmaplus,sigmaminus)+tensor(sigmaminus, sigmaplus)). ```; Jump operators:; ```; gamma1=0.1; gamma2=0.05; T1=2; T2=0.05. diss_coeff=[cmath.sqrt(gamma1*(1/exp(epsilon/T1)-1)),cmath.sqrt(gamma1*exp(epsilon/T1)*(1/exp(epsilon/T1)-1)), cmath.sqrt(gamma2*(1/exp(epsilon/T2)-1)), cmath.sqrt(gamma2*exp(epsilon/T2)*(1/exp(epsilon/T2)-1))]. diss_oper=[diss_coeff[0]*tensor(sigmaplus, qeye(2)),diss_coeff[1]*tensor(sigmaminus, qeye(2)),diss_coeff[2]*tensor(qeye(2),sigmaplus), diss_coeff[3]*tensor(qeye(2),sigmaminus)]; ```; Time steps:; ```; tlist = np.linspace(0, 1, 100); ```; Using mesolve:; ```; dynamics=mesolve(H, initialstate, tlist,diss_oper, options=Options(nsteps=10000)) ; ```; Note: nsteps=1000000 in the line above evaluates in 7 min. Ideally, I would like to solve for time in the range (0, 400) but in the worst case, time range (0,250) will do (with about 1000 divisions). But, increasing nsteps is not an option because the evaluation takes too long. Are there any changes I can make for faster evaluation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1623
https://github.com/qutip/qutip/issues/1624:1073,Availability,error,error,1073,"/qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:1188,Availability,error,error,1188,"ndent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:1225,Availability,error,error,1225," This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. Th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:2902,Deployability,Install,Installed,2902,"3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence). **Your Environment**; QuTiP Version: 4.6.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:176,Integrability,depend,dependent,176,"**Describe the bug**; As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:294,Integrability,depend,dependent,294,"**Describe the bug**; As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:402,Integrability,depend,dependent,402,"**Describe the bug**; As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:1554,Integrability,depend,dependent,1554," import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all ot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:1999,Integrability,depend,dependent,1999,"3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence). **Your Environment**; QuTiP Version: 4.6.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:2282,Integrability,depend,dependent,2282,"3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence). **Your Environment**; QuTiP Version: 4.6.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:2677,Integrability,depend,dependence,2677,"3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence). **Your Environment**; QuTiP Version: 4.6.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:2628,Modifiability,flexible,flexible,2628,"3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence). **Your Environment**; QuTiP Version: 4.6.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/issues/1624:91,Usability,guid,guide,91,"**Describe the bug**; As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1624
https://github.com/qutip/qutip/pull/1626:290,Availability,fault,fault,290,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1626
https://github.com/qutip/qutip/pull/1626:360,Availability,error,error,360,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1626
https://github.com/qutip/qutip/pull/1626:23,Testability,test,tests,23,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1626
https://github.com/qutip/qutip/pull/1626:61,Testability,test,tests,61,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1626
https://github.com/qutip/qutip/pull/1626:169,Testability,log,logic,169,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1626
https://github.com/qutip/qutip/pull/1626:394,Testability,test,tests,394,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1626
https://github.com/qutip/qutip/issues/1629:348,Availability,error,error,348,"I have seen in multiple places of the code (in `qutip/core/data`) that a `TypeError` is raised when the shape of the input Data (`Dense` or `CSR`) is wrong, even though the `Type` of the input data is correct. Do we want to raise `TypeError` or `ValueError`? I ask this because we sometimes raise `ValueError`, which I believe should be the raised error. Examples are: ; - `trace` is raising `ValueError`; - `pow` was raising `TypeError` but now raises `ValueError` after merging #1622.; - `norm.trace` raises `TypeError` (it is actually `eigen` who raises it); - `norm.l2` raises `ValueError`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1629
https://github.com/qutip/qutip/pull/1630:972,Availability,redundant,redundant,972,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1167,Availability,redundant,redundant,1167,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1552,Availability,redundant,redundant,1552,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:634,Safety,avoid,avoids,634,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:972,Safety,redund,redundant,972,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1167,Safety,redund,redundant,1167,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1552,Safety,redund,redundant,1552,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:38,Testability,test,tests,38,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:154,Testability,test,tests,154,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:761,Testability,Test,TestProject,761,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:875,Testability,test,tests,875,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:983,Testability,Test,TestProject,983,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1178,Testability,Test,TestProject,1178,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1207,Testability,test,test,1207,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1330,Testability,test,tests,1330,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1630:1563,Testability,Test,TestProject,1563,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1630
https://github.com/qutip/qutip/pull/1631:21,Testability,test,tests,21,**Changelog**; Added tests for Norm.; `norm.trace` raises `ValueError` instead of `TypeError` when the input is not a square matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1631
https://github.com/qutip/qutip/pull/1632:30,Availability,error,errors,30,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:1522,Availability,error,error,1522,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:760,Deployability,integrat,integrate,760,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:1093,Deployability,Update,Update,1093,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:1292,Deployability,integrat,integration,1292,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:760,Integrability,integrat,integrate,760,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:1292,Integrability,integrat,integration,1292,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:187,Testability,test,tests,187,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:254,Testability,test,tests,254,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:440,Testability,test,tests,440,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:481,Testability,test,tests,481,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:690,Testability,test,test,690,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:1598,Testability,test,tests,1598,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:1608,Testability,test,tests,1608,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1632:683,Usability,simpl,simple,683,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1632
https://github.com/qutip/qutip/pull/1633:686,Testability,log,logic,686,"**Description**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)` signature. The old style signature is used if the arguments to the function are exactly `(t, args)`. Otherwise the new calling convention is used. This PR also limits the arguments stored to those accepted by the function, potentially reducing some extra copies of functions when `.replace_arguments()` is called. **Related issues or PRs**; This is an alternative implementation of #1609. This implementation retains single FunctionCoefficient and _FuncElement classes and simplifies the logic for deciding whether the old or new-style calling convention is used. **Changelog**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1633
https://github.com/qutip/qutip/pull/1633:671,Usability,simpl,simplifies,671,"**Description**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)` signature. The old style signature is used if the arguments to the function are exactly `(t, args)`. Otherwise the new calling convention is used. This PR also limits the arguments stored to those accepted by the function, potentially reducing some extra copies of functions when `.replace_arguments()` is called. **Related issues or PRs**; This is an alternative implementation of #1609. This implementation retains single FunctionCoefficient and _FuncElement classes and simplifies the logic for deciding whether the old or new-style calling convention is used. **Changelog**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1633
https://github.com/qutip/qutip/issues/1634:830,Availability,error,error,830,"I'm trying to use the eigenstates function to find the eigenstates for a given Hamiltonian, the code for which is below:. from qutip import *; import numpy as np; import matplotlib.pyplot as plt. # Define the spin operators for the two particles. smu_x = tensor(sigmax(),qeye(2)); smu_y = tensor(sigmay(),qeye(2)); smu_z = tensor(sigmaz(),qeye(2)). se_x = tensor(qeye(2),sigmax()); se_y = tensor(qeye(2),sigmay()); se_z = tensor(qeye(2),sigmaz()). omega_mu = 0.1 * np.pi; omega_e = 0.1 * np.pi *200; omega_0 = 5.0 * np.pi. H = 0. # Add interactions with external field. H += -(omega_mu/2)*smu_z + (omega_e/2)*se_z. # Add interaction between the spins. H += (omega_0/4)*(tensor(sigmax(),sigmax())+tensor(sigmay(),sigmay())+tensor(sigmaz(),sigmaz())). H.eigenstates(). However, when I try to run this code it gives me the following error:. Traceback (most recent call last):. File ""/Users/Nathan/Documents/internship2021/week2/qutip/Muonium/muonium_interaction.py"", line 39, in <module>; H.eigenstates(). File ""/Users/Nathan/opt/anaconda3/lib/python3.7/site-packages/qutip/qobj.py"", line 1699, in eigenstates; norms = np.array([ket.norm() for ket in ekets]). File ""/Users/Nathan/opt/anaconda3/lib/python3.7/site-packages/qutip/qobj.py"", line 1699, in <listcomp>; norms = np.array([ket.norm() for ket in ekets]). AttributeError: 'numpy.ndarray' object has no attribute 'norm'. I'm unsure of whether this is due to me not using the function correctly or is a genuine issue that may need addressing. . Kind regards,. Nathan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1634
https://github.com/qutip/qutip/pull/1636:208,Testability,test,test,208,"**Description**; Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. . I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code. Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. . **Changelog**; `expect` can now return arbitrary python objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1636
https://github.com/qutip/qutip/pull/1636:240,Testability,test,test,240,"**Description**; Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. . I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code. Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. . **Changelog**; `expect` can now return arbitrary python objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1636
https://github.com/qutip/qutip/pull/1636:352,Testability,test,test,352,"**Description**; Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. . I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code. Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. . **Changelog**; `expect` can now return arbitrary python objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1636
https://github.com/qutip/qutip/pull/1636:429,Testability,test,test,429,"**Description**; Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. . I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code. Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. . **Changelog**; `expect` can now return arbitrary python objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1636
https://github.com/qutip/qutip/pull/1637:21,Testability,test,tests,21,**Changelog**; Added tests for reshape specialisations.; Added tests for columns_stack specialisations.; Added tests for columns_unstack specialisations.; Moved tests for split_columns from test_mathematics to test_reshape.; PEP 8 clean test_mathematics.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1637
https://github.com/qutip/qutip/pull/1637:63,Testability,test,tests,63,**Changelog**; Added tests for reshape specialisations.; Added tests for columns_stack specialisations.; Added tests for columns_unstack specialisations.; Moved tests for split_columns from test_mathematics to test_reshape.; PEP 8 clean test_mathematics.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1637
https://github.com/qutip/qutip/pull/1637:111,Testability,test,tests,111,**Changelog**; Added tests for reshape specialisations.; Added tests for columns_stack specialisations.; Added tests for columns_unstack specialisations.; Moved tests for split_columns from test_mathematics to test_reshape.; PEP 8 clean test_mathematics.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1637
https://github.com/qutip/qutip/pull/1637:161,Testability,test,tests,161,**Changelog**; Added tests for reshape specialisations.; Added tests for columns_stack specialisations.; Added tests for columns_unstack specialisations.; Moved tests for split_columns from test_mathematics to test_reshape.; PEP 8 clean test_mathematics.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1637
https://github.com/qutip/qutip/issues/1638:72,Availability,error,error,72,"Hello. I am currently running a simulation with `mesolve` (yet the same error occurs with `sesolve`) with a slow perturbation, such that close to zero the Hamiltonian is very close to zero (the perturbation is a thin Gaussian distribution). When I run `mesolve`, instead of running my time-dependent coefficients for the values in `tlist` (where in this case I had 250 times in `tlist`), **QuTiP** uses about 20 seemingly random time values, some of which are not even in `tlist`. . I believe this error is stemming from the Hamiltonian changing extremely slowly and being close to zero for a long period of time. This is because **QuTiP** began working normally when I added the constant 0.00001 to my time-dependent coefficient. Is there a bug here, or is there something I am missing about small-frame limits of the software?. An example piece of code that reproduces this error is below.; ```python; import numpy as np; import qutip as qt. def StandardGaussianPi(t):; def gauss_distr(x, sigma, mu):; return np.exp(-((x - mu)/sigma)**2 / 2) / (sigma * np.sqrt(2 * np.pi)); return np.pi * gauss_distr(t, 2, 20). def run_experiment(waveform, tlist, a):; def coeff_1(t, args):; print(t); return -1/2 * waveform(t) * -1; coeff_2 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.cos(a * t); coeff_3 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.sin(a * t); hamiltonian = [[gm(1), coeff_1], [gm(6), coeff_2], [gm(7), coeff_3]]; initial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1638:498,Availability,error,error,498,"Hello. I am currently running a simulation with `mesolve` (yet the same error occurs with `sesolve`) with a slow perturbation, such that close to zero the Hamiltonian is very close to zero (the perturbation is a thin Gaussian distribution). When I run `mesolve`, instead of running my time-dependent coefficients for the values in `tlist` (where in this case I had 250 times in `tlist`), **QuTiP** uses about 20 seemingly random time values, some of which are not even in `tlist`. . I believe this error is stemming from the Hamiltonian changing extremely slowly and being close to zero for a long period of time. This is because **QuTiP** began working normally when I added the constant 0.00001 to my time-dependent coefficient. Is there a bug here, or is there something I am missing about small-frame limits of the software?. An example piece of code that reproduces this error is below.; ```python; import numpy as np; import qutip as qt. def StandardGaussianPi(t):; def gauss_distr(x, sigma, mu):; return np.exp(-((x - mu)/sigma)**2 / 2) / (sigma * np.sqrt(2 * np.pi)); return np.pi * gauss_distr(t, 2, 20). def run_experiment(waveform, tlist, a):; def coeff_1(t, args):; print(t); return -1/2 * waveform(t) * -1; coeff_2 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.cos(a * t); coeff_3 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.sin(a * t); hamiltonian = [[gm(1), coeff_1], [gm(6), coeff_2], [gm(7), coeff_3]]; initial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1638:876,Availability,error,error,876,"Hello. I am currently running a simulation with `mesolve` (yet the same error occurs with `sesolve`) with a slow perturbation, such that close to zero the Hamiltonian is very close to zero (the perturbation is a thin Gaussian distribution). When I run `mesolve`, instead of running my time-dependent coefficients for the values in `tlist` (where in this case I had 250 times in `tlist`), **QuTiP** uses about 20 seemingly random time values, some of which are not even in `tlist`. . I believe this error is stemming from the Hamiltonian changing extremely slowly and being close to zero for a long period of time. This is because **QuTiP** began working normally when I added the constant 0.00001 to my time-dependent coefficient. Is there a bug here, or is there something I am missing about small-frame limits of the software?. An example piece of code that reproduces this error is below.; ```python; import numpy as np; import qutip as qt. def StandardGaussianPi(t):; def gauss_distr(x, sigma, mu):; return np.exp(-((x - mu)/sigma)**2 / 2) / (sigma * np.sqrt(2 * np.pi)); return np.pi * gauss_distr(t, 2, 20). def run_experiment(waveform, tlist, a):; def coeff_1(t, args):; print(t); return -1/2 * waveform(t) * -1; coeff_2 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.cos(a * t); coeff_3 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.sin(a * t); hamiltonian = [[gm(1), coeff_1], [gm(6), coeff_2], [gm(7), coeff_3]]; initial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1638:290,Integrability,depend,dependent,290,"Hello. I am currently running a simulation with `mesolve` (yet the same error occurs with `sesolve`) with a slow perturbation, such that close to zero the Hamiltonian is very close to zero (the perturbation is a thin Gaussian distribution). When I run `mesolve`, instead of running my time-dependent coefficients for the values in `tlist` (where in this case I had 250 times in `tlist`), **QuTiP** uses about 20 seemingly random time values, some of which are not even in `tlist`. . I believe this error is stemming from the Hamiltonian changing extremely slowly and being close to zero for a long period of time. This is because **QuTiP** began working normally when I added the constant 0.00001 to my time-dependent coefficient. Is there a bug here, or is there something I am missing about small-frame limits of the software?. An example piece of code that reproduces this error is below.; ```python; import numpy as np; import qutip as qt. def StandardGaussianPi(t):; def gauss_distr(x, sigma, mu):; return np.exp(-((x - mu)/sigma)**2 / 2) / (sigma * np.sqrt(2 * np.pi)); return np.pi * gauss_distr(t, 2, 20). def run_experiment(waveform, tlist, a):; def coeff_1(t, args):; print(t); return -1/2 * waveform(t) * -1; coeff_2 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.cos(a * t); coeff_3 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.sin(a * t); hamiltonian = [[gm(1), coeff_1], [gm(6), coeff_2], [gm(7), coeff_3]]; initial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1638:708,Integrability,depend,dependent,708,"Hello. I am currently running a simulation with `mesolve` (yet the same error occurs with `sesolve`) with a slow perturbation, such that close to zero the Hamiltonian is very close to zero (the perturbation is a thin Gaussian distribution). When I run `mesolve`, instead of running my time-dependent coefficients for the values in `tlist` (where in this case I had 250 times in `tlist`), **QuTiP** uses about 20 seemingly random time values, some of which are not even in `tlist`. . I believe this error is stemming from the Hamiltonian changing extremely slowly and being close to zero for a long period of time. This is because **QuTiP** began working normally when I added the constant 0.00001 to my time-dependent coefficient. Is there a bug here, or is there something I am missing about small-frame limits of the software?. An example piece of code that reproduces this error is below.; ```python; import numpy as np; import qutip as qt. def StandardGaussianPi(t):; def gauss_distr(x, sigma, mu):; return np.exp(-((x - mu)/sigma)**2 / 2) / (sigma * np.sqrt(2 * np.pi)); return np.pi * gauss_distr(t, 2, 20). def run_experiment(waveform, tlist, a):; def coeff_1(t, args):; print(t); return -1/2 * waveform(t) * -1; coeff_2 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.cos(a * t); coeff_3 = lambda t, args: coeff_1(t, args) * np.sqrt(2) * np.sin(a * t); hamiltonian = [[gm(1), coeff_1], [gm(6), coeff_2], [gm(7), coeff_3]]; initial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1638:2995,Integrability,depend,dependent,2995,"itial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 0]]); gell_mann[4] = np.array([[0, 0, 1], [0, 0, 0], [1, 0, 0]]); gell_mann[5] = np.array([[0, 0, -1j], [0, 0, 0], [1j, 0, 0]]); gell_mann[6] = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 0]]); gell_mann[7] = np.array([[0, 0, 0], [0, 0, -1j], [0, 1j, 0]]). def gm(n):; return qt.Qobj(gell_mann[n]); ```. The code above has the following output.; ```; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 7.569736410260631e-09; 7.569736410260631e-09; 7.569736410260631e-09; 1.1027338361068281e-05; 1.1027338361068281e-05; 1.1027338361068281e-05; 5.5136691805341405e-06; 5.5136691805341405e-06; 5.5136691805341405e-06; 0.05514220547452194; 0.05514220547452194; 0.05514220547452194; 0.6065091235279361; 0.6065091235279361; 0.6065091235279361; 6.120178304062077; 6.120178304062077; 6.120178304062077; 60.14556517658347; 60.14556517658347; 60.14556517658347; ```; Without even looking at the output of `mesolve`, there is an issue. Note that the values being printed are generated from the time dependent coefficient `coeff_1`, where I am just printing out the values of time that it has been given. Clearly, there are *not* 250 values, here, and in addition, values like 60.1 are not even in `tlist`, which ranges from 0 to 40. My `about()` is below; thank you in advance for any help.; ```; QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1638:3100,Usability,Clear,Clearly,3100,"itial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 0]]); gell_mann[4] = np.array([[0, 0, 1], [0, 0, 0], [1, 0, 0]]); gell_mann[5] = np.array([[0, 0, -1j], [0, 0, 0], [1j, 0, 0]]); gell_mann[6] = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 0]]); gell_mann[7] = np.array([[0, 0, 0], [0, 0, -1j], [0, 1j, 0]]). def gm(n):; return qt.Qobj(gell_mann[n]); ```. The code above has the following output.; ```; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 7.569736410260631e-09; 7.569736410260631e-09; 7.569736410260631e-09; 1.1027338361068281e-05; 1.1027338361068281e-05; 1.1027338361068281e-05; 5.5136691805341405e-06; 5.5136691805341405e-06; 5.5136691805341405e-06; 0.05514220547452194; 0.05514220547452194; 0.05514220547452194; 0.6065091235279361; 0.6065091235279361; 0.6065091235279361; 6.120178304062077; 6.120178304062077; 6.120178304062077; 60.14556517658347; 60.14556517658347; 60.14556517658347; ```; Without even looking at the output of `mesolve`, there is an issue. Note that the values being printed are generated from the time dependent coefficient `coeff_1`, where I am just printing out the values of time that it has been given. Clearly, there are *not* 250 values, here, and in addition, values like 60.1 are not even in `tlist`, which ranges from 0 to 40. My `about()` is below; thank you in advance for any help.; ```; QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1638
https://github.com/qutip/qutip/issues/1639:135,Availability,error,error,135,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:180,Availability,failure,failure,180,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1665,Availability,error,error,1665,"/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ====================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1806,Availability,error,error,1806,"y-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2027,Availability,error,error,2027,"is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2353,Availability,error,error,2353,"x_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5743,Availability,error,error,5743,"============= warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5852,Availability,echo,echo,5852,"==========; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5900,Availability,error,error,5900,"tepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-package",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:7196,Availability,error,error,7196,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:6793,Deployability,Install,Installed,6793,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:6863,Deployability,Install,Installation,6863,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:704,Modifiability,plugin,plugins,704,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3108,Modifiability,config,configfile,3108,"e not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3132,Modifiability,plugin,plugins,3132,"ely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestC",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5110,Modifiability,config,config,5110,"test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; =======================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5394,Modifiability,config,config,5394,"or::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:460,Performance,cache,cachedir,460,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2923,Performance,cache,cachedir,2923," discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitPr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5019,Performance,cache,cache,5019,"cuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5089,Performance,cache,cache,5089,"packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5117,Performance,cache,cache,5117,"ocessor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; =============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5128,Performance,cache,cache,5128,"CircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5189,Performance,cache,cacheprovider,5189," 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5250,Performance,cache,cacheprovider,5250,"st_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5309,Performance,cache,cache,5309,"hon3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Boar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5379,Performance,cache,cache,5379,"or::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5401,Performance,cache,cache,5401,"em PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5412,Performance,cache,cache,5412,"./../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:30,Testability,test,tests,30,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:85,Testability,test,tests,85,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:122,Testability,test,tests,122,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:175,Testability,test,test,175,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:211,Testability,test,tests,211,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:247,Testability,test,testing,247,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:262,Testability,test,testing,262,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:314,Testability,test,test,314,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:628,Testability,test,test,628,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:990,Testability,test,tests,990,"Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1112,Testability,test,tests,1112,"l tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are no",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1239,Testability,test,tests,1239,"ing tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1369,Testability,test,tests,1369," linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1441,Testability,test,tests,1441,"pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1512,Testability,test,tests,1512,"s profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1584,Testability,test,tests,1584,"w/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:1881,Testability,test,tests,1881,"y-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2119,Testability,test,tests,2119,"is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2157,Testability,test,tests,2157,"_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2190,Testability,test,test,2190,"mitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2216,Testability,test,testPlot,2216,"mitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2263,Testability,test,testPlot,2263,":test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2471,Testability,test,tests,2471,"ts/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2590,Testability,test,tests,2590,"er_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProces",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:2714,Testability,test,test,2714,"processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3101,Testability,test,tests,3101,"e not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3394,Testability,test,tests,3394,"_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3419,Testability,Test,TestCircuitProcessor,3419,"ython3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3515,Testability,test,tests,3515," terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcess",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3540,Testability,Test,TestCircuitProcessor,3540,"thon3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3634,Testability,test,tests,3634,"======================================================================================= test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3659,Testability,Test,TestCircuitProcessor,3659,"============================ test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3756,Testability,test,tests,3756,"=================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ===========================================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3781,Testability,Test,TestCircuitProcessor,3781,"======================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =====================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3879,Testability,test,tests,3879,".0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3904,Testability,Test,TestCircuitProcessor,3904,"chedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3926,Testability,test,testPlot,3926,"chedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:3992,Testability,test,tests,3992,"base=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4017,Testability,Test,TestCircuitProcessor,4017,"sis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4039,Testability,test,testSpline,4039,"sis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4107,Testability,test,tests,4107,"p/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/step",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4132,Testability,Test,TestCircuitProcessor,4132,"-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4154,Testability,test,testGetObjevo,4154,"-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4225,Testability,test,tests,4225,".0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4250,Testability,Test,TestCircuitProcessor,4250,"der-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4272,Testability,test,testNoise,4272,"der-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4339,Testability,test,tests,4339,"collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4364,Testability,Test,TestCircuitProcessor,4364,"ip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4386,Testability,test,testMultiLevelSystem,4386,"ip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4464,Testability,test,tests,4464,"ls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids))",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4489,Testability,Test,TestCircuitProcessor,4489,"tip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4511,Testability,test,testDrift,4511,"tip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4578,Testability,test,tests,4578,"e_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ======================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4603,Testability,Test,TestCircuitProcessor,4603,"/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:4625,Testability,test,testChooseSolver,4625,"/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5067,Testability,test,tests,5067,"cuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:5357,Testability,test,tests,5357,"hon3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Boar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:7017,Testability,Test,TestPlot,7017,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1639:7151,Testability,test,tests,7151,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1639
https://github.com/qutip/qutip/issues/1640:1774,Deployability,Install,Installed,1774,"63496876 -0.87459622]; E-value: [ 4.46602374 -0.73195683 0.28172253]; E-value: [ 4.559515 0.33078172 -0.64515643]; E-value: [ 4.63877517 -0.37108524 0.82463744]; E-value: [ 5.46271073 -0.15759687 0.500013 ]; E-value: [ 4.60573553 0.42088337 -0.86184648]; E-value: [ 4.85255845 0.72066688 -0.44991021]; E-value: [ 4.95333863 -0.89975462 0.42454032]; E-value: [4.27421937 1.13664227 0.06540866]; E-value: [ 3.62355797 0.92034471 -1.65694779]; ```. **Expected behavior**; The eigenvalues must be non-negative. **Your Environment**; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2; Python Version: 3.8.11; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\acer\anaconda3\envs\learning_qutip\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`. **Additional context**; I separately tried the function '_rand_herm_dense', and it works perfectly fine. I was not able to spot the negative values show up when I keep density > 0.5; rand_herm function given here: https://qutip.org/docs/latest/modules/qutip/random_objects.html#rand_herm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1640
https://github.com/qutip/qutip/issues/1640:1846,Deployability,Install,Installation,1846,"63496876 -0.87459622]; E-value: [ 4.46602374 -0.73195683 0.28172253]; E-value: [ 4.559515 0.33078172 -0.64515643]; E-value: [ 4.63877517 -0.37108524 0.82463744]; E-value: [ 5.46271073 -0.15759687 0.500013 ]; E-value: [ 4.60573553 0.42088337 -0.86184648]; E-value: [ 4.85255845 0.72066688 -0.44991021]; E-value: [ 4.95333863 -0.89975462 0.42454032]; E-value: [4.27421937 1.13664227 0.06540866]; E-value: [ 3.62355797 0.92034471 -1.65694779]; ```. **Expected behavior**; The eigenvalues must be non-negative. **Your Environment**; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2; Python Version: 3.8.11; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\acer\anaconda3\envs\learning_qutip\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`. **Additional context**; I separately tried the function '_rand_herm_dense', and it works perfectly fine. I was not able to spot the negative values show up when I keep density > 0.5; rand_herm function given here: https://qutip.org/docs/latest/modules/qutip/random_objects.html#rand_herm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1640
https://github.com/qutip/qutip/issues/1642:2074,Deployability,Install,Installed,2074,"ig. N = 4; for i in range(10):; E = qutip.rand_herm(N, 0.35, None, True, None); w,v=eig(E); print('E-value:', w.real); ```; **The terminal output is**; ```; E-value: [6.32043755 6.06791959 5.24578891 4.99327095]; E-value: [5.37493846 5.8003551 6.26253682 5.65685425]; E-value: [5.17596435 5.5020902 5.8116183 6.13774415]; E-value: [6.25884718 5.05486132 5.71761238 5.59609612]; E-value: [5.94609905 5.36760945 6.2943825 5.33641017]; E-value: [6.25296302 5.06074548 5.65685425 5.65685425]; E-value: [4.81999397 5.75787997 6.57166109 5.65685425]; E-value: [5.23867334 6.35633232 5.8283425 5.65685425]; E-value: [5.13755732 5.71669004 6.21844559 5.65685425]; E-value: [6.32817223 5.48538456 5.30187642 6.01183208]; ```; **Expected Behaviour**; The eigenvalues should be random. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+nogit; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2; Python Version: 3.8.11; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\acer\anaconda3\envs\learning_qutip\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1642
https://github.com/qutip/qutip/issues/1642:2146,Deployability,Install,Installation,2146,"ig. N = 4; for i in range(10):; E = qutip.rand_herm(N, 0.35, None, True, None); w,v=eig(E); print('E-value:', w.real); ```; **The terminal output is**; ```; E-value: [6.32043755 6.06791959 5.24578891 4.99327095]; E-value: [5.37493846 5.8003551 6.26253682 5.65685425]; E-value: [5.17596435 5.5020902 5.8116183 6.13774415]; E-value: [6.25884718 5.05486132 5.71761238 5.59609612]; E-value: [5.94609905 5.36760945 6.2943825 5.33641017]; E-value: [6.25296302 5.06074548 5.65685425 5.65685425]; E-value: [4.81999397 5.75787997 6.57166109 5.65685425]; E-value: [5.23867334 6.35633232 5.8283425 5.65685425]; E-value: [5.13755732 5.71669004 6.21844559 5.65685425]; E-value: [6.32817223 5.48538456 5.30187642 6.01183208]; ```; **Expected Behaviour**; The eigenvalues should be random. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+nogit; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2; Python Version: 3.8.11; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\acer\anaconda3\envs\learning_qutip\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1642
https://github.com/qutip/qutip/issues/1642:139,Usability,clear,clearly,139,"**Describe the issue**; I was trying to generate random positive semi-definite matrices using the function `rand_herm` but the eigenvalues clearly don't seem to be random. For example, if I choose the dimension to be 3, then the eigenvalues are always like `3.something` or `4.something` or `5.something`; if I choose the dimension to be 4, the eigenvalues are always like '4.something` or `5.something` or `6.something`, and similarly for other dimensions. **To Reproduce**. ```; import numpy as np; from numpy.linalg import eig. N = 4; for i in range(10):; E = qutip.rand_herm(N, 0.35, None, True, None); w,v=eig(E); print('E-value:', w.real); ```; **The terminal output is**; ```; E-value: [6.32043755 6.06791959 5.24578891 4.99327095]; E-value: [5.37493846 5.8003551 6.26253682 5.65685425]; E-value: [5.17596435 5.5020902 5.8116183 6.13774415]; E-value: [6.25884718 5.05486132 5.71761238 5.59609612]; E-value: [5.94609905 5.36760945 6.2943825 5.33641017]; E-value: [6.25296302 5.06074548 5.65685425 5.65685425]; E-value: [4.81999397 5.75787997 6.57166109 5.65685425]; E-value: [5.23867334 6.35633232 5.8283425 5.65685425]; E-value: [5.13755732 5.71669004 6.21844559 5.65685425]; E-value: [6.32817223 5.48538456 5.30187642 6.01183208]; ```; **Expected Behaviour**; The eigenvalues should be random. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+nogit; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1642
https://github.com/qutip/qutip/pull/1643:23,Deployability,integrat,integrator,23,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:100,Deployability,integrat,integratre,100,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:514,Deployability,Integrat,Integrator,514,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:755,Deployability,integrat,integration,755,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:23,Integrability,integrat,integrator,23,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:34,Integrability,interface,interface,34,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:100,Integrability,integrat,integratre,100,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:268,Integrability,interface,interface,268,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:514,Integrability,Integrat,Integrator,514,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:755,Integrability,integrat,integration,755,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:1102,Integrability,depend,dependent,1102,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:396,Safety,detect,detect,396,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:852,Testability,benchmark,benchmark,852,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1643:929,Testability,log,loglog,929,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1643
https://github.com/qutip/qutip/pull/1644:12,Deployability,integrat,integration,12,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1644
https://github.com/qutip/qutip/pull/1644:12,Integrability,integrat,integration,12,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1644
https://github.com/qutip/qutip/pull/1644:120,Modifiability,variab,variable,120,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1644
https://github.com/qutip/qutip/pull/1644:550,Testability,Benchmark,Benchmark,550,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1644
https://github.com/qutip/qutip/pull/1645:91,Availability,error,error,91,"In `test_interpolate`, `qzero` was used as `mcsolve`'s collapse operator. Due to numerical error in the interpolation method, `mcsolve` can detect a collapse, but a collapse for a null operator cause a a division by zero. This sometime made our tests fails. By changing the collapse operator to `qeye`, the evolution, thus the test is unaffected, but it no longer randomly fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1645
https://github.com/qutip/qutip/pull/1645:140,Safety,detect,detect,140,"In `test_interpolate`, `qzero` was used as `mcsolve`'s collapse operator. Due to numerical error in the interpolation method, `mcsolve` can detect a collapse, but a collapse for a null operator cause a a division by zero. This sometime made our tests fails. By changing the collapse operator to `qeye`, the evolution, thus the test is unaffected, but it no longer randomly fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1645
https://github.com/qutip/qutip/pull/1645:245,Testability,test,tests,245,"In `test_interpolate`, `qzero` was used as `mcsolve`'s collapse operator. Due to numerical error in the interpolation method, `mcsolve` can detect a collapse, but a collapse for a null operator cause a a division by zero. This sometime made our tests fails. By changing the collapse operator to `qeye`, the evolution, thus the test is unaffected, but it no longer randomly fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1645
https://github.com/qutip/qutip/pull/1645:327,Testability,test,test,327,"In `test_interpolate`, `qzero` was used as `mcsolve`'s collapse operator. Due to numerical error in the interpolation method, `mcsolve` can detect a collapse, but a collapse for a null operator cause a a division by zero. This sometime made our tests fails. By changing the collapse operator to `qeye`, the evolution, thus the test is unaffected, but it no longer randomly fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1645
https://github.com/qutip/qutip/pull/1646:48,Testability,test,test,48,Add `kron_dense` specialization to dispatch and test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1646
https://github.com/qutip/qutip/pull/1647:331,Energy Efficiency,reduce,reduce,331,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1647
https://github.com/qutip/qutip/pull/1647:342,Safety,risk,risk,342,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1647
https://github.com/qutip/qutip/pull/1647:124,Testability,test,test,124,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1647
https://github.com/qutip/qutip/pull/1647:156,Testability,test,test,156,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1647
https://github.com/qutip/qutip/pull/1648:37,Testability,test,tests,37,Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb. **Related issues or PRs**; * fixes #1639; * see https://github.com/The-Compiler/pytest-xvfb/issues/11 for the discussion of this situation when using pytest-xvfb. **Changelog**; Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1648
https://github.com/qutip/qutip/pull/1648:55,Testability,test,test,55,Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb. **Related issues or PRs**; * fixes #1639; * see https://github.com/The-Compiler/pytest-xvfb/issues/11 for the discussion of this situation when using pytest-xvfb. **Changelog**; Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1648
https://github.com/qutip/qutip/pull/1648:318,Testability,test,tests,318,Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb. **Related issues or PRs**; * fixes #1639; * see https://github.com/The-Compiler/pytest-xvfb/issues/11 for the discussion of this situation when using pytest-xvfb. **Changelog**; Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1648
https://github.com/qutip/qutip/pull/1648:336,Testability,test,test,336,Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb. **Related issues or PRs**; * fixes #1639; * see https://github.com/The-Compiler/pytest-xvfb/issues/11 for the discussion of this situation when using pytest-xvfb. **Changelog**; Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1648
https://github.com/qutip/qutip/pull/1649:359,Testability,test,tests,359,"We presently support operator in data layer including binary operators with themselves (`CSR + CSR`). But we use them sometime without confirming that both data object are of the same type, which will eventually cause bugs. Here I remove this support and fixed many places were we used them, but there are probably some uses remaining in place not covered by tests. This is an alternative solution to the issue from #1647.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1649
https://github.com/qutip/qutip/issues/1650:45,Deployability,install,installation,45,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:905,Deployability,install,installation,905,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:1690,Deployability,Install,Installed,1690,"tialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()` ```. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:1762,Deployability,Install,Installation,1762,"tialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()` ```. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:31,Testability,test,test,31,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:78,Testability,test,testing,78,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:125,Testability,test,testing,125,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:330,Testability,test,testing,330,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:345,Testability,test,testing,345,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:511,Testability,test,testing,511,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:528,Testability,test,testing,528,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/issues/1650:896,Testability,test,test,896,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1650
https://github.com/qutip/qutip/pull/1651:162,Integrability,depend,dependant,162,"Change `bloch_redfield_tensor` to be an equivalent to the `liouvillian` function.; As the former, it is now placed in core and support the both constant and time-dependant systems. (Removing the need for `br_codegen.py`). Previously, `bloch_redfield_tensor` returned the tensor in the frame where the Hamiltonian was diagonalized, now it offer the option between returning the tensor in that frame of the the lab frame. The function `brterm` as been added as the equivalent to `lindblad_dissipator`, it compute the contribution of one `a_op` of a bloch Redfielf tensor. The last user facing addition is `SpectraCoefficient`, it transform a coefficient of `t` to one of `w`. The coupling with the environment include a frequency response function which, in `brmesolve`, could be a function, string or `Cubic_Spline`, thus a `Coefficient`, but with a `w` input. `SpectraCoefficient` is to have interpolation based coefficient take the `w` input. . `QobjEvo` created by `brterm` use a custom element: `_BlochRedfieldElement` to allow faster matmul with a state. Since the operator in computed in a basis and the state is in another, having `matmul` change the state basis is usually faster than changing the operator basis. Each `_BlochRedfieldElement` of a `QobjEvo` share a `_EigenBasisTransform`, the object that does the Hamiltonian diagonalization at each call. It would be nice to support to computation of the tensor using `Data`. but it would require `ndarray.__mul__` equivalent to the dispatched function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1651
https://github.com/qutip/qutip/pull/1651:678,Modifiability,coupling,coupling,678,"Change `bloch_redfield_tensor` to be an equivalent to the `liouvillian` function.; As the former, it is now placed in core and support the both constant and time-dependant systems. (Removing the need for `br_codegen.py`). Previously, `bloch_redfield_tensor` returned the tensor in the frame where the Hamiltonian was diagonalized, now it offer the option between returning the tensor in that frame of the the lab frame. The function `brterm` as been added as the equivalent to `lindblad_dissipator`, it compute the contribution of one `a_op` of a bloch Redfielf tensor. The last user facing addition is `SpectraCoefficient`, it transform a coefficient of `t` to one of `w`. The coupling with the environment include a frequency response function which, in `brmesolve`, could be a function, string or `Cubic_Spline`, thus a `Coefficient`, but with a `w` input. `SpectraCoefficient` is to have interpolation based coefficient take the `w` input. . `QobjEvo` created by `brterm` use a custom element: `_BlochRedfieldElement` to allow faster matmul with a state. Since the operator in computed in a basis and the state is in another, having `matmul` change the state basis is usually faster than changing the operator basis. Each `_BlochRedfieldElement` of a `QobjEvo` share a `_EigenBasisTransform`, the object that does the Hamiltonian diagonalization at each call. It would be nice to support to computation of the tensor using `Data`. but it would require `ndarray.__mul__` equivalent to the dispatched function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1651
https://github.com/qutip/qutip/issues/1653:678,Deployability,Install,Installed,678,"**Describe the bug**; ""fmmesolve"" gives wrong expectation values with ""e_ops"". **To Reproduce**. Use tutorial in https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html. ```python. output = fmmesolve(H, psi0, tlist, [sigmax()], [num(2)], [noise_spectrum], T, args); p_ex = output.expect[0]. ```. This p_ex is different from what computed above. **Expected behavior**; The expectation values are the same as the one without ""e_ops"" and manually computed. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.3.4; Python Version: 3.7.6; Number of CPUs: 52; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/user1/anaconda3/envs/env1/lib/python3.7/site-packages/qutip-4.5.0-py3.7-linux-x86_64.egg/qutip. **Additional context**; Suspected the issues comes from floquet.py:829 , where the transformation is ""False""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1653
https://github.com/qutip/qutip/issues/1653:748,Deployability,Install,Installation,748,"**Describe the bug**; ""fmmesolve"" gives wrong expectation values with ""e_ops"". **To Reproduce**. Use tutorial in https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html. ```python. output = fmmesolve(H, psi0, tlist, [sigmax()], [num(2)], [noise_spectrum], T, args); p_ex = output.expect[0]. ```. This p_ex is different from what computed above. **Expected behavior**; The expectation values are the same as the one without ""e_ops"" and manually computed. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.3.4; Python Version: 3.7.6; Number of CPUs: 52; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/user1/anaconda3/envs/env1/lib/python3.7/site-packages/qutip-4.5.0-py3.7-linux-x86_64.egg/qutip. **Additional context**; Suspected the issues comes from floquet.py:829 , where the transformation is ""False""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1653
https://github.com/qutip/qutip/issues/1653:143,Usability,guid,guide,143,"**Describe the bug**; ""fmmesolve"" gives wrong expectation values with ""e_ops"". **To Reproduce**. Use tutorial in https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html. ```python. output = fmmesolve(H, psi0, tlist, [sigmax()], [num(2)], [noise_spectrum], T, args); p_ex = output.expect[0]. ```. This p_ex is different from what computed above. **Expected behavior**; The expectation values are the same as the one without ""e_ops"" and manually computed. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.3.4; Python Version: 3.7.6; Number of CPUs: 52; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/user1/anaconda3/envs/env1/lib/python3.7/site-packages/qutip-4.5.0-py3.7-linux-x86_64.egg/qutip. **Additional context**; Suspected the issues comes from floquet.py:829 , where the transformation is ""False""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1653
https://github.com/qutip/qutip/pull/1654:98,Deployability,Release,Release,98,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:192,Deployability,release,releases,192,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:211,Deployability,release,releases,211,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:317,Deployability,release,releasenotes,317,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:382,Deployability,release,releasenotes,382,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1158,Deployability,Update,Updates,1158,"ps://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1595,Deployability,release,releasenotes,1595,"ol]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1660,Deployability,release,releasenotes,1660," support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:2471,Deployability,release,releasenotes,2471,"ow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use back",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:2536,Deployability,release,releasenotes,2536,"/h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://githu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5023,Deployability,Update,Updates,5023,"ub.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:7329,Deployability,Update,Update,7329,"t.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:7481,Deployability,Update,Update,7481,"abot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:7488,Deployability,release,release,7488,"abot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:7635,Deployability,Update,Update,7635,"precate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:8465,Deployability,release,release,8465,"62ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9118,Deployability,update,updates,9118,"b47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10270,Deployability,upgrade,upgrade,10270,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10446,Deployability,upgrade,upgrade,10446,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10616,Deployability,upgrade,upgrade,10616,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:719,Integrability,depend,dependabot,719,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:812,Integrability,depend,dependabot,812,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1057,Integrability,depend,dependabot,1057,".2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1243,Integrability,depend,dependabot,1243," <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""ht",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1439,Integrability,depend,dependabot,1439,"; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1802,Integrability,depend,dependabot,1802,"rect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit T",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:2036,Integrability,depend,dependabot,2036,"github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all opera",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:2271,Integrability,depend,dependabot,2271,"ow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate con",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:2662,Integrability,depend,dependabot,2662,"notes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:2881,Integrability,depend,dependabot,2881,"com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3088,Integrability,depend,dependabot,3088,"> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3328,Integrability,depend,dependabot,3328," href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <block",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3548,Integrability,depend,dependabot,3548,"0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3736,Integrability,depend,dependabot,3736,"thub.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3939,Integrability,depend,dependabot,3939,"href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:4619,Integrability,depend,dependabot,4619,"/github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:4712,Integrability,depend,dependabot,4712,"://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:4922,Integrability,depend,dependabot,4922,"ub-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5108,Integrability,depend,dependabot,5108,"ckquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirec",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5304,Integrability,depend,dependabot,5304,"log</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5517,Integrability,depend,dependabot,5517,"e; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, r",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5705,Integrability,depend,dependabot,5705,"t.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/is",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5894,Integrability,depend,dependabot,5894,"ttps://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [rad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:6116,Integrability,depend,dependabot,6116,"m/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a507",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:6289,Integrability,depend,dependabot,6289,"-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:6453,Integrability,depend,dependabot,6453,"cking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:6673,Integrability,depend,dependabot,6673,"f=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:6836,Integrability,depend,dependabot,6836,"onal dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:8839,Integrability,Depend,Dependabot,8839,".com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:8879,Integrability,depend,dependabot-badges,8879,".com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:8938,Integrability,depend,dependency-name,8938,"d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9098,Integrability,depend,dependabot-security-updates,9098,"b47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9155,Integrability,Depend,Dependabot,9155,"/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9301,Integrability,depend,dependabot,9301,"f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9330,Integrability,depend,dependabot-automerge-start,9330,"thub.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9368,Integrability,depend,dependabot-automerge-end,9368,"thub.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9420,Integrability,Depend,Dependabot,9420,"""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9487,Integrability,Depend,Dependabot,9487,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9537,Integrability,depend,dependabot,9537,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9581,Integrability,depend,dependabot,9581,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9678,Integrability,depend,dependabot,9678,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9747,Integrability,depend,dependabot,9747,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9838,Integrability,depend,dependabot,9838,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9931,Integrability,depend,dependabot,9931,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9991,Integrability,depend,dependabot,9991,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10037,Integrability,Depend,Dependabot,10037,"pare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10123,Integrability,depend,dependabot,10123,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10189,Integrability,Depend,Dependabot,10189,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10299,Integrability,depend,dependabot,10299,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10365,Integrability,Depend,Dependabot,10365,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10475,Integrability,depend,dependabot,10475,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10498,Integrability,depend,dependency,10498,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10538,Integrability,Depend,Dependabot,10538,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10576,Integrability,depend,dependency,10576,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10645,Integrability,depend,dependabot,10645,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10764,Integrability,depend,dependabot,10764,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:10889,Integrability,depend,dependabot,10889,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:11014,Integrability,depend,dependabot,11014,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3255,Performance,load,loading,3255,"ps://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:6600,Performance,load,loading,6600,"585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:1365,Safety,avoid,avoid,1365,"s://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https:/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:5230,Safety,avoid,avoid,5230,"ced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Lim",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:419,Security,Secur,Security,419,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9067,Security,secur,security-vulnerabilities,9067,"b47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:9109,Security,secur,security-updates,9109,"b47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:11160,Security,secur,security,11160,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:11201,Security,Secur,Security,11201,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:7642,Testability,test,test,7642,"precate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:7970,Testability,test,tests,7970," raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1654:3687,Usability,Simpl,Simplified,3687,"pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a hr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1654
https://github.com/qutip/qutip/pull/1655:164,Energy Efficiency,energy,energy,164,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1655
https://github.com/qutip/qutip/pull/1655:198,Integrability,depend,dependent,198,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1655
https://github.com/qutip/qutip/pull/1655:236,Integrability,depend,dependent,236,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1655
https://github.com/qutip/qutip/pull/1655:894,Testability,test,tests,894,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1655
https://github.com/qutip/qutip/pull/1655:472,Usability,Feedback,Feedback,472,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1655
https://github.com/qutip/qutip/pull/1656:125,Testability,test,test,125,"Measurements would return a `None` state when the probability is 0.; Due to recent changes which affected operation order, a test for `CircuitSimulator` would result in a probability of `~1e-33`. Not being 0, this resulted in an unexpected possible result of the circuit simulation, breaking tests for `dev.major`. I changed the test from `p != 0` to `p >= tol` with `tol` being set in core's settings.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1656
https://github.com/qutip/qutip/pull/1656:292,Testability,test,tests,292,"Measurements would return a `None` state when the probability is 0.; Due to recent changes which affected operation order, a test for `CircuitSimulator` would result in a probability of `~1e-33`. Not being 0, this resulted in an unexpected possible result of the circuit simulation, breaking tests for `dev.major`. I changed the test from `p != 0` to `p >= tol` with `tol` being set in core's settings.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1656
https://github.com/qutip/qutip/pull/1656:329,Testability,test,test,329,"Measurements would return a `None` state when the probability is 0.; Due to recent changes which affected operation order, a test for `CircuitSimulator` would result in a probability of `~1e-33`. Not being 0, this resulted in an unexpected possible result of the circuit simulation, breaking tests for `dev.major`. I changed the test from `p != 0` to `p >= tol` with `tol` being set in core's settings.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1656
https://github.com/qutip/qutip/pull/1657:138,Availability,error,error,138,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:434,Availability,error,error,434,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:5,Testability,test,tests,5,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:82,Testability,test,tests,82,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:273,Testability,test,test,273,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:302,Testability,test,tests,302,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:361,Testability,test,tests,361,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1657:412,Testability,test,tests,412,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1657
https://github.com/qutip/qutip/pull/1658:46,Availability,toler,tolerance,46,"Fix the test breaking dev.major by adding the tolerance in the test itself.; This is an alternative to #1656, merge only one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1658
https://github.com/qutip/qutip/pull/1658:8,Testability,test,test,8,"Fix the test breaking dev.major by adding the tolerance in the test itself.; This is an alternative to #1656, merge only one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1658
https://github.com/qutip/qutip/pull/1658:63,Testability,test,test,63,"Fix the test breaking dev.major by adding the tolerance in the test itself.; This is an alternative to #1656, merge only one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1658
https://github.com/qutip/qutip/issues/1659:171,Integrability,depend,dependent,171,"**Is your feature request related to a problem? Please describe.**; The current steadystate solver requires a time-independent Hamiltonian. This is obvious because a time-dependent Hamiltonian cannot have a steadystate.; However, if the Hamiltonian can be decomposed in a time-independent part H_0 and a periodic time-dependent part cos(w t) * H_i, the system reaches a stroboscopic steadystate. If the perturbation is small, this stroboscopic steadystate fluctuates so slightly that it can be considered as a real steadystate. **Describe the solution you'd like**; I rewrote the Matrix Continued Fractions method [implemented in the Quantum Toolbox for Matlab](https://copilot.caltech.edu/documents/16743/qousersguide.pdf) to fit with python and qutip objects. It is 100% working, with running times lower than the second with an Hamiltonian 40 x 40.; I'm ready to do a pull request (this is my first time). I understood that I have to write an issue first right?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1659
https://github.com/qutip/qutip/issues/1659:318,Integrability,depend,dependent,318,"**Is your feature request related to a problem? Please describe.**; The current steadystate solver requires a time-independent Hamiltonian. This is obvious because a time-dependent Hamiltonian cannot have a steadystate.; However, if the Hamiltonian can be decomposed in a time-independent part H_0 and a periodic time-dependent part cos(w t) * H_i, the system reaches a stroboscopic steadystate. If the perturbation is small, this stroboscopic steadystate fluctuates so slightly that it can be considered as a real steadystate. **Describe the solution you'd like**; I rewrote the Matrix Continued Fractions method [implemented in the Quantum Toolbox for Matlab](https://copilot.caltech.edu/documents/16743/qousersguide.pdf) to fit with python and qutip objects. It is 100% working, with running times lower than the second with an Hamiltonian 40 x 40.; I'm ready to do a pull request (this is my first time). I understood that I have to write an issue first right?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1659
https://github.com/qutip/qutip/pull/1660:120,Integrability,depend,dependent,120,"**Description**; The current steadystate solver requires a time-independent Hamiltonian. This is obvious because a time-dependent Hamiltonian cannot have a steadystate.; However, if the Hamiltonian can be decomposed in a time-independent part H_0 and a periodic time-dependent part cos(w t) * H_i, the system reaches a stroboscopic steadystate. If the perturbation is small, this stroboscopic steadystate fluctuates so slightly that it can be considered as a real steadystate. I rewrote the Matrix Continued Fractions method [implemented in the Quantum Toolbox for Matlab](https://copilot.caltech.edu/documents/16743/qousersguide.pdf) to fit with python and qutip objects. It is 100% working, with running times lower than the second with an Hamiltonian 40 x 40. [Here](https://ibb.co/PthSzRd) the plot showing the comparison between the master equation dynamics, and the steadystate solution. Currently, there is the possibility to solve only this kind of problems. In the future we can add the support for multiple operators with different frequencies and amplitudes. **Related issues or PRs**; issue #1659. **Changelog**; Added the function steadystate_floquet, which returns the ""effective"" steadystate of a periodic driven system.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1660
https://github.com/qutip/qutip/pull/1660:267,Integrability,depend,dependent,267,"**Description**; The current steadystate solver requires a time-independent Hamiltonian. This is obvious because a time-dependent Hamiltonian cannot have a steadystate.; However, if the Hamiltonian can be decomposed in a time-independent part H_0 and a periodic time-dependent part cos(w t) * H_i, the system reaches a stroboscopic steadystate. If the perturbation is small, this stroboscopic steadystate fluctuates so slightly that it can be considered as a real steadystate. I rewrote the Matrix Continued Fractions method [implemented in the Quantum Toolbox for Matlab](https://copilot.caltech.edu/documents/16743/qousersguide.pdf) to fit with python and qutip objects. It is 100% working, with running times lower than the second with an Hamiltonian 40 x 40. [Here](https://ibb.co/PthSzRd) the plot showing the comparison between the master equation dynamics, and the steadystate solution. Currently, there is the possibility to solve only this kind of problems. In the future we can add the support for multiple operators with different frequencies and amplitudes. **Related issues or PRs**; issue #1659. **Changelog**; Added the function steadystate_floquet, which returns the ""effective"" steadystate of a periodic driven system.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1660
https://github.com/qutip/qutip/issues/1661:70,Availability,error,error,70,"When running eigenstates, function in line 1653 of qobj.py, I get the error ``` AttributeError: 'numpy.ndarray' object has no attribute 'norm' ```. I changed the contents of the function to:. ```python; evals, evecs = sp_eigs(self.data, self.isherm, sparse=sparse, sort=sort,; eigvals=eigvals, tol=tol, maxiter=maxiter); ekets = []; for i in range(len(evals)):; ekets.append(Qobj(evecs[i])); for ket in ekets:; ket = ket*(1./ket.norm()); return evals, ekets; ```. Which seems to work for me. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64). This is the machine I am currently using, but I has the same issue in an older (2011) Mac with 10.11.6 and a windows 10 PC.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1661
https://github.com/qutip/qutip/issues/1661:1176,Deployability,Install,Installed,1176,"When running eigenstates, function in line 1653 of qobj.py, I get the error ``` AttributeError: 'numpy.ndarray' object has no attribute 'norm' ```. I changed the contents of the function to:. ```python; evals, evecs = sp_eigs(self.data, self.isherm, sparse=sparse, sort=sort,; eigvals=eigvals, tol=tol, maxiter=maxiter); ekets = []; for i in range(len(evals)):; ekets.append(Qobj(evecs[i])); for ket in ekets:; ket = ket*(1./ket.norm()); return evals, ekets; ```. Which seems to work for me. **Your Environment**. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64). This is the machine I am currently using, but I has the same issue in an older (2011) Mac with 10.11.6 and a windows 10 PC.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1661
https://github.com/qutip/qutip/pull/1662:145,Modifiability,enhance,enhanced-support-citations-github,145,**Description**; This PR changes the filename `qutip.bib` to `CITATION.bib` to enable GitHub's [citation support](https://github.blog/2021-08-19-enhanced-support-citations-github/). **Changelog**; Rename qutip.bib to CITATION.bib to enable GitHub's citation support.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1662
https://github.com/qutip/qutip/issues/1663:478,Availability,error,error,478,"**Describe the bug**; I am simply trying to run the code published on the qutip documentation website for the [https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html](url). I copied the code under the section: Pre-computing the Floquet modes for one period,; and that worked fine, but then at the end of the section they point towards the function 'fsesolve' which would be the 'all-in-one' version of the code given previously, however it doesnt work and i get the error:. ```; ~\anaconda3\lib\site-packages\qutip\sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 297 if ode_args:; 298 r.set_f_params(*ode_args); --> 299 r.set_initial_value(initial_vector, tlist[0]); 300 ; 301 e_ops_data = []. KeyError: 0; ```. The code:. ```; import numpy as np; from matplotlib import pyplot; import qutip. delta = 0.0 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 0.25 * 2*np.pi; omega = 1.0 * 2*np.pi; T = 2*np.pi / omega; tlist = np.linspace(0.0, 10 * T, 101); psi0 = qutip.thermal_dm(2,0). H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(); H1 = A/2.0 * qutip.sigmax(); args = {'w': omega}; H = [H0, [H1, lambda t, args: np.sin(args['w'] * t)]]. output = qutip.fsesolve(H, psi0, tlist, [], args); p_ex = output.expect[0]; ```. **Your Environment**; QuTiP Version: 4.5.3; Numpy Version: 1.18.5; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.2.2; Python Version: 3.8.3; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64). **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1663
https://github.com/qutip/qutip/issues/1663:1491,Deployability,Install,Installed,1491,"**Describe the bug**; I am simply trying to run the code published on the qutip documentation website for the [https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html](url). I copied the code under the section: Pre-computing the Floquet modes for one period,; and that worked fine, but then at the end of the section they point towards the function 'fsesolve' which would be the 'all-in-one' version of the code given previously, however it doesnt work and i get the error:. ```; ~\anaconda3\lib\site-packages\qutip\sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 297 if ode_args:; 298 r.set_f_params(*ode_args); --> 299 r.set_initial_value(initial_vector, tlist[0]); 300 ; 301 e_ops_data = []. KeyError: 0; ```. The code:. ```; import numpy as np; from matplotlib import pyplot; import qutip. delta = 0.0 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 0.25 * 2*np.pi; omega = 1.0 * 2*np.pi; T = 2*np.pi / omega; tlist = np.linspace(0.0, 10 * T, 101); psi0 = qutip.thermal_dm(2,0). H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(); H1 = A/2.0 * qutip.sigmax(); args = {'w': omega}; H = [H0, [H1, lambda t, args: np.sin(args['w'] * t)]]. output = qutip.fsesolve(H, psi0, tlist, [], args); p_ex = output.expect[0]; ```. **Your Environment**; QuTiP Version: 4.5.3; Numpy Version: 1.18.5; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.2.2; Python Version: 3.8.3; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64). **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1663
https://github.com/qutip/qutip/issues/1663:27,Usability,simpl,simply,27,"**Describe the bug**; I am simply trying to run the code published on the qutip documentation website for the [https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html](url). I copied the code under the section: Pre-computing the Floquet modes for one period,; and that worked fine, but then at the end of the section they point towards the function 'fsesolve' which would be the 'all-in-one' version of the code given previously, however it doesnt work and i get the error:. ```; ~\anaconda3\lib\site-packages\qutip\sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 297 if ode_args:; 298 r.set_f_params(*ode_args); --> 299 r.set_initial_value(initial_vector, tlist[0]); 300 ; 301 e_ops_data = []. KeyError: 0; ```. The code:. ```; import numpy as np; from matplotlib import pyplot; import qutip. delta = 0.0 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 0.25 * 2*np.pi; omega = 1.0 * 2*np.pi; T = 2*np.pi / omega; tlist = np.linspace(0.0, 10 * T, 101); psi0 = qutip.thermal_dm(2,0). H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(); H1 = A/2.0 * qutip.sigmax(); args = {'w': omega}; H = [H0, [H1, lambda t, args: np.sin(args['w'] * t)]]. output = qutip.fsesolve(H, psi0, tlist, [], args); p_ex = output.expect[0]; ```. **Your Environment**; QuTiP Version: 4.5.3; Numpy Version: 1.18.5; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.2.2; Python Version: 3.8.3; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64). **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1663
https://github.com/qutip/qutip/issues/1663:141,Usability,guid,guide,141,"**Describe the bug**; I am simply trying to run the code published on the qutip documentation website for the [https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html](url). I copied the code under the section: Pre-computing the Floquet modes for one period,; and that worked fine, but then at the end of the section they point towards the function 'fsesolve' which would be the 'all-in-one' version of the code given previously, however it doesnt work and i get the error:. ```; ~\anaconda3\lib\site-packages\qutip\sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 297 if ode_args:; 298 r.set_f_params(*ode_args); --> 299 r.set_initial_value(initial_vector, tlist[0]); 300 ; 301 e_ops_data = []. KeyError: 0; ```. The code:. ```; import numpy as np; from matplotlib import pyplot; import qutip. delta = 0.0 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 0.25 * 2*np.pi; omega = 1.0 * 2*np.pi; T = 2*np.pi / omega; tlist = np.linspace(0.0, 10 * T, 101); psi0 = qutip.thermal_dm(2,0). H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(); H1 = A/2.0 * qutip.sigmax(); args = {'w': omega}; H = [H0, [H1, lambda t, args: np.sin(args['w'] * t)]]. output = qutip.fsesolve(H, psi0, tlist, [], args); p_ex = output.expect[0]; ```. **Your Environment**; QuTiP Version: 4.5.3; Numpy Version: 1.18.5; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.2.2; Python Version: 3.8.3; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64). **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1663
https://github.com/qutip/qutip/issues/1664:604,Modifiability,Extend,Extend,604,"**Is your feature request related to a problem? Please describe.**; Some quantum computing libraries (e.g.: pyGSTi) use the Pauli basis for Liouville space, as opposed to QuTiP's column-stacking basis, making it difficult to interoperate between the two. **Describe the solution you'd like**; A new pair of functions `super_to_superpauli` and `superpauli_to_super` for converting between these representations. (`qutip.visualization.hinton` already includes `super_to_superpauli` as a private function, but this could potentially be exposed to user code.). **Describe alternatives you've considered**; - Extend metadata for `kind='super'` Qobj instances to store Liouville space basis information, including col-stacking and Pauli as special cases and possibly including row-stacking or other common conventions as well.; - Possible names other than `superpauli` for conversion functions, such as `super_to_pauli_basis` or `super_from_pauli_basis`.; - Adding new methods `Qobj.to_superbasis(self, basis: str = 'pauli')` and `@classmethod Qobj.from_superbasis(cls, basis: str = 'pauli')` rather than adding more to the global namespace for the QuTiP package.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1664
https://github.com/qutip/qutip/issues/1664:533,Security,expose,exposed,533,"**Is your feature request related to a problem? Please describe.**; Some quantum computing libraries (e.g.: pyGSTi) use the Pauli basis for Liouville space, as opposed to QuTiP's column-stacking basis, making it difficult to interoperate between the two. **Describe the solution you'd like**; A new pair of functions `super_to_superpauli` and `superpauli_to_super` for converting between these representations. (`qutip.visualization.hinton` already includes `super_to_superpauli` as a private function, but this could potentially be exposed to user code.). **Describe alternatives you've considered**; - Extend metadata for `kind='super'` Qobj instances to store Liouville space basis information, including col-stacking and Pauli as special cases and possibly including row-stacking or other common conventions as well.; - Possible names other than `superpauli` for conversion functions, such as `super_to_pauli_basis` or `super_from_pauli_basis`.; - Adding new methods `Qobj.to_superbasis(self, basis: str = 'pauli')` and `@classmethod Qobj.from_superbasis(cls, basis: str = 'pauli')` rather than adding more to the global namespace for the QuTiP package.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1664
https://github.com/qutip/qutip/issues/1666:264,Deployability,Integrat,Integrate,264,"On the page of the documentation talking about qutip.mcsolve (""Monte Carlo Solver""), it describes the algorithm for the monte carlo simulation as:. > I: Choose a random number r between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=r, at which point a jump occurs.; > III: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥r. In actuality, through my own reading of the code, **two** random numbers are generated, one for determining if a jump occurs, and another to determine which jump operator was responsible. I suggest the following change (changes highlighted in bold):. > I: Choose a random number **r_1** between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=**r_1**, at which point a jump occurs.; > **III: Choose a random number r_2 between zero and one, used to select which collapse operator was responsible for the jump.**; > IV: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥**r_2**. While this is not an issue in the code, the way the documentation is written at the moment implies that jumps which occur after a short amount of time will primarily be due to collapse operators at the end of the c_ops list, while jumps that happen after a long time will be biased towards collapse operators at the start of the c_ops list. Again, the code is correct, but the do",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1666
https://github.com/qutip/qutip/issues/1666:1059,Deployability,Integrat,Integrate,1059," (""Monte Carlo Solver""), it describes the algorithm for the monte carlo simulation as:. > I: Choose a random number r between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=r, at which point a jump occurs.; > III: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥r. In actuality, through my own reading of the code, **two** random numbers are generated, one for determining if a jump occurs, and another to determine which jump operator was responsible. I suggest the following change (changes highlighted in bold):. > I: Choose a random number **r_1** between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=**r_1**, at which point a jump occurs.; > **III: Choose a random number r_2 between zero and one, used to select which collapse operator was responsible for the jump.**; > IV: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥**r_2**. While this is not an issue in the code, the way the documentation is written at the moment implies that jumps which occur after a short amount of time will primarily be due to collapse operators at the end of the c_ops list, while jumps that happen after a long time will be biased towards collapse operators at the start of the c_ops list. Again, the code is correct, but the documentation does not accurately reflect the algorithm used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1666
https://github.com/qutip/qutip/issues/1666:264,Integrability,Integrat,Integrate,264,"On the page of the documentation talking about qutip.mcsolve (""Monte Carlo Solver""), it describes the algorithm for the monte carlo simulation as:. > I: Choose a random number r between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=r, at which point a jump occurs.; > III: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥r. In actuality, through my own reading of the code, **two** random numbers are generated, one for determining if a jump occurs, and another to determine which jump operator was responsible. I suggest the following change (changes highlighted in bold):. > I: Choose a random number **r_1** between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=**r_1**, at which point a jump occurs.; > **III: Choose a random number r_2 between zero and one, used to select which collapse operator was responsible for the jump.**; > IV: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥**r_2**. While this is not an issue in the code, the way the documentation is written at the moment implies that jumps which occur after a short amount of time will primarily be due to collapse operators at the end of the c_ops list, while jumps that happen after a long time will be biased towards collapse operators at the start of the c_ops list. Again, the code is correct, but the do",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1666
https://github.com/qutip/qutip/issues/1666:1059,Integrability,Integrat,Integrate,1059," (""Monte Carlo Solver""), it describes the algorithm for the monte carlo simulation as:. > I: Choose a random number r between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=r, at which point a jump occurs.; > III: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥r. In actuality, through my own reading of the code, **two** random numbers are generated, one for determining if a jump occurs, and another to determine which jump operator was responsible. I suggest the following change (changes highlighted in bold):. > I: Choose a random number **r_1** between zero and one, representing the probability that a quantum jump occurs.; > II: Integrate the Schrödinger equation, using the effective Hamiltonian (1) until a time τ such that the norm of the wave function satisfies ⟨ψ(τ)|ψ(τ)⟩=**r_1**, at which point a jump occurs.; > **III: Choose a random number r_2 between zero and one, used to select which collapse operator was responsible for the jump.**; > IV: The resultant jump projects the system at time τ into one of the renormalized states given by Eq. (3). The corresponding collapse operator Cn is chosen such that n is the smallest integer satisfying:; > (5); > ∑_{i=1}^{n} P_n(τ)≥**r_2**. While this is not an issue in the code, the way the documentation is written at the moment implies that jumps which occur after a short amount of time will primarily be due to collapse operators at the end of the c_ops list, while jumps that happen after a long time will be biased towards collapse operators at the start of the c_ops list. Again, the code is correct, but the documentation does not accurately reflect the algorithm used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1666
https://github.com/qutip/qutip/issues/1668:428,Energy Efficiency,adapt,adapted,428,"**Description**; This issue regards defining how to properly structure the main code of the repository [krylovsolver](https://github.com/emilianomfortes/krylovsolver) to merge it into quip and provide it as a new solver. **Possible solution**; We have created a temporary branch in the original repository labeled [qutip](https://github.com/emilianomfortes/krylovsolver/tree/qutip), on which the algorithm code styling has been adapted to follow a similar one based on qutip (i.e. using [sesolve.py](https://github.com/qutip/qutip/blob/master/qutip/sesolve.py)). The analogous file to sesolve.py can be found at [PyKrylovsolver/krylovsolve.py](https://github.com/emilianomfortes/krylovsolver/blob/qutip/PyKrylovsolver/krylovsolve.py). **Additional context**; [Krylovsolver](https://github.com/emilianomfortes/krylovsolver) has been developed via the Unitary-fund [grants](https://unitary.fund/grants.html) program.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1668
https://github.com/qutip/qutip/issues/1668:428,Modifiability,adapt,adapted,428,"**Description**; This issue regards defining how to properly structure the main code of the repository [krylovsolver](https://github.com/emilianomfortes/krylovsolver) to merge it into quip and provide it as a new solver. **Possible solution**; We have created a temporary branch in the original repository labeled [qutip](https://github.com/emilianomfortes/krylovsolver/tree/qutip), on which the algorithm code styling has been adapted to follow a similar one based on qutip (i.e. using [sesolve.py](https://github.com/qutip/qutip/blob/master/qutip/sesolve.py)). The analogous file to sesolve.py can be found at [PyKrylovsolver/krylovsolve.py](https://github.com/emilianomfortes/krylovsolver/blob/qutip/PyKrylovsolver/krylovsolve.py). **Additional context**; [Krylovsolver](https://github.com/emilianomfortes/krylovsolver) has been developed via the Unitary-fund [grants](https://unitary.fund/grants.html) program.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1668
https://github.com/qutip/qutip/issues/1671:286,Deployability,integrat,integration,286,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:482,Deployability,integrat,integration,482,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:516,Deployability,integrat,integrate,516,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:585,Deployability,integrat,integrate,585,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:286,Integrability,integrat,integration,286,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:482,Integrability,integrat,integration,482,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:516,Integrability,integrat,integrate,516,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/issues/1671:585,Integrability,integrat,integrate,585,"**Description**; We are interested in a HPC-boosted QuTiP version, both for generally dynamical equation solvers and quantum circuit simulation. The idea would be to enable multiprocessing on single node (which should be easier) and then MPI for multi-node simulation. Also consider an integration with CuPy and GPU computation. **Possible approach**; For what concerns the equation solvers, we had a look at qutip.mesolve and qutip.sesolve and we have seen that at the core of the integration method there is scipy.integrate.ode. ; Our first (maybe trivial) idea was to replace scipy.integrate.ode with a solver that would enable single node multiprocessing.; For what concerns the possibility of using MPI for multiple nodes.. this would probably require a greater effort and significant changes in the code.; For the quantum circuit simulation, we are not able to simulate a QFT circuit with more than 14 qubits.. maybe one first step would be to use a sparse matrix representation of unitaries instead of storing the full (2^N x 2^N) matrix. . **Additional context**; You can find info and specifications about our HPC infrastructure here https://www.hpc.cineca.it/content/hardware; The machines we will be using for this project are Marconi100 https://www.hpc.cineca.it/hardware/marconi100 and Galileo100 https://www.hpc.cineca.it/hardware/galileo100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1671
https://github.com/qutip/qutip/pull/1675:111,Deployability,update,updated,111,"**Description**; Fix the parameters in the call to fsesolve in the floquet guide. The fsesolve parameters were updated at some point, but the guide wasn't. **Related issues or PRs**; Fixes #1663 . **Changelog**; Fixed the parameters in the call to fsesolve in the floquet guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1675
https://github.com/qutip/qutip/pull/1675:75,Usability,guid,guide,75,"**Description**; Fix the parameters in the call to fsesolve in the floquet guide. The fsesolve parameters were updated at some point, but the guide wasn't. **Related issues or PRs**; Fixes #1663 . **Changelog**; Fixed the parameters in the call to fsesolve in the floquet guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1675
https://github.com/qutip/qutip/pull/1675:142,Usability,guid,guide,142,"**Description**; Fix the parameters in the call to fsesolve in the floquet guide. The fsesolve parameters were updated at some point, but the guide wasn't. **Related issues or PRs**; Fixes #1663 . **Changelog**; Fixed the parameters in the call to fsesolve in the floquet guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1675
https://github.com/qutip/qutip/pull/1675:272,Usability,guid,guide,272,"**Description**; Fix the parameters in the call to fsesolve in the floquet guide. The fsesolve parameters were updated at some point, but the guide wasn't. **Related issues or PRs**; Fixes #1663 . **Changelog**; Fixed the parameters in the call to fsesolve in the floquet guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1675
https://github.com/qutip/qutip/issues/1676:2081,Usability,simpl,simple,2081,"s (not sure what the most appropriate subpackage would be):. - `depolarizing_channel(strength : float, dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the depolarizing noise channel Λ(ρ) = (1 − 𝑝) ρ + 𝑝 (𝟙 / 𝑑), where 𝑑 is the dimension of ρ. Defaults to returning single-qubit channels. For example, `depolarizing_noise(1.0)` would map all input states to the maximally mixed state `qutip.qeye(2).unit()`.; - `pauli_channel(paulis : Union[Dict[str, float], List[float]], dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the Pauli channel Λ(ρ) = Σᵢ 𝑝ᵢ 𝑃ᵢ ρ 𝑃ᵢ, where {𝑝ᵢ} are the coefficients of each Pauli operator and where each 𝑃ᵢ is a Pauli operator. For example, `pauli_channel([0.9, 0, 0, 0.1])` would represent 10% dephasing noise along the 𝑍 axis, and could also be written as `pauli_channel({'I': 0.9, 'Z': 0.1})`. The `dims` input would be restricted to only allow elements of the form `2 ** nq` for `nq` a nonnegative integer.; - `amplitude_damping_channel(strength : float, dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the amplitude damping channel Λ(ρ) = (1 − γ) ρ + γ |0⟩⟨0|.; - `generalized_amplitude_damping_channel(strength : float, fixed_point : Qobj) -> Qobj`: Returns a representation of the generalized amplitude damping channel Λ(ρ) = (1 − γ) ρ + γ ρ\_\*, where ρ\_\* is given by `fixed_point`. It may also be good to consider introducing a function to represent simple overrotation channels (e.g.: ∫ 𝑒^{−𝑖𝐻θ} Pr(θ) 𝑑θ), perhaps by Monte Carlo sampling. **Describe alternatives you've considered**. - Allow specifying channels by fidelity rather than strength; e.g. `average_gate_fidelity(depolarizing_channel(fidelity=0.95))` would be guaranteed to be close to 0.95.; - Combining `amplitude_damping_channel` and `generalized_amplitude_damping_channel` into a single function, distinguished by making `fixed_point` have type `Optional[Qobj]`, with a default of `basis(dims, 0) * basis(dims, 0).dag()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1676
https://github.com/qutip/qutip/pull/1677:29,Usability,guid,guide,29,**Description**; The mcsolve guide incorrectly describes how random numbers are generated when determining jump locations and collapses. **Related issues or PRs**; * Fixes #1666. **Changelog**; Fix the description of random number usage in the Monte Carlo solver guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1677
https://github.com/qutip/qutip/pull/1677:263,Usability,guid,guide,263,**Description**; The mcsolve guide incorrectly describes how random numbers are generated when determining jump locations and collapses. **Related issues or PRs**; * Fixes #1666. **Changelog**; Fix the description of random number usage in the Monte Carlo solver guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1677
https://github.com/qutip/qutip/pull/1678:258,Performance,queue,queue,258,"**Description**; A bug in the CSS of the readthedocs Sphinx theme causes equation numbers to be rendered *above* the equation, which is both surprising and looks terrible. This PR applies fixes that have been languishing in the RTD theme GitHub pull request queue. While working on this I discovered that our `site.css` file was not actually included in our generated HTML pages, so I added it in. **Related issues or PRs**; * RTD theme issue: https://github.com/readthedocs/sphinx_rtd_theme/issues/301; * RTD theme fix: https://github.com/readthedocs/sphinx_rtd_theme/pull/383/. **Changelog**; Fix the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1678
https://github.com/qutip/qutip/pull/1679:165,Availability,error,errors,165,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:288,Availability,redundant,redundant,288,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:17,Deployability,Update,Update,17,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:419,Deployability,Update,Update,419,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:288,Safety,redund,redundant,288,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:24,Testability,test,tests,24,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:95,Testability,test,tests,95,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:148,Testability,test,tests,148,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:209,Testability,test,tests,209,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1679:439,Testability,test,tests,439,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1679
https://github.com/qutip/qutip/pull/1680:17,Deployability,Update,Update,17,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1680
https://github.com/qutip/qutip/pull/1680:286,Deployability,Update,Update,286,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1680
https://github.com/qutip/qutip/pull/1680:24,Testability,test,tests,24,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1680
https://github.com/qutip/qutip/pull/1680:73,Testability,test,test,73,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1680
https://github.com/qutip/qutip/pull/1680:293,Testability,test,tests,293,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1680
https://github.com/qutip/qutip/pull/1681:44,Testability,test,test,44,**Description**; `simdiags` didn't have any test... Add some. **Changelog**; Add tests for simdiags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1681
https://github.com/qutip/qutip/pull/1681:81,Testability,test,tests,81,**Description**; `simdiags` didn't have any test... Add some. **Changelog**; Add tests for simdiags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1681
https://github.com/qutip/qutip/issues/1683:1387,Usability,guid,guidelines,1387,"### Discussed in https://github.com/qutip/qutip/discussions/1682. <div type='discussions-op-text'>. <sup>Originally posted by **gaurav-iiser** October 4, 2021</sup>; Hello all,. So, I was writing a paper and wanted an image with a particular octant of the Bloch sphere highlighted. This octant was to be divided it into three subsets using three arcs [which is say, drawing an arc connecting the point ((1/sqrt(3), 1/sqrt(3), 1/sqrt(3)) with (0,0,1),(0,1,0),(1,0,0) ]. Besides, I also wanted to connect a state from each subset. So, in order to do this, I cloned the repository and modified bloch.py, and produced the desired image for my paper (figure attached) ; I then thought it will be useful as a feature for other users who might want to draw an arc on the Bloch sphere or join two points on the Bloch sphere using a line segment. Therefore, I have modified the bloch.py such that it can now draw an arc between any two points on the Bloch sphere by just specifying the cartesian coordinates of the two points, and similarly, a line segment can be drawn. The arc is red and the line segment is a black dashed line. . Before opening a PR, I just wanted to discuss whether it seems like a good idea? I am sure someone will find drawing an arc or drawing a line segment in the visualization of the Bloch sphere useful, just like I did. ; (I am just trying to follow the contribution guidelines as I have no experience in contributing to a library whatsoever). ; I would really appreciate your responses. Code-wise: We can simply use `add_line([x,y,z],[a,b,c])` to draw a line segment, or `b.add_arc([x,y,z],[a,b,c])` to draw an arc between two points; `. ![Bloch_sphere_poss_1](https://user-images.githubusercontent.com/33507538/135772530-be7dab07-2337-4ad1-839c-551483bddef5.png); </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1683
https://github.com/qutip/qutip/issues/1683:1526,Usability,simpl,simply,1526,"### Discussed in https://github.com/qutip/qutip/discussions/1682. <div type='discussions-op-text'>. <sup>Originally posted by **gaurav-iiser** October 4, 2021</sup>; Hello all,. So, I was writing a paper and wanted an image with a particular octant of the Bloch sphere highlighted. This octant was to be divided it into three subsets using three arcs [which is say, drawing an arc connecting the point ((1/sqrt(3), 1/sqrt(3), 1/sqrt(3)) with (0,0,1),(0,1,0),(1,0,0) ]. Besides, I also wanted to connect a state from each subset. So, in order to do this, I cloned the repository and modified bloch.py, and produced the desired image for my paper (figure attached) ; I then thought it will be useful as a feature for other users who might want to draw an arc on the Bloch sphere or join two points on the Bloch sphere using a line segment. Therefore, I have modified the bloch.py such that it can now draw an arc between any two points on the Bloch sphere by just specifying the cartesian coordinates of the two points, and similarly, a line segment can be drawn. The arc is red and the line segment is a black dashed line. . Before opening a PR, I just wanted to discuss whether it seems like a good idea? I am sure someone will find drawing an arc or drawing a line segment in the visualization of the Bloch sphere useful, just like I did. ; (I am just trying to follow the contribution guidelines as I have no experience in contributing to a library whatsoever). ; I would really appreciate your responses. Code-wise: We can simply use `add_line([x,y,z],[a,b,c])` to draw a line segment, or `b.add_arc([x,y,z],[a,b,c])` to draw an arc between two points; `. ![Bloch_sphere_poss_1](https://user-images.githubusercontent.com/33507538/135772530-be7dab07-2337-4ad1-839c-551483bddef5.png); </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1683
https://github.com/qutip/qutip/issues/1684:274,Integrability,depend,dependent,274,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1684
https://github.com/qutip/qutip/issues/1684:540,Modifiability,portab,portable,540,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1684
https://github.com/qutip/qutip/issues/1684:603,Performance,load,loading,603,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1684
https://github.com/qutip/qutip/issues/1684:1430,Performance,load,load,1430,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1684
https://github.com/qutip/qutip/issues/1684:697,Usability,simpl,simplest,697,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1684
https://github.com/qutip/qutip/issues/1686:7,Usability,simpl,simple,7,"I have simple code for Time evaluation, with ```mesolve``` and ```sesolve```I consider two time list as``` t1=[0,5,10]``` and ```t2=[0,10]```.But I get different states in``` t=10``` in two case . ```python; from qutip import*; import numpy as np; H= 2*np.pi * 0.1 * sigmax(); psi0 = basis(2, 0); t1=[0,5,10]; t2=[0,10]; result1 = sesolve(H, psi0, t1); result2 = sesolve(H, psi0, t2); r1=result1.states[2]; r2=result1.states[1]; if r1==r2:; print('True'); else:; print('False'). ```; If you run code you get ```False```. This difference between to case is ```1.1620088200000005e-6j``` but it's important in many context such as measure entanglement in general Form.; Best",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1686
https://github.com/qutip/qutip/pull/1687:885,Deployability,update,update,885,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:5712,Energy Efficiency,efficient,efficiently,5712," Seq(+XX, -ZZ) Seq(-XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")) ** 2; QInstrument id=2e7d89a44c0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, +XX, -ZZ) Seq(-XX, -ZZ, -XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")).with_finite_visibility(0.95) ** 2; QInstrument id=2e7d6654520 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, +XX, +ZZ) Seq(+XX, -ZZ, +XX, +ZZ) Seq(-XX, -ZZ, +XX, +ZZ) Seq(+XX, +ZZ, -XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, -XX, +ZZ) Seq(-XX, -ZZ, ; -XX, +ZZ) Seq(+XX, +ZZ, +XX, -ZZ) Seq(-XX, +ZZ, +XX, -ZZ) Seq(+XX, -ZZ, +XX, -ZZ) Seq(-XX, -ZZ, +XX, -ZZ) Seq(+XX, +ZZ, -XX, -ZZ) Seq(-XX, +ZZ, -XX, -ZZ) Seq(+XX, -ZZ, -XX, -ZZ) Seq(-XX, -ZZ, -XX, -ZZ); }; ```. Nonselective channels (that is, the channel resulting from discarding all measurement outcomes) can be efficiently obtained using the `nonselective_process` property:. ```python; >>> ins = (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")).with_finite_visibility(0.95) ** 2; >>> ins.nonselective_process; Quantum object: dims = [[[2, 2], [2, 2]], [[2, 2], [2, 2]]], shape = (16, 16), type = super, isherm = True; Qobj data =; [[0.50125 0. 0. 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0.49875]; [0. 0.0025 0. 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. ]; [0. 0. 0.0025 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. ]; [0. 0. 0. 0.50125 0. 0. 0. 0. 0.; 0. 0. 0. 0.49875 0. 0. 0. ]; [0. 0. 0. 0. 0.0025 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. ]; [0. 0. 0. 0. 0. 0.50125 0. 0. 0.; 0. 0.49875 0. 0. 0. 0. 0. ]; [0. 0. 0. 0. 0. 0. 0.50125 0. 0.; 0.49875 0. 0. 0. 0. 0. 0. ]; [0. 0. 0. 0. 0. 0. 0. 0.0025 0.; 0. 0. 0. 0. 0. 0. 0. ]; [0. 0. 0. 0. 0. 0. 0. 0. 0.0025; 0. 0. 0. 0. 0. 0. 0. ]; [0. 0. 0. 0. 0. 0. 0.49875 0. 0.; 0.50125 0. 0. 0. 0. 0. 0. ]; [0. 0. 0. 0. 0. 0.49",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:1386,Integrability,wrap,wraps,1386,"e read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:1539,Safety,predict,predict,1539,"yle](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. 1.]])); ```. Instruments can be combined through composition and tensor products (corresponding to `Seq` and `Par` outcome labels, respectively):. ```python; >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:2893,Safety,detect,detected,2893,"utput_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. 1.]])); ```. Instruments can be combined through composition and tensor products (corresponding to `Seq` and `Par` outcome labels, respectively):. ```python; >>> z_instrument * z_instrument; QInstrument id=2e7d878ab80 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 1); }; >>> qutip.tensor([z_instrument] * 2); QInstrument id=2e7d8a1dcd0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Par(0, 0) Par(0, 1) Par(1, 0) Par(1, 1); }; ```. Impossible outcomes are detected and truncated automatically:. ```python; >>> z_instrument * z_instrument; QInstrument id=2e7d8a6e130 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 1); }; >>> z_instrument.with_finite_visibility(0.95) ** 2; QInstrument id=2e7d8a6ef10 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 0) Seq(0, 1) Seq(1, 1); }; ```. Arbitrary subsystem dims are supported:. ```python; >>> qutip.QInstrument.basis_measurement(3); QInstrument id=2e7d5ca4eb0 {; dims [[[3], [3]], [[3], [3]]]; outcomes Seq(0,) Seq(1,) Seq(2,); }; ```. Incomplete instruments (that is, where the probability of obtaining any result is less than 1, as in the erasure channel case) can be completed:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete(); QInstrument id=1f9735f3f10 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq() Seq('⊥',); }; ```. Measurement outcome labels can be re-indexed onto integer labels according to lexographical sorting of original labels:. ```python; >>> qutip.QInst",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:4464,Security,hash,hashable,4464,"struments (that is, where the probability of obtaining any result is less than 1, as in the erasure channel case) can be completed:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete(); QInstrument id=1f9735f3f10 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq() Seq('⊥',); }; ```. Measurement outcome labels can be re-indexed onto integer labels according to lexographical sorting of original labels:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete().reindex(); QInstrument id=1f96e774970 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq(0,) Seq(1,); }; ```. Composition and tensor products can be combined:. ```python; >>> qutip.tensor(z_instrument.with_finite_visibility(0.95) ** 2, z_instrument); QInstrument id=2e7d89a19a0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Par(Seq(0, 0), 0) Par(Seq(0, 0), 1) Par(Seq(1, 0), 0) Par(Seq(1, 0), 1) Par(Seq(0, 1), 0) Par(Seq(0, 1), 1) Par(Seq(1, 1), 0) Par(Seq(1, 1), 1); }; ```. Outcomes can be labeled by arbitrary hashable types:. ```python; >>> qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX""); QInstrument id=2e7d89d5dc0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ) Seq(-XX, +ZZ) Seq(+XX, -ZZ) Seq(-XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")) ** 2; QInstrument id=2e7d89a44c0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, +XX, -ZZ) Seq(-XX, -ZZ, -XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")).with_finite_visibility(0.95) ** 2; QInstrument id=2e7d6654520 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, +XX, +ZZ) Seq(+XX, -ZZ, +XX, +ZZ) Seq(-XX, -ZZ, +XX, +ZZ) Seq(+XX, +ZZ, -XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, -XX, +ZZ) Seq(-XX, -ZZ, ; -XX, +ZZ) Seq(+XX, +ZZ, +XX, -ZZ) Seq(-XX, +ZZ, +XX, -Z",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:202,Testability,test,testing,202,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:752,Testability,test,tests,752,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1687:101,Usability,feedback,feedback,101,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1687
https://github.com/qutip/qutip/pull/1688:147,Availability,down,down,147,**Description**; Improved efficiency of the hadamard gate creation time as it was using python for loops which are terribly slow. For N=10 it goes down from 522ms to roughly 7ms. **Changelog**; Improved hadamard_transform efficiency (70x faster for N=10).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1688
https://github.com/qutip/qutip/pull/1690:709,Deployability,Update,Update,709,"**Description**; Added two features in `bloch.py`:; 1. `add_arc`: Adds an arc between two specified points.; 2. `add_line`: Adds a dashed line between two specified points. I have attached a figure where I have used the above two functions.; ![qutip_PR](https://user-images.githubusercontent.com/33507538/137644612-3536c185-3b23-4c7a-b798-07955fbc035d.png). **Related issues or PRs**; #1683 , #1685 . Modified `add_arc` as suggested by @AGaliciaMartinez in PR #1685 . ***Other minor changes***. In `def show(self)`, the plot was not being displayed using the previous lines of code in the function, so I have commented them out and changed it to; ```; if self.fig:; plt.show(self.fig); ```; **To-Do:**; - [ ] Update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). (will do after the changes/additions are reviewed). **Changelog**. 1. Added option for visualizing an arc on a Bloch sphere using `add_arc`.; 2. Added option for visualizing a line segment on a Bloch sphere using `add_line`.; 3. fixed `def show(self)`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1690
https://github.com/qutip/qutip/issues/1691:1785,Deployability,Install,Installed,1785,"; >>> ket0 = qutip.basis(2, 0); >>> (ket0.dag() * ket0) ** 2; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_131052/3984076164.py in <module>; ----> 1 (ket0.dag() * ket0) ** 2. ~\Anaconda3\envs\<redacted>\lib\site-packages\qutip\qobj.py in __pow__(self, n, m); 727 """"""; 728 if self.type not in ['oper', 'super']:; --> 729 raise Exception(""Raising a qobj to some power works only for "" +; 730 ""operators and super-operators (square matrices).""); 731 . Exception: Raising a qobj to some power works only for operators and super-operators (square matrices).; ```. **Expected behavior**; A 1 × 1 operator is square, such that exponentiating should act similarly to scalar exponentiation. **Your Environment**; ```. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.7; Number of CPUs: 32; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\cgran\Anaconda3\envs\<redcacted>\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1691
https://github.com/qutip/qutip/issues/1691:1857,Deployability,Install,Installation,1857,"; >>> ket0 = qutip.basis(2, 0); >>> (ket0.dag() * ket0) ** 2; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_131052/3984076164.py in <module>; ----> 1 (ket0.dag() * ket0) ** 2. ~\Anaconda3\envs\<redacted>\lib\site-packages\qutip\qobj.py in __pow__(self, n, m); 727 """"""; 728 if self.type not in ['oper', 'super']:; --> 729 raise Exception(""Raising a qobj to some power works only for "" +; 730 ""operators and super-operators (square matrices).""); 731 . Exception: Raising a qobj to some power works only for operators and super-operators (square matrices).; ```. **Expected behavior**; A 1 × 1 operator is square, such that exponentiating should act similarly to scalar exponentiation. **Your Environment**; ```. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.7; Number of CPUs: 32; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\cgran\Anaconda3\envs\<redcacted>\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1691
https://github.com/qutip/qutip/issues/1691:62,Energy Efficiency,power,power,62,"**Describe the bug**; When raising a 1 × 1 Qobj instance to a power using `**`, an exception is raised that only square operators can be exponentiated. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; >>> ket0 = qutip.basis(2, 0); >>> (ket0.dag() * ket0) ** 2; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_131052/3984076164.py in <module>; ----> 1 (ket0.dag() * ket0) ** 2. ~\Anaconda3\envs\<redacted>\lib\site-packages\qutip\qobj.py in __pow__(self, n, m); 727 """"""; 728 if self.type not in ['oper', 'super']:; --> 729 raise Exception(""Raising a qobj to some power works only for "" +; 730 ""operators and super-operators (square matrices).""); 731 . Exception: Raising a qobj to some power works only for operators and super-operators (square matrices).; ```. **Expected behavior**; A 1 × 1 operator is square, such that exponentiating should act similarly to scalar exponentiation. **Your Environment**; ```. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.7; Number of CPUs: 32; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\cgran\Anaconda3\envs\<redcacted>\lib\site-packages\qutip; ==========================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1691
https://github.com/qutip/qutip/issues/1691:704,Energy Efficiency,power,power,704,"**Describe the bug**; When raising a 1 × 1 Qobj instance to a power using `**`, an exception is raised that only square operators can be exponentiated. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; >>> ket0 = qutip.basis(2, 0); >>> (ket0.dag() * ket0) ** 2; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_131052/3984076164.py in <module>; ----> 1 (ket0.dag() * ket0) ** 2. ~\Anaconda3\envs\<redacted>\lib\site-packages\qutip\qobj.py in __pow__(self, n, m); 727 """"""; 728 if self.type not in ['oper', 'super']:; --> 729 raise Exception(""Raising a qobj to some power works only for "" +; 730 ""operators and super-operators (square matrices).""); 731 . Exception: Raising a qobj to some power works only for operators and super-operators (square matrices).; ```. **Expected behavior**; A 1 × 1 operator is square, such that exponentiating should act similarly to scalar exponentiation. **Your Environment**; ```. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.7; Number of CPUs: 32; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\cgran\Anaconda3\envs\<redcacted>\lib\site-packages\qutip; ==========================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1691
https://github.com/qutip/qutip/issues/1691:827,Energy Efficiency,power,power,827,"**Describe the bug**; When raising a 1 × 1 Qobj instance to a power using `**`, an exception is raised that only square operators can be exponentiated. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; >>> ket0 = qutip.basis(2, 0); >>> (ket0.dag() * ket0) ** 2; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_131052/3984076164.py in <module>; ----> 1 (ket0.dag() * ket0) ** 2. ~\Anaconda3\envs\<redacted>\lib\site-packages\qutip\qobj.py in __pow__(self, n, m); 727 """"""; 728 if self.type not in ['oper', 'super']:; --> 729 raise Exception(""Raising a qobj to some power works only for "" +; 730 ""operators and super-operators (square matrices).""); 731 . Exception: Raising a qobj to some power works only for operators and super-operators (square matrices).; ```. **Expected behavior**; A 1 × 1 operator is square, such that exponentiating should act similarly to scalar exponentiation. **Your Environment**; ```. QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.7; Number of CPUs: 32; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\cgran\Anaconda3\envs\<redcacted>\lib\site-packages\qutip; ==========================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1691
https://github.com/qutip/qutip/pull/1692:465,Energy Efficiency,power,power,465,"**Description**; Changes pow to allow the exponentiation of arbitrary square matrices regardless of their type as `qobj`. I tried to change it so that `bra*ket` returns a scalar but this breaks backwards compatibility and there are modules such as `control` that do thinks like; ```python; (bra*ket).tr(); ```; or ; ```python; (bra*ket).data[0,0]; ```; that would stop working. **Related issues or PRs**; fix #1691. **Changelog**; It is now possible to compute the power of an scalar-like `qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1692
https://github.com/qutip/qutip/pull/1694:232,Availability,failure,failures,232,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1694
https://github.com/qutip/qutip/pull/1694:37,Testability,test,tests,37,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1694
https://github.com/qutip/qutip/pull/1694:227,Testability,Test,Test,227,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1694
https://github.com/qutip/qutip/pull/1694:328,Testability,test,tests,328,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1694
https://github.com/qutip/qutip/pull/1694:406,Testability,test,tests,406,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1694
https://github.com/qutip/qutip/pull/1695:2790,Availability,down,download,2790,"af717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:95,Deployability,Release,Release,95,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:187,Deployability,release,releases,187,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:205,Deployability,release,releases,205,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3486,Deployability,update,updates,3486,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4638,Deployability,upgrade,upgrade,4638,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4814,Deployability,upgrade,upgrade,4814,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4984,Deployability,upgrade,upgrade,4984,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:1574,Integrability,depend,dependabot,1574,"log</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:2209,Integrability,depend,dependabot,2209,"> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3208,Integrability,Depend,Dependabot,3208,"l/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3248,Integrability,depend,dependabot-badges,3248,"l/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3307,Integrability,depend,dependency-name,3307,"hub.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3466,Integrability,depend,dependabot-security-updates,3466,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3523,Integrability,Depend,Dependabot,3523,"83d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3669,Integrability,depend,dependabot,3669,"; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3698,Integrability,depend,dependabot-automerge-start,3698,"58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3736,Integrability,depend,dependabot-automerge-end,3736,"58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3788,Integrability,Depend,Dependabot,3788,"gress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3855,Integrability,Depend,Dependabot,3855,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3905,Integrability,depend,dependabot,3905,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3949,Integrability,depend,dependabot,3949,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4046,Integrability,depend,dependabot,4046,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4115,Integrability,depend,dependabot,4115,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4206,Integrability,depend,dependabot,4206,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4299,Integrability,depend,dependabot,4299,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4359,Integrability,depend,dependabot,4359,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4405,Integrability,Depend,Dependabot,4405,"are/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4491,Integrability,depend,dependabot,4491,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4557,Integrability,Depend,Dependabot,4557,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4667,Integrability,depend,dependabot,4667,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4733,Integrability,Depend,Dependabot,4733,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4843,Integrability,depend,dependabot,4843,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4866,Integrability,depend,dependency,4866,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4906,Integrability,Depend,Dependabot,4906,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:4944,Integrability,depend,dependency,4944,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:5013,Integrability,depend,dependabot,5013,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:5132,Integrability,depend,dependabot,5132,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:5257,Integrability,depend,dependabot,5257,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:5382,Integrability,depend,dependabot,5382,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:321,Performance,load,loading,321,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:386,Performance,load,loaded,386,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:810,Performance,load,loading,810,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:875,Performance,load,loaded,875,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:343,Security,validat,validate,343,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:832,Security,validat,validate,832,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3435,Security,secur,security-vulnerabilities,3435,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:3477,Security,secur,security-updates,3477,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:5528,Security,secur,security,5528,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:5569,Security,Secur,Security,5569,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:2623,Testability,log,logging,2623,"n-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1695:2799,Usability,progress bar,progress bar,2799,"af717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1695
https://github.com/qutip/qutip/pull/1696:145,Availability,failure,failures,145,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1696
https://github.com/qutip/qutip/pull/1696:257,Availability,failure,failures,257,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1696
https://github.com/qutip/qutip/pull/1696:62,Testability,test,test,62,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1696
https://github.com/qutip/qutip/pull/1696:140,Testability,test,test,140,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1696
